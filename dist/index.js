Object.defineProperty(exports, '__esModule', { value: true });

var require$$0$5 = require('events');
var React = require('react');
var require$$8$1 = require('https');
var require$$9$1 = require('http');
var require$$10$1 = require('net');
var require$$11$1 = require('tls');
var require$$12$1 = require('crypto');
var require$$13$1 = require('url');
var require$$1$3 = require('zlib');
var require$$1$4 = require('stream');
var require$$2$2 = require('buffer');
var require$$1$5 = require('fs');
var require$$0$6 = require('util');
var require$$0$7 = require('assert');
var require$$2$3 = require('os');
var require$$10$2 = require('string_decoder/');
var require$$1$6 = require('path');
var require$$1$7 = require('events/');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _mergeNamespaces(n, m) {
  m.forEach(function (e) {
    e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
      if (k !== 'default' && !(k in n)) {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  });
  return Object.freeze(n);
}

var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0$5);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var require$$8__default = /*#__PURE__*/_interopDefaultLegacy(require$$8$1);
var require$$9__default = /*#__PURE__*/_interopDefaultLegacy(require$$9$1);
var require$$10__default = /*#__PURE__*/_interopDefaultLegacy(require$$10$1);
var require$$11__default = /*#__PURE__*/_interopDefaultLegacy(require$$11$1);
var require$$12__default = /*#__PURE__*/_interopDefaultLegacy(require$$12$1);
var require$$13__default = /*#__PURE__*/_interopDefaultLegacy(require$$13$1);
var require$$1__default = /*#__PURE__*/_interopDefaultLegacy(require$$1$3);
var require$$1__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$1$4);
var require$$2__default = /*#__PURE__*/_interopDefaultLegacy(require$$2$2);
var require$$1__default$2 = /*#__PURE__*/_interopDefaultLegacy(require$$1$5);
var require$$0__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$0$6);
var require$$0__default$2 = /*#__PURE__*/_interopDefaultLegacy(require$$0$7);
var require$$2__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$2$3);
var require$$10__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$10$2);
var require$$1__default$3 = /*#__PURE__*/_interopDefaultLegacy(require$$1$6);
var require$$1__default$4 = /*#__PURE__*/_interopDefaultLegacy(require$$1$7);

var ConnectorEvent;
(function (ConnectorEvent) {
  ConnectorEvent["Update"] = "Web3ReactUpdate";
  ConnectorEvent["Error"] = "Web3ReactError";
  ConnectorEvent["Deactivate"] = "Web3ReactDeactivate";
})(ConnectorEvent || (ConnectorEvent = {}));

function _inheritsLoose$2(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
var AbstractConnector = /*#__PURE__*/
function (_EventEmitter) {
  _inheritsLoose$2(AbstractConnector, _EventEmitter);
  function AbstractConnector(_temp) {
    var _this;
    var _ref = _temp === void 0 ? {} : _temp,
      supportedChainIds = _ref.supportedChainIds;
    _this = _EventEmitter.call(this) || this;
    _this.supportedChainIds = supportedChainIds;
    return _this;
  }
  var _proto = AbstractConnector.prototype;
  _proto.emitUpdate = function emitUpdate(update) {
    if (process.env.NODE_ENV !== "production") {
      console.log("Emitting '" + ConnectorEvent.Update + "' with payload", update);
    }
    this.emit(ConnectorEvent.Update, update);
  };
  _proto.emitError = function emitError(error) {
    if (process.env.NODE_ENV !== "production") {
      console.log("Emitting '" + ConnectorEvent.Error + "' with payload", error);
    }
    this.emit(ConnectorEvent.Error, error);
  };
  _proto.emitDeactivate = function emitDeactivate() {
    if (process.env.NODE_ENV !== "production") {
      console.log("Emitting '" + ConnectorEvent.Deactivate + "'");
    }
    this.emit(ConnectorEvent.Deactivate);
  };
  return AbstractConnector;
}(require$$0$5.EventEmitter);

var isProduction = process.env.NODE_ENV === 'production';
function warning$1(condition, message) {
  if (!isProduction) {
    if (condition) {
      return;
    }
    var text = "Warning: " + message;
    if (typeof console !== 'undefined') {
      console.warn(text);
    }
    try {
      throw Error(text);
    } catch (x) {}
  }
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose$1(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
function _getPrototypeOf$2(o) {
  _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf$2(o);
}
function _setPrototypeOf$2(o, p) {
  _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf$2(o, p);
}
function isNativeReflectConstruct$1() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
function _construct$1(Parent, args, Class) {
  if (isNativeReflectConstruct$1()) {
    _construct$1 = Reflect.construct;
  } else {
    _construct$1 = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf$2(instance, Class.prototype);
      return instance;
    };
  }
  return _construct$1.apply(null, arguments);
}
function _isNativeFunction$1(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _wrapNativeSuper$1(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;
  _wrapNativeSuper$1 = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction$1(Class)) return Class;
    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);
      _cache.set(Class, Wrapper);
    }
    function Wrapper() {
      return _construct$1(Class, arguments, _getPrototypeOf$2(this).constructor);
    }
    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf$2(Wrapper, Class);
  };
  return _wrapNativeSuper$1(Class);
}
function _assertThisInitialized$2(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}

// A type of promise-like that resolves synchronously and supports only one observer

typeof Symbol !== "undefined" ? Symbol.iterator || (Symbol.iterator = /*#__PURE__*/
Symbol("Symbol.iterator")) : "@@iterator"; // Asynchronously iterate through an object's values

typeof Symbol !== "undefined" ? Symbol.asyncIterator || (Symbol.asyncIterator = /*#__PURE__*/
Symbol("Symbol.asyncIterator")) : "@@asyncIterator"; // Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing

function _catch(body, recover) {
  try {
    var result = body();
  } catch (e) {
    return recover(e);
  }
  if (result && result.then) {
    return result.then(void 0, recover);
  }
  return result;
} // Asynchronously await a promise and pass the result to a finally continuation

function parseSendReturn(sendReturn) {
  return sendReturn.hasOwnProperty('result') ? sendReturn.result : sendReturn;
}
var NoEthereumProviderError = /*#__PURE__*/
function (_Error) {
  _inheritsLoose$1(NoEthereumProviderError, _Error);
  function NoEthereumProviderError() {
    var _this;
    _this = _Error.call(this) || this;
    _this.name = _this.constructor.name;
    _this.message = 'No Ethereum provider was found on window.ethereum.';
    return _this;
  }
  return NoEthereumProviderError;
}( /*#__PURE__*/
_wrapNativeSuper$1(Error));
var UserRejectedRequestError$1 = /*#__PURE__*/
function (_Error2) {
  _inheritsLoose$1(UserRejectedRequestError, _Error2);
  function UserRejectedRequestError() {
    var _this2;
    _this2 = _Error2.call(this) || this;
    _this2.name = _this2.constructor.name;
    _this2.message = 'The user rejected the request.';
    return _this2;
  }
  return UserRejectedRequestError;
}( /*#__PURE__*/
_wrapNativeSuper$1(Error));
var InjectedConnector = /*#__PURE__*/
function (_AbstractConnector) {
  _inheritsLoose$1(InjectedConnector, _AbstractConnector);
  function InjectedConnector(kwargs) {
    var _this3;
    _this3 = _AbstractConnector.call(this, kwargs) || this;
    _this3.handleNetworkChanged = _this3.handleNetworkChanged.bind(_assertThisInitialized$2(_this3));
    _this3.handleChainChanged = _this3.handleChainChanged.bind(_assertThisInitialized$2(_this3));
    _this3.handleAccountsChanged = _this3.handleAccountsChanged.bind(_assertThisInitialized$2(_this3));
    _this3.handleClose = _this3.handleClose.bind(_assertThisInitialized$2(_this3));
    return _this3;
  }
  var _proto = InjectedConnector.prototype;
  _proto.handleChainChanged = function handleChainChanged(chainId) {
    if (process.env.NODE_ENV !== "production") {
      console.log("Handling 'chainChanged' event with payload", chainId);
    }
    this.emitUpdate({
      chainId: chainId,
      provider: window.ethereum
    });
  };
  _proto.handleAccountsChanged = function handleAccountsChanged(accounts) {
    if (process.env.NODE_ENV !== "production") {
      console.log("Handling 'accountsChanged' event with payload", accounts);
    }
    if (accounts.length === 0) {
      this.emitDeactivate();
    } else {
      this.emitUpdate({
        account: accounts[0]
      });
    }
  };
  _proto.handleClose = function handleClose(code, reason) {
    if (process.env.NODE_ENV !== "production") {
      console.log("Handling 'close' event with payload", code, reason);
    }
    this.emitDeactivate();
  };
  _proto.handleNetworkChanged = function handleNetworkChanged(networkId) {
    if (process.env.NODE_ENV !== "production") {
      console.log("Handling 'networkChanged' event with payload", networkId);
    }
    this.emitUpdate({
      chainId: networkId,
      provider: window.ethereum
    });
  };
  _proto.activate = function activate() {
    try {
      var _temp5 = function _temp5(_result) {
        if (_exit2) return _result;
        function _temp2() {
          return _extends({
            provider: window.ethereum
          }, account ? {
            account: account
          } : {});
        }
        var _temp = function () {
          if (!account) {
            // if enable is successful but doesn't return accounts, fall back to getAccount (not happy i have to do this...)
            return Promise.resolve(window.ethereum.enable().then(function (sendReturn) {
              return sendReturn && parseSendReturn(sendReturn)[0];
            })).then(function (_window$ethereum$enab) {
              account = _window$ethereum$enab;
            });
          }
        }();

        // if unsuccessful, try enable
        return _temp && _temp.then ? _temp.then(_temp2) : _temp2(_temp);
      };
      var _exit2 = false;
      var _this5 = this;
      if (!window.ethereum) {
        throw new NoEthereumProviderError();
      }
      if (window.ethereum.on) {
        window.ethereum.on('chainChanged', _this5.handleChainChanged);
        window.ethereum.on('accountsChanged', _this5.handleAccountsChanged);
        window.ethereum.on('close', _this5.handleClose);
        window.ethereum.on('networkChanged', _this5.handleNetworkChanged);
      }
      if (window.ethereum.isMetaMask) {
        ;
        window.ethereum.autoRefreshOnNetworkChange = false;
      } // try to activate + get account via eth_requestAccounts

      var account;
      var _temp6 = _catch(function () {
        return Promise.resolve(window.ethereum.send('eth_requestAccounts').then(function (sendReturn) {
          return parseSendReturn(sendReturn)[0];
        })).then(function (_window$ethereum$send) {
          account = _window$ethereum$send;
        });
      }, function (error) {
        if (error.code === 4001) {
          throw new UserRejectedRequestError$1();
        }
        process.env.NODE_ENV !== "production" ? warning$1(false, 'eth_requestAccounts was unsuccessful, falling back to enable') : void 0;
      });
      return Promise.resolve(_temp6 && _temp6.then ? _temp6.then(_temp5) : _temp5(_temp6));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  _proto.getProvider = function getProvider() {
    try {
      return Promise.resolve(window.ethereum);
    } catch (e) {
      return Promise.reject(e);
    }
  };
  _proto.getChainId = function getChainId() {
    try {
      var _temp12 = function _temp12() {
        function _temp9() {
          if (!chainId) {
            try {
              chainId = parseSendReturn(window.ethereum.send({
                method: 'net_version'
              }));
            } catch (_unused) {
              process.env.NODE_ENV !== "production" ? warning$1(false, 'net_version v2 was unsuccessful, falling back to manual matches and static properties') : void 0;
            }
          }
          if (!chainId) {
            if (window.ethereum.isDapper) {
              chainId = parseSendReturn(window.ethereum.cachedResults.net_version);
            } else {
              chainId = window.ethereum.chainId || window.ethereum.netVersion || window.ethereum.networkVersion || window.ethereum._chainId;
            }
          }
          return chainId;
        }
        var _temp8 = function () {
          if (!chainId) {
            var _temp14 = _catch(function () {
              return Promise.resolve(window.ethereum.send('net_version').then(parseSendReturn)).then(function (_window$ethereum$send3) {
                chainId = _window$ethereum$send3;
              });
            }, function () {
              process.env.NODE_ENV !== "production" ? warning$1(false, 'net_version was unsuccessful, falling back to net version v2') : void 0;
            });
            if (_temp14 && _temp14.then) return _temp14.then(function () {});
          }
        }();
        return _temp8 && _temp8.then ? _temp8.then(_temp9) : _temp9(_temp8);
      };
      if (!window.ethereum) {
        throw new NoEthereumProviderError();
      }
      var chainId;
      var _temp13 = _catch(function () {
        return Promise.resolve(window.ethereum.send('eth_chainId').then(parseSendReturn)).then(function (_window$ethereum$send2) {
          chainId = _window$ethereum$send2;
        });
      }, function () {
        process.env.NODE_ENV !== "production" ? warning$1(false, 'eth_chainId was unsuccessful, falling back to net_version') : void 0;
      });
      return Promise.resolve(_temp13 && _temp13.then ? _temp13.then(_temp12) : _temp12(_temp13));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  _proto.getAccount = function getAccount() {
    try {
      var _temp20 = function _temp20() {
        function _temp17() {
          if (!account) {
            account = parseSendReturn(window.ethereum.send({
              method: 'eth_accounts'
            }))[0];
          }
          return account;
        }
        var _temp16 = function () {
          if (!account) {
            var _temp22 = _catch(function () {
              return Promise.resolve(window.ethereum.enable().then(function (sendReturn) {
                return parseSendReturn(sendReturn)[0];
              })).then(function (_window$ethereum$enab2) {
                account = _window$ethereum$enab2;
              });
            }, function () {
              process.env.NODE_ENV !== "production" ? warning$1(false, 'enable was unsuccessful, falling back to eth_accounts v2') : void 0;
            });
            if (_temp22 && _temp22.then) return _temp22.then(function () {});
          }
        }();
        return _temp16 && _temp16.then ? _temp16.then(_temp17) : _temp17(_temp16);
      };
      if (!window.ethereum) {
        throw new NoEthereumProviderError();
      }
      var account;
      var _temp21 = _catch(function () {
        return Promise.resolve(window.ethereum.send('eth_accounts').then(function (sendReturn) {
          return parseSendReturn(sendReturn)[0];
        })).then(function (_window$ethereum$send4) {
          account = _window$ethereum$send4;
        });
      }, function () {
        process.env.NODE_ENV !== "production" ? warning$1(false, 'eth_accounts was unsuccessful, falling back to enable') : void 0;
      });
      return Promise.resolve(_temp21 && _temp21.then ? _temp21.then(_temp20) : _temp20(_temp21));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  _proto.deactivate = function deactivate() {
    if (window.ethereum && window.ethereum.removeListener) {
      window.ethereum.removeListener('chainChanged', this.handleChainChanged);
      window.ethereum.removeListener('accountsChanged', this.handleAccountsChanged);
      window.ethereum.removeListener('close', this.handleClose);
      window.ethereum.removeListener('networkChanged', this.handleNetworkChanged);
    }
  };
  _proto.isAuthorized = function isAuthorized() {
    try {
      if (!window.ethereum) {
        return Promise.resolve(false);
      }
      return Promise.resolve(_catch(function () {
        return Promise.resolve(window.ethereum.send('eth_accounts').then(function (sendReturn) {
          if (parseSendReturn(sendReturn).length > 0) {
            return true;
          } else {
            return false;
          }
        }));
      }, function () {
        return false;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  return InjectedConnector;
}(AbstractConnector);

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf$1(subClass, superClass);
}
function _getPrototypeOf$1(o) {
  _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf$1(o);
}
function _setPrototypeOf$1(o, p) {
  _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf$1(o, p);
}
function _isNativeReflectConstruct$y() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct$y()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf$1(instance, Class.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;
  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;
    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);
      _cache.set(Class, Wrapper);
    }
    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf$1(this).constructor);
    }
    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf$1(Wrapper, Class);
  };
  return _wrapNativeSuper(Class);
}
function _assertThisInitialized$1(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
var URI_AVAILABLE = 'URI_AVAILABLE';
var UserRejectedRequestError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(UserRejectedRequestError, _Error);
  function UserRejectedRequestError() {
    var _this;
    _this = _Error.call(this) || this;
    _this.name = _this.constructor.name;
    _this.message = 'The user rejected the request.';
    return _this;
  }
  return UserRejectedRequestError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
function getSupportedChains(_ref) {
  var supportedChainIds = _ref.supportedChainIds,
    rpc = _ref.rpc;
  if (supportedChainIds) {
    return supportedChainIds;
  }
  return rpc ? Object.keys(rpc).map(function (k) {
    return Number(k);
  }) : undefined;
}
var WalletConnectConnector = /*#__PURE__*/function (_AbstractConnector) {
  _inheritsLoose(WalletConnectConnector, _AbstractConnector);
  function WalletConnectConnector(config) {
    var _this2;
    _this2 = _AbstractConnector.call(this, {
      supportedChainIds: getSupportedChains(config)
    }) || this;
    _this2.config = config;
    _this2.handleChainChanged = _this2.handleChainChanged.bind(_assertThisInitialized$1(_this2));
    _this2.handleAccountsChanged = _this2.handleAccountsChanged.bind(_assertThisInitialized$1(_this2));
    _this2.handleDisconnect = _this2.handleDisconnect.bind(_assertThisInitialized$1(_this2));
    return _this2;
  }
  var _proto = WalletConnectConnector.prototype;
  _proto.handleChainChanged = function handleChainChanged(chainId) {
    if (process.env.NODE_ENV !== "production") {
      console.log("Handling 'chainChanged' event with payload", chainId);
    }
    this.emitUpdate({
      chainId: chainId
    });
  };
  _proto.handleAccountsChanged = function handleAccountsChanged(accounts) {
    if (process.env.NODE_ENV !== "production") {
      console.log("Handling 'accountsChanged' event with payload", accounts);
    }
    this.emitUpdate({
      account: accounts[0]
    });
  };
  _proto.handleDisconnect = function handleDisconnect() {
    if (process.env.NODE_ENV !== "production") {
      console.log("Handling 'disconnect' event");
    }
    this.emitDeactivate(); // we have to do this because of a @walletconnect/web3-provider bug

    if (this.walletConnectProvider) {
      this.walletConnectProvider.stop();
      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged);
      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged);
      this.walletConnectProvider = undefined;
    }
    this.emitDeactivate();
  };
  _proto.activate = function activate() {
    try {
      var _this4 = this;
      var _temp5 = function _temp5() {
        function _temp2() {
          return Promise.resolve(_this4.walletConnectProvider.enable().then(function (accounts) {
            return accounts[0];
          })["catch"](function (error) {
            // TODO ideally this would be a better check
            if (error.message === 'User closed modal') {
              throw new UserRejectedRequestError();
            }
            throw error;
          })).then(function (account) {
            _this4.walletConnectProvider.on('disconnect', _this4.handleDisconnect);
            _this4.walletConnectProvider.on('chainChanged', _this4.handleChainChanged);
            _this4.walletConnectProvider.on('accountsChanged', _this4.handleAccountsChanged);
            return {
              provider: _this4.walletConnectProvider,
              account: account
            };
          });
        }
        var _temp = function () {
          if (!_this4.walletConnectProvider.wc.connected) {
            return Promise.resolve(_this4.walletConnectProvider.wc.createSession({
              chainId: _this4.supportedChainIds && _this4.supportedChainIds.length > 0 ? _this4.supportedChainIds[0] : 1
            })).then(function () {
              _this4.emit(URI_AVAILABLE, _this4.walletConnectProvider.wc.uri);
            });
          }
        }();

        // ensure that the uri is going to be available, and emit an event if there's a new uri
        return _temp && _temp.then ? _temp.then(_temp2) : _temp2(_temp);
      };
      var _temp6 = function () {
        if (!_this4.walletConnectProvider) {
          return Promise.resolve(Promise.resolve().then(function () { return index$1; }).then(function (m) {
            var _m$default;
            return (_m$default = m == null ? void 0 : m["default"]) != null ? _m$default : m;
          })).then(function (WalletConnectProvider) {
            _this4.walletConnectProvider = new WalletConnectProvider(_this4.config);
          });
        }
      }();
      return Promise.resolve(_temp6 && _temp6.then ? _temp6.then(_temp5) : _temp5(_temp6));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  _proto.getProvider = function getProvider() {
    try {
      var _this6 = this;
      return Promise.resolve(_this6.walletConnectProvider);
    } catch (e) {
      return Promise.reject(e);
    }
  };
  _proto.getChainId = function getChainId() {
    try {
      var _this8 = this;
      return Promise.resolve(_this8.walletConnectProvider.send('eth_chainId'));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  _proto.getAccount = function getAccount() {
    try {
      var _this10 = this;
      return Promise.resolve(_this10.walletConnectProvider.send('eth_accounts').then(function (accounts) {
        return accounts[0];
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  _proto.deactivate = function deactivate() {
    if (this.walletConnectProvider) {
      this.walletConnectProvider.stop();
      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect);
      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged);
      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged);
    }
  };
  _proto.close = function close() {
    try {
      var _this12$walletConnect;
      var _this12 = this;
      return Promise.resolve((_this12$walletConnect = _this12.walletConnectProvider) == null ? void 0 : _this12$walletConnect.close()).then(function () {});
    } catch (e) {
      return Promise.reject(e);
    }
  };
  return WalletConnectConnector;
}(AbstractConnector);

function _arrayLikeToArray$1(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _unsupportedIterableToArray$1(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread();
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }
  return object;
}

function _get() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get.bind();
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);
      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get.apply(this, arguments);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _typeof$1(obj) {
  "@babel/helpers - typeof";

  return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof$1(obj);
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof$1(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _toPrimitive(input, hint) {
  if (_typeof$1(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof$1(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}

function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof$1(key) === "symbol" ? key : String(key);
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
  var f = n.default;
	if (typeof f == "function") {
		var a = function () {
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var regeneratorRuntime$1 = {exports: {}};

var _typeof = {exports: {}};

(function (module) {
	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
	}
	module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (_typeof));

(function (module) {
	var _typeof$1 = _typeof.exports["default"];
	function _regeneratorRuntime() {

	  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
	  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
	    return exports;
	  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
	  var exports = {},
	    Op = Object.prototype,
	    hasOwn = Op.hasOwnProperty,
	    defineProperty = Object.defineProperty || function (obj, key, desc) {
	      obj[key] = desc.value;
	    },
	    $Symbol = "function" == typeof Symbol ? Symbol : {},
	    iteratorSymbol = $Symbol.iterator || "@@iterator",
	    asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
	    toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
	  function define(obj, key, value) {
	    return Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: !0,
	      configurable: !0,
	      writable: !0
	    }), obj[key];
	  }
	  try {
	    define({}, "");
	  } catch (err) {
	    define = function define(obj, key, value) {
	      return obj[key] = value;
	    };
	  }
	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
	      generator = Object.create(protoGenerator.prototype),
	      context = new Context(tryLocsList || []);
	    return defineProperty(generator, "_invoke", {
	      value: makeInvokeMethod(innerFn, self, context)
	    }), generator;
	  }
	  function tryCatch(fn, obj, arg) {
	    try {
	      return {
	        type: "normal",
	        arg: fn.call(obj, arg)
	      };
	    } catch (err) {
	      return {
	        type: "throw",
	        arg: err
	      };
	    }
	  }
	  exports.wrap = wrap;
	  var ContinueSentinel = {};
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}
	  var IteratorPrototype = {};
	  define(IteratorPrototype, iteratorSymbol, function () {
	    return this;
	  });
	  var getProto = Object.getPrototypeOf,
	    NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
	  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function (method) {
	      define(prototype, method, function (arg) {
	        return this._invoke(method, arg);
	      });
	    });
	  }
	  function AsyncIterator(generator, PromiseImpl) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if ("throw" !== record.type) {
	        var result = record.arg,
	          value = result.value;
	        return value && "object" == _typeof$1(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
	          invoke("next", value, resolve, reject);
	        }, function (err) {
	          invoke("throw", err, resolve, reject);
	        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
	          result.value = unwrapped, resolve(result);
	        }, function (error) {
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	      reject(record.arg);
	    }
	    var previousPromise;
	    defineProperty(this, "_invoke", {
	      value: function value(method, arg) {
	        function callInvokeWithMethodAndArg() {
	          return new PromiseImpl(function (resolve, reject) {
	            invoke(method, arg, resolve, reject);
	          });
	        }
	        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
	      }
	    });
	  }
	  function makeInvokeMethod(innerFn, self, context) {
	    var state = "suspendedStart";
	    return function (method, arg) {
	      if ("executing" === state) throw new Error("Generator is already running");
	      if ("completed" === state) {
	        if ("throw" === method) throw arg;
	        return doneResult();
	      }
	      for (context.method = method, context.arg = arg;;) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }
	        if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
	          if ("suspendedStart" === state) throw state = "completed", context.arg;
	          context.dispatchException(context.arg);
	        } else "return" === context.method && context.abrupt("return", context.arg);
	        state = "executing";
	        var record = tryCatch(innerFn, self, context);
	        if ("normal" === record.type) {
	          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
	          return {
	            value: record.arg,
	            done: context.done
	          };
	        }
	        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
	      }
	    };
	  }
	  function maybeInvokeDelegate(delegate, context) {
	    var methodName = context.method,
	      method = delegate.iterator[methodName];
	    if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
	    var record = tryCatch(method, delegate.iterator, context.arg);
	    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
	    var info = record.arg;
	    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
	  }
	  function pushTryEntry(locs) {
	    var entry = {
	      tryLoc: locs[0]
	    };
	    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
	  }
	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal", delete record.arg, entry.completion = record;
	  }
	  function Context(tryLocsList) {
	    this.tryEntries = [{
	      tryLoc: "root"
	    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
	  }
	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) return iteratorMethod.call(iterable);
	      if ("function" == typeof iterable.next) return iterable;
	      if (!isNaN(iterable.length)) {
	        var i = -1,
	          next = function next() {
	            for (; ++i < iterable.length;) {
	              if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
	            }
	            return next.value = undefined, next.done = !0, next;
	          };
	        return next.next = next;
	      }
	    }
	    return {
	      next: doneResult
	    };
	  }
	  function doneResult() {
	    return {
	      value: undefined,
	      done: !0
	    };
	  }
	  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
	    value: GeneratorFunctionPrototype,
	    configurable: !0
	  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
	    value: GeneratorFunction,
	    configurable: !0
	  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
	    var ctor = "function" == typeof genFun && genFun.constructor;
	    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
	  }, exports.mark = function (genFun) {
	    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
	  }, exports.awrap = function (arg) {
	    return {
	      __await: arg
	    };
	  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
	    return this;
	  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	    void 0 === PromiseImpl && (PromiseImpl = Promise);
	    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
	    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
	      return result.done ? result.value : iter.next();
	    });
	  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
	    return this;
	  }), define(Gp, "toString", function () {
	    return "[object Generator]";
	  }), exports.keys = function (val) {
	    var object = Object(val),
	      keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    return keys.reverse(), function next() {
	      for (; keys.length;) {
	        var key = keys.pop();
	        if (key in object) return next.value = key, next.done = !1, next;
	      }
	      return next.done = !0, next;
	    };
	  }, exports.values = values, Context.prototype = {
	    constructor: Context,
	    reset: function reset(skipTempReset) {
	      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
	        "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
	      }
	    },
	    stop: function stop() {
	      this.done = !0;
	      var rootRecord = this.tryEntries[0].completion;
	      if ("throw" === rootRecord.type) throw rootRecord.arg;
	      return this.rval;
	    },
	    dispatchException: function dispatchException(exception) {
	      if (this.done) throw exception;
	      var context = this;
	      function handle(loc, caught) {
	        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
	      }
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i],
	          record = entry.completion;
	        if ("root" === entry.tryLoc) return handle("end");
	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc"),
	            hasFinally = hasOwn.call(entry, "finallyLoc");
	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
	            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
	          } else {
	            if (!hasFinally) throw new Error("try statement without catch or finally");
	            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
	          }
	        }
	      }
	    },
	    abrupt: function abrupt(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }
	      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
	      var record = finallyEntry ? finallyEntry.completion : {};
	      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
	    },
	    complete: function complete(record, afterLoc) {
	      if ("throw" === record.type) throw record.arg;
	      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
	    },
	    finish: function finish(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
	      }
	    },
	    "catch": function _catch(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if ("throw" === record.type) {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }
	      throw new Error("illegal catch attempt");
	    },
	    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
	      return this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
	    }
	  }, exports;
	}
	module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (regeneratorRuntime$1));

// TODO(Babel 8): Remove this file.

var runtime = regeneratorRuntime$1.exports();
var regenerator = runtime;

// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}

var bn$4 = {exports: {}};

(function (module) {
	(function (module, exports) {

	  // Utils
	  function assert(val, msg) {
	    if (!val) throw new Error(msg || 'Assertion failed');
	  }

	  // Could use `inherits` module, but don't want to move from single file
	  // architecture yet.
	  function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function TempCtor() {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  }

	  // BN

	  function BN(number, base, endian) {
	    if (BN.isBN(number)) {
	      return number;
	    }
	    this.negative = 0;
	    this.words = null;
	    this.length = 0;

	    // Reduction context
	    this.red = null;
	    if (number !== null) {
	      if (base === 'le' || base === 'be') {
	        endian = base;
	        base = 10;
	      }
	      this._init(number || 0, base || 10, endian || 'be');
	    }
	  }
	  if (typeof module === 'object') {
	    module.exports = BN;
	  } else {
	    exports.BN = BN;
	  }
	  BN.BN = BN;
	  BN.wordSize = 26;
	  var Buffer;
	  try {
	    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
	      Buffer = window.Buffer;
	    } else {
	      Buffer = require('buffer').Buffer;
	    }
	  } catch (e) {}
	  BN.isBN = function isBN(num) {
	    if (num instanceof BN) {
	      return true;
	    }
	    return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
	  };
	  BN.max = function max(left, right) {
	    if (left.cmp(right) > 0) return left;
	    return right;
	  };
	  BN.min = function min(left, right) {
	    if (left.cmp(right) < 0) return left;
	    return right;
	  };
	  BN.prototype._init = function init(number, base, endian) {
	    if (typeof number === 'number') {
	      return this._initNumber(number, base, endian);
	    }
	    if (typeof number === 'object') {
	      return this._initArray(number, base, endian);
	    }
	    if (base === 'hex') {
	      base = 16;
	    }
	    assert(base === (base | 0) && base >= 2 && base <= 36);
	    number = number.toString().replace(/\s+/g, '');
	    var start = 0;
	    if (number[0] === '-') {
	      start++;
	      this.negative = 1;
	    }
	    if (start < number.length) {
	      if (base === 16) {
	        this._parseHex(number, start, endian);
	      } else {
	        this._parseBase(number, base, start);
	        if (endian === 'le') {
	          this._initArray(this.toArray(), base, endian);
	        }
	      }
	    }
	  };
	  BN.prototype._initNumber = function _initNumber(number, base, endian) {
	    if (number < 0) {
	      this.negative = 1;
	      number = -number;
	    }
	    if (number < 0x4000000) {
	      this.words = [number & 0x3ffffff];
	      this.length = 1;
	    } else if (number < 0x10000000000000) {
	      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
	      this.length = 2;
	    } else {
	      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
	      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
	      this.length = 3;
	    }
	    if (endian !== 'le') return;

	    // Reverse the bytes
	    this._initArray(this.toArray(), base, endian);
	  };
	  BN.prototype._initArray = function _initArray(number, base, endian) {
	    // Perhaps a Uint8Array
	    assert(typeof number.length === 'number');
	    if (number.length <= 0) {
	      this.words = [0];
	      this.length = 1;
	      return this;
	    }
	    this.length = Math.ceil(number.length / 3);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }
	    var j, w;
	    var off = 0;
	    if (endian === 'be') {
	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
	        w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
	        this.words[j] |= w << off & 0x3ffffff;
	        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    } else if (endian === 'le') {
	      for (i = 0, j = 0; i < number.length; i += 3) {
	        w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
	        this.words[j] |= w << off & 0x3ffffff;
	        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    }
	    return this._strip();
	  };
	  function parseHex4Bits(string, index) {
	    var c = string.charCodeAt(index);
	    // '0' - '9'
	    if (c >= 48 && c <= 57) {
	      return c - 48;
	      // 'A' - 'F'
	    } else if (c >= 65 && c <= 70) {
	      return c - 55;
	      // 'a' - 'f'
	    } else if (c >= 97 && c <= 102) {
	      return c - 87;
	    } else {
	      assert(false, 'Invalid character in ' + string);
	    }
	  }
	  function parseHexByte(string, lowerBound, index) {
	    var r = parseHex4Bits(string, index);
	    if (index - 1 >= lowerBound) {
	      r |= parseHex4Bits(string, index - 1) << 4;
	    }
	    return r;
	  }
	  BN.prototype._parseHex = function _parseHex(number, start, endian) {
	    // Create possibly bigger array to ensure that it fits the number
	    this.length = Math.ceil((number.length - start) / 6);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    // 24-bits chunks
	    var off = 0;
	    var j = 0;
	    var w;
	    if (endian === 'be') {
	      for (i = number.length - 1; i >= start; i -= 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    } else {
	      var parseLength = number.length - start;
	      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    }
	    this._strip();
	  };
	  function parseBase(str, start, end, mul) {
	    var r = 0;
	    var b = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;
	      r *= mul;

	      // 'a'
	      if (c >= 49) {
	        b = c - 49 + 0xa;

	        // 'A'
	      } else if (c >= 17) {
	        b = c - 17 + 0xa;

	        // '0' - '9'
	      } else {
	        b = c;
	      }
	      assert(c >= 0 && b < mul, 'Invalid character');
	      r += b;
	    }
	    return r;
	  }
	  BN.prototype._parseBase = function _parseBase(number, base, start) {
	    // Initialize as zero
	    this.words = [0];
	    this.length = 1;

	    // Find length of limb in base
	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
	      limbLen++;
	    }
	    limbLen--;
	    limbPow = limbPow / base | 0;
	    var total = number.length - start;
	    var mod = total % limbLen;
	    var end = Math.min(total, total - mod) + start;
	    var word = 0;
	    for (var i = start; i < end; i += limbLen) {
	      word = parseBase(number, i, i + limbLen, base);
	      this.imuln(limbPow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }
	    if (mod !== 0) {
	      var pow = 1;
	      word = parseBase(number, i, number.length, base);
	      for (i = 0; i < mod; i++) {
	        pow *= base;
	      }
	      this.imuln(pow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }
	    this._strip();
	  };
	  BN.prototype.copy = function copy(dest) {
	    dest.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      dest.words[i] = this.words[i];
	    }
	    dest.length = this.length;
	    dest.negative = this.negative;
	    dest.red = this.red;
	  };
	  function move(dest, src) {
	    dest.words = src.words;
	    dest.length = src.length;
	    dest.negative = src.negative;
	    dest.red = src.red;
	  }
	  BN.prototype._move = function _move(dest) {
	    move(dest, this);
	  };
	  BN.prototype.clone = function clone() {
	    var r = new BN(null);
	    this.copy(r);
	    return r;
	  };
	  BN.prototype._expand = function _expand(size) {
	    while (this.length < size) {
	      this.words[this.length++] = 0;
	    }
	    return this;
	  };

	  // Remove leading `0` from `this`
	  BN.prototype._strip = function strip() {
	    while (this.length > 1 && this.words[this.length - 1] === 0) {
	      this.length--;
	    }
	    return this._normSign();
	  };
	  BN.prototype._normSign = function _normSign() {
	    // -0 = 0
	    if (this.length === 1 && this.words[0] === 0) {
	      this.negative = 0;
	    }
	    return this;
	  };

	  // Check Symbol.for because not everywhere where Symbol defined
	  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
	  if (typeof Symbol !== 'undefined' && typeof Symbol["for"] === 'function') {
	    try {
	      BN.prototype[Symbol["for"]('nodejs.util.inspect.custom')] = inspect;
	    } catch (e) {
	      BN.prototype.inspect = inspect;
	    }
	  } else {
	    BN.prototype.inspect = inspect;
	  }
	  function inspect() {
	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	  }

	  /*
	   var zeros = [];
	  var groupSizes = [];
	  var groupBases = [];
	   var s = '';
	  var i = -1;
	  while (++i < BN.wordSize) {
	    zeros[i] = s;
	    s += '0';
	  }
	  groupSizes[0] = 0;
	  groupSizes[1] = 0;
	  groupBases[0] = 0;
	  groupBases[1] = 0;
	  var base = 2 - 1;
	  while (++base < 36 + 1) {
	    var groupSize = 0;
	    var groupBase = 1;
	    while (groupBase < (1 << BN.wordSize) / base) {
	      groupBase *= base;
	      groupSize += 1;
	    }
	    groupSizes[base] = groupSize;
	    groupBases[base] = groupBase;
	  }
	   */

	  var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
	  var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
	  var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
	  BN.prototype.toString = function toString(base, padding) {
	    base = base || 10;
	    padding = padding | 0 || 1;
	    var out;
	    if (base === 16 || base === 'hex') {
	      out = '';
	      var off = 0;
	      var carry = 0;
	      for (var i = 0; i < this.length; i++) {
	        var w = this.words[i];
	        var word = ((w << off | carry) & 0xffffff).toString(16);
	        carry = w >>> 24 - off & 0xffffff;
	        off += 2;
	        if (off >= 26) {
	          off -= 26;
	          i--;
	        }
	        if (carry !== 0 || i !== this.length - 1) {
	          out = zeros[6 - word.length] + word + out;
	        } else {
	          out = word + out;
	        }
	      }
	      if (carry !== 0) {
	        out = carry.toString(16) + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }
	    if (base === (base | 0) && base >= 2 && base <= 36) {
	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
	      var groupSize = groupSizes[base];
	      // var groupBase = Math.pow(base, groupSize);
	      var groupBase = groupBases[base];
	      out = '';
	      var c = this.clone();
	      c.negative = 0;
	      while (!c.isZero()) {
	        var r = c.modrn(groupBase).toString(base);
	        c = c.idivn(groupBase);
	        if (!c.isZero()) {
	          out = zeros[groupSize - r.length] + r + out;
	        } else {
	          out = r + out;
	        }
	      }
	      if (this.isZero()) {
	        out = '0' + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }
	    assert(false, 'Base should be between 2 and 36');
	  };
	  BN.prototype.toNumber = function toNumber() {
	    var ret = this.words[0];
	    if (this.length === 2) {
	      ret += this.words[1] * 0x4000000;
	    } else if (this.length === 3 && this.words[2] === 0x01) {
	      // NOTE: at this stage it is known that the top bit is set
	      ret += 0x10000000000000 + this.words[1] * 0x4000000;
	    } else if (this.length > 2) {
	      assert(false, 'Number can only safely store up to 53 bits');
	    }
	    return this.negative !== 0 ? -ret : ret;
	  };
	  BN.prototype.toJSON = function toJSON() {
	    return this.toString(16, 2);
	  };
	  if (Buffer) {
	    BN.prototype.toBuffer = function toBuffer(endian, length) {
	      return this.toArrayLike(Buffer, endian, length);
	    };
	  }
	  BN.prototype.toArray = function toArray(endian, length) {
	    return this.toArrayLike(Array, endian, length);
	  };
	  var allocate = function allocate(ArrayType, size) {
	    if (ArrayType.allocUnsafe) {
	      return ArrayType.allocUnsafe(size);
	    }
	    return new ArrayType(size);
	  };
	  BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
	    this._strip();
	    var byteLength = this.byteLength();
	    var reqLength = length || Math.max(1, byteLength);
	    assert(byteLength <= reqLength, 'byte array longer than desired length');
	    assert(reqLength > 0, 'Requested array length <= 0');
	    var res = allocate(ArrayType, reqLength);
	    var postfix = endian === 'le' ? 'LE' : 'BE';
	    this['_toArrayLike' + postfix](res, byteLength);
	    return res;
	  };
	  BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
	    var position = 0;
	    var carry = 0;
	    for (var i = 0, shift = 0; i < this.length; i++) {
	      var word = this.words[i] << shift | carry;
	      res[position++] = word & 0xff;
	      if (position < res.length) {
	        res[position++] = word >> 8 & 0xff;
	      }
	      if (position < res.length) {
	        res[position++] = word >> 16 & 0xff;
	      }
	      if (shift === 6) {
	        if (position < res.length) {
	          res[position++] = word >> 24 & 0xff;
	        }
	        carry = 0;
	        shift = 0;
	      } else {
	        carry = word >>> 24;
	        shift += 2;
	      }
	    }
	    if (position < res.length) {
	      res[position++] = carry;
	      while (position < res.length) {
	        res[position++] = 0;
	      }
	    }
	  };
	  BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
	    var position = res.length - 1;
	    var carry = 0;
	    for (var i = 0, shift = 0; i < this.length; i++) {
	      var word = this.words[i] << shift | carry;
	      res[position--] = word & 0xff;
	      if (position >= 0) {
	        res[position--] = word >> 8 & 0xff;
	      }
	      if (position >= 0) {
	        res[position--] = word >> 16 & 0xff;
	      }
	      if (shift === 6) {
	        if (position >= 0) {
	          res[position--] = word >> 24 & 0xff;
	        }
	        carry = 0;
	        shift = 0;
	      } else {
	        carry = word >>> 24;
	        shift += 2;
	      }
	    }
	    if (position >= 0) {
	      res[position--] = carry;
	      while (position >= 0) {
	        res[position--] = 0;
	      }
	    }
	  };
	  if (Math.clz32) {
	    BN.prototype._countBits = function _countBits(w) {
	      return 32 - Math.clz32(w);
	    };
	  } else {
	    BN.prototype._countBits = function _countBits(w) {
	      var t = w;
	      var r = 0;
	      if (t >= 0x1000) {
	        r += 13;
	        t >>>= 13;
	      }
	      if (t >= 0x40) {
	        r += 7;
	        t >>>= 7;
	      }
	      if (t >= 0x8) {
	        r += 4;
	        t >>>= 4;
	      }
	      if (t >= 0x02) {
	        r += 2;
	        t >>>= 2;
	      }
	      return r + t;
	    };
	  }
	  BN.prototype._zeroBits = function _zeroBits(w) {
	    // Short-cut
	    if (w === 0) return 26;
	    var t = w;
	    var r = 0;
	    if ((t & 0x1fff) === 0) {
	      r += 13;
	      t >>>= 13;
	    }
	    if ((t & 0x7f) === 0) {
	      r += 7;
	      t >>>= 7;
	    }
	    if ((t & 0xf) === 0) {
	      r += 4;
	      t >>>= 4;
	    }
	    if ((t & 0x3) === 0) {
	      r += 2;
	      t >>>= 2;
	    }
	    if ((t & 0x1) === 0) {
	      r++;
	    }
	    return r;
	  };

	  // Return number of used bits in a BN
	  BN.prototype.bitLength = function bitLength() {
	    var w = this.words[this.length - 1];
	    var hi = this._countBits(w);
	    return (this.length - 1) * 26 + hi;
	  };
	  function toBitArray(num) {
	    var w = new Array(num.bitLength());
	    for (var bit = 0; bit < w.length; bit++) {
	      var off = bit / 26 | 0;
	      var wbit = bit % 26;
	      w[bit] = num.words[off] >>> wbit & 0x01;
	    }
	    return w;
	  }

	  // Number of trailing zero bits
	  BN.prototype.zeroBits = function zeroBits() {
	    if (this.isZero()) return 0;
	    var r = 0;
	    for (var i = 0; i < this.length; i++) {
	      var b = this._zeroBits(this.words[i]);
	      r += b;
	      if (b !== 26) break;
	    }
	    return r;
	  };
	  BN.prototype.byteLength = function byteLength() {
	    return Math.ceil(this.bitLength() / 8);
	  };
	  BN.prototype.toTwos = function toTwos(width) {
	    if (this.negative !== 0) {
	      return this.abs().inotn(width).iaddn(1);
	    }
	    return this.clone();
	  };
	  BN.prototype.fromTwos = function fromTwos(width) {
	    if (this.testn(width - 1)) {
	      return this.notn(width).iaddn(1).ineg();
	    }
	    return this.clone();
	  };
	  BN.prototype.isNeg = function isNeg() {
	    return this.negative !== 0;
	  };

	  // Return negative clone of `this`
	  BN.prototype.neg = function neg() {
	    return this.clone().ineg();
	  };
	  BN.prototype.ineg = function ineg() {
	    if (!this.isZero()) {
	      this.negative ^= 1;
	    }
	    return this;
	  };

	  // Or `num` with `this` in-place
	  BN.prototype.iuor = function iuor(num) {
	    while (this.length < num.length) {
	      this.words[this.length++] = 0;
	    }
	    for (var i = 0; i < num.length; i++) {
	      this.words[i] = this.words[i] | num.words[i];
	    }
	    return this._strip();
	  };
	  BN.prototype.ior = function ior(num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuor(num);
	  };

	  // Or `num` with `this`
	  BN.prototype.or = function or(num) {
	    if (this.length > num.length) return this.clone().ior(num);
	    return num.clone().ior(this);
	  };
	  BN.prototype.uor = function uor(num) {
	    if (this.length > num.length) return this.clone().iuor(num);
	    return num.clone().iuor(this);
	  };

	  // And `num` with `this` in-place
	  BN.prototype.iuand = function iuand(num) {
	    // b = min-length(num, this)
	    var b;
	    if (this.length > num.length) {
	      b = num;
	    } else {
	      b = this;
	    }
	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = this.words[i] & num.words[i];
	    }
	    this.length = b.length;
	    return this._strip();
	  };
	  BN.prototype.iand = function iand(num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuand(num);
	  };

	  // And `num` with `this`
	  BN.prototype.and = function and(num) {
	    if (this.length > num.length) return this.clone().iand(num);
	    return num.clone().iand(this);
	  };
	  BN.prototype.uand = function uand(num) {
	    if (this.length > num.length) return this.clone().iuand(num);
	    return num.clone().iuand(this);
	  };

	  // Xor `num` with `this` in-place
	  BN.prototype.iuxor = function iuxor(num) {
	    // a.length > b.length
	    var a;
	    var b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }
	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = a.words[i] ^ b.words[i];
	    }
	    if (this !== a) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }
	    this.length = a.length;
	    return this._strip();
	  };
	  BN.prototype.ixor = function ixor(num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuxor(num);
	  };

	  // Xor `num` with `this`
	  BN.prototype.xor = function xor(num) {
	    if (this.length > num.length) return this.clone().ixor(num);
	    return num.clone().ixor(this);
	  };
	  BN.prototype.uxor = function uxor(num) {
	    if (this.length > num.length) return this.clone().iuxor(num);
	    return num.clone().iuxor(this);
	  };

	  // Not ``this`` with ``width`` bitwidth
	  BN.prototype.inotn = function inotn(width) {
	    assert(typeof width === 'number' && width >= 0);
	    var bytesNeeded = Math.ceil(width / 26) | 0;
	    var bitsLeft = width % 26;

	    // Extend the buffer with leading zeroes
	    this._expand(bytesNeeded);
	    if (bitsLeft > 0) {
	      bytesNeeded--;
	    }

	    // Handle complete words
	    for (var i = 0; i < bytesNeeded; i++) {
	      this.words[i] = ~this.words[i] & 0x3ffffff;
	    }

	    // Handle the residue
	    if (bitsLeft > 0) {
	      this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
	    }

	    // And remove leading zeroes
	    return this._strip();
	  };
	  BN.prototype.notn = function notn(width) {
	    return this.clone().inotn(width);
	  };

	  // Set `bit` of `this`
	  BN.prototype.setn = function setn(bit, val) {
	    assert(typeof bit === 'number' && bit >= 0);
	    var off = bit / 26 | 0;
	    var wbit = bit % 26;
	    this._expand(off + 1);
	    if (val) {
	      this.words[off] = this.words[off] | 1 << wbit;
	    } else {
	      this.words[off] = this.words[off] & ~(1 << wbit);
	    }
	    return this._strip();
	  };

	  // Add `num` to `this` in-place
	  BN.prototype.iadd = function iadd(num) {
	    var r;

	    // negative + positive
	    if (this.negative !== 0 && num.negative === 0) {
	      this.negative = 0;
	      r = this.isub(num);
	      this.negative ^= 1;
	      return this._normSign();

	      // positive + negative
	    } else if (this.negative === 0 && num.negative !== 0) {
	      num.negative = 0;
	      r = this.isub(num);
	      num.negative = 1;
	      return r._normSign();
	    }

	    // a.length > b.length
	    var a, b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }
	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }
	    this.length = a.length;
	    if (carry !== 0) {
	      this.words[this.length] = carry;
	      this.length++;
	      // Copy the rest of the words
	    } else if (a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }
	    return this;
	  };

	  // Add `num` to `this`
	  BN.prototype.add = function add(num) {
	    var res;
	    if (num.negative !== 0 && this.negative === 0) {
	      num.negative = 0;
	      res = this.sub(num);
	      num.negative ^= 1;
	      return res;
	    } else if (num.negative === 0 && this.negative !== 0) {
	      this.negative = 0;
	      res = num.sub(this);
	      this.negative = 1;
	      return res;
	    }
	    if (this.length > num.length) return this.clone().iadd(num);
	    return num.clone().iadd(this);
	  };

	  // Subtract `num` from `this` in-place
	  BN.prototype.isub = function isub(num) {
	    // this - (-num) = this + num
	    if (num.negative !== 0) {
	      num.negative = 0;
	      var r = this.iadd(num);
	      num.negative = 1;
	      return r._normSign();

	      // -this - num = -(this + num)
	    } else if (this.negative !== 0) {
	      this.negative = 0;
	      this.iadd(num);
	      this.negative = 1;
	      return this._normSign();
	    }

	    // At this point both numbers are positive
	    var cmp = this.cmp(num);

	    // Optimization - zeroify
	    if (cmp === 0) {
	      this.negative = 0;
	      this.length = 1;
	      this.words[0] = 0;
	      return this;
	    }

	    // a > b
	    var a, b;
	    if (cmp > 0) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }
	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }

	    // Copy rest of the words
	    if (carry === 0 && i < a.length && a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }
	    this.length = Math.max(this.length, i);
	    if (a !== this) {
	      this.negative = 1;
	    }
	    return this._strip();
	  };

	  // Subtract `num` from `this`
	  BN.prototype.sub = function sub(num) {
	    return this.clone().isub(num);
	  };
	  function smallMulTo(self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    var len = self.length + num.length | 0;
	    out.length = len;
	    len = len - 1 | 0;

	    // Peel one iteration (compiler can't do it, because of code complexity)
	    var a = self.words[0] | 0;
	    var b = num.words[0] | 0;
	    var r = a * b;
	    var lo = r & 0x3ffffff;
	    var carry = r / 0x4000000 | 0;
	    out.words[0] = lo;
	    for (var k = 1; k < len; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = carry >>> 26;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = k - j | 0;
	        a = self.words[i] | 0;
	        b = num.words[j] | 0;
	        r = a * b + rword;
	        ncarry += r / 0x4000000 | 0;
	        rword = r & 0x3ffffff;
	      }
	      out.words[k] = rword | 0;
	      carry = ncarry | 0;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry | 0;
	    } else {
	      out.length--;
	    }
	    return out._strip();
	  }

	  // TODO(indutny): it may be reasonable to omit it for users who don't need
	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
	  // multiplication (like elliptic secp256k1).
	  var comb10MulTo = function comb10MulTo(self, num, out) {
	    var a = self.words;
	    var b = num.words;
	    var o = out.words;
	    var c = 0;
	    var lo;
	    var mid;
	    var hi;
	    var a0 = a[0] | 0;
	    var al0 = a0 & 0x1fff;
	    var ah0 = a0 >>> 13;
	    var a1 = a[1] | 0;
	    var al1 = a1 & 0x1fff;
	    var ah1 = a1 >>> 13;
	    var a2 = a[2] | 0;
	    var al2 = a2 & 0x1fff;
	    var ah2 = a2 >>> 13;
	    var a3 = a[3] | 0;
	    var al3 = a3 & 0x1fff;
	    var ah3 = a3 >>> 13;
	    var a4 = a[4] | 0;
	    var al4 = a4 & 0x1fff;
	    var ah4 = a4 >>> 13;
	    var a5 = a[5] | 0;
	    var al5 = a5 & 0x1fff;
	    var ah5 = a5 >>> 13;
	    var a6 = a[6] | 0;
	    var al6 = a6 & 0x1fff;
	    var ah6 = a6 >>> 13;
	    var a7 = a[7] | 0;
	    var al7 = a7 & 0x1fff;
	    var ah7 = a7 >>> 13;
	    var a8 = a[8] | 0;
	    var al8 = a8 & 0x1fff;
	    var ah8 = a8 >>> 13;
	    var a9 = a[9] | 0;
	    var al9 = a9 & 0x1fff;
	    var ah9 = a9 >>> 13;
	    var b0 = b[0] | 0;
	    var bl0 = b0 & 0x1fff;
	    var bh0 = b0 >>> 13;
	    var b1 = b[1] | 0;
	    var bl1 = b1 & 0x1fff;
	    var bh1 = b1 >>> 13;
	    var b2 = b[2] | 0;
	    var bl2 = b2 & 0x1fff;
	    var bh2 = b2 >>> 13;
	    var b3 = b[3] | 0;
	    var bl3 = b3 & 0x1fff;
	    var bh3 = b3 >>> 13;
	    var b4 = b[4] | 0;
	    var bl4 = b4 & 0x1fff;
	    var bh4 = b4 >>> 13;
	    var b5 = b[5] | 0;
	    var bl5 = b5 & 0x1fff;
	    var bh5 = b5 >>> 13;
	    var b6 = b[6] | 0;
	    var bl6 = b6 & 0x1fff;
	    var bh6 = b6 >>> 13;
	    var b7 = b[7] | 0;
	    var bl7 = b7 & 0x1fff;
	    var bh7 = b7 >>> 13;
	    var b8 = b[8] | 0;
	    var bl8 = b8 & 0x1fff;
	    var bh8 = b8 >>> 13;
	    var b9 = b[9] | 0;
	    var bl9 = b9 & 0x1fff;
	    var bh9 = b9 >>> 13;
	    out.negative = self.negative ^ num.negative;
	    out.length = 19;
	    /* k = 0 */
	    lo = Math.imul(al0, bl0);
	    mid = Math.imul(al0, bh0);
	    mid = mid + Math.imul(ah0, bl0) | 0;
	    hi = Math.imul(ah0, bh0);
	    var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
	    w0 &= 0x3ffffff;
	    /* k = 1 */
	    lo = Math.imul(al1, bl0);
	    mid = Math.imul(al1, bh0);
	    mid = mid + Math.imul(ah1, bl0) | 0;
	    hi = Math.imul(ah1, bh0);
	    lo = lo + Math.imul(al0, bl1) | 0;
	    mid = mid + Math.imul(al0, bh1) | 0;
	    mid = mid + Math.imul(ah0, bl1) | 0;
	    hi = hi + Math.imul(ah0, bh1) | 0;
	    var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
	    w1 &= 0x3ffffff;
	    /* k = 2 */
	    lo = Math.imul(al2, bl0);
	    mid = Math.imul(al2, bh0);
	    mid = mid + Math.imul(ah2, bl0) | 0;
	    hi = Math.imul(ah2, bh0);
	    lo = lo + Math.imul(al1, bl1) | 0;
	    mid = mid + Math.imul(al1, bh1) | 0;
	    mid = mid + Math.imul(ah1, bl1) | 0;
	    hi = hi + Math.imul(ah1, bh1) | 0;
	    lo = lo + Math.imul(al0, bl2) | 0;
	    mid = mid + Math.imul(al0, bh2) | 0;
	    mid = mid + Math.imul(ah0, bl2) | 0;
	    hi = hi + Math.imul(ah0, bh2) | 0;
	    var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
	    w2 &= 0x3ffffff;
	    /* k = 3 */
	    lo = Math.imul(al3, bl0);
	    mid = Math.imul(al3, bh0);
	    mid = mid + Math.imul(ah3, bl0) | 0;
	    hi = Math.imul(ah3, bh0);
	    lo = lo + Math.imul(al2, bl1) | 0;
	    mid = mid + Math.imul(al2, bh1) | 0;
	    mid = mid + Math.imul(ah2, bl1) | 0;
	    hi = hi + Math.imul(ah2, bh1) | 0;
	    lo = lo + Math.imul(al1, bl2) | 0;
	    mid = mid + Math.imul(al1, bh2) | 0;
	    mid = mid + Math.imul(ah1, bl2) | 0;
	    hi = hi + Math.imul(ah1, bh2) | 0;
	    lo = lo + Math.imul(al0, bl3) | 0;
	    mid = mid + Math.imul(al0, bh3) | 0;
	    mid = mid + Math.imul(ah0, bl3) | 0;
	    hi = hi + Math.imul(ah0, bh3) | 0;
	    var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
	    w3 &= 0x3ffffff;
	    /* k = 4 */
	    lo = Math.imul(al4, bl0);
	    mid = Math.imul(al4, bh0);
	    mid = mid + Math.imul(ah4, bl0) | 0;
	    hi = Math.imul(ah4, bh0);
	    lo = lo + Math.imul(al3, bl1) | 0;
	    mid = mid + Math.imul(al3, bh1) | 0;
	    mid = mid + Math.imul(ah3, bl1) | 0;
	    hi = hi + Math.imul(ah3, bh1) | 0;
	    lo = lo + Math.imul(al2, bl2) | 0;
	    mid = mid + Math.imul(al2, bh2) | 0;
	    mid = mid + Math.imul(ah2, bl2) | 0;
	    hi = hi + Math.imul(ah2, bh2) | 0;
	    lo = lo + Math.imul(al1, bl3) | 0;
	    mid = mid + Math.imul(al1, bh3) | 0;
	    mid = mid + Math.imul(ah1, bl3) | 0;
	    hi = hi + Math.imul(ah1, bh3) | 0;
	    lo = lo + Math.imul(al0, bl4) | 0;
	    mid = mid + Math.imul(al0, bh4) | 0;
	    mid = mid + Math.imul(ah0, bl4) | 0;
	    hi = hi + Math.imul(ah0, bh4) | 0;
	    var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
	    w4 &= 0x3ffffff;
	    /* k = 5 */
	    lo = Math.imul(al5, bl0);
	    mid = Math.imul(al5, bh0);
	    mid = mid + Math.imul(ah5, bl0) | 0;
	    hi = Math.imul(ah5, bh0);
	    lo = lo + Math.imul(al4, bl1) | 0;
	    mid = mid + Math.imul(al4, bh1) | 0;
	    mid = mid + Math.imul(ah4, bl1) | 0;
	    hi = hi + Math.imul(ah4, bh1) | 0;
	    lo = lo + Math.imul(al3, bl2) | 0;
	    mid = mid + Math.imul(al3, bh2) | 0;
	    mid = mid + Math.imul(ah3, bl2) | 0;
	    hi = hi + Math.imul(ah3, bh2) | 0;
	    lo = lo + Math.imul(al2, bl3) | 0;
	    mid = mid + Math.imul(al2, bh3) | 0;
	    mid = mid + Math.imul(ah2, bl3) | 0;
	    hi = hi + Math.imul(ah2, bh3) | 0;
	    lo = lo + Math.imul(al1, bl4) | 0;
	    mid = mid + Math.imul(al1, bh4) | 0;
	    mid = mid + Math.imul(ah1, bl4) | 0;
	    hi = hi + Math.imul(ah1, bh4) | 0;
	    lo = lo + Math.imul(al0, bl5) | 0;
	    mid = mid + Math.imul(al0, bh5) | 0;
	    mid = mid + Math.imul(ah0, bl5) | 0;
	    hi = hi + Math.imul(ah0, bh5) | 0;
	    var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
	    w5 &= 0x3ffffff;
	    /* k = 6 */
	    lo = Math.imul(al6, bl0);
	    mid = Math.imul(al6, bh0);
	    mid = mid + Math.imul(ah6, bl0) | 0;
	    hi = Math.imul(ah6, bh0);
	    lo = lo + Math.imul(al5, bl1) | 0;
	    mid = mid + Math.imul(al5, bh1) | 0;
	    mid = mid + Math.imul(ah5, bl1) | 0;
	    hi = hi + Math.imul(ah5, bh1) | 0;
	    lo = lo + Math.imul(al4, bl2) | 0;
	    mid = mid + Math.imul(al4, bh2) | 0;
	    mid = mid + Math.imul(ah4, bl2) | 0;
	    hi = hi + Math.imul(ah4, bh2) | 0;
	    lo = lo + Math.imul(al3, bl3) | 0;
	    mid = mid + Math.imul(al3, bh3) | 0;
	    mid = mid + Math.imul(ah3, bl3) | 0;
	    hi = hi + Math.imul(ah3, bh3) | 0;
	    lo = lo + Math.imul(al2, bl4) | 0;
	    mid = mid + Math.imul(al2, bh4) | 0;
	    mid = mid + Math.imul(ah2, bl4) | 0;
	    hi = hi + Math.imul(ah2, bh4) | 0;
	    lo = lo + Math.imul(al1, bl5) | 0;
	    mid = mid + Math.imul(al1, bh5) | 0;
	    mid = mid + Math.imul(ah1, bl5) | 0;
	    hi = hi + Math.imul(ah1, bh5) | 0;
	    lo = lo + Math.imul(al0, bl6) | 0;
	    mid = mid + Math.imul(al0, bh6) | 0;
	    mid = mid + Math.imul(ah0, bl6) | 0;
	    hi = hi + Math.imul(ah0, bh6) | 0;
	    var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
	    w6 &= 0x3ffffff;
	    /* k = 7 */
	    lo = Math.imul(al7, bl0);
	    mid = Math.imul(al7, bh0);
	    mid = mid + Math.imul(ah7, bl0) | 0;
	    hi = Math.imul(ah7, bh0);
	    lo = lo + Math.imul(al6, bl1) | 0;
	    mid = mid + Math.imul(al6, bh1) | 0;
	    mid = mid + Math.imul(ah6, bl1) | 0;
	    hi = hi + Math.imul(ah6, bh1) | 0;
	    lo = lo + Math.imul(al5, bl2) | 0;
	    mid = mid + Math.imul(al5, bh2) | 0;
	    mid = mid + Math.imul(ah5, bl2) | 0;
	    hi = hi + Math.imul(ah5, bh2) | 0;
	    lo = lo + Math.imul(al4, bl3) | 0;
	    mid = mid + Math.imul(al4, bh3) | 0;
	    mid = mid + Math.imul(ah4, bl3) | 0;
	    hi = hi + Math.imul(ah4, bh3) | 0;
	    lo = lo + Math.imul(al3, bl4) | 0;
	    mid = mid + Math.imul(al3, bh4) | 0;
	    mid = mid + Math.imul(ah3, bl4) | 0;
	    hi = hi + Math.imul(ah3, bh4) | 0;
	    lo = lo + Math.imul(al2, bl5) | 0;
	    mid = mid + Math.imul(al2, bh5) | 0;
	    mid = mid + Math.imul(ah2, bl5) | 0;
	    hi = hi + Math.imul(ah2, bh5) | 0;
	    lo = lo + Math.imul(al1, bl6) | 0;
	    mid = mid + Math.imul(al1, bh6) | 0;
	    mid = mid + Math.imul(ah1, bl6) | 0;
	    hi = hi + Math.imul(ah1, bh6) | 0;
	    lo = lo + Math.imul(al0, bl7) | 0;
	    mid = mid + Math.imul(al0, bh7) | 0;
	    mid = mid + Math.imul(ah0, bl7) | 0;
	    hi = hi + Math.imul(ah0, bh7) | 0;
	    var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
	    w7 &= 0x3ffffff;
	    /* k = 8 */
	    lo = Math.imul(al8, bl0);
	    mid = Math.imul(al8, bh0);
	    mid = mid + Math.imul(ah8, bl0) | 0;
	    hi = Math.imul(ah8, bh0);
	    lo = lo + Math.imul(al7, bl1) | 0;
	    mid = mid + Math.imul(al7, bh1) | 0;
	    mid = mid + Math.imul(ah7, bl1) | 0;
	    hi = hi + Math.imul(ah7, bh1) | 0;
	    lo = lo + Math.imul(al6, bl2) | 0;
	    mid = mid + Math.imul(al6, bh2) | 0;
	    mid = mid + Math.imul(ah6, bl2) | 0;
	    hi = hi + Math.imul(ah6, bh2) | 0;
	    lo = lo + Math.imul(al5, bl3) | 0;
	    mid = mid + Math.imul(al5, bh3) | 0;
	    mid = mid + Math.imul(ah5, bl3) | 0;
	    hi = hi + Math.imul(ah5, bh3) | 0;
	    lo = lo + Math.imul(al4, bl4) | 0;
	    mid = mid + Math.imul(al4, bh4) | 0;
	    mid = mid + Math.imul(ah4, bl4) | 0;
	    hi = hi + Math.imul(ah4, bh4) | 0;
	    lo = lo + Math.imul(al3, bl5) | 0;
	    mid = mid + Math.imul(al3, bh5) | 0;
	    mid = mid + Math.imul(ah3, bl5) | 0;
	    hi = hi + Math.imul(ah3, bh5) | 0;
	    lo = lo + Math.imul(al2, bl6) | 0;
	    mid = mid + Math.imul(al2, bh6) | 0;
	    mid = mid + Math.imul(ah2, bl6) | 0;
	    hi = hi + Math.imul(ah2, bh6) | 0;
	    lo = lo + Math.imul(al1, bl7) | 0;
	    mid = mid + Math.imul(al1, bh7) | 0;
	    mid = mid + Math.imul(ah1, bl7) | 0;
	    hi = hi + Math.imul(ah1, bh7) | 0;
	    lo = lo + Math.imul(al0, bl8) | 0;
	    mid = mid + Math.imul(al0, bh8) | 0;
	    mid = mid + Math.imul(ah0, bl8) | 0;
	    hi = hi + Math.imul(ah0, bh8) | 0;
	    var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
	    w8 &= 0x3ffffff;
	    /* k = 9 */
	    lo = Math.imul(al9, bl0);
	    mid = Math.imul(al9, bh0);
	    mid = mid + Math.imul(ah9, bl0) | 0;
	    hi = Math.imul(ah9, bh0);
	    lo = lo + Math.imul(al8, bl1) | 0;
	    mid = mid + Math.imul(al8, bh1) | 0;
	    mid = mid + Math.imul(ah8, bl1) | 0;
	    hi = hi + Math.imul(ah8, bh1) | 0;
	    lo = lo + Math.imul(al7, bl2) | 0;
	    mid = mid + Math.imul(al7, bh2) | 0;
	    mid = mid + Math.imul(ah7, bl2) | 0;
	    hi = hi + Math.imul(ah7, bh2) | 0;
	    lo = lo + Math.imul(al6, bl3) | 0;
	    mid = mid + Math.imul(al6, bh3) | 0;
	    mid = mid + Math.imul(ah6, bl3) | 0;
	    hi = hi + Math.imul(ah6, bh3) | 0;
	    lo = lo + Math.imul(al5, bl4) | 0;
	    mid = mid + Math.imul(al5, bh4) | 0;
	    mid = mid + Math.imul(ah5, bl4) | 0;
	    hi = hi + Math.imul(ah5, bh4) | 0;
	    lo = lo + Math.imul(al4, bl5) | 0;
	    mid = mid + Math.imul(al4, bh5) | 0;
	    mid = mid + Math.imul(ah4, bl5) | 0;
	    hi = hi + Math.imul(ah4, bh5) | 0;
	    lo = lo + Math.imul(al3, bl6) | 0;
	    mid = mid + Math.imul(al3, bh6) | 0;
	    mid = mid + Math.imul(ah3, bl6) | 0;
	    hi = hi + Math.imul(ah3, bh6) | 0;
	    lo = lo + Math.imul(al2, bl7) | 0;
	    mid = mid + Math.imul(al2, bh7) | 0;
	    mid = mid + Math.imul(ah2, bl7) | 0;
	    hi = hi + Math.imul(ah2, bh7) | 0;
	    lo = lo + Math.imul(al1, bl8) | 0;
	    mid = mid + Math.imul(al1, bh8) | 0;
	    mid = mid + Math.imul(ah1, bl8) | 0;
	    hi = hi + Math.imul(ah1, bh8) | 0;
	    lo = lo + Math.imul(al0, bl9) | 0;
	    mid = mid + Math.imul(al0, bh9) | 0;
	    mid = mid + Math.imul(ah0, bl9) | 0;
	    hi = hi + Math.imul(ah0, bh9) | 0;
	    var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
	    w9 &= 0x3ffffff;
	    /* k = 10 */
	    lo = Math.imul(al9, bl1);
	    mid = Math.imul(al9, bh1);
	    mid = mid + Math.imul(ah9, bl1) | 0;
	    hi = Math.imul(ah9, bh1);
	    lo = lo + Math.imul(al8, bl2) | 0;
	    mid = mid + Math.imul(al8, bh2) | 0;
	    mid = mid + Math.imul(ah8, bl2) | 0;
	    hi = hi + Math.imul(ah8, bh2) | 0;
	    lo = lo + Math.imul(al7, bl3) | 0;
	    mid = mid + Math.imul(al7, bh3) | 0;
	    mid = mid + Math.imul(ah7, bl3) | 0;
	    hi = hi + Math.imul(ah7, bh3) | 0;
	    lo = lo + Math.imul(al6, bl4) | 0;
	    mid = mid + Math.imul(al6, bh4) | 0;
	    mid = mid + Math.imul(ah6, bl4) | 0;
	    hi = hi + Math.imul(ah6, bh4) | 0;
	    lo = lo + Math.imul(al5, bl5) | 0;
	    mid = mid + Math.imul(al5, bh5) | 0;
	    mid = mid + Math.imul(ah5, bl5) | 0;
	    hi = hi + Math.imul(ah5, bh5) | 0;
	    lo = lo + Math.imul(al4, bl6) | 0;
	    mid = mid + Math.imul(al4, bh6) | 0;
	    mid = mid + Math.imul(ah4, bl6) | 0;
	    hi = hi + Math.imul(ah4, bh6) | 0;
	    lo = lo + Math.imul(al3, bl7) | 0;
	    mid = mid + Math.imul(al3, bh7) | 0;
	    mid = mid + Math.imul(ah3, bl7) | 0;
	    hi = hi + Math.imul(ah3, bh7) | 0;
	    lo = lo + Math.imul(al2, bl8) | 0;
	    mid = mid + Math.imul(al2, bh8) | 0;
	    mid = mid + Math.imul(ah2, bl8) | 0;
	    hi = hi + Math.imul(ah2, bh8) | 0;
	    lo = lo + Math.imul(al1, bl9) | 0;
	    mid = mid + Math.imul(al1, bh9) | 0;
	    mid = mid + Math.imul(ah1, bl9) | 0;
	    hi = hi + Math.imul(ah1, bh9) | 0;
	    var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
	    w10 &= 0x3ffffff;
	    /* k = 11 */
	    lo = Math.imul(al9, bl2);
	    mid = Math.imul(al9, bh2);
	    mid = mid + Math.imul(ah9, bl2) | 0;
	    hi = Math.imul(ah9, bh2);
	    lo = lo + Math.imul(al8, bl3) | 0;
	    mid = mid + Math.imul(al8, bh3) | 0;
	    mid = mid + Math.imul(ah8, bl3) | 0;
	    hi = hi + Math.imul(ah8, bh3) | 0;
	    lo = lo + Math.imul(al7, bl4) | 0;
	    mid = mid + Math.imul(al7, bh4) | 0;
	    mid = mid + Math.imul(ah7, bl4) | 0;
	    hi = hi + Math.imul(ah7, bh4) | 0;
	    lo = lo + Math.imul(al6, bl5) | 0;
	    mid = mid + Math.imul(al6, bh5) | 0;
	    mid = mid + Math.imul(ah6, bl5) | 0;
	    hi = hi + Math.imul(ah6, bh5) | 0;
	    lo = lo + Math.imul(al5, bl6) | 0;
	    mid = mid + Math.imul(al5, bh6) | 0;
	    mid = mid + Math.imul(ah5, bl6) | 0;
	    hi = hi + Math.imul(ah5, bh6) | 0;
	    lo = lo + Math.imul(al4, bl7) | 0;
	    mid = mid + Math.imul(al4, bh7) | 0;
	    mid = mid + Math.imul(ah4, bl7) | 0;
	    hi = hi + Math.imul(ah4, bh7) | 0;
	    lo = lo + Math.imul(al3, bl8) | 0;
	    mid = mid + Math.imul(al3, bh8) | 0;
	    mid = mid + Math.imul(ah3, bl8) | 0;
	    hi = hi + Math.imul(ah3, bh8) | 0;
	    lo = lo + Math.imul(al2, bl9) | 0;
	    mid = mid + Math.imul(al2, bh9) | 0;
	    mid = mid + Math.imul(ah2, bl9) | 0;
	    hi = hi + Math.imul(ah2, bh9) | 0;
	    var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
	    w11 &= 0x3ffffff;
	    /* k = 12 */
	    lo = Math.imul(al9, bl3);
	    mid = Math.imul(al9, bh3);
	    mid = mid + Math.imul(ah9, bl3) | 0;
	    hi = Math.imul(ah9, bh3);
	    lo = lo + Math.imul(al8, bl4) | 0;
	    mid = mid + Math.imul(al8, bh4) | 0;
	    mid = mid + Math.imul(ah8, bl4) | 0;
	    hi = hi + Math.imul(ah8, bh4) | 0;
	    lo = lo + Math.imul(al7, bl5) | 0;
	    mid = mid + Math.imul(al7, bh5) | 0;
	    mid = mid + Math.imul(ah7, bl5) | 0;
	    hi = hi + Math.imul(ah7, bh5) | 0;
	    lo = lo + Math.imul(al6, bl6) | 0;
	    mid = mid + Math.imul(al6, bh6) | 0;
	    mid = mid + Math.imul(ah6, bl6) | 0;
	    hi = hi + Math.imul(ah6, bh6) | 0;
	    lo = lo + Math.imul(al5, bl7) | 0;
	    mid = mid + Math.imul(al5, bh7) | 0;
	    mid = mid + Math.imul(ah5, bl7) | 0;
	    hi = hi + Math.imul(ah5, bh7) | 0;
	    lo = lo + Math.imul(al4, bl8) | 0;
	    mid = mid + Math.imul(al4, bh8) | 0;
	    mid = mid + Math.imul(ah4, bl8) | 0;
	    hi = hi + Math.imul(ah4, bh8) | 0;
	    lo = lo + Math.imul(al3, bl9) | 0;
	    mid = mid + Math.imul(al3, bh9) | 0;
	    mid = mid + Math.imul(ah3, bl9) | 0;
	    hi = hi + Math.imul(ah3, bh9) | 0;
	    var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
	    w12 &= 0x3ffffff;
	    /* k = 13 */
	    lo = Math.imul(al9, bl4);
	    mid = Math.imul(al9, bh4);
	    mid = mid + Math.imul(ah9, bl4) | 0;
	    hi = Math.imul(ah9, bh4);
	    lo = lo + Math.imul(al8, bl5) | 0;
	    mid = mid + Math.imul(al8, bh5) | 0;
	    mid = mid + Math.imul(ah8, bl5) | 0;
	    hi = hi + Math.imul(ah8, bh5) | 0;
	    lo = lo + Math.imul(al7, bl6) | 0;
	    mid = mid + Math.imul(al7, bh6) | 0;
	    mid = mid + Math.imul(ah7, bl6) | 0;
	    hi = hi + Math.imul(ah7, bh6) | 0;
	    lo = lo + Math.imul(al6, bl7) | 0;
	    mid = mid + Math.imul(al6, bh7) | 0;
	    mid = mid + Math.imul(ah6, bl7) | 0;
	    hi = hi + Math.imul(ah6, bh7) | 0;
	    lo = lo + Math.imul(al5, bl8) | 0;
	    mid = mid + Math.imul(al5, bh8) | 0;
	    mid = mid + Math.imul(ah5, bl8) | 0;
	    hi = hi + Math.imul(ah5, bh8) | 0;
	    lo = lo + Math.imul(al4, bl9) | 0;
	    mid = mid + Math.imul(al4, bh9) | 0;
	    mid = mid + Math.imul(ah4, bl9) | 0;
	    hi = hi + Math.imul(ah4, bh9) | 0;
	    var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
	    w13 &= 0x3ffffff;
	    /* k = 14 */
	    lo = Math.imul(al9, bl5);
	    mid = Math.imul(al9, bh5);
	    mid = mid + Math.imul(ah9, bl5) | 0;
	    hi = Math.imul(ah9, bh5);
	    lo = lo + Math.imul(al8, bl6) | 0;
	    mid = mid + Math.imul(al8, bh6) | 0;
	    mid = mid + Math.imul(ah8, bl6) | 0;
	    hi = hi + Math.imul(ah8, bh6) | 0;
	    lo = lo + Math.imul(al7, bl7) | 0;
	    mid = mid + Math.imul(al7, bh7) | 0;
	    mid = mid + Math.imul(ah7, bl7) | 0;
	    hi = hi + Math.imul(ah7, bh7) | 0;
	    lo = lo + Math.imul(al6, bl8) | 0;
	    mid = mid + Math.imul(al6, bh8) | 0;
	    mid = mid + Math.imul(ah6, bl8) | 0;
	    hi = hi + Math.imul(ah6, bh8) | 0;
	    lo = lo + Math.imul(al5, bl9) | 0;
	    mid = mid + Math.imul(al5, bh9) | 0;
	    mid = mid + Math.imul(ah5, bl9) | 0;
	    hi = hi + Math.imul(ah5, bh9) | 0;
	    var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
	    w14 &= 0x3ffffff;
	    /* k = 15 */
	    lo = Math.imul(al9, bl6);
	    mid = Math.imul(al9, bh6);
	    mid = mid + Math.imul(ah9, bl6) | 0;
	    hi = Math.imul(ah9, bh6);
	    lo = lo + Math.imul(al8, bl7) | 0;
	    mid = mid + Math.imul(al8, bh7) | 0;
	    mid = mid + Math.imul(ah8, bl7) | 0;
	    hi = hi + Math.imul(ah8, bh7) | 0;
	    lo = lo + Math.imul(al7, bl8) | 0;
	    mid = mid + Math.imul(al7, bh8) | 0;
	    mid = mid + Math.imul(ah7, bl8) | 0;
	    hi = hi + Math.imul(ah7, bh8) | 0;
	    lo = lo + Math.imul(al6, bl9) | 0;
	    mid = mid + Math.imul(al6, bh9) | 0;
	    mid = mid + Math.imul(ah6, bl9) | 0;
	    hi = hi + Math.imul(ah6, bh9) | 0;
	    var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
	    w15 &= 0x3ffffff;
	    /* k = 16 */
	    lo = Math.imul(al9, bl7);
	    mid = Math.imul(al9, bh7);
	    mid = mid + Math.imul(ah9, bl7) | 0;
	    hi = Math.imul(ah9, bh7);
	    lo = lo + Math.imul(al8, bl8) | 0;
	    mid = mid + Math.imul(al8, bh8) | 0;
	    mid = mid + Math.imul(ah8, bl8) | 0;
	    hi = hi + Math.imul(ah8, bh8) | 0;
	    lo = lo + Math.imul(al7, bl9) | 0;
	    mid = mid + Math.imul(al7, bh9) | 0;
	    mid = mid + Math.imul(ah7, bl9) | 0;
	    hi = hi + Math.imul(ah7, bh9) | 0;
	    var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
	    w16 &= 0x3ffffff;
	    /* k = 17 */
	    lo = Math.imul(al9, bl8);
	    mid = Math.imul(al9, bh8);
	    mid = mid + Math.imul(ah9, bl8) | 0;
	    hi = Math.imul(ah9, bh8);
	    lo = lo + Math.imul(al8, bl9) | 0;
	    mid = mid + Math.imul(al8, bh9) | 0;
	    mid = mid + Math.imul(ah8, bl9) | 0;
	    hi = hi + Math.imul(ah8, bh9) | 0;
	    var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
	    w17 &= 0x3ffffff;
	    /* k = 18 */
	    lo = Math.imul(al9, bl9);
	    mid = Math.imul(al9, bh9);
	    mid = mid + Math.imul(ah9, bl9) | 0;
	    hi = Math.imul(ah9, bh9);
	    var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
	    w18 &= 0x3ffffff;
	    o[0] = w0;
	    o[1] = w1;
	    o[2] = w2;
	    o[3] = w3;
	    o[4] = w4;
	    o[5] = w5;
	    o[6] = w6;
	    o[7] = w7;
	    o[8] = w8;
	    o[9] = w9;
	    o[10] = w10;
	    o[11] = w11;
	    o[12] = w12;
	    o[13] = w13;
	    o[14] = w14;
	    o[15] = w15;
	    o[16] = w16;
	    o[17] = w17;
	    o[18] = w18;
	    if (c !== 0) {
	      o[19] = c;
	      out.length++;
	    }
	    return out;
	  };

	  // Polyfill comb
	  if (!Math.imul) {
	    comb10MulTo = smallMulTo;
	  }
	  function bigMulTo(self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    out.length = self.length + num.length;
	    var carry = 0;
	    var hncarry = 0;
	    for (var k = 0; k < out.length - 1; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = hncarry;
	      hncarry = 0;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = k - j;
	        var a = self.words[i] | 0;
	        var b = num.words[j] | 0;
	        var r = a * b;
	        var lo = r & 0x3ffffff;
	        ncarry = ncarry + (r / 0x4000000 | 0) | 0;
	        lo = lo + rword | 0;
	        rword = lo & 0x3ffffff;
	        ncarry = ncarry + (lo >>> 26) | 0;
	        hncarry += ncarry >>> 26;
	        ncarry &= 0x3ffffff;
	      }
	      out.words[k] = rword;
	      carry = ncarry;
	      ncarry = hncarry;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry;
	    } else {
	      out.length--;
	    }
	    return out._strip();
	  }
	  function jumboMulTo(self, num, out) {
	    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
	    // var fftm = new FFTM();
	    // return fftm.mulp(self, num, out);
	    return bigMulTo(self, num, out);
	  }
	  BN.prototype.mulTo = function mulTo(num, out) {
	    var res;
	    var len = this.length + num.length;
	    if (this.length === 10 && num.length === 10) {
	      res = comb10MulTo(this, num, out);
	    } else if (len < 63) {
	      res = smallMulTo(this, num, out);
	    } else if (len < 1024) {
	      res = bigMulTo(this, num, out);
	    } else {
	      res = jumboMulTo(this, num, out);
	    }
	    return res;
	  };

	  // Multiply `this` by `num`
	  BN.prototype.mul = function mul(num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return this.mulTo(num, out);
	  };

	  // Multiply employing FFT
	  BN.prototype.mulf = function mulf(num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return jumboMulTo(this, num, out);
	  };

	  // In-place Multiplication
	  BN.prototype.imul = function imul(num) {
	    return this.clone().mulTo(num, this);
	  };
	  BN.prototype.imuln = function imuln(num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);

	    // Carry
	    var carry = 0;
	    for (var i = 0; i < this.length; i++) {
	      var w = (this.words[i] | 0) * num;
	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
	      carry >>= 26;
	      carry += w / 0x4000000 | 0;
	      // NOTE: lo is 27bit maximum
	      carry += lo >>> 26;
	      this.words[i] = lo & 0x3ffffff;
	    }
	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }
	    return isNegNum ? this.ineg() : this;
	  };
	  BN.prototype.muln = function muln(num) {
	    return this.clone().imuln(num);
	  };

	  // `this` * `this`
	  BN.prototype.sqr = function sqr() {
	    return this.mul(this);
	  };

	  // `this` * `this` in-place
	  BN.prototype.isqr = function isqr() {
	    return this.imul(this.clone());
	  };

	  // Math.pow(`this`, `num`)
	  BN.prototype.pow = function pow(num) {
	    var w = toBitArray(num);
	    if (w.length === 0) return new BN(1);

	    // Skip leading zeroes
	    var res = this;
	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
	      if (w[i] !== 0) break;
	    }
	    if (++i < w.length) {
	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
	        if (w[i] === 0) continue;
	        res = res.mul(q);
	      }
	    }
	    return res;
	  };

	  // Shift-left in-place
	  BN.prototype.iushln = function iushln(bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;
	    var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
	    var i;
	    if (r !== 0) {
	      var carry = 0;
	      for (i = 0; i < this.length; i++) {
	        var newCarry = this.words[i] & carryMask;
	        var c = (this.words[i] | 0) - newCarry << r;
	        this.words[i] = c | carry;
	        carry = newCarry >>> 26 - r;
	      }
	      if (carry) {
	        this.words[i] = carry;
	        this.length++;
	      }
	    }
	    if (s !== 0) {
	      for (i = this.length - 1; i >= 0; i--) {
	        this.words[i + s] = this.words[i];
	      }
	      for (i = 0; i < s; i++) {
	        this.words[i] = 0;
	      }
	      this.length += s;
	    }
	    return this._strip();
	  };
	  BN.prototype.ishln = function ishln(bits) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushln(bits);
	  };

	  // Shift-right in-place
	  // NOTE: `hint` is a lowest bit before trailing zeroes
	  // NOTE: if `extended` is present - it will be filled with destroyed bits
	  BN.prototype.iushrn = function iushrn(bits, hint, extended) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var h;
	    if (hint) {
	      h = (hint - hint % 26) / 26;
	    } else {
	      h = 0;
	    }
	    var r = bits % 26;
	    var s = Math.min((bits - r) / 26, this.length);
	    var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
	    var maskedWords = extended;
	    h -= s;
	    h = Math.max(0, h);

	    // Extended mode, copy masked part
	    if (maskedWords) {
	      for (var i = 0; i < s; i++) {
	        maskedWords.words[i] = this.words[i];
	      }
	      maskedWords.length = s;
	    }
	    if (s === 0) ; else if (this.length > s) {
	      this.length -= s;
	      for (i = 0; i < this.length; i++) {
	        this.words[i] = this.words[i + s];
	      }
	    } else {
	      this.words[0] = 0;
	      this.length = 1;
	    }
	    var carry = 0;
	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
	      var word = this.words[i] | 0;
	      this.words[i] = carry << 26 - r | word >>> r;
	      carry = word & mask;
	    }

	    // Push carried bits as a mask
	    if (maskedWords && carry !== 0) {
	      maskedWords.words[maskedWords.length++] = carry;
	    }
	    if (this.length === 0) {
	      this.words[0] = 0;
	      this.length = 1;
	    }
	    return this._strip();
	  };
	  BN.prototype.ishrn = function ishrn(bits, hint, extended) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushrn(bits, hint, extended);
	  };

	  // Shift-left
	  BN.prototype.shln = function shln(bits) {
	    return this.clone().ishln(bits);
	  };
	  BN.prototype.ushln = function ushln(bits) {
	    return this.clone().iushln(bits);
	  };

	  // Shift-right
	  BN.prototype.shrn = function shrn(bits) {
	    return this.clone().ishrn(bits);
	  };
	  BN.prototype.ushrn = function ushrn(bits) {
	    return this.clone().iushrn(bits);
	  };

	  // Test if n bit is set
	  BN.prototype.testn = function testn(bit) {
	    assert(typeof bit === 'number' && bit >= 0);
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) return false;

	    // Check bit and return
	    var w = this.words[s];
	    return !!(w & q);
	  };

	  // Return only lowers bits of number (in-place)
	  BN.prototype.imaskn = function imaskn(bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;
	    assert(this.negative === 0, 'imaskn works only with positive numbers');
	    if (this.length <= s) {
	      return this;
	    }
	    if (r !== 0) {
	      s++;
	    }
	    this.length = Math.min(s, this.length);
	    if (r !== 0) {
	      var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
	      this.words[this.length - 1] &= mask;
	    }
	    return this._strip();
	  };

	  // Return only lowers bits of number
	  BN.prototype.maskn = function maskn(bits) {
	    return this.clone().imaskn(bits);
	  };

	  // Add plain number `num` to `this`
	  BN.prototype.iaddn = function iaddn(num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.isubn(-num);

	    // Possible sign change
	    if (this.negative !== 0) {
	      if (this.length === 1 && (this.words[0] | 0) <= num) {
	        this.words[0] = num - (this.words[0] | 0);
	        this.negative = 0;
	        return this;
	      }
	      this.negative = 0;
	      this.isubn(num);
	      this.negative = 1;
	      return this;
	    }

	    // Add without checks
	    return this._iaddn(num);
	  };
	  BN.prototype._iaddn = function _iaddn(num) {
	    this.words[0] += num;

	    // Carry
	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
	      this.words[i] -= 0x4000000;
	      if (i === this.length - 1) {
	        this.words[i + 1] = 1;
	      } else {
	        this.words[i + 1]++;
	      }
	    }
	    this.length = Math.max(this.length, i + 1);
	    return this;
	  };

	  // Subtract plain number `num` from `this`
	  BN.prototype.isubn = function isubn(num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.iaddn(-num);
	    if (this.negative !== 0) {
	      this.negative = 0;
	      this.iaddn(num);
	      this.negative = 1;
	      return this;
	    }
	    this.words[0] -= num;
	    if (this.length === 1 && this.words[0] < 0) {
	      this.words[0] = -this.words[0];
	      this.negative = 1;
	    } else {
	      // Carry
	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
	        this.words[i] += 0x4000000;
	        this.words[i + 1] -= 1;
	      }
	    }
	    return this._strip();
	  };
	  BN.prototype.addn = function addn(num) {
	    return this.clone().iaddn(num);
	  };
	  BN.prototype.subn = function subn(num) {
	    return this.clone().isubn(num);
	  };
	  BN.prototype.iabs = function iabs() {
	    this.negative = 0;
	    return this;
	  };
	  BN.prototype.abs = function abs() {
	    return this.clone().iabs();
	  };
	  BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
	    var len = num.length + shift;
	    var i;
	    this._expand(len);
	    var w;
	    var carry = 0;
	    for (i = 0; i < num.length; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      var right = (num.words[i] | 0) * mul;
	      w -= right & 0x3ffffff;
	      carry = (w >> 26) - (right / 0x4000000 | 0);
	      this.words[i + shift] = w & 0x3ffffff;
	    }
	    for (; i < this.length - shift; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      carry = w >> 26;
	      this.words[i + shift] = w & 0x3ffffff;
	    }
	    if (carry === 0) return this._strip();

	    // Subtraction overflow
	    assert(carry === -1);
	    carry = 0;
	    for (i = 0; i < this.length; i++) {
	      w = -(this.words[i] | 0) + carry;
	      carry = w >> 26;
	      this.words[i] = w & 0x3ffffff;
	    }
	    this.negative = 1;
	    return this._strip();
	  };
	  BN.prototype._wordDiv = function _wordDiv(num, mode) {
	    var shift = this.length - num.length;
	    var a = this.clone();
	    var b = num;

	    // Normalize
	    var bhi = b.words[b.length - 1] | 0;
	    var bhiBits = this._countBits(bhi);
	    shift = 26 - bhiBits;
	    if (shift !== 0) {
	      b = b.ushln(shift);
	      a.iushln(shift);
	      bhi = b.words[b.length - 1] | 0;
	    }

	    // Initialize quotient
	    var m = a.length - b.length;
	    var q;
	    if (mode !== 'mod') {
	      q = new BN(null);
	      q.length = m + 1;
	      q.words = new Array(q.length);
	      for (var i = 0; i < q.length; i++) {
	        q.words[i] = 0;
	      }
	    }
	    var diff = a.clone()._ishlnsubmul(b, 1, m);
	    if (diff.negative === 0) {
	      a = diff;
	      if (q) {
	        q.words[m] = 1;
	      }
	    }
	    for (var j = m - 1; j >= 0; j--) {
	      var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);

	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
	      // (0x7ffffff)
	      qj = Math.min(qj / bhi | 0, 0x3ffffff);
	      a._ishlnsubmul(b, qj, j);
	      while (a.negative !== 0) {
	        qj--;
	        a.negative = 0;
	        a._ishlnsubmul(b, 1, j);
	        if (!a.isZero()) {
	          a.negative ^= 1;
	        }
	      }
	      if (q) {
	        q.words[j] = qj;
	      }
	    }
	    if (q) {
	      q._strip();
	    }
	    a._strip();

	    // Denormalize
	    if (mode !== 'div' && shift !== 0) {
	      a.iushrn(shift);
	    }
	    return {
	      div: q || null,
	      mod: a
	    };
	  };

	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
	  //       to `div` to request div only, or be absent to
	  //       request both div & mod
	  //       2) `positive` is true if unsigned mod is requested
	  BN.prototype.divmod = function divmod(num, mode, positive) {
	    assert(!num.isZero());
	    if (this.isZero()) {
	      return {
	        div: new BN(0),
	        mod: new BN(0)
	      };
	    }
	    var div, mod, res;
	    if (this.negative !== 0 && num.negative === 0) {
	      res = this.neg().divmod(num, mode);
	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }
	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.iadd(num);
	        }
	      }
	      return {
	        div: div,
	        mod: mod
	      };
	    }
	    if (this.negative === 0 && num.negative !== 0) {
	      res = this.divmod(num.neg(), mode);
	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }
	      return {
	        div: div,
	        mod: res.mod
	      };
	    }
	    if ((this.negative & num.negative) !== 0) {
	      res = this.neg().divmod(num.neg(), mode);
	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.isub(num);
	        }
	      }
	      return {
	        div: res.div,
	        mod: mod
	      };
	    }

	    // Both numbers are positive at this point

	    // Strip both numbers to approximate shift value
	    if (num.length > this.length || this.cmp(num) < 0) {
	      return {
	        div: new BN(0),
	        mod: this
	      };
	    }

	    // Very short reduction
	    if (num.length === 1) {
	      if (mode === 'div') {
	        return {
	          div: this.divn(num.words[0]),
	          mod: null
	        };
	      }
	      if (mode === 'mod') {
	        return {
	          div: null,
	          mod: new BN(this.modrn(num.words[0]))
	        };
	      }
	      return {
	        div: this.divn(num.words[0]),
	        mod: new BN(this.modrn(num.words[0]))
	      };
	    }
	    return this._wordDiv(num, mode);
	  };

	  // Find `this` / `num`
	  BN.prototype.div = function div(num) {
	    return this.divmod(num, 'div', false).div;
	  };

	  // Find `this` % `num`
	  BN.prototype.mod = function mod(num) {
	    return this.divmod(num, 'mod', false).mod;
	  };
	  BN.prototype.umod = function umod(num) {
	    return this.divmod(num, 'mod', true).mod;
	  };

	  // Find Round(`this` / `num`)
	  BN.prototype.divRound = function divRound(num) {
	    var dm = this.divmod(num);

	    // Fast case - exact division
	    if (dm.mod.isZero()) return dm.div;
	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
	    var half = num.ushrn(1);
	    var r2 = num.andln(1);
	    var cmp = mod.cmp(half);

	    // Round down
	    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

	    // Round up
	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
	  };
	  BN.prototype.modrn = function modrn(num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;
	    assert(num <= 0x3ffffff);
	    var p = (1 << 26) % num;
	    var acc = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      acc = (p * acc + (this.words[i] | 0)) % num;
	    }
	    return isNegNum ? -acc : acc;
	  };

	  // WARNING: DEPRECATED
	  BN.prototype.modn = function modn(num) {
	    return this.modrn(num);
	  };

	  // In-place division by number
	  BN.prototype.idivn = function idivn(num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;
	    assert(num <= 0x3ffffff);
	    var carry = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var w = (this.words[i] | 0) + carry * 0x4000000;
	      this.words[i] = w / num | 0;
	      carry = w % num;
	    }
	    this._strip();
	    return isNegNum ? this.ineg() : this;
	  };
	  BN.prototype.divn = function divn(num) {
	    return this.clone().idivn(num);
	  };
	  BN.prototype.egcd = function egcd(p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());
	    var x = this;
	    var y = p.clone();
	    if (x.negative !== 0) {
	      x = x.umod(p);
	    } else {
	      x = x.clone();
	    }

	    // A * x + B * y = x
	    var A = new BN(1);
	    var B = new BN(0);

	    // C * x + D * y = y
	    var C = new BN(0);
	    var D = new BN(1);
	    var g = 0;
	    while (x.isEven() && y.isEven()) {
	      x.iushrn(1);
	      y.iushrn(1);
	      ++g;
	    }
	    var yp = y.clone();
	    var xp = x.clone();
	    while (!x.isZero()) {
	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
	      }
	      if (i > 0) {
	        x.iushrn(i);
	        while (i-- > 0) {
	          if (A.isOdd() || B.isOdd()) {
	            A.iadd(yp);
	            B.isub(xp);
	          }
	          A.iushrn(1);
	          B.iushrn(1);
	        }
	      }
	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
	      }
	      if (j > 0) {
	        y.iushrn(j);
	        while (j-- > 0) {
	          if (C.isOdd() || D.isOdd()) {
	            C.iadd(yp);
	            D.isub(xp);
	          }
	          C.iushrn(1);
	          D.iushrn(1);
	        }
	      }
	      if (x.cmp(y) >= 0) {
	        x.isub(y);
	        A.isub(C);
	        B.isub(D);
	      } else {
	        y.isub(x);
	        C.isub(A);
	        D.isub(B);
	      }
	    }
	    return {
	      a: C,
	      b: D,
	      gcd: y.iushln(g)
	    };
	  };

	  // This is reduced incarnation of the binary EEA
	  // above, designated to invert members of the
	  // _prime_ fields F(p) at a maximal speed
	  BN.prototype._invmp = function _invmp(p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());
	    var a = this;
	    var b = p.clone();
	    if (a.negative !== 0) {
	      a = a.umod(p);
	    } else {
	      a = a.clone();
	    }
	    var x1 = new BN(1);
	    var x2 = new BN(0);
	    var delta = b.clone();
	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
	      }
	      if (i > 0) {
	        a.iushrn(i);
	        while (i-- > 0) {
	          if (x1.isOdd()) {
	            x1.iadd(delta);
	          }
	          x1.iushrn(1);
	        }
	      }
	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
	      }
	      if (j > 0) {
	        b.iushrn(j);
	        while (j-- > 0) {
	          if (x2.isOdd()) {
	            x2.iadd(delta);
	          }
	          x2.iushrn(1);
	        }
	      }
	      if (a.cmp(b) >= 0) {
	        a.isub(b);
	        x1.isub(x2);
	      } else {
	        b.isub(a);
	        x2.isub(x1);
	      }
	    }
	    var res;
	    if (a.cmpn(1) === 0) {
	      res = x1;
	    } else {
	      res = x2;
	    }
	    if (res.cmpn(0) < 0) {
	      res.iadd(p);
	    }
	    return res;
	  };
	  BN.prototype.gcd = function gcd(num) {
	    if (this.isZero()) return num.abs();
	    if (num.isZero()) return this.abs();
	    var a = this.clone();
	    var b = num.clone();
	    a.negative = 0;
	    b.negative = 0;

	    // Remove common factor of two
	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
	      a.iushrn(1);
	      b.iushrn(1);
	    }
	    do {
	      while (a.isEven()) {
	        a.iushrn(1);
	      }
	      while (b.isEven()) {
	        b.iushrn(1);
	      }
	      var r = a.cmp(b);
	      if (r < 0) {
	        // Swap `a` and `b` to make `a` always bigger than `b`
	        var t = a;
	        a = b;
	        b = t;
	      } else if (r === 0 || b.cmpn(1) === 0) {
	        break;
	      }
	      a.isub(b);
	    } while (true);
	    return b.iushln(shift);
	  };

	  // Invert number in the field F(num)
	  BN.prototype.invm = function invm(num) {
	    return this.egcd(num).a.umod(num);
	  };
	  BN.prototype.isEven = function isEven() {
	    return (this.words[0] & 1) === 0;
	  };
	  BN.prototype.isOdd = function isOdd() {
	    return (this.words[0] & 1) === 1;
	  };

	  // And first word and num
	  BN.prototype.andln = function andln(num) {
	    return this.words[0] & num;
	  };

	  // Increment at the bit position in-line
	  BN.prototype.bincn = function bincn(bit) {
	    assert(typeof bit === 'number');
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) {
	      this._expand(s + 1);
	      this.words[s] |= q;
	      return this;
	    }

	    // Add bit and propagate, if needed
	    var carry = q;
	    for (var i = s; carry !== 0 && i < this.length; i++) {
	      var w = this.words[i] | 0;
	      w += carry;
	      carry = w >>> 26;
	      w &= 0x3ffffff;
	      this.words[i] = w;
	    }
	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }
	    return this;
	  };
	  BN.prototype.isZero = function isZero() {
	    return this.length === 1 && this.words[0] === 0;
	  };
	  BN.prototype.cmpn = function cmpn(num) {
	    var negative = num < 0;
	    if (this.negative !== 0 && !negative) return -1;
	    if (this.negative === 0 && negative) return 1;
	    this._strip();
	    var res;
	    if (this.length > 1) {
	      res = 1;
	    } else {
	      if (negative) {
	        num = -num;
	      }
	      assert(num <= 0x3ffffff, 'Number is too big');
	      var w = this.words[0] | 0;
	      res = w === num ? 0 : w < num ? -1 : 1;
	    }
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Compare two numbers and return:
	  // 1 - if `this` > `num`
	  // 0 - if `this` == `num`
	  // -1 - if `this` < `num`
	  BN.prototype.cmp = function cmp(num) {
	    if (this.negative !== 0 && num.negative === 0) return -1;
	    if (this.negative === 0 && num.negative !== 0) return 1;
	    var res = this.ucmp(num);
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Unsigned comparison
	  BN.prototype.ucmp = function ucmp(num) {
	    // At this point both numbers have the same sign
	    if (this.length > num.length) return 1;
	    if (this.length < num.length) return -1;
	    var res = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var a = this.words[i] | 0;
	      var b = num.words[i] | 0;
	      if (a === b) continue;
	      if (a < b) {
	        res = -1;
	      } else if (a > b) {
	        res = 1;
	      }
	      break;
	    }
	    return res;
	  };
	  BN.prototype.gtn = function gtn(num) {
	    return this.cmpn(num) === 1;
	  };
	  BN.prototype.gt = function gt(num) {
	    return this.cmp(num) === 1;
	  };
	  BN.prototype.gten = function gten(num) {
	    return this.cmpn(num) >= 0;
	  };
	  BN.prototype.gte = function gte(num) {
	    return this.cmp(num) >= 0;
	  };
	  BN.prototype.ltn = function ltn(num) {
	    return this.cmpn(num) === -1;
	  };
	  BN.prototype.lt = function lt(num) {
	    return this.cmp(num) === -1;
	  };
	  BN.prototype.lten = function lten(num) {
	    return this.cmpn(num) <= 0;
	  };
	  BN.prototype.lte = function lte(num) {
	    return this.cmp(num) <= 0;
	  };
	  BN.prototype.eqn = function eqn(num) {
	    return this.cmpn(num) === 0;
	  };
	  BN.prototype.eq = function eq(num) {
	    return this.cmp(num) === 0;
	  };

	  //
	  // A reduce context, could be using montgomery or something better, depending
	  // on the `m` itself.
	  //
	  BN.red = function red(num) {
	    return new Red(num);
	  };
	  BN.prototype.toRed = function toRed(ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    assert(this.negative === 0, 'red works only with positives');
	    return ctx.convertTo(this)._forceRed(ctx);
	  };
	  BN.prototype.fromRed = function fromRed() {
	    assert(this.red, 'fromRed works only with numbers in reduction context');
	    return this.red.convertFrom(this);
	  };
	  BN.prototype._forceRed = function _forceRed(ctx) {
	    this.red = ctx;
	    return this;
	  };
	  BN.prototype.forceRed = function forceRed(ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    return this._forceRed(ctx);
	  };
	  BN.prototype.redAdd = function redAdd(num) {
	    assert(this.red, 'redAdd works only with red numbers');
	    return this.red.add(this, num);
	  };
	  BN.prototype.redIAdd = function redIAdd(num) {
	    assert(this.red, 'redIAdd works only with red numbers');
	    return this.red.iadd(this, num);
	  };
	  BN.prototype.redSub = function redSub(num) {
	    assert(this.red, 'redSub works only with red numbers');
	    return this.red.sub(this, num);
	  };
	  BN.prototype.redISub = function redISub(num) {
	    assert(this.red, 'redISub works only with red numbers');
	    return this.red.isub(this, num);
	  };
	  BN.prototype.redShl = function redShl(num) {
	    assert(this.red, 'redShl works only with red numbers');
	    return this.red.shl(this, num);
	  };
	  BN.prototype.redMul = function redMul(num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.mul(this, num);
	  };
	  BN.prototype.redIMul = function redIMul(num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.imul(this, num);
	  };
	  BN.prototype.redSqr = function redSqr() {
	    assert(this.red, 'redSqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqr(this);
	  };
	  BN.prototype.redISqr = function redISqr() {
	    assert(this.red, 'redISqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.isqr(this);
	  };

	  // Square root over p
	  BN.prototype.redSqrt = function redSqrt() {
	    assert(this.red, 'redSqrt works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqrt(this);
	  };
	  BN.prototype.redInvm = function redInvm() {
	    assert(this.red, 'redInvm works only with red numbers');
	    this.red._verify1(this);
	    return this.red.invm(this);
	  };

	  // Return negative clone of `this` % `red modulo`
	  BN.prototype.redNeg = function redNeg() {
	    assert(this.red, 'redNeg works only with red numbers');
	    this.red._verify1(this);
	    return this.red.neg(this);
	  };
	  BN.prototype.redPow = function redPow(num) {
	    assert(this.red && !num.red, 'redPow(normalNum)');
	    this.red._verify1(this);
	    return this.red.pow(this, num);
	  };

	  // Prime numbers with efficient reduction
	  var primes = {
	    k256: null,
	    p224: null,
	    p192: null,
	    p25519: null
	  };

	  // Pseudo-Mersenne prime
	  function MPrime(name, p) {
	    // P = 2 ^ N - K
	    this.name = name;
	    this.p = new BN(p, 16);
	    this.n = this.p.bitLength();
	    this.k = new BN(1).iushln(this.n).isub(this.p);
	    this.tmp = this._tmp();
	  }
	  MPrime.prototype._tmp = function _tmp() {
	    var tmp = new BN(null);
	    tmp.words = new Array(Math.ceil(this.n / 13));
	    return tmp;
	  };
	  MPrime.prototype.ireduce = function ireduce(num) {
	    // Assumes that `num` is less than `P^2`
	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
	    var r = num;
	    var rlen;
	    do {
	      this.split(r, this.tmp);
	      r = this.imulK(r);
	      r = r.iadd(this.tmp);
	      rlen = r.bitLength();
	    } while (rlen > this.n);
	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
	    if (cmp === 0) {
	      r.words[0] = 0;
	      r.length = 1;
	    } else if (cmp > 0) {
	      r.isub(this.p);
	    } else {
	      if (r.strip !== undefined) {
	        // r is a BN v4 instance
	        r.strip();
	      } else {
	        // r is a BN v5 instance
	        r._strip();
	      }
	    }
	    return r;
	  };
	  MPrime.prototype.split = function split(input, out) {
	    input.iushrn(this.n, 0, out);
	  };
	  MPrime.prototype.imulK = function imulK(num) {
	    return num.imul(this.k);
	  };
	  function K256() {
	    MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	  }
	  inherits(K256, MPrime);
	  K256.prototype.split = function split(input, output) {
	    // 256 = 9 * 26 + 22
	    var mask = 0x3fffff;
	    var outLen = Math.min(input.length, 9);
	    for (var i = 0; i < outLen; i++) {
	      output.words[i] = input.words[i];
	    }
	    output.length = outLen;
	    if (input.length <= 9) {
	      input.words[0] = 0;
	      input.length = 1;
	      return;
	    }

	    // Shift by 9 limbs
	    var prev = input.words[9];
	    output.words[output.length++] = prev & mask;
	    for (i = 10; i < input.length; i++) {
	      var next = input.words[i] | 0;
	      input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
	      prev = next;
	    }
	    prev >>>= 22;
	    input.words[i - 10] = prev;
	    if (prev === 0 && input.length > 10) {
	      input.length -= 10;
	    } else {
	      input.length -= 9;
	    }
	  };
	  K256.prototype.imulK = function imulK(num) {
	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
	    num.words[num.length] = 0;
	    num.words[num.length + 1] = 0;
	    num.length += 2;

	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
	    var lo = 0;
	    for (var i = 0; i < num.length; i++) {
	      var w = num.words[i] | 0;
	      lo += w * 0x3d1;
	      num.words[i] = lo & 0x3ffffff;
	      lo = w * 0x40 + (lo / 0x4000000 | 0);
	    }

	    // Fast length reduction
	    if (num.words[num.length - 1] === 0) {
	      num.length--;
	      if (num.words[num.length - 1] === 0) {
	        num.length--;
	      }
	    }
	    return num;
	  };
	  function P224() {
	    MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	  }
	  inherits(P224, MPrime);
	  function P192() {
	    MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	  }
	  inherits(P192, MPrime);
	  function P25519() {
	    // 2 ^ 255 - 19
	    MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	  }
	  inherits(P25519, MPrime);
	  P25519.prototype.imulK = function imulK(num) {
	    // K = 0x13
	    var carry = 0;
	    for (var i = 0; i < num.length; i++) {
	      var hi = (num.words[i] | 0) * 0x13 + carry;
	      var lo = hi & 0x3ffffff;
	      hi >>>= 26;
	      num.words[i] = lo;
	      carry = hi;
	    }
	    if (carry !== 0) {
	      num.words[num.length++] = carry;
	    }
	    return num;
	  };

	  // Exported mostly for testing purposes, use plain name instead
	  BN._prime = function prime(name) {
	    // Cached version of prime
	    if (primes[name]) return primes[name];
	    var prime;
	    if (name === 'k256') {
	      prime = new K256();
	    } else if (name === 'p224') {
	      prime = new P224();
	    } else if (name === 'p192') {
	      prime = new P192();
	    } else if (name === 'p25519') {
	      prime = new P25519();
	    } else {
	      throw new Error('Unknown prime ' + name);
	    }
	    primes[name] = prime;
	    return prime;
	  };

	  //
	  // Base reduction engine
	  //
	  function Red(m) {
	    if (typeof m === 'string') {
	      var prime = BN._prime(m);
	      this.m = prime.p;
	      this.prime = prime;
	    } else {
	      assert(m.gtn(1), 'modulus must be greater than 1');
	      this.m = m;
	      this.prime = null;
	    }
	  }
	  Red.prototype._verify1 = function _verify1(a) {
	    assert(a.negative === 0, 'red works only with positives');
	    assert(a.red, 'red works only with red numbers');
	  };
	  Red.prototype._verify2 = function _verify2(a, b) {
	    assert((a.negative | b.negative) === 0, 'red works only with positives');
	    assert(a.red && a.red === b.red, 'red works only with red numbers');
	  };
	  Red.prototype.imod = function imod(a) {
	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
	    move(a, a.umod(this.m)._forceRed(this));
	    return a;
	  };
	  Red.prototype.neg = function neg(a) {
	    if (a.isZero()) {
	      return a.clone();
	    }
	    return this.m.sub(a)._forceRed(this);
	  };
	  Red.prototype.add = function add(a, b) {
	    this._verify2(a, b);
	    var res = a.add(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res._forceRed(this);
	  };
	  Red.prototype.iadd = function iadd(a, b) {
	    this._verify2(a, b);
	    var res = a.iadd(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res;
	  };
	  Red.prototype.sub = function sub(a, b) {
	    this._verify2(a, b);
	    var res = a.sub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res._forceRed(this);
	  };
	  Red.prototype.isub = function isub(a, b) {
	    this._verify2(a, b);
	    var res = a.isub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res;
	  };
	  Red.prototype.shl = function shl(a, num) {
	    this._verify1(a);
	    return this.imod(a.ushln(num));
	  };
	  Red.prototype.imul = function imul(a, b) {
	    this._verify2(a, b);
	    return this.imod(a.imul(b));
	  };
	  Red.prototype.mul = function mul(a, b) {
	    this._verify2(a, b);
	    return this.imod(a.mul(b));
	  };
	  Red.prototype.isqr = function isqr(a) {
	    return this.imul(a, a.clone());
	  };
	  Red.prototype.sqr = function sqr(a) {
	    return this.mul(a, a);
	  };
	  Red.prototype.sqrt = function sqrt(a) {
	    if (a.isZero()) return a.clone();
	    var mod3 = this.m.andln(3);
	    assert(mod3 % 2 === 1);

	    // Fast case
	    if (mod3 === 3) {
	      var pow = this.m.add(new BN(1)).iushrn(2);
	      return this.pow(a, pow);
	    }

	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
	    //
	    // Find Q and S, that Q * 2 ^ S = (P - 1)
	    var q = this.m.subn(1);
	    var s = 0;
	    while (!q.isZero() && q.andln(1) === 0) {
	      s++;
	      q.iushrn(1);
	    }
	    assert(!q.isZero());
	    var one = new BN(1).toRed(this);
	    var nOne = one.redNeg();

	    // Find quadratic non-residue
	    // NOTE: Max is such because of generalized Riemann hypothesis.
	    var lpow = this.m.subn(1).iushrn(1);
	    var z = this.m.bitLength();
	    z = new BN(2 * z * z).toRed(this);
	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
	      z.redIAdd(nOne);
	    }
	    var c = this.pow(z, q);
	    var r = this.pow(a, q.addn(1).iushrn(1));
	    var t = this.pow(a, q);
	    var m = s;
	    while (t.cmp(one) !== 0) {
	      var tmp = t;
	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
	        tmp = tmp.redSqr();
	      }
	      assert(i < m);
	      var b = this.pow(c, new BN(1).iushln(m - i - 1));
	      r = r.redMul(b);
	      c = b.redSqr();
	      t = t.redMul(c);
	      m = i;
	    }
	    return r;
	  };
	  Red.prototype.invm = function invm(a) {
	    var inv = a._invmp(this.m);
	    if (inv.negative !== 0) {
	      inv.negative = 0;
	      return this.imod(inv).redNeg();
	    } else {
	      return this.imod(inv);
	    }
	  };
	  Red.prototype.pow = function pow(a, num) {
	    if (num.isZero()) return new BN(1).toRed(this);
	    if (num.cmpn(1) === 0) return a.clone();
	    var windowSize = 4;
	    var wnd = new Array(1 << windowSize);
	    wnd[0] = new BN(1).toRed(this);
	    wnd[1] = a;
	    for (var i = 2; i < wnd.length; i++) {
	      wnd[i] = this.mul(wnd[i - 1], a);
	    }
	    var res = wnd[0];
	    var current = 0;
	    var currentLen = 0;
	    var start = num.bitLength() % 26;
	    if (start === 0) {
	      start = 26;
	    }
	    for (i = num.length - 1; i >= 0; i--) {
	      var word = num.words[i];
	      for (var j = start - 1; j >= 0; j--) {
	        var bit = word >> j & 1;
	        if (res !== wnd[0]) {
	          res = this.sqr(res);
	        }
	        if (bit === 0 && current === 0) {
	          currentLen = 0;
	          continue;
	        }
	        current <<= 1;
	        current |= bit;
	        currentLen++;
	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
	        res = this.mul(res, wnd[current]);
	        currentLen = 0;
	        current = 0;
	      }
	      start = 26;
	    }
	    return res;
	  };
	  Red.prototype.convertTo = function convertTo(num) {
	    var r = num.umod(this.m);
	    return r === num ? r.clone() : r;
	  };
	  Red.prototype.convertFrom = function convertFrom(num) {
	    var res = num.clone();
	    res.red = null;
	    return res;
	  };

	  //
	  // Montgomery method engine
	  //

	  BN.mont = function mont(num) {
	    return new Mont(num);
	  };
	  function Mont(m) {
	    Red.call(this, m);
	    this.shift = this.m.bitLength();
	    if (this.shift % 26 !== 0) {
	      this.shift += 26 - this.shift % 26;
	    }
	    this.r = new BN(1).iushln(this.shift);
	    this.r2 = this.imod(this.r.sqr());
	    this.rinv = this.r._invmp(this.m);
	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
	    this.minv = this.minv.umod(this.r);
	    this.minv = this.r.sub(this.minv);
	  }
	  inherits(Mont, Red);
	  Mont.prototype.convertTo = function convertTo(num) {
	    return this.imod(num.ushln(this.shift));
	  };
	  Mont.prototype.convertFrom = function convertFrom(num) {
	    var r = this.imod(num.mul(this.rinv));
	    r.red = null;
	    return r;
	  };
	  Mont.prototype.imul = function imul(a, b) {
	    if (a.isZero() || b.isZero()) {
	      a.words[0] = 0;
	      a.length = 1;
	      return a;
	    }
	    var t = a.imul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;
	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }
	    return res._forceRed(this);
	  };
	  Mont.prototype.mul = function mul(a, b) {
	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
	    var t = a.mul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;
	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }
	    return res._forceRed(this);
	  };
	  Mont.prototype.invm = function invm(a) {
	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
	    var res = this.imod(a._invmp(this.m).mul(this.r2));
	    return res._forceRed(this);
	  };
	})(module, commonjsGlobal);
} (bn$4));

var _BN = bn$4.exports;

var version$r = "logger/5.7.0";

var _permanentCensorErrors = false;
var _censorErrors = false;
var LogLevels = {
  debug: 1,
  "default": 2,
  info: 2,
  warning: 3,
  error: 4,
  off: 5
};
var _logLevel = LogLevels["default"];
var _globalLogger = null;
function _checkNormalize() {
  try {
    var missing = [];
    // Make sure all forms of normalization are supported
    ["NFD", "NFC", "NFKD", "NFKC"].forEach(function (form) {
      try {
        if ("test".normalize(form) !== "test") {
          throw new Error("bad normalize");
        }
        ;
      } catch (error) {
        missing.push(form);
      }
    });
    if (missing.length) {
      throw new Error("missing " + missing.join(", "));
    }
    if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
      throw new Error("broken implementation");
    }
  } catch (error) {
    return error.message;
  }
  return null;
}
var _normalizeError = _checkNormalize();
var LogLevel;
(function (LogLevel) {
  LogLevel["DEBUG"] = "DEBUG";
  LogLevel["INFO"] = "INFO";
  LogLevel["WARNING"] = "WARNING";
  LogLevel["ERROR"] = "ERROR";
  LogLevel["OFF"] = "OFF";
})(LogLevel || (LogLevel = {}));
var ErrorCode;
(function (ErrorCode) {
  ///////////////////
  // Generic Errors
  // Unknown Error
  ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
  // Not Implemented
  ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
  // Unsupported Operation
  //   - operation
  ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
  // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
  //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
  ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
  // Some sort of bad response from the server
  ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
  // Timeout
  ErrorCode["TIMEOUT"] = "TIMEOUT";
  ///////////////////
  // Operational  Errors
  // Buffer Overrun
  ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
  // Numeric Fault
  //   - operation: the operation being executed
  //   - fault: the reason this faulted
  ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
  ///////////////////
  // Argument Errors
  // Missing new operator to an object
  //  - name: The name of the class
  ErrorCode["MISSING_NEW"] = "MISSING_NEW";
  // Invalid argument (e.g. value is incompatible with type) to a function:
  //   - argument: The argument name that was invalid
  //   - value: The value of the argument
  ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
  // Missing argument to a function:
  //   - count: The number of arguments received
  //   - expectedCount: The number of arguments expected
  ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
  // Too many arguments
  //   - count: The number of arguments received
  //   - expectedCount: The number of arguments expected
  ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
  ///////////////////
  // Blockchain Errors
  // Call exception
  //  - transaction: the transaction
  //  - address?: the contract address
  //  - args?: The arguments passed into the function
  //  - method?: The Solidity method signature
  //  - errorSignature?: The EIP848 error signature
  //  - errorArgs?: The EIP848 error parameters
  //  - reason: The reason (only for EIP848 "Error(string)")
  ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
  // Insufficient funds (< value + gasLimit * gasPrice)
  //   - transaction: the transaction attempted
  ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
  // Nonce has already been used
  //   - transaction: the transaction attempted
  ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
  // The replacement fee for the transaction is too low
  //   - transaction: the transaction attempted
  ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
  // The gas limit could not be estimated
  //   - transaction: the transaction passed to estimateGas
  ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
  // The transaction was replaced by one with a higher gas price
  //   - reason: "cancelled", "replaced" or "repriced"
  //   - cancelled: true if reason == "cancelled" or reason == "replaced")
  //   - hash: original transaction hash
  //   - replacement: the full TransactionsResponse for the replacement
  //   - receipt: the receipt of the replacement
  ErrorCode["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
  ///////////////////
  // Interaction Errors
  // The user rejected the action, such as signing a message or sending
  // a transaction
  ErrorCode["ACTION_REJECTED"] = "ACTION_REJECTED";
})(ErrorCode || (ErrorCode = {}));
var HEX = "0123456789abcdef";
var Logger = /*#__PURE__*/function () {
  function Logger(version) {
    _classCallCheck(this, Logger);
    Object.defineProperty(this, "version", {
      enumerable: true,
      value: version,
      writable: false
    });
  }
  _createClass(Logger, [{
    key: "_log",
    value: function _log(logLevel, args) {
      var level = logLevel.toLowerCase();
      if (LogLevels[level] == null) {
        this.throwArgumentError("invalid log level name", "logLevel", logLevel);
      }
      if (_logLevel > LogLevels[level]) {
        return;
      }
      console.log.apply(console, args);
    }
  }, {
    key: "debug",
    value: function debug() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      this._log(Logger.levels.DEBUG, args);
    }
  }, {
    key: "info",
    value: function info() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      this._log(Logger.levels.INFO, args);
    }
  }, {
    key: "warn",
    value: function warn() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      this._log(Logger.levels.WARNING, args);
    }
  }, {
    key: "makeError",
    value: function makeError(message, code, params) {
      // Errors are being censored
      if (_censorErrors) {
        return this.makeError("censored error", code, {});
      }
      if (!code) {
        code = Logger.errors.UNKNOWN_ERROR;
      }
      if (!params) {
        params = {};
      }
      var messageDetails = [];
      Object.keys(params).forEach(function (key) {
        var value = params[key];
        try {
          if (value instanceof Uint8Array) {
            var hex = "";
            for (var i = 0; i < value.length; i++) {
              hex += HEX[value[i] >> 4];
              hex += HEX[value[i] & 0x0f];
            }
            messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
          } else {
            messageDetails.push(key + "=" + JSON.stringify(value));
          }
        } catch (error) {
          messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
        }
      });
      messageDetails.push("code=".concat(code));
      messageDetails.push("version=".concat(this.version));
      var reason = message;
      var url = "";
      switch (code) {
        case ErrorCode.NUMERIC_FAULT:
          {
            url = "NUMERIC_FAULT";
            var fault = message;
            switch (fault) {
              case "overflow":
              case "underflow":
              case "division-by-zero":
                url += "-" + fault;
                break;
              case "negative-power":
              case "negative-width":
                url += "-unsupported";
                break;
              case "unbound-bitwise-result":
                url += "-unbound-result";
                break;
            }
            break;
          }
        case ErrorCode.CALL_EXCEPTION:
        case ErrorCode.INSUFFICIENT_FUNDS:
        case ErrorCode.MISSING_NEW:
        case ErrorCode.NONCE_EXPIRED:
        case ErrorCode.REPLACEMENT_UNDERPRICED:
        case ErrorCode.TRANSACTION_REPLACED:
        case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
          url = code;
          break;
      }
      if (url) {
        message += " [ See: https:/\/links.ethers.org/v5-errors-" + url + " ]";
      }
      if (messageDetails.length) {
        message += " (" + messageDetails.join(", ") + ")";
      }
      // @TODO: Any??
      var error = new Error(message);
      error.reason = reason;
      error.code = code;
      Object.keys(params).forEach(function (key) {
        error[key] = params[key];
      });
      return error;
    }
  }, {
    key: "throwError",
    value: function throwError(message, code, params) {
      throw this.makeError(message, code, params);
    }
  }, {
    key: "throwArgumentError",
    value: function throwArgumentError(message, name, value) {
      return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
        argument: name,
        value: value
      });
    }
  }, {
    key: "assert",
    value: function assert(condition, message, code, params) {
      if (!!condition) {
        return;
      }
      this.throwError(message, code, params);
    }
  }, {
    key: "assertArgument",
    value: function assertArgument(condition, message, name, value) {
      if (!!condition) {
        return;
      }
      this.throwArgumentError(message, name, value);
    }
  }, {
    key: "checkNormalize",
    value: function checkNormalize(message) {
      if (_normalizeError) {
        this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "String.prototype.normalize",
          form: _normalizeError
        });
      }
    }
  }, {
    key: "checkSafeUint53",
    value: function checkSafeUint53(value, message) {
      if (typeof value !== "number") {
        return;
      }
      if (message == null) {
        message = "value not safe";
      }
      if (value < 0 || value >= 0x1fffffffffffff) {
        this.throwError(message, Logger.errors.NUMERIC_FAULT, {
          operation: "checkSafeInteger",
          fault: "out-of-safe-range",
          value: value
        });
      }
      if (value % 1) {
        this.throwError(message, Logger.errors.NUMERIC_FAULT, {
          operation: "checkSafeInteger",
          fault: "non-integer",
          value: value
        });
      }
    }
  }, {
    key: "checkArgumentCount",
    value: function checkArgumentCount(count, expectedCount, message) {
      if (message) {
        message = ": " + message;
      } else {
        message = "";
      }
      if (count < expectedCount) {
        this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
          count: count,
          expectedCount: expectedCount
        });
      }
      if (count > expectedCount) {
        this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
          count: count,
          expectedCount: expectedCount
        });
      }
    }
  }, {
    key: "checkNew",
    value: function checkNew(target, kind) {
      if (target === Object || target == null) {
        this.throwError("missing new", Logger.errors.MISSING_NEW, {
          name: kind.name
        });
      }
    }
  }, {
    key: "checkAbstract",
    value: function checkAbstract(target, kind) {
      if (target === kind) {
        this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, {
          name: target.name,
          operation: "new"
        });
      } else if (target === Object || target == null) {
        this.throwError("missing new", Logger.errors.MISSING_NEW, {
          name: kind.name
        });
      }
    }
  }], [{
    key: "globalLogger",
    value: function globalLogger() {
      if (!_globalLogger) {
        _globalLogger = new Logger(version$r);
      }
      return _globalLogger;
    }
  }, {
    key: "setCensorship",
    value: function setCensorship(censorship, permanent) {
      if (!censorship && permanent) {
        this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "setCensorship"
        });
      }
      if (_permanentCensorErrors) {
        if (!censorship) {
          return;
        }
        this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "setCensorship"
        });
      }
      _censorErrors = !!censorship;
      _permanentCensorErrors = !!permanent;
    }
  }, {
    key: "setLogLevel",
    value: function setLogLevel(logLevel) {
      var level = LogLevels[logLevel.toLowerCase()];
      if (level == null) {
        Logger.globalLogger().warn("invalid log level - " + logLevel);
        return;
      }
      _logLevel = level;
    }
  }, {
    key: "from",
    value: function from(version) {
      return new Logger(version);
    }
  }]);
  return Logger;
}();
Logger.errors = ErrorCode;
Logger.levels = LogLevel;

var lib_esm$k = /*#__PURE__*/Object.freeze({
  __proto__: null,
  get LogLevel () { return LogLevel; },
  get ErrorCode () { return ErrorCode; },
  Logger: Logger
});

var version$q = "bytes/5.7.0";

var logger$K = new Logger(version$q);
///////////////////////////////
function isHexable(value) {
  return !!value.toHexString;
}
function addSlice(array) {
  if (array.slice) {
    return array;
  }
  array.slice = function () {
    var args = Array.prototype.slice.call(arguments);
    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
  };
  return array;
}
function isBytesLike(value) {
  return isHexString$1(value) && !(value.length % 2) || isBytes(value);
}
function isInteger(value) {
  return typeof value === "number" && value == value && value % 1 === 0;
}
function isBytes(value) {
  if (value == null) {
    return false;
  }
  if (value.constructor === Uint8Array) {
    return true;
  }
  if (typeof value === "string") {
    return false;
  }
  if (!isInteger(value.length) || value.length < 0) {
    return false;
  }
  for (var i = 0; i < value.length; i++) {
    var v = value[i];
    if (!isInteger(v) || v < 0 || v >= 256) {
      return false;
    }
  }
  return true;
}
function arrayify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger$K.checkSafeUint53(value, "invalid arrayify value");
    var result = [];
    while (value) {
      result.unshift(value & 0xff);
      value = parseInt(String(value / 256));
    }
    if (result.length === 0) {
      result.push(0);
    }
    return addSlice(new Uint8Array(result));
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    value = value.toHexString();
  }
  if (isHexString$1(value)) {
    var hex = value.substring(2);
    if (hex.length % 2) {
      if (options.hexPad === "left") {
        hex = "0" + hex;
      } else if (options.hexPad === "right") {
        hex += "0";
      } else {
        logger$K.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    var _result = [];
    for (var i = 0; i < hex.length; i += 2) {
      _result.push(parseInt(hex.substring(i, i + 2), 16));
    }
    return addSlice(new Uint8Array(_result));
  }
  if (isBytes(value)) {
    return addSlice(new Uint8Array(value));
  }
  return logger$K.throwArgumentError("invalid arrayify value", "value", value);
}
function concat(items) {
  var objects = items.map(function (item) {
    return arrayify(item);
  });
  var length = objects.reduce(function (accum, item) {
    return accum + item.length;
  }, 0);
  var result = new Uint8Array(length);
  objects.reduce(function (offset, object) {
    result.set(object, offset);
    return offset + object.length;
  }, 0);
  return addSlice(result);
}
function stripZeros(value) {
  var result = arrayify(value);
  if (result.length === 0) {
    return result;
  }
  // Find the first non-zero entry
  var start = 0;
  while (start < result.length && result[start] === 0) {
    start++;
  }
  // If we started with zeros, strip them
  if (start) {
    result = result.slice(start);
  }
  return result;
}
function zeroPad(value, length) {
  value = arrayify(value);
  if (value.length > length) {
    logger$K.throwArgumentError("value out of range", "value", arguments[0]);
  }
  var result = new Uint8Array(length);
  result.set(value, length - value.length);
  return addSlice(result);
}
function isHexString$1(value, length) {
  if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (length && value.length !== 2 + 2 * length) {
    return false;
  }
  return true;
}
var HexCharacters = "0123456789abcdef";
function hexlify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger$K.checkSafeUint53(value, "invalid hexlify value");
    var hex = "";
    while (value) {
      hex = HexCharacters[value & 0xf] + hex;
      value = Math.floor(value / 16);
    }
    if (hex.length) {
      if (hex.length % 2) {
        hex = "0" + hex;
      }
      return "0x" + hex;
    }
    return "0x00";
  }
  if (typeof value === "bigint") {
    value = value.toString(16);
    if (value.length % 2) {
      return "0x0" + value;
    }
    return "0x" + value;
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    return value.toHexString();
  }
  if (isHexString$1(value)) {
    if (value.length % 2) {
      if (options.hexPad === "left") {
        value = "0x0" + value.substring(2);
      } else if (options.hexPad === "right") {
        value += "0";
      } else {
        logger$K.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    return value.toLowerCase();
  }
  if (isBytes(value)) {
    var result = "0x";
    for (var i = 0; i < value.length; i++) {
      var v = value[i];
      result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
    }
    return result;
  }
  return logger$K.throwArgumentError("invalid hexlify value", "value", value);
}
/*
function unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {
    if (typeof(value) === "string" && value.length % 2 && value.substring(0, 2) === "0x") {
        return "0x0" + value.substring(2);
    }
    return value;
}
*/
function hexDataLength(data) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString$1(data) || data.length % 2) {
    return null;
  }
  return (data.length - 2) / 2;
}
function hexDataSlice(data, offset, endOffset) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString$1(data) || data.length % 2) {
    logger$K.throwArgumentError("invalid hexData", "value", data);
  }
  offset = 2 + 2 * offset;
  if (endOffset != null) {
    return "0x" + data.substring(offset, 2 + 2 * endOffset);
  }
  return "0x" + data.substring(offset);
}
function hexConcat(items) {
  var result = "0x";
  items.forEach(function (item) {
    result += hexlify(item).substring(2);
  });
  return result;
}
function hexValue(value) {
  var trimmed = hexStripZeros(hexlify(value, {
    hexPad: "left"
  }));
  if (trimmed === "0x") {
    return "0x0";
  }
  return trimmed;
}
function hexStripZeros(value) {
  if (typeof value !== "string") {
    value = hexlify(value);
  }
  if (!isHexString$1(value)) {
    logger$K.throwArgumentError("invalid hex string", "value", value);
  }
  value = value.substring(2);
  var offset = 0;
  while (offset < value.length && value[offset] === "0") {
    offset++;
  }
  return "0x" + value.substring(offset);
}
function hexZeroPad(value, length) {
  if (typeof value !== "string") {
    value = hexlify(value);
  } else if (!isHexString$1(value)) {
    logger$K.throwArgumentError("invalid hex string", "value", value);
  }
  if (value.length > 2 * length + 2) {
    logger$K.throwArgumentError("value out of range", "value", arguments[1]);
  }
  while (value.length < 2 * length + 2) {
    value = "0x0" + value.substring(2);
  }
  return value;
}
function splitSignature(signature) {
  var result = {
    r: "0x",
    s: "0x",
    _vs: "0x",
    recoveryParam: 0,
    v: 0,
    yParityAndS: "0x",
    compact: "0x"
  };
  if (isBytesLike(signature)) {
    var bytes = arrayify(signature);
    // Get the r, s and v
    if (bytes.length === 64) {
      // EIP-2098; pull the v from the top bit of s and clear it
      result.v = 27 + (bytes[32] >> 7);
      bytes[32] &= 0x7f;
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
    } else if (bytes.length === 65) {
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
      result.v = bytes[64];
    } else {
      logger$K.throwArgumentError("invalid signature string", "signature", signature);
    }
    // Allow a recid to be used as the v
    if (result.v < 27) {
      if (result.v === 0 || result.v === 1) {
        result.v += 27;
      } else {
        logger$K.throwArgumentError("signature invalid v byte", "signature", signature);
      }
    }
    // Compute recoveryParam from v
    result.recoveryParam = 1 - result.v % 2;
    // Compute _vs from recoveryParam and s
    if (result.recoveryParam) {
      bytes[32] |= 0x80;
    }
    result._vs = hexlify(bytes.slice(32, 64));
  } else {
    result.r = signature.r;
    result.s = signature.s;
    result.v = signature.v;
    result.recoveryParam = signature.recoveryParam;
    result._vs = signature._vs;
    // If the _vs is available, use it to populate missing s, v and recoveryParam
    // and verify non-missing s, v and recoveryParam
    if (result._vs != null) {
      var _vs2 = zeroPad(arrayify(result._vs), 32);
      result._vs = hexlify(_vs2);
      // Set or check the recid
      var recoveryParam = _vs2[0] >= 128 ? 1 : 0;
      if (result.recoveryParam == null) {
        result.recoveryParam = recoveryParam;
      } else if (result.recoveryParam !== recoveryParam) {
        logger$K.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
      }
      // Set or check the s
      _vs2[0] &= 0x7f;
      var s = hexlify(_vs2);
      if (result.s == null) {
        result.s = s;
      } else if (result.s !== s) {
        logger$K.throwArgumentError("signature v mismatch _vs", "signature", signature);
      }
    }
    // Use recid and v to populate each other
    if (result.recoveryParam == null) {
      if (result.v == null) {
        logger$K.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
      } else if (result.v === 0 || result.v === 1) {
        result.recoveryParam = result.v;
      } else {
        result.recoveryParam = 1 - result.v % 2;
      }
    } else {
      if (result.v == null) {
        result.v = 27 + result.recoveryParam;
      } else {
        var recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;
        if (result.recoveryParam !== recId) {
          logger$K.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
        }
      }
    }
    if (result.r == null || !isHexString$1(result.r)) {
      logger$K.throwArgumentError("signature missing or invalid r", "signature", signature);
    } else {
      result.r = hexZeroPad(result.r, 32);
    }
    if (result.s == null || !isHexString$1(result.s)) {
      logger$K.throwArgumentError("signature missing or invalid s", "signature", signature);
    } else {
      result.s = hexZeroPad(result.s, 32);
    }
    var vs = arrayify(result.s);
    if (vs[0] >= 128) {
      logger$K.throwArgumentError("signature s out of range", "signature", signature);
    }
    if (result.recoveryParam) {
      vs[0] |= 0x80;
    }
    var _vs = hexlify(vs);
    if (result._vs) {
      if (!isHexString$1(result._vs)) {
        logger$K.throwArgumentError("signature invalid _vs", "signature", signature);
      }
      result._vs = hexZeroPad(result._vs, 32);
    }
    // Set or check the _vs
    if (result._vs == null) {
      result._vs = _vs;
    } else if (result._vs !== _vs) {
      logger$K.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
    }
  }
  result.yParityAndS = result._vs;
  result.compact = result.r + result.yParityAndS.substring(2);
  return result;
}
function joinSignature(signature) {
  signature = splitSignature(signature);
  return hexlify(concat([signature.r, signature.s, signature.recoveryParam ? "0x1c" : "0x1b"]));
}

var lib_esm$j = /*#__PURE__*/Object.freeze({
  __proto__: null,
  isBytesLike: isBytesLike,
  isBytes: isBytes,
  arrayify: arrayify,
  concat: concat,
  stripZeros: stripZeros,
  zeroPad: zeroPad,
  isHexString: isHexString$1,
  hexlify: hexlify,
  hexDataLength: hexDataLength,
  hexDataSlice: hexDataSlice,
  hexConcat: hexConcat,
  hexValue: hexValue,
  hexStripZeros: hexStripZeros,
  hexZeroPad: hexZeroPad,
  splitSignature: splitSignature,
  joinSignature: joinSignature
});

var version$p = "bignumber/5.7.0";

var BN$1 = _BN.BN;
var logger$J = new Logger(version$p);
var _constructorGuard$4 = {};
var MAX_SAFE = 0x1fffffffffffff;
function isBigNumberish(value) {
  return value != null && (BigNumber.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || isHexString$1(value) || typeof value === "bigint" || isBytes(value));
}
// Only warn about passing 10 into radix once
var _warnedToStringRadix = false;
var BigNumber = /*#__PURE__*/function () {
  function BigNumber(constructorGuard, hex) {
    _classCallCheck(this, BigNumber);
    if (constructorGuard !== _constructorGuard$4) {
      logger$J.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new (BigNumber)"
      });
    }
    this._hex = hex;
    this._isBigNumber = true;
    Object.freeze(this);
  }
  _createClass(BigNumber, [{
    key: "fromTwos",
    value: function fromTwos(value) {
      return toBigNumber(toBN(this).fromTwos(value));
    }
  }, {
    key: "toTwos",
    value: function toTwos(value) {
      return toBigNumber(toBN(this).toTwos(value));
    }
  }, {
    key: "abs",
    value: function abs() {
      if (this._hex[0] === "-") {
        return BigNumber.from(this._hex.substring(1));
      }
      return this;
    }
  }, {
    key: "add",
    value: function add(other) {
      return toBigNumber(toBN(this).add(toBN(other)));
    }
  }, {
    key: "sub",
    value: function sub(other) {
      return toBigNumber(toBN(this).sub(toBN(other)));
    }
  }, {
    key: "div",
    value: function div(other) {
      var o = BigNumber.from(other);
      if (o.isZero()) {
        throwFault$1("division-by-zero", "div");
      }
      return toBigNumber(toBN(this).div(toBN(other)));
    }
  }, {
    key: "mul",
    value: function mul(other) {
      return toBigNumber(toBN(this).mul(toBN(other)));
    }
  }, {
    key: "mod",
    value: function mod(other) {
      var value = toBN(other);
      if (value.isNeg()) {
        throwFault$1("division-by-zero", "mod");
      }
      return toBigNumber(toBN(this).umod(value));
    }
  }, {
    key: "pow",
    value: function pow(other) {
      var value = toBN(other);
      if (value.isNeg()) {
        throwFault$1("negative-power", "pow");
      }
      return toBigNumber(toBN(this).pow(value));
    }
  }, {
    key: "and",
    value: function and(other) {
      var value = toBN(other);
      if (this.isNegative() || value.isNeg()) {
        throwFault$1("unbound-bitwise-result", "and");
      }
      return toBigNumber(toBN(this).and(value));
    }
  }, {
    key: "or",
    value: function or(other) {
      var value = toBN(other);
      if (this.isNegative() || value.isNeg()) {
        throwFault$1("unbound-bitwise-result", "or");
      }
      return toBigNumber(toBN(this).or(value));
    }
  }, {
    key: "xor",
    value: function xor(other) {
      var value = toBN(other);
      if (this.isNegative() || value.isNeg()) {
        throwFault$1("unbound-bitwise-result", "xor");
      }
      return toBigNumber(toBN(this).xor(value));
    }
  }, {
    key: "mask",
    value: function mask(value) {
      if (this.isNegative() || value < 0) {
        throwFault$1("negative-width", "mask");
      }
      return toBigNumber(toBN(this).maskn(value));
    }
  }, {
    key: "shl",
    value: function shl(value) {
      if (this.isNegative() || value < 0) {
        throwFault$1("negative-width", "shl");
      }
      return toBigNumber(toBN(this).shln(value));
    }
  }, {
    key: "shr",
    value: function shr(value) {
      if (this.isNegative() || value < 0) {
        throwFault$1("negative-width", "shr");
      }
      return toBigNumber(toBN(this).shrn(value));
    }
  }, {
    key: "eq",
    value: function eq(other) {
      return toBN(this).eq(toBN(other));
    }
  }, {
    key: "lt",
    value: function lt(other) {
      return toBN(this).lt(toBN(other));
    }
  }, {
    key: "lte",
    value: function lte(other) {
      return toBN(this).lte(toBN(other));
    }
  }, {
    key: "gt",
    value: function gt(other) {
      return toBN(this).gt(toBN(other));
    }
  }, {
    key: "gte",
    value: function gte(other) {
      return toBN(this).gte(toBN(other));
    }
  }, {
    key: "isNegative",
    value: function isNegative() {
      return this._hex[0] === "-";
    }
  }, {
    key: "isZero",
    value: function isZero() {
      return toBN(this).isZero();
    }
  }, {
    key: "toNumber",
    value: function toNumber() {
      try {
        return toBN(this).toNumber();
      } catch (error) {
        throwFault$1("overflow", "toNumber", this.toString());
      }
      return null;
    }
  }, {
    key: "toBigInt",
    value: function toBigInt() {
      try {
        return BigInt(this.toString());
      } catch (e) {}
      return logger$J.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
        value: this.toString()
      });
    }
  }, {
    key: "toString",
    value: function toString() {
      // Lots of people expect this, which we do not support, so check (See: #889)
      if (arguments.length > 0) {
        if (arguments[0] === 10) {
          if (!_warnedToStringRadix) {
            _warnedToStringRadix = true;
            logger$J.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
          }
        } else if (arguments[0] === 16) {
          logger$J.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
        } else {
          logger$J.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
        }
      }
      return toBN(this).toString(10);
    }
  }, {
    key: "toHexString",
    value: function toHexString() {
      return this._hex;
    }
  }, {
    key: "toJSON",
    value: function toJSON(key) {
      return {
        type: "BigNumber",
        hex: this.toHexString()
      };
    }
  }], [{
    key: "from",
    value: function from(value) {
      if (value instanceof BigNumber) {
        return value;
      }
      if (typeof value === "string") {
        if (value.match(/^-?0x[0-9a-f]+$/i)) {
          return new BigNumber(_constructorGuard$4, toHex$1(value));
        }
        if (value.match(/^-?[0-9]+$/)) {
          return new BigNumber(_constructorGuard$4, toHex$1(new BN$1(value)));
        }
        return logger$J.throwArgumentError("invalid BigNumber string", "value", value);
      }
      if (typeof value === "number") {
        if (value % 1) {
          throwFault$1("underflow", "BigNumber.from", value);
        }
        if (value >= MAX_SAFE || value <= -MAX_SAFE) {
          throwFault$1("overflow", "BigNumber.from", value);
        }
        return BigNumber.from(String(value));
      }
      var anyValue = value;
      if (typeof anyValue === "bigint") {
        return BigNumber.from(anyValue.toString());
      }
      if (isBytes(anyValue)) {
        return BigNumber.from(hexlify(anyValue));
      }
      if (anyValue) {
        // Hexable interface (takes priority)
        if (anyValue.toHexString) {
          var hex = anyValue.toHexString();
          if (typeof hex === "string") {
            return BigNumber.from(hex);
          }
        } else {
          // For now, handle legacy JSON-ified values (goes away in v6)
          var _hex = anyValue._hex;
          // New-form JSON
          if (_hex == null && anyValue.type === "BigNumber") {
            _hex = anyValue.hex;
          }
          if (typeof _hex === "string") {
            if (isHexString$1(_hex) || _hex[0] === "-" && isHexString$1(_hex.substring(1))) {
              return BigNumber.from(_hex);
            }
          }
        }
      }
      return logger$J.throwArgumentError("invalid BigNumber value", "value", value);
    }
  }, {
    key: "isBigNumber",
    value: function isBigNumber(value) {
      return !!(value && value._isBigNumber);
    }
  }]);
  return BigNumber;
}();
// Normalize the hex string
function toHex$1(value) {
  // For BN, call on the hex string
  if (typeof value !== "string") {
    return toHex$1(value.toString(16));
  }
  // If negative, prepend the negative sign to the normalized positive value
  if (value[0] === "-") {
    // Strip off the negative sign
    value = value.substring(1);
    // Cannot have multiple negative signs (e.g. "--0x04")
    if (value[0] === "-") {
      logger$J.throwArgumentError("invalid hex", "value", value);
    }
    // Call toHex on the positive component
    value = toHex$1(value);
    // Do not allow "-0x00"
    if (value === "0x00") {
      return value;
    }
    // Negate the value
    return "-" + value;
  }
  // Add a "0x" prefix if missing
  if (value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  // Normalize zero
  if (value === "0x") {
    return "0x00";
  }
  // Make the string even length
  if (value.length % 2) {
    value = "0x0" + value.substring(2);
  }
  // Trim to smallest even-length string
  while (value.length > 4 && value.substring(0, 4) === "0x00") {
    value = "0x" + value.substring(4);
  }
  return value;
}
function toBigNumber(value) {
  return BigNumber.from(toHex$1(value));
}
function toBN(value) {
  var hex = BigNumber.from(value).toHexString();
  if (hex[0] === "-") {
    return new BN$1("-" + hex.substring(3), 16);
  }
  return new BN$1(hex.substring(2), 16);
}
function throwFault$1(fault, operation, value) {
  var params = {
    fault: fault,
    operation: operation
  };
  if (value != null) {
    params.value = value;
  }
  return logger$J.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
}
// value should have no prefix
function _base36To16(value) {
  return new BN$1(value, 36).toString(16);
}
// value should have no prefix
function _base16To36(value) {
  return new BN$1(value, 16).toString(36);
}

var logger$I = new Logger(version$p);
var _constructorGuard$3 = {};
var Zero$2 = BigNumber.from(0);
var NegativeOne$2 = BigNumber.from(-1);
function throwFault(message, fault, operation, value) {
  var params = {
    fault: fault,
    operation: operation
  };
  if (value !== undefined) {
    params.value = value;
  }
  return logger$I.throwError(message, Logger.errors.NUMERIC_FAULT, params);
}
// Constant to pull zeros from for multipliers
var zeros = "0";
while (zeros.length < 256) {
  zeros += zeros;
}
// Returns a string "1" followed by decimal "0"s
function getMultiplier(decimals) {
  if (typeof decimals !== "number") {
    try {
      decimals = BigNumber.from(decimals).toNumber();
    } catch (e) {}
  }
  if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
    return "1" + zeros.substring(0, decimals);
  }
  return logger$I.throwArgumentError("invalid decimal size", "decimals", decimals);
}
function formatFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  var multiplier = getMultiplier(decimals);
  // Make sure wei is a big number (convert as necessary)
  value = BigNumber.from(value);
  var negative = value.lt(Zero$2);
  if (negative) {
    value = value.mul(NegativeOne$2);
  }
  var fraction = value.mod(multiplier).toString();
  while (fraction.length < multiplier.length - 1) {
    fraction = "0" + fraction;
  }
  // Strip training 0
  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
  var whole = value.div(multiplier).toString();
  if (multiplier.length === 1) {
    value = whole;
  } else {
    value = whole + "." + fraction;
  }
  if (negative) {
    value = "-" + value;
  }
  return value;
}
function parseFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  var multiplier = getMultiplier(decimals);
  if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) {
    logger$I.throwArgumentError("invalid decimal value", "value", value);
  }
  // Is it negative?
  var negative = value.substring(0, 1) === "-";
  if (negative) {
    value = value.substring(1);
  }
  if (value === ".") {
    logger$I.throwArgumentError("missing value", "value", value);
  }
  // Split it into a whole and fractional part
  var comps = value.split(".");
  if (comps.length > 2) {
    logger$I.throwArgumentError("too many decimal points", "value", value);
  }
  var whole = comps[0],
    fraction = comps[1];
  if (!whole) {
    whole = "0";
  }
  if (!fraction) {
    fraction = "0";
  }
  // Trim trailing zeros
  while (fraction[fraction.length - 1] === "0") {
    fraction = fraction.substring(0, fraction.length - 1);
  }
  // Check the fraction doesn't exceed our decimals size
  if (fraction.length > multiplier.length - 1) {
    throwFault("fractional component exceeds decimals", "underflow", "parseFixed");
  }
  // If decimals is 0, we have an empty string for fraction
  if (fraction === "") {
    fraction = "0";
  }
  // Fully pad the string with zeros to get to wei
  while (fraction.length < multiplier.length - 1) {
    fraction += "0";
  }
  var wholeValue = BigNumber.from(whole);
  var fractionValue = BigNumber.from(fraction);
  var wei = wholeValue.mul(multiplier).add(fractionValue);
  if (negative) {
    wei = wei.mul(NegativeOne$2);
  }
  return wei;
}
var FixedFormat = /*#__PURE__*/function () {
  function FixedFormat(constructorGuard, signed, width, decimals) {
    _classCallCheck(this, FixedFormat);
    if (constructorGuard !== _constructorGuard$3) {
      logger$I.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }
    this.signed = signed;
    this.width = width;
    this.decimals = decimals;
    this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
    this._multiplier = getMultiplier(decimals);
    Object.freeze(this);
  }
  _createClass(FixedFormat, null, [{
    key: "from",
    value: function from(value) {
      if (value instanceof FixedFormat) {
        return value;
      }
      if (typeof value === "number") {
        value = "fixed128x".concat(value);
      }
      var signed = true;
      var width = 128;
      var decimals = 18;
      if (typeof value === "string") {
        if (value === "fixed") ; else if (value === "ufixed") {
          signed = false;
        } else {
          var match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
          if (!match) {
            logger$I.throwArgumentError("invalid fixed format", "format", value);
          }
          signed = match[1] !== "u";
          width = parseInt(match[2]);
          decimals = parseInt(match[3]);
        }
      } else if (value) {
        var check = function check(key, type, defaultValue) {
          if (value[key] == null) {
            return defaultValue;
          }
          if (typeof value[key] !== type) {
            logger$I.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
          }
          return value[key];
        };
        signed = check("signed", "boolean", signed);
        width = check("width", "number", width);
        decimals = check("decimals", "number", decimals);
      }
      if (width % 8) {
        logger$I.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
      }
      if (decimals > 80) {
        logger$I.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
      }
      return new FixedFormat(_constructorGuard$3, signed, width, decimals);
    }
  }]);
  return FixedFormat;
}();
var FixedNumber = /*#__PURE__*/function () {
  function FixedNumber(constructorGuard, hex, value, format) {
    _classCallCheck(this, FixedNumber);
    if (constructorGuard !== _constructorGuard$3) {
      logger$I.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }
    this.format = format;
    this._hex = hex;
    this._value = value;
    this._isFixedNumber = true;
    Object.freeze(this);
  }
  _createClass(FixedNumber, [{
    key: "_checkFormat",
    value: function _checkFormat(other) {
      if (this.format.name !== other.format.name) {
        logger$I.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
      }
    }
  }, {
    key: "addUnsafe",
    value: function addUnsafe(other) {
      this._checkFormat(other);
      var a = parseFixed(this._value, this.format.decimals);
      var b = parseFixed(other._value, other.format.decimals);
      return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
    }
  }, {
    key: "subUnsafe",
    value: function subUnsafe(other) {
      this._checkFormat(other);
      var a = parseFixed(this._value, this.format.decimals);
      var b = parseFixed(other._value, other.format.decimals);
      return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
    }
  }, {
    key: "mulUnsafe",
    value: function mulUnsafe(other) {
      this._checkFormat(other);
      var a = parseFixed(this._value, this.format.decimals);
      var b = parseFixed(other._value, other.format.decimals);
      return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
    }
  }, {
    key: "divUnsafe",
    value: function divUnsafe(other) {
      this._checkFormat(other);
      var a = parseFixed(this._value, this.format.decimals);
      var b = parseFixed(other._value, other.format.decimals);
      return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
    }
  }, {
    key: "floor",
    value: function floor() {
      var comps = this.toString().split(".");
      if (comps.length === 1) {
        comps.push("0");
      }
      var result = FixedNumber.from(comps[0], this.format);
      var hasFraction = !comps[1].match(/^(0*)$/);
      if (this.isNegative() && hasFraction) {
        result = result.subUnsafe(ONE.toFormat(result.format));
      }
      return result;
    }
  }, {
    key: "ceiling",
    value: function ceiling() {
      var comps = this.toString().split(".");
      if (comps.length === 1) {
        comps.push("0");
      }
      var result = FixedNumber.from(comps[0], this.format);
      var hasFraction = !comps[1].match(/^(0*)$/);
      if (!this.isNegative() && hasFraction) {
        result = result.addUnsafe(ONE.toFormat(result.format));
      }
      return result;
    }
    // @TODO: Support other rounding algorithms
  }, {
    key: "round",
    value: function round(decimals) {
      if (decimals == null) {
        decimals = 0;
      }
      // If we are already in range, we're done
      var comps = this.toString().split(".");
      if (comps.length === 1) {
        comps.push("0");
      }
      if (decimals < 0 || decimals > 80 || decimals % 1) {
        logger$I.throwArgumentError("invalid decimal count", "decimals", decimals);
      }
      if (comps[1].length <= decimals) {
        return this;
      }
      var factor = FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
      var bump = BUMP.toFormat(this.format);
      return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
    }
  }, {
    key: "isZero",
    value: function isZero() {
      return this._value === "0.0" || this._value === "0";
    }
  }, {
    key: "isNegative",
    value: function isNegative() {
      return this._value[0] === "-";
    }
  }, {
    key: "toString",
    value: function toString() {
      return this._value;
    }
  }, {
    key: "toHexString",
    value: function toHexString(width) {
      if (width == null) {
        return this._hex;
      }
      if (width % 8) {
        logger$I.throwArgumentError("invalid byte width", "width", width);
      }
      var hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
      return hexZeroPad(hex, width / 8);
    }
  }, {
    key: "toUnsafeFloat",
    value: function toUnsafeFloat() {
      return parseFloat(this.toString());
    }
  }, {
    key: "toFormat",
    value: function toFormat(format) {
      return FixedNumber.fromString(this._value, format);
    }
  }], [{
    key: "fromValue",
    value: function fromValue(value, decimals, format) {
      // If decimals looks more like a format, and there is no format, shift the parameters
      if (format == null && decimals != null && !isBigNumberish(decimals)) {
        format = decimals;
        decimals = null;
      }
      if (decimals == null) {
        decimals = 0;
      }
      if (format == null) {
        format = "fixed";
      }
      return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
    }
  }, {
    key: "fromString",
    value: function fromString(value, format) {
      if (format == null) {
        format = "fixed";
      }
      var fixedFormat = FixedFormat.from(format);
      var numeric = parseFixed(value, fixedFormat.decimals);
      if (!fixedFormat.signed && numeric.lt(Zero$2)) {
        throwFault("unsigned value cannot be negative", "overflow", "value", value);
      }
      var hex = null;
      if (fixedFormat.signed) {
        hex = numeric.toTwos(fixedFormat.width).toHexString();
      } else {
        hex = numeric.toHexString();
        hex = hexZeroPad(hex, fixedFormat.width / 8);
      }
      var decimal = formatFixed(numeric, fixedFormat.decimals);
      return new FixedNumber(_constructorGuard$3, hex, decimal, fixedFormat);
    }
  }, {
    key: "fromBytes",
    value: function fromBytes(value, format) {
      if (format == null) {
        format = "fixed";
      }
      var fixedFormat = FixedFormat.from(format);
      if (arrayify(value).length > fixedFormat.width / 8) {
        throw new Error("overflow");
      }
      var numeric = BigNumber.from(value);
      if (fixedFormat.signed) {
        numeric = numeric.fromTwos(fixedFormat.width);
      }
      var hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
      var decimal = formatFixed(numeric, fixedFormat.decimals);
      return new FixedNumber(_constructorGuard$3, hex, decimal, fixedFormat);
    }
  }, {
    key: "from",
    value: function from(value, format) {
      if (typeof value === "string") {
        return FixedNumber.fromString(value, format);
      }
      if (isBytes(value)) {
        return FixedNumber.fromBytes(value, format);
      }
      try {
        return FixedNumber.fromValue(value, 0, format);
      } catch (error) {
        // Allow NUMERIC_FAULT to bubble up
        if (error.code !== Logger.errors.INVALID_ARGUMENT) {
          throw error;
        }
      }
      return logger$I.throwArgumentError("invalid FixedNumber value", "value", value);
    }
  }, {
    key: "isFixedNumber",
    value: function isFixedNumber(value) {
      return !!(value && value._isFixedNumber);
    }
  }]);
  return FixedNumber;
}();
var ONE = FixedNumber.from(1);
var BUMP = FixedNumber.from("0.5");

var version$o = "properties/5.7.0";

var __awaiter$j = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger$H = new Logger(version$o);
function defineReadOnly(object, name, value) {
  Object.defineProperty(object, name, {
    enumerable: true,
    value: value,
    writable: false
  });
}
// Crawl up the constructor chain to find a static method
function getStatic(ctor, key) {
  for (var i = 0; i < 32; i++) {
    if (ctor[key]) {
      return ctor[key];
    }
    if (!ctor.prototype || typeof ctor.prototype !== "object") {
      break;
    }
    ctor = Object.getPrototypeOf(ctor.prototype).constructor;
  }
  return null;
}
function resolveProperties(object) {
  return __awaiter$j(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
    var promises, results;
    return regenerator.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            promises = Object.keys(object).map(function (key) {
              var value = object[key];
              return Promise.resolve(value).then(function (v) {
                return {
                  key: key,
                  value: v
                };
              });
            });
            _context.next = 3;
            return Promise.all(promises);
          case 3:
            results = _context.sent;
            return _context.abrupt("return", results.reduce(function (accum, result) {
              accum[result.key] = result.value;
              return accum;
            }, {}));
          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
}
function checkProperties(object, properties) {
  if (!object || typeof object !== "object") {
    logger$H.throwArgumentError("invalid object", "object", object);
  }
  Object.keys(object).forEach(function (key) {
    if (!properties[key]) {
      logger$H.throwArgumentError("invalid object key - " + key, "transaction:" + key, object);
    }
  });
}
function shallowCopy(object) {
  var result = {};
  for (var key in object) {
    result[key] = object[key];
  }
  return result;
}
var opaque = {
  bigint: true,
  "boolean": true,
  "function": true,
  number: true,
  string: true
};
function _isFrozen(object) {
  // Opaque objects are not mutable, so safe to copy by assignment
  if (object === undefined || object === null || opaque[typeof object]) {
    return true;
  }
  if (Array.isArray(object) || typeof object === "object") {
    if (!Object.isFrozen(object)) {
      return false;
    }
    var keys = Object.keys(object);
    for (var i = 0; i < keys.length; i++) {
      var value = null;
      try {
        value = object[keys[i]];
      } catch (error) {
        // If accessing a value triggers an error, it is a getter
        // designed to do so (e.g. Result) and is therefore "frozen"
        continue;
      }
      if (!_isFrozen(value)) {
        return false;
      }
    }
    return true;
  }
  return logger$H.throwArgumentError("Cannot deepCopy ".concat(typeof object), "object", object);
}
// Returns a new copy of object, such that no properties may be replaced.
// New properties may be added only to objects.
function _deepCopy(object) {
  if (_isFrozen(object)) {
    return object;
  }
  // Arrays are mutable, so we need to create a copy
  if (Array.isArray(object)) {
    return Object.freeze(object.map(function (item) {
      return deepCopy(item);
    }));
  }
  if (typeof object === "object") {
    var result = {};
    for (var key in object) {
      var value = object[key];
      if (value === undefined) {
        continue;
      }
      defineReadOnly(result, key, deepCopy(value));
    }
    return result;
  }
  return logger$H.throwArgumentError("Cannot deepCopy ".concat(typeof object), "object", object);
}
function deepCopy(object) {
  return _deepCopy(object);
}
var Description = /*#__PURE__*/_createClass(function Description(info) {
  _classCallCheck(this, Description);
  for (var key in info) {
    this[key] = deepCopy(info[key]);
  }
});

var lib_esm$i = /*#__PURE__*/Object.freeze({
  __proto__: null,
  defineReadOnly: defineReadOnly,
  getStatic: getStatic,
  resolveProperties: resolveProperties,
  checkProperties: checkProperties,
  shallowCopy: shallowCopy,
  deepCopy: deepCopy,
  Description: Description
});

var version$n = "abi/5.7.0";

function _createSuper$x(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$x(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$x() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var logger$G = new Logger(version$n);
var _constructorGuard$2 = {};
var ModifiersBytes = {
  calldata: true,
  memory: true,
  storage: true
};
var ModifiersNest = {
  calldata: true,
  memory: true
};
function checkModifier(type, name) {
  if (type === "bytes" || type === "string") {
    if (ModifiersBytes[name]) {
      return true;
    }
  } else if (type === "address") {
    if (name === "payable") {
      return true;
    }
  } else if (type.indexOf("[") >= 0 || type === "tuple") {
    if (ModifiersNest[name]) {
      return true;
    }
  }
  if (ModifiersBytes[name] || name === "payable") {
    logger$G.throwArgumentError("invalid modifier", "name", name);
  }
  return false;
}
// @TODO: Make sure that children of an indexed tuple are marked with a null indexed
function parseParamType(param, allowIndexed) {
  var originalParam = param;
  function throwError(i) {
    logger$G.throwArgumentError("unexpected character at position ".concat(i), "param", param);
  }
  param = param.replace(/\s/g, " ");
  function newNode(parent) {
    var node = {
      type: "",
      name: "",
      parent: parent,
      state: {
        allowType: true
      }
    };
    if (allowIndexed) {
      node.indexed = false;
    }
    return node;
  }
  var parent = {
    type: "",
    name: "",
    state: {
      allowType: true
    }
  };
  var node = parent;
  for (var i = 0; i < param.length; i++) {
    var c = param[i];
    switch (c) {
      case "(":
        if (node.state.allowType && node.type === "") {
          node.type = "tuple";
        } else if (!node.state.allowParams) {
          throwError(i);
        }
        node.state.allowType = false;
        node.type = verifyType(node.type);
        node.components = [newNode(node)];
        node = node.components[0];
        break;
      case ")":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType(node.type);
        var child = node;
        node = node.parent;
        if (!node) {
          throwError(i);
        }
        delete child.parent;
        node.state.allowParams = false;
        node.state.allowName = true;
        node.state.allowArray = true;
        break;
      case ",":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType(node.type);
        var sibling = newNode(node.parent);
        //{ type: "", name: "", parent: node.parent, state: { allowType: true } };
        node.parent.components.push(sibling);
        delete node.parent;
        node = sibling;
        break;
      // Hit a space...
      case " ":
        // If reading type, the type is done and may read a param or name
        if (node.state.allowType) {
          if (node.type !== "") {
            node.type = verifyType(node.type);
            delete node.state.allowType;
            node.state.allowName = true;
            node.state.allowParams = true;
          }
        }
        // If reading name, the name is done
        if (node.state.allowName) {
          if (node.name !== "") {
            if (node.name === "indexed") {
              if (!allowIndexed) {
                throwError(i);
              }
              if (node.indexed) {
                throwError(i);
              }
              node.indexed = true;
              node.name = "";
            } else if (checkModifier(node.type, node.name)) {
              node.name = "";
            } else {
              node.state.allowName = false;
            }
          }
        }
        break;
      case "[":
        if (!node.state.allowArray) {
          throwError(i);
        }
        node.type += c;
        node.state.allowArray = false;
        node.state.allowName = false;
        node.state.readArray = true;
        break;
      case "]":
        if (!node.state.readArray) {
          throwError(i);
        }
        node.type += c;
        node.state.readArray = false;
        node.state.allowArray = true;
        node.state.allowName = true;
        break;
      default:
        if (node.state.allowType) {
          node.type += c;
          node.state.allowParams = true;
          node.state.allowArray = true;
        } else if (node.state.allowName) {
          node.name += c;
          delete node.state.allowArray;
        } else if (node.state.readArray) {
          node.type += c;
        } else {
          throwError(i);
        }
    }
  }
  if (node.parent) {
    logger$G.throwArgumentError("unexpected eof", "param", param);
  }
  delete parent.state;
  if (node.name === "indexed") {
    if (!allowIndexed) {
      throwError(originalParam.length - 7);
    }
    if (node.indexed) {
      throwError(originalParam.length - 7);
    }
    node.indexed = true;
    node.name = "";
  } else if (checkModifier(node.type, node.name)) {
    node.name = "";
  }
  parent.type = verifyType(parent.type);
  return parent;
}
function populate(object, params) {
  for (var key in params) {
    defineReadOnly(object, key, params[key]);
  }
}
var FormatTypes = Object.freeze({
  // Bare formatting, as is needed for computing a sighash of an event or function
  sighash: "sighash",
  // Human-Readable with Minimal spacing and without names (compact human-readable)
  minimal: "minimal",
  // Human-Readable with nice spacing, including all names
  full: "full",
  // JSON-format a la Solidity
  json: "json"
});
var paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
var ParamType = /*#__PURE__*/function () {
  function ParamType(constructorGuard, params) {
    _classCallCheck(this, ParamType);
    if (constructorGuard !== _constructorGuard$2) {
      logger$G.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new ParamType()"
      });
    }
    populate(this, params);
    var match = this.type.match(paramTypeArray);
    if (match) {
      populate(this, {
        arrayLength: parseInt(match[2] || "-1"),
        arrayChildren: ParamType.fromObject({
          type: match[1],
          components: this.components
        }),
        baseType: "array"
      });
    } else {
      populate(this, {
        arrayLength: null,
        arrayChildren: null,
        baseType: this.components != null ? "tuple" : this.type
      });
    }
    this._isParamType = true;
    Object.freeze(this);
  }
  // Format the parameter fragment
  //   - sighash: "(uint256,address)"
  //   - minimal: "tuple(uint256,address) indexed"
  //   - full:    "tuple(uint256 foo, address bar) indexed baz"
  _createClass(ParamType, [{
    key: "format",
    value: function format(_format) {
      if (!_format) {
        _format = FormatTypes.sighash;
      }
      if (!FormatTypes[_format]) {
        logger$G.throwArgumentError("invalid format type", "format", _format);
      }
      if (_format === FormatTypes.json) {
        var _result = {
          type: this.baseType === "tuple" ? "tuple" : this.type,
          name: this.name || undefined
        };
        if (typeof this.indexed === "boolean") {
          _result.indexed = this.indexed;
        }
        if (this.components) {
          _result.components = this.components.map(function (comp) {
            return JSON.parse(comp.format(_format));
          });
        }
        return JSON.stringify(_result);
      }
      var result = "";
      // Array
      if (this.baseType === "array") {
        result += this.arrayChildren.format(_format);
        result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
      } else {
        if (this.baseType === "tuple") {
          if (_format !== FormatTypes.sighash) {
            result += this.type;
          }
          result += "(" + this.components.map(function (comp) {
            return comp.format(_format);
          }).join(_format === FormatTypes.full ? ", " : ",") + ")";
        } else {
          result += this.type;
        }
      }
      if (_format !== FormatTypes.sighash) {
        if (this.indexed === true) {
          result += " indexed";
        }
        if (_format === FormatTypes.full && this.name) {
          result += " " + this.name;
        }
      }
      return result;
    }
  }], [{
    key: "from",
    value: function from(value, allowIndexed) {
      if (typeof value === "string") {
        return ParamType.fromString(value, allowIndexed);
      }
      return ParamType.fromObject(value);
    }
  }, {
    key: "fromObject",
    value: function fromObject(value) {
      if (ParamType.isParamType(value)) {
        return value;
      }
      return new ParamType(_constructorGuard$2, {
        name: value.name || null,
        type: verifyType(value.type),
        indexed: value.indexed == null ? null : !!value.indexed,
        components: value.components ? value.components.map(ParamType.fromObject) : null
      });
    }
  }, {
    key: "fromString",
    value: function fromString(value, allowIndexed) {
      function ParamTypify(node) {
        return ParamType.fromObject({
          name: node.name,
          type: node.type,
          indexed: node.indexed,
          components: node.components
        });
      }
      return ParamTypify(parseParamType(value, !!allowIndexed));
    }
  }, {
    key: "isParamType",
    value: function isParamType(value) {
      return !!(value != null && value._isParamType);
    }
  }]);
  return ParamType;
}();
function parseParams(value, allowIndex) {
  return splitNesting(value).map(function (param) {
    return ParamType.fromString(param, allowIndex);
  });
}
var Fragment = /*#__PURE__*/function () {
  function Fragment(constructorGuard, params) {
    _classCallCheck(this, Fragment);
    if (constructorGuard !== _constructorGuard$2) {
      logger$G.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new Fragment()"
      });
    }
    populate(this, params);
    this._isFragment = true;
    Object.freeze(this);
  }
  _createClass(Fragment, null, [{
    key: "from",
    value: function from(value) {
      if (Fragment.isFragment(value)) {
        return value;
      }
      if (typeof value === "string") {
        return Fragment.fromString(value);
      }
      return Fragment.fromObject(value);
    }
  }, {
    key: "fromObject",
    value: function fromObject(value) {
      if (Fragment.isFragment(value)) {
        return value;
      }
      switch (value.type) {
        case "function":
          return FunctionFragment.fromObject(value);
        case "event":
          return EventFragment.fromObject(value);
        case "constructor":
          return ConstructorFragment.fromObject(value);
        case "error":
          return ErrorFragment.fromObject(value);
        case "fallback":
        case "receive":
          // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?
          return null;
      }
      return logger$G.throwArgumentError("invalid fragment object", "value", value);
    }
  }, {
    key: "fromString",
    value: function fromString(value) {
      // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
      value = value.replace(/\s/g, " ");
      value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
      value = value.trim();
      if (value.split(" ")[0] === "event") {
        return EventFragment.fromString(value.substring(5).trim());
      } else if (value.split(" ")[0] === "function") {
        return FunctionFragment.fromString(value.substring(8).trim());
      } else if (value.split("(")[0].trim() === "constructor") {
        return ConstructorFragment.fromString(value.trim());
      } else if (value.split(" ")[0] === "error") {
        return ErrorFragment.fromString(value.substring(5).trim());
      }
      return logger$G.throwArgumentError("unsupported fragment", "value", value);
    }
  }, {
    key: "isFragment",
    value: function isFragment(value) {
      return !!(value && value._isFragment);
    }
  }]);
  return Fragment;
}();
var EventFragment = /*#__PURE__*/function (_Fragment) {
  _inherits(EventFragment, _Fragment);
  var _super = _createSuper$x(EventFragment);
  function EventFragment() {
    _classCallCheck(this, EventFragment);
    return _super.apply(this, arguments);
  }
  _createClass(EventFragment, [{
    key: "format",
    value: function format(_format2) {
      if (!_format2) {
        _format2 = FormatTypes.sighash;
      }
      if (!FormatTypes[_format2]) {
        logger$G.throwArgumentError("invalid format type", "format", _format2);
      }
      if (_format2 === FormatTypes.json) {
        return JSON.stringify({
          type: "event",
          anonymous: this.anonymous,
          name: this.name,
          inputs: this.inputs.map(function (input) {
            return JSON.parse(input.format(_format2));
          })
        });
      }
      var result = "";
      if (_format2 !== FormatTypes.sighash) {
        result += "event ";
      }
      result += this.name + "(" + this.inputs.map(function (input) {
        return input.format(_format2);
      }).join(_format2 === FormatTypes.full ? ", " : ",") + ") ";
      if (_format2 !== FormatTypes.sighash) {
        if (this.anonymous) {
          result += "anonymous ";
        }
      }
      return result.trim();
    }
  }], [{
    key: "from",
    value: function from(value) {
      if (typeof value === "string") {
        return EventFragment.fromString(value);
      }
      return EventFragment.fromObject(value);
    }
  }, {
    key: "fromObject",
    value: function fromObject(value) {
      if (EventFragment.isEventFragment(value)) {
        return value;
      }
      if (value.type !== "event") {
        logger$G.throwArgumentError("invalid event object", "value", value);
      }
      var params = {
        name: verifyIdentifier(value.name),
        anonymous: value.anonymous,
        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
        type: "event"
      };
      return new EventFragment(_constructorGuard$2, params);
    }
  }, {
    key: "fromString",
    value: function fromString(value) {
      var match = value.match(regexParen);
      if (!match) {
        logger$G.throwArgumentError("invalid event string", "value", value);
      }
      var anonymous = false;
      match[3].split(" ").forEach(function (modifier) {
        switch (modifier.trim()) {
          case "anonymous":
            anonymous = true;
            break;
          case "":
            break;
          default:
            logger$G.warn("unknown modifier: " + modifier);
        }
      });
      return EventFragment.fromObject({
        name: match[1].trim(),
        anonymous: anonymous,
        inputs: parseParams(match[2], true),
        type: "event"
      });
    }
  }, {
    key: "isEventFragment",
    value: function isEventFragment(value) {
      return value && value._isFragment && value.type === "event";
    }
  }]);
  return EventFragment;
}(Fragment);
function parseGas(value, params) {
  params.gas = null;
  var comps = value.split("@");
  if (comps.length !== 1) {
    if (comps.length > 2) {
      logger$G.throwArgumentError("invalid human-readable ABI signature", "value", value);
    }
    if (!comps[1].match(/^[0-9]+$/)) {
      logger$G.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
    }
    params.gas = BigNumber.from(comps[1]);
    return comps[0];
  }
  return value;
}
function parseModifiers(value, params) {
  params.constant = false;
  params.payable = false;
  params.stateMutability = "nonpayable";
  value.split(" ").forEach(function (modifier) {
    switch (modifier.trim()) {
      case "constant":
        params.constant = true;
        break;
      case "payable":
        params.payable = true;
        params.stateMutability = "payable";
        break;
      case "nonpayable":
        params.payable = false;
        params.stateMutability = "nonpayable";
        break;
      case "pure":
        params.constant = true;
        params.stateMutability = "pure";
        break;
      case "view":
        params.constant = true;
        params.stateMutability = "view";
        break;
      case "external":
      case "public":
      case "":
        break;
      default:
        console.log("unknown modifier: " + modifier);
    }
  });
}
function verifyState(value) {
  var result = {
    constant: false,
    payable: true,
    stateMutability: "payable"
  };
  if (value.stateMutability != null) {
    result.stateMutability = value.stateMutability;
    // Set (and check things are consistent) the constant property
    result.constant = result.stateMutability === "view" || result.stateMutability === "pure";
    if (value.constant != null) {
      if (!!value.constant !== result.constant) {
        logger$G.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
      }
    }
    // Set (and check things are consistent) the payable property
    result.payable = result.stateMutability === "payable";
    if (value.payable != null) {
      if (!!value.payable !== result.payable) {
        logger$G.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
      }
    }
  } else if (value.payable != null) {
    result.payable = !!value.payable;
    // If payable we can assume non-constant; otherwise we can't assume
    if (value.constant == null && !result.payable && value.type !== "constructor") {
      logger$G.throwArgumentError("unable to determine stateMutability", "value", value);
    }
    result.constant = !!value.constant;
    if (result.constant) {
      result.stateMutability = "view";
    } else {
      result.stateMutability = result.payable ? "payable" : "nonpayable";
    }
    if (result.payable && result.constant) {
      logger$G.throwArgumentError("cannot have constant payable function", "value", value);
    }
  } else if (value.constant != null) {
    result.constant = !!value.constant;
    result.payable = !result.constant;
    result.stateMutability = result.constant ? "view" : "payable";
  } else if (value.type !== "constructor") {
    logger$G.throwArgumentError("unable to determine stateMutability", "value", value);
  }
  return result;
}
var ConstructorFragment = /*#__PURE__*/function (_Fragment2) {
  _inherits(ConstructorFragment, _Fragment2);
  var _super2 = _createSuper$x(ConstructorFragment);
  function ConstructorFragment() {
    _classCallCheck(this, ConstructorFragment);
    return _super2.apply(this, arguments);
  }
  _createClass(ConstructorFragment, [{
    key: "format",
    value: function format(_format3) {
      if (!_format3) {
        _format3 = FormatTypes.sighash;
      }
      if (!FormatTypes[_format3]) {
        logger$G.throwArgumentError("invalid format type", "format", _format3);
      }
      if (_format3 === FormatTypes.json) {
        return JSON.stringify({
          type: "constructor",
          stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : undefined,
          payable: this.payable,
          gas: this.gas ? this.gas.toNumber() : undefined,
          inputs: this.inputs.map(function (input) {
            return JSON.parse(input.format(_format3));
          })
        });
      }
      if (_format3 === FormatTypes.sighash) {
        logger$G.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "format(sighash)"
        });
      }
      var result = "constructor(" + this.inputs.map(function (input) {
        return input.format(_format3);
      }).join(_format3 === FormatTypes.full ? ", " : ",") + ") ";
      if (this.stateMutability && this.stateMutability !== "nonpayable") {
        result += this.stateMutability + " ";
      }
      return result.trim();
    }
  }], [{
    key: "from",
    value: function from(value) {
      if (typeof value === "string") {
        return ConstructorFragment.fromString(value);
      }
      return ConstructorFragment.fromObject(value);
    }
  }, {
    key: "fromObject",
    value: function fromObject(value) {
      if (ConstructorFragment.isConstructorFragment(value)) {
        return value;
      }
      if (value.type !== "constructor") {
        logger$G.throwArgumentError("invalid constructor object", "value", value);
      }
      var state = verifyState(value);
      if (state.constant) {
        logger$G.throwArgumentError("constructor cannot be constant", "value", value);
      }
      var params = {
        name: null,
        type: value.type,
        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
        payable: state.payable,
        stateMutability: state.stateMutability,
        gas: value.gas ? BigNumber.from(value.gas) : null
      };
      return new ConstructorFragment(_constructorGuard$2, params);
    }
  }, {
    key: "fromString",
    value: function fromString(value) {
      var params = {
        type: "constructor"
      };
      value = parseGas(value, params);
      var parens = value.match(regexParen);
      if (!parens || parens[1].trim() !== "constructor") {
        logger$G.throwArgumentError("invalid constructor string", "value", value);
      }
      params.inputs = parseParams(parens[2].trim(), false);
      parseModifiers(parens[3].trim(), params);
      return ConstructorFragment.fromObject(params);
    }
  }, {
    key: "isConstructorFragment",
    value: function isConstructorFragment(value) {
      return value && value._isFragment && value.type === "constructor";
    }
  }]);
  return ConstructorFragment;
}(Fragment);
var FunctionFragment = /*#__PURE__*/function (_ConstructorFragment) {
  _inherits(FunctionFragment, _ConstructorFragment);
  var _super3 = _createSuper$x(FunctionFragment);
  function FunctionFragment() {
    _classCallCheck(this, FunctionFragment);
    return _super3.apply(this, arguments);
  }
  _createClass(FunctionFragment, [{
    key: "format",
    value: function format(_format4) {
      if (!_format4) {
        _format4 = FormatTypes.sighash;
      }
      if (!FormatTypes[_format4]) {
        logger$G.throwArgumentError("invalid format type", "format", _format4);
      }
      if (_format4 === FormatTypes.json) {
        return JSON.stringify({
          type: "function",
          name: this.name,
          constant: this.constant,
          stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : undefined,
          payable: this.payable,
          gas: this.gas ? this.gas.toNumber() : undefined,
          inputs: this.inputs.map(function (input) {
            return JSON.parse(input.format(_format4));
          }),
          outputs: this.outputs.map(function (output) {
            return JSON.parse(output.format(_format4));
          })
        });
      }
      var result = "";
      if (_format4 !== FormatTypes.sighash) {
        result += "function ";
      }
      result += this.name + "(" + this.inputs.map(function (input) {
        return input.format(_format4);
      }).join(_format4 === FormatTypes.full ? ", " : ",") + ") ";
      if (_format4 !== FormatTypes.sighash) {
        if (this.stateMutability) {
          if (this.stateMutability !== "nonpayable") {
            result += this.stateMutability + " ";
          }
        } else if (this.constant) {
          result += "view ";
        }
        if (this.outputs && this.outputs.length) {
          result += "returns (" + this.outputs.map(function (output) {
            return output.format(_format4);
          }).join(", ") + ") ";
        }
        if (this.gas != null) {
          result += "@" + this.gas.toString() + " ";
        }
      }
      return result.trim();
    }
  }], [{
    key: "from",
    value: function from(value) {
      if (typeof value === "string") {
        return FunctionFragment.fromString(value);
      }
      return FunctionFragment.fromObject(value);
    }
  }, {
    key: "fromObject",
    value: function fromObject(value) {
      if (FunctionFragment.isFunctionFragment(value)) {
        return value;
      }
      if (value.type !== "function") {
        logger$G.throwArgumentError("invalid function object", "value", value);
      }
      var state = verifyState(value);
      var params = {
        type: value.type,
        name: verifyIdentifier(value.name),
        constant: state.constant,
        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
        outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],
        payable: state.payable,
        stateMutability: state.stateMutability,
        gas: value.gas ? BigNumber.from(value.gas) : null
      };
      return new FunctionFragment(_constructorGuard$2, params);
    }
  }, {
    key: "fromString",
    value: function fromString(value) {
      var params = {
        type: "function"
      };
      value = parseGas(value, params);
      var comps = value.split(" returns ");
      if (comps.length > 2) {
        logger$G.throwArgumentError("invalid function string", "value", value);
      }
      var parens = comps[0].match(regexParen);
      if (!parens) {
        logger$G.throwArgumentError("invalid function signature", "value", value);
      }
      params.name = parens[1].trim();
      if (params.name) {
        verifyIdentifier(params.name);
      }
      params.inputs = parseParams(parens[2], false);
      parseModifiers(parens[3].trim(), params);
      // We have outputs
      if (comps.length > 1) {
        var returns = comps[1].match(regexParen);
        if (returns[1].trim() != "" || returns[3].trim() != "") {
          logger$G.throwArgumentError("unexpected tokens", "value", value);
        }
        params.outputs = parseParams(returns[2], false);
      } else {
        params.outputs = [];
      }
      return FunctionFragment.fromObject(params);
    }
  }, {
    key: "isFunctionFragment",
    value: function isFunctionFragment(value) {
      return value && value._isFragment && value.type === "function";
    }
  }]);
  return FunctionFragment;
}(ConstructorFragment);
//export class StructFragment extends Fragment {
//}
function checkForbidden(fragment) {
  var sig = fragment.format();
  if (sig === "Error(string)" || sig === "Panic(uint256)") {
    logger$G.throwArgumentError("cannot specify user defined ".concat(sig, " error"), "fragment", fragment);
  }
  return fragment;
}
var ErrorFragment = /*#__PURE__*/function (_Fragment3) {
  _inherits(ErrorFragment, _Fragment3);
  var _super4 = _createSuper$x(ErrorFragment);
  function ErrorFragment() {
    _classCallCheck(this, ErrorFragment);
    return _super4.apply(this, arguments);
  }
  _createClass(ErrorFragment, [{
    key: "format",
    value: function format(_format5) {
      if (!_format5) {
        _format5 = FormatTypes.sighash;
      }
      if (!FormatTypes[_format5]) {
        logger$G.throwArgumentError("invalid format type", "format", _format5);
      }
      if (_format5 === FormatTypes.json) {
        return JSON.stringify({
          type: "error",
          name: this.name,
          inputs: this.inputs.map(function (input) {
            return JSON.parse(input.format(_format5));
          })
        });
      }
      var result = "";
      if (_format5 !== FormatTypes.sighash) {
        result += "error ";
      }
      result += this.name + "(" + this.inputs.map(function (input) {
        return input.format(_format5);
      }).join(_format5 === FormatTypes.full ? ", " : ",") + ") ";
      return result.trim();
    }
  }], [{
    key: "from",
    value: function from(value) {
      if (typeof value === "string") {
        return ErrorFragment.fromString(value);
      }
      return ErrorFragment.fromObject(value);
    }
  }, {
    key: "fromObject",
    value: function fromObject(value) {
      if (ErrorFragment.isErrorFragment(value)) {
        return value;
      }
      if (value.type !== "error") {
        logger$G.throwArgumentError("invalid error object", "value", value);
      }
      var params = {
        type: value.type,
        name: verifyIdentifier(value.name),
        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []
      };
      return checkForbidden(new ErrorFragment(_constructorGuard$2, params));
    }
  }, {
    key: "fromString",
    value: function fromString(value) {
      var params = {
        type: "error"
      };
      var parens = value.match(regexParen);
      if (!parens) {
        logger$G.throwArgumentError("invalid error signature", "value", value);
      }
      params.name = parens[1].trim();
      if (params.name) {
        verifyIdentifier(params.name);
      }
      params.inputs = parseParams(parens[2], false);
      return checkForbidden(ErrorFragment.fromObject(params));
    }
  }, {
    key: "isErrorFragment",
    value: function isErrorFragment(value) {
      return value && value._isFragment && value.type === "error";
    }
  }]);
  return ErrorFragment;
}(Fragment);
function verifyType(type) {
  // These need to be transformed to their full description
  if (type.match(/^uint($|[^1-9])/)) {
    type = "uint256" + type.substring(4);
  } else if (type.match(/^int($|[^1-9])/)) {
    type = "int256" + type.substring(3);
  }
  // @TODO: more verification
  return type;
}
// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234
var regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
function verifyIdentifier(value) {
  if (!value || !value.match(regexIdentifier)) {
    logger$G.throwArgumentError("invalid identifier \"".concat(value, "\""), "value", value);
  }
  return value;
}
var regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
function splitNesting(value) {
  value = value.trim();
  var result = [];
  var accum = "";
  var depth = 0;
  for (var offset = 0; offset < value.length; offset++) {
    var c = value[offset];
    if (c === "," && depth === 0) {
      result.push(accum);
      accum = "";
    } else {
      accum += c;
      if (c === "(") {
        depth++;
      } else if (c === ")") {
        depth--;
        if (depth === -1) {
          logger$G.throwArgumentError("unbalanced parenthesis", "value", value);
        }
      }
    }
  }
  if (accum) {
    result.push(accum);
  }
  return result;
}

var logger$F = new Logger(version$n);
function checkResultErrors(result) {
  // Find the first error (if any)
  var errors = [];
  var checkErrors = function checkErrors(path, object) {
    if (!Array.isArray(object)) {
      return;
    }
    for (var key in object) {
      var childPath = path.slice();
      childPath.push(key);
      try {
        checkErrors(childPath, object[key]);
      } catch (error) {
        errors.push({
          path: childPath,
          error: error
        });
      }
    }
  };
  checkErrors([], result);
  return errors;
}
var Coder = /*#__PURE__*/function () {
  function Coder(name, type, localName, dynamic) {
    _classCallCheck(this, Coder);
    // @TODO: defineReadOnly these
    this.name = name;
    this.type = type;
    this.localName = localName;
    this.dynamic = dynamic;
  }
  _createClass(Coder, [{
    key: "_throwError",
    value: function _throwError(message, value) {
      logger$F.throwArgumentError(message, this.localName, value);
    }
  }]);
  return Coder;
}();
var Writer = /*#__PURE__*/function () {
  function Writer(wordSize) {
    _classCallCheck(this, Writer);
    defineReadOnly(this, "wordSize", wordSize || 32);
    this._data = [];
    this._dataLength = 0;
    this._padding = new Uint8Array(wordSize);
  }
  _createClass(Writer, [{
    key: "data",
    get: function get() {
      return hexConcat(this._data);
    }
  }, {
    key: "length",
    get: function get() {
      return this._dataLength;
    }
  }, {
    key: "_writeData",
    value: function _writeData(data) {
      this._data.push(data);
      this._dataLength += data.length;
      return data.length;
    }
  }, {
    key: "appendWriter",
    value: function appendWriter(writer) {
      return this._writeData(concat(writer._data));
    }
    // Arrayish items; padded on the right to wordSize
  }, {
    key: "writeBytes",
    value: function writeBytes(value) {
      var bytes = arrayify(value);
      var paddingOffset = bytes.length % this.wordSize;
      if (paddingOffset) {
        bytes = concat([bytes, this._padding.slice(paddingOffset)]);
      }
      return this._writeData(bytes);
    }
  }, {
    key: "_getValue",
    value: function _getValue(value) {
      var bytes = arrayify(BigNumber.from(value));
      if (bytes.length > this.wordSize) {
        logger$F.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
          length: this.wordSize,
          offset: bytes.length
        });
      }
      if (bytes.length % this.wordSize) {
        bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);
      }
      return bytes;
    }
    // BigNumberish items; padded on the left to wordSize
  }, {
    key: "writeValue",
    value: function writeValue(value) {
      return this._writeData(this._getValue(value));
    }
  }, {
    key: "writeUpdatableValue",
    value: function writeUpdatableValue() {
      var _this = this;
      var offset = this._data.length;
      this._data.push(this._padding);
      this._dataLength += this.wordSize;
      return function (value) {
        _this._data[offset] = _this._getValue(value);
      };
    }
  }]);
  return Writer;
}();
var Reader = /*#__PURE__*/function () {
  function Reader(data, wordSize, coerceFunc, allowLoose) {
    _classCallCheck(this, Reader);
    defineReadOnly(this, "_data", arrayify(data));
    defineReadOnly(this, "wordSize", wordSize || 32);
    defineReadOnly(this, "_coerceFunc", coerceFunc);
    defineReadOnly(this, "allowLoose", allowLoose);
    this._offset = 0;
  }
  _createClass(Reader, [{
    key: "data",
    get: function get() {
      return hexlify(this._data);
    }
  }, {
    key: "consumed",
    get: function get() {
      return this._offset;
    }
    // The default Coerce function
  }, {
    key: "coerce",
    value: function coerce(name, value) {
      if (this._coerceFunc) {
        return this._coerceFunc(name, value);
      }
      return Reader.coerce(name, value);
    }
  }, {
    key: "_peekBytes",
    value: function _peekBytes(offset, length, loose) {
      var alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
      if (this._offset + alignedLength > this._data.length) {
        if (this.allowLoose && loose && this._offset + length <= this._data.length) {
          alignedLength = length;
        } else {
          logger$F.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
            length: this._data.length,
            offset: this._offset + alignedLength
          });
        }
      }
      return this._data.slice(this._offset, this._offset + alignedLength);
    }
  }, {
    key: "subReader",
    value: function subReader(offset) {
      return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
    }
  }, {
    key: "readBytes",
    value: function readBytes(length, loose) {
      var bytes = this._peekBytes(0, length, !!loose);
      this._offset += bytes.length;
      // @TODO: Make sure the length..end bytes are all 0?
      return bytes.slice(0, length);
    }
  }, {
    key: "readValue",
    value: function readValue() {
      return BigNumber.from(this.readBytes(this.wordSize));
    }
  }], [{
    key: "coerce",
    value: function coerce(name, value) {
      var match = name.match("^u?int([0-9]+)$");
      if (match && parseInt(match[1]) <= 48) {
        value = value.toNumber();
      }
      return value;
    }
  }]);
  return Reader;
}();

var sha3$1 = {exports: {}};

/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */

(function (module) {
	/*jslint bitwise: true */
	(function () {

	  var INPUT_ERROR = 'input is invalid type';
	  var FINALIZE_ERROR = 'finalize already called';
	  var WINDOW = typeof window === 'object';
	  var root = WINDOW ? window : {};
	  if (root.JS_SHA3_NO_WINDOW) {
	    WINDOW = false;
	  }
	  var WEB_WORKER = !WINDOW && typeof self === 'object';
	  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
	  if (NODE_JS) {
	    root = commonjsGlobal;
	  } else if (WEB_WORKER) {
	    root = self;
	  }
	  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
	  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
	  var HEX_CHARS = '0123456789abcdef'.split('');
	  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
	  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
	  var KECCAK_PADDING = [1, 256, 65536, 16777216];
	  var PADDING = [6, 1536, 393216, 100663296];
	  var SHIFT = [0, 8, 16, 24];
	  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
	  var BITS = [224, 256, 384, 512];
	  var SHAKE_BITS = [128, 256];
	  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
	  var CSHAKE_BYTEPAD = {
	    '128': 168,
	    '256': 136
	  };
	  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
	    Array.isArray = function (obj) {
	      return Object.prototype.toString.call(obj) === '[object Array]';
	    };
	  }
	  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
	    ArrayBuffer.isView = function (obj) {
	      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
	    };
	  }
	  var createOutputMethod = function createOutputMethod(bits, padding, outputType) {
	    return function (message) {
	      return new Keccak(bits, padding, bits).update(message)[outputType]();
	    };
	  };
	  var createShakeOutputMethod = function createShakeOutputMethod(bits, padding, outputType) {
	    return function (message, outputBits) {
	      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
	    };
	  };
	  var createCshakeOutputMethod = function createCshakeOutputMethod(bits, padding, outputType) {
	    return function (message, outputBits, n, s) {
	      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
	    };
	  };
	  var createKmacOutputMethod = function createKmacOutputMethod(bits, padding, outputType) {
	    return function (key, message, outputBits, s) {
	      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
	    };
	  };
	  var createOutputMethods = function createOutputMethods(method, createMethod, bits, padding) {
	    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
	      var type = OUTPUT_TYPES[i];
	      method[type] = createMethod(bits, padding, type);
	    }
	    return method;
	  };
	  var createMethod = function createMethod(bits, padding) {
	    var method = createOutputMethod(bits, padding, 'hex');
	    method.create = function () {
	      return new Keccak(bits, padding, bits);
	    };
	    method.update = function (message) {
	      return method.create().update(message);
	    };
	    return createOutputMethods(method, createOutputMethod, bits, padding);
	  };
	  var createShakeMethod = function createShakeMethod(bits, padding) {
	    var method = createShakeOutputMethod(bits, padding, 'hex');
	    method.create = function (outputBits) {
	      return new Keccak(bits, padding, outputBits);
	    };
	    method.update = function (message, outputBits) {
	      return method.create(outputBits).update(message);
	    };
	    return createOutputMethods(method, createShakeOutputMethod, bits, padding);
	  };
	  var createCshakeMethod = function createCshakeMethod(bits, padding) {
	    var w = CSHAKE_BYTEPAD[bits];
	    var method = createCshakeOutputMethod(bits, padding, 'hex');
	    method.create = function (outputBits, n, s) {
	      if (!n && !s) {
	        return methods['shake' + bits].create(outputBits);
	      } else {
	        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
	      }
	    };
	    method.update = function (message, outputBits, n, s) {
	      return method.create(outputBits, n, s).update(message);
	    };
	    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
	  };
	  var createKmacMethod = function createKmacMethod(bits, padding) {
	    var w = CSHAKE_BYTEPAD[bits];
	    var method = createKmacOutputMethod(bits, padding, 'hex');
	    method.create = function (key, outputBits, s) {
	      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
	    };
	    method.update = function (key, message, outputBits, s) {
	      return method.create(key, outputBits, s).update(message);
	    };
	    return createOutputMethods(method, createKmacOutputMethod, bits, padding);
	  };
	  var algorithms = [{
	    name: 'keccak',
	    padding: KECCAK_PADDING,
	    bits: BITS,
	    createMethod: createMethod
	  }, {
	    name: 'sha3',
	    padding: PADDING,
	    bits: BITS,
	    createMethod: createMethod
	  }, {
	    name: 'shake',
	    padding: SHAKE_PADDING,
	    bits: SHAKE_BITS,
	    createMethod: createShakeMethod
	  }, {
	    name: 'cshake',
	    padding: CSHAKE_PADDING,
	    bits: SHAKE_BITS,
	    createMethod: createCshakeMethod
	  }, {
	    name: 'kmac',
	    padding: CSHAKE_PADDING,
	    bits: SHAKE_BITS,
	    createMethod: createKmacMethod
	  }];
	  var methods = {},
	    methodNames = [];
	  for (var i = 0; i < algorithms.length; ++i) {
	    var algorithm = algorithms[i];
	    var bits = algorithm.bits;
	    for (var j = 0; j < bits.length; ++j) {
	      var methodName = algorithm.name + '_' + bits[j];
	      methodNames.push(methodName);
	      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
	      if (algorithm.name !== 'sha3') {
	        var newMethodName = algorithm.name + bits[j];
	        methodNames.push(newMethodName);
	        methods[newMethodName] = methods[methodName];
	      }
	    }
	  }
	  function Keccak(bits, padding, outputBits) {
	    this.blocks = [];
	    this.s = [];
	    this.padding = padding;
	    this.outputBits = outputBits;
	    this.reset = true;
	    this.finalized = false;
	    this.block = 0;
	    this.start = 0;
	    this.blockCount = 1600 - (bits << 1) >> 5;
	    this.byteCount = this.blockCount << 2;
	    this.outputBlocks = outputBits >> 5;
	    this.extraBytes = (outputBits & 31) >> 3;
	    for (var i = 0; i < 50; ++i) {
	      this.s[i] = 0;
	    }
	  }
	  Keccak.prototype.update = function (message) {
	    if (this.finalized) {
	      throw new Error(FINALIZE_ERROR);
	    }
	    var notString,
	      type = typeof message;
	    if (type !== 'string') {
	      if (type === 'object') {
	        if (message === null) {
	          throw new Error(INPUT_ERROR);
	        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
	          message = new Uint8Array(message);
	        } else if (!Array.isArray(message)) {
	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
	            throw new Error(INPUT_ERROR);
	          }
	        }
	      } else {
	        throw new Error(INPUT_ERROR);
	      }
	      notString = true;
	    }
	    var blocks = this.blocks,
	      byteCount = this.byteCount,
	      length = message.length,
	      blockCount = this.blockCount,
	      index = 0,
	      s = this.s,
	      i,
	      code;
	    while (index < length) {
	      if (this.reset) {
	        this.reset = false;
	        blocks[0] = this.block;
	        for (i = 1; i < blockCount + 1; ++i) {
	          blocks[i] = 0;
	        }
	      }
	      if (notString) {
	        for (i = this.start; index < length && i < byteCount; ++index) {
	          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
	        }
	      } else {
	        for (i = this.start; index < length && i < byteCount; ++index) {
	          code = message.charCodeAt(index);
	          if (code < 0x80) {
	            blocks[i >> 2] |= code << SHIFT[i++ & 3];
	          } else if (code < 0x800) {
	            blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
	          } else if (code < 0xd800 || code >= 0xe000) {
	            blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
	          } else {
	            code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
	            blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
	          }
	        }
	      }
	      this.lastByteIndex = i;
	      if (i >= byteCount) {
	        this.start = i - byteCount;
	        this.block = blocks[blockCount];
	        for (i = 0; i < blockCount; ++i) {
	          s[i] ^= blocks[i];
	        }
	        f(s);
	        this.reset = true;
	      } else {
	        this.start = i;
	      }
	    }
	    return this;
	  };
	  Keccak.prototype.encode = function (x, right) {
	    var o = x & 255,
	      n = 1;
	    var bytes = [o];
	    x = x >> 8;
	    o = x & 255;
	    while (o > 0) {
	      bytes.unshift(o);
	      x = x >> 8;
	      o = x & 255;
	      ++n;
	    }
	    if (right) {
	      bytes.push(n);
	    } else {
	      bytes.unshift(n);
	    }
	    this.update(bytes);
	    return bytes.length;
	  };
	  Keccak.prototype.encodeString = function (str) {
	    var notString,
	      type = typeof str;
	    if (type !== 'string') {
	      if (type === 'object') {
	        if (str === null) {
	          throw new Error(INPUT_ERROR);
	        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
	          str = new Uint8Array(str);
	        } else if (!Array.isArray(str)) {
	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
	            throw new Error(INPUT_ERROR);
	          }
	        }
	      } else {
	        throw new Error(INPUT_ERROR);
	      }
	      notString = true;
	    }
	    var bytes = 0,
	      length = str.length;
	    if (notString) {
	      bytes = length;
	    } else {
	      for (var i = 0; i < str.length; ++i) {
	        var code = str.charCodeAt(i);
	        if (code < 0x80) {
	          bytes += 1;
	        } else if (code < 0x800) {
	          bytes += 2;
	        } else if (code < 0xd800 || code >= 0xe000) {
	          bytes += 3;
	        } else {
	          code = 0x10000 + ((code & 0x3ff) << 10 | str.charCodeAt(++i) & 0x3ff);
	          bytes += 4;
	        }
	      }
	    }
	    bytes += this.encode(bytes * 8);
	    this.update(str);
	    return bytes;
	  };
	  Keccak.prototype.bytepad = function (strs, w) {
	    var bytes = this.encode(w);
	    for (var i = 0; i < strs.length; ++i) {
	      bytes += this.encodeString(strs[i]);
	    }
	    var paddingBytes = w - bytes % w;
	    var zeros = [];
	    zeros.length = paddingBytes;
	    this.update(zeros);
	    return this;
	  };
	  Keccak.prototype.finalize = function () {
	    if (this.finalized) {
	      return;
	    }
	    this.finalized = true;
	    var blocks = this.blocks,
	      i = this.lastByteIndex,
	      blockCount = this.blockCount,
	      s = this.s;
	    blocks[i >> 2] |= this.padding[i & 3];
	    if (this.lastByteIndex === this.byteCount) {
	      blocks[0] = blocks[blockCount];
	      for (i = 1; i < blockCount + 1; ++i) {
	        blocks[i] = 0;
	      }
	    }
	    blocks[blockCount - 1] |= 0x80000000;
	    for (i = 0; i < blockCount; ++i) {
	      s[i] ^= blocks[i];
	    }
	    f(s);
	  };
	  Keccak.prototype.toString = Keccak.prototype.hex = function () {
	    this.finalize();
	    var blockCount = this.blockCount,
	      s = this.s,
	      outputBlocks = this.outputBlocks,
	      extraBytes = this.extraBytes,
	      i = 0,
	      j = 0;
	    var hex = '',
	      block;
	    while (j < outputBlocks) {
	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
	        block = s[i];
	        hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];
	      }
	      if (j % blockCount === 0) {
	        f(s);
	        i = 0;
	      }
	    }
	    if (extraBytes) {
	      block = s[i];
	      hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F];
	      if (extraBytes > 1) {
	        hex += HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F];
	      }
	      if (extraBytes > 2) {
	        hex += HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F];
	      }
	    }
	    return hex;
	  };
	  Keccak.prototype.arrayBuffer = function () {
	    this.finalize();
	    var blockCount = this.blockCount,
	      s = this.s,
	      outputBlocks = this.outputBlocks,
	      extraBytes = this.extraBytes,
	      i = 0,
	      j = 0;
	    var bytes = this.outputBits >> 3;
	    var buffer;
	    if (extraBytes) {
	      buffer = new ArrayBuffer(outputBlocks + 1 << 2);
	    } else {
	      buffer = new ArrayBuffer(bytes);
	    }
	    var array = new Uint32Array(buffer);
	    while (j < outputBlocks) {
	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
	        array[j] = s[i];
	      }
	      if (j % blockCount === 0) {
	        f(s);
	      }
	    }
	    if (extraBytes) {
	      array[i] = s[i];
	      buffer = buffer.slice(0, bytes);
	    }
	    return buffer;
	  };
	  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
	  Keccak.prototype.digest = Keccak.prototype.array = function () {
	    this.finalize();
	    var blockCount = this.blockCount,
	      s = this.s,
	      outputBlocks = this.outputBlocks,
	      extraBytes = this.extraBytes,
	      i = 0,
	      j = 0;
	    var array = [],
	      offset,
	      block;
	    while (j < outputBlocks) {
	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
	        offset = j << 2;
	        block = s[i];
	        array[offset] = block & 0xFF;
	        array[offset + 1] = block >> 8 & 0xFF;
	        array[offset + 2] = block >> 16 & 0xFF;
	        array[offset + 3] = block >> 24 & 0xFF;
	      }
	      if (j % blockCount === 0) {
	        f(s);
	      }
	    }
	    if (extraBytes) {
	      offset = j << 2;
	      block = s[i];
	      array[offset] = block & 0xFF;
	      if (extraBytes > 1) {
	        array[offset + 1] = block >> 8 & 0xFF;
	      }
	      if (extraBytes > 2) {
	        array[offset + 2] = block >> 16 & 0xFF;
	      }
	    }
	    return array;
	  };
	  function Kmac(bits, padding, outputBits) {
	    Keccak.call(this, bits, padding, outputBits);
	  }
	  Kmac.prototype = new Keccak();
	  Kmac.prototype.finalize = function () {
	    this.encode(this.outputBits, true);
	    return Keccak.prototype.finalize.call(this);
	  };
	  var f = function f(s) {
	    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
	    for (n = 0; n < 48; n += 2) {
	      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
	      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
	      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
	      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
	      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
	      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
	      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
	      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
	      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
	      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
	      h = c8 ^ (c2 << 1 | c3 >>> 31);
	      l = c9 ^ (c3 << 1 | c2 >>> 31);
	      s[0] ^= h;
	      s[1] ^= l;
	      s[10] ^= h;
	      s[11] ^= l;
	      s[20] ^= h;
	      s[21] ^= l;
	      s[30] ^= h;
	      s[31] ^= l;
	      s[40] ^= h;
	      s[41] ^= l;
	      h = c0 ^ (c4 << 1 | c5 >>> 31);
	      l = c1 ^ (c5 << 1 | c4 >>> 31);
	      s[2] ^= h;
	      s[3] ^= l;
	      s[12] ^= h;
	      s[13] ^= l;
	      s[22] ^= h;
	      s[23] ^= l;
	      s[32] ^= h;
	      s[33] ^= l;
	      s[42] ^= h;
	      s[43] ^= l;
	      h = c2 ^ (c6 << 1 | c7 >>> 31);
	      l = c3 ^ (c7 << 1 | c6 >>> 31);
	      s[4] ^= h;
	      s[5] ^= l;
	      s[14] ^= h;
	      s[15] ^= l;
	      s[24] ^= h;
	      s[25] ^= l;
	      s[34] ^= h;
	      s[35] ^= l;
	      s[44] ^= h;
	      s[45] ^= l;
	      h = c4 ^ (c8 << 1 | c9 >>> 31);
	      l = c5 ^ (c9 << 1 | c8 >>> 31);
	      s[6] ^= h;
	      s[7] ^= l;
	      s[16] ^= h;
	      s[17] ^= l;
	      s[26] ^= h;
	      s[27] ^= l;
	      s[36] ^= h;
	      s[37] ^= l;
	      s[46] ^= h;
	      s[47] ^= l;
	      h = c6 ^ (c0 << 1 | c1 >>> 31);
	      l = c7 ^ (c1 << 1 | c0 >>> 31);
	      s[8] ^= h;
	      s[9] ^= l;
	      s[18] ^= h;
	      s[19] ^= l;
	      s[28] ^= h;
	      s[29] ^= l;
	      s[38] ^= h;
	      s[39] ^= l;
	      s[48] ^= h;
	      s[49] ^= l;
	      b0 = s[0];
	      b1 = s[1];
	      b32 = s[11] << 4 | s[10] >>> 28;
	      b33 = s[10] << 4 | s[11] >>> 28;
	      b14 = s[20] << 3 | s[21] >>> 29;
	      b15 = s[21] << 3 | s[20] >>> 29;
	      b46 = s[31] << 9 | s[30] >>> 23;
	      b47 = s[30] << 9 | s[31] >>> 23;
	      b28 = s[40] << 18 | s[41] >>> 14;
	      b29 = s[41] << 18 | s[40] >>> 14;
	      b20 = s[2] << 1 | s[3] >>> 31;
	      b21 = s[3] << 1 | s[2] >>> 31;
	      b2 = s[13] << 12 | s[12] >>> 20;
	      b3 = s[12] << 12 | s[13] >>> 20;
	      b34 = s[22] << 10 | s[23] >>> 22;
	      b35 = s[23] << 10 | s[22] >>> 22;
	      b16 = s[33] << 13 | s[32] >>> 19;
	      b17 = s[32] << 13 | s[33] >>> 19;
	      b48 = s[42] << 2 | s[43] >>> 30;
	      b49 = s[43] << 2 | s[42] >>> 30;
	      b40 = s[5] << 30 | s[4] >>> 2;
	      b41 = s[4] << 30 | s[5] >>> 2;
	      b22 = s[14] << 6 | s[15] >>> 26;
	      b23 = s[15] << 6 | s[14] >>> 26;
	      b4 = s[25] << 11 | s[24] >>> 21;
	      b5 = s[24] << 11 | s[25] >>> 21;
	      b36 = s[34] << 15 | s[35] >>> 17;
	      b37 = s[35] << 15 | s[34] >>> 17;
	      b18 = s[45] << 29 | s[44] >>> 3;
	      b19 = s[44] << 29 | s[45] >>> 3;
	      b10 = s[6] << 28 | s[7] >>> 4;
	      b11 = s[7] << 28 | s[6] >>> 4;
	      b42 = s[17] << 23 | s[16] >>> 9;
	      b43 = s[16] << 23 | s[17] >>> 9;
	      b24 = s[26] << 25 | s[27] >>> 7;
	      b25 = s[27] << 25 | s[26] >>> 7;
	      b6 = s[36] << 21 | s[37] >>> 11;
	      b7 = s[37] << 21 | s[36] >>> 11;
	      b38 = s[47] << 24 | s[46] >>> 8;
	      b39 = s[46] << 24 | s[47] >>> 8;
	      b30 = s[8] << 27 | s[9] >>> 5;
	      b31 = s[9] << 27 | s[8] >>> 5;
	      b12 = s[18] << 20 | s[19] >>> 12;
	      b13 = s[19] << 20 | s[18] >>> 12;
	      b44 = s[29] << 7 | s[28] >>> 25;
	      b45 = s[28] << 7 | s[29] >>> 25;
	      b26 = s[38] << 8 | s[39] >>> 24;
	      b27 = s[39] << 8 | s[38] >>> 24;
	      b8 = s[48] << 14 | s[49] >>> 18;
	      b9 = s[49] << 14 | s[48] >>> 18;
	      s[0] = b0 ^ ~b2 & b4;
	      s[1] = b1 ^ ~b3 & b5;
	      s[10] = b10 ^ ~b12 & b14;
	      s[11] = b11 ^ ~b13 & b15;
	      s[20] = b20 ^ ~b22 & b24;
	      s[21] = b21 ^ ~b23 & b25;
	      s[30] = b30 ^ ~b32 & b34;
	      s[31] = b31 ^ ~b33 & b35;
	      s[40] = b40 ^ ~b42 & b44;
	      s[41] = b41 ^ ~b43 & b45;
	      s[2] = b2 ^ ~b4 & b6;
	      s[3] = b3 ^ ~b5 & b7;
	      s[12] = b12 ^ ~b14 & b16;
	      s[13] = b13 ^ ~b15 & b17;
	      s[22] = b22 ^ ~b24 & b26;
	      s[23] = b23 ^ ~b25 & b27;
	      s[32] = b32 ^ ~b34 & b36;
	      s[33] = b33 ^ ~b35 & b37;
	      s[42] = b42 ^ ~b44 & b46;
	      s[43] = b43 ^ ~b45 & b47;
	      s[4] = b4 ^ ~b6 & b8;
	      s[5] = b5 ^ ~b7 & b9;
	      s[14] = b14 ^ ~b16 & b18;
	      s[15] = b15 ^ ~b17 & b19;
	      s[24] = b24 ^ ~b26 & b28;
	      s[25] = b25 ^ ~b27 & b29;
	      s[34] = b34 ^ ~b36 & b38;
	      s[35] = b35 ^ ~b37 & b39;
	      s[44] = b44 ^ ~b46 & b48;
	      s[45] = b45 ^ ~b47 & b49;
	      s[6] = b6 ^ ~b8 & b0;
	      s[7] = b7 ^ ~b9 & b1;
	      s[16] = b16 ^ ~b18 & b10;
	      s[17] = b17 ^ ~b19 & b11;
	      s[26] = b26 ^ ~b28 & b20;
	      s[27] = b27 ^ ~b29 & b21;
	      s[36] = b36 ^ ~b38 & b30;
	      s[37] = b37 ^ ~b39 & b31;
	      s[46] = b46 ^ ~b48 & b40;
	      s[47] = b47 ^ ~b49 & b41;
	      s[8] = b8 ^ ~b0 & b2;
	      s[9] = b9 ^ ~b1 & b3;
	      s[18] = b18 ^ ~b10 & b12;
	      s[19] = b19 ^ ~b11 & b13;
	      s[28] = b28 ^ ~b20 & b22;
	      s[29] = b29 ^ ~b21 & b23;
	      s[38] = b38 ^ ~b30 & b32;
	      s[39] = b39 ^ ~b31 & b33;
	      s[48] = b48 ^ ~b40 & b42;
	      s[49] = b49 ^ ~b41 & b43;
	      s[0] ^= RC[n];
	      s[1] ^= RC[n + 1];
	    }
	  };
	  if (COMMON_JS) {
	    module.exports = methods;
	  } else {
	    for (i = 0; i < methodNames.length; ++i) {
	      root[methodNames[i]] = methods[methodNames[i]];
	    }
	  }
	})();
} (sha3$1));

var sha3 = sha3$1.exports;

function keccak256$1(data) {
  return '0x' + sha3.keccak_256(arrayify(data));
}

var lib_esm$h = /*#__PURE__*/Object.freeze({
  __proto__: null,
  keccak256: keccak256$1
});

var version$m = "rlp/5.7.0";

var logger$E = new Logger(version$m);
function arrayifyInteger(value) {
  var result = [];
  while (value) {
    result.unshift(value & 0xff);
    value >>= 8;
  }
  return result;
}
function unarrayifyInteger(data, offset, length) {
  var result = 0;
  for (var i = 0; i < length; i++) {
    result = result * 256 + data[offset + i];
  }
  return result;
}
function _encode(object) {
  if (Array.isArray(object)) {
    var payload = [];
    object.forEach(function (child) {
      payload = payload.concat(_encode(child));
    });
    if (payload.length <= 55) {
      payload.unshift(0xc0 + payload.length);
      return payload;
    }
    var _length = arrayifyInteger(payload.length);
    _length.unshift(0xf7 + _length.length);
    return _length.concat(payload);
  }
  if (!isBytesLike(object)) {
    logger$E.throwArgumentError("RLP object must be BytesLike", "object", object);
  }
  var data = Array.prototype.slice.call(arrayify(object));
  if (data.length === 1 && data[0] <= 0x7f) {
    return data;
  } else if (data.length <= 55) {
    data.unshift(0x80 + data.length);
    return data;
  }
  var length = arrayifyInteger(data.length);
  length.unshift(0xb7 + length.length);
  return length.concat(data);
}
function encode$2(object) {
  return hexlify(_encode(object));
}
function _decodeChildren(data, offset, childOffset, length) {
  var result = [];
  while (childOffset < offset + 1 + length) {
    var decoded = _decode(data, childOffset);
    result.push(decoded.result);
    childOffset += decoded.consumed;
    if (childOffset > offset + 1 + length) {
      logger$E.throwError("child data too short", Logger.errors.BUFFER_OVERRUN, {});
    }
  }
  return {
    consumed: 1 + length,
    result: result
  };
}
// returns { consumed: number, result: Object }
function _decode(data, offset) {
  if (data.length === 0) {
    logger$E.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
  }
  // Array with extra length prefix
  if (data[offset] >= 0xf8) {
    var lengthLength = data[offset] - 0xf7;
    if (offset + 1 + lengthLength > data.length) {
      logger$E.throwError("data short segment too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    var length = unarrayifyInteger(data, offset + 1, lengthLength);
    if (offset + 1 + lengthLength + length > data.length) {
      logger$E.throwError("data long segment too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
  } else if (data[offset] >= 0xc0) {
    var _length2 = data[offset] - 0xc0;
    if (offset + 1 + _length2 > data.length) {
      logger$E.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    return _decodeChildren(data, offset, offset + 1, _length2);
  } else if (data[offset] >= 0xb8) {
    var _lengthLength = data[offset] - 0xb7;
    if (offset + 1 + _lengthLength > data.length) {
      logger$E.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    var _length3 = unarrayifyInteger(data, offset + 1, _lengthLength);
    if (offset + 1 + _lengthLength + _length3 > data.length) {
      logger$E.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    var result = hexlify(data.slice(offset + 1 + _lengthLength, offset + 1 + _lengthLength + _length3));
    return {
      consumed: 1 + _lengthLength + _length3,
      result: result
    };
  } else if (data[offset] >= 0x80) {
    var _length4 = data[offset] - 0x80;
    if (offset + 1 + _length4 > data.length) {
      logger$E.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    var _result = hexlify(data.slice(offset + 1, offset + 1 + _length4));
    return {
      consumed: 1 + _length4,
      result: _result
    };
  }
  return {
    consumed: 1,
    result: hexlify(data[offset])
  };
}
function decode$2(data) {
  var bytes = arrayify(data);
  var decoded = _decode(bytes, 0);
  if (decoded.consumed !== bytes.length) {
    logger$E.throwArgumentError("invalid rlp data", "data", data);
  }
  return decoded.result;
}

var lib_esm$g = /*#__PURE__*/Object.freeze({
  __proto__: null,
  encode: encode$2,
  decode: decode$2
});

var version$l = "address/5.7.0";

var logger$D = new Logger(version$l);
function getChecksumAddress(address) {
  if (!isHexString$1(address, 20)) {
    logger$D.throwArgumentError("invalid address", "address", address);
  }
  address = address.toLowerCase();
  var chars = address.substring(2).split("");
  var expanded = new Uint8Array(40);
  for (var i = 0; i < 40; i++) {
    expanded[i] = chars[i].charCodeAt(0);
  }
  var hashed = arrayify(keccak256$1(expanded));
  for (var _i = 0; _i < 40; _i += 2) {
    if (hashed[_i >> 1] >> 4 >= 8) {
      chars[_i] = chars[_i].toUpperCase();
    }
    if ((hashed[_i >> 1] & 0x0f) >= 8) {
      chars[_i + 1] = chars[_i + 1].toUpperCase();
    }
  }
  return "0x" + chars.join("");
}
// Shims for environments that are missing some required constants and functions
var MAX_SAFE_INTEGER = 0x1fffffffffffff;
function log10(x) {
  if (Math.log10) {
    return Math.log10(x);
  }
  return Math.log(x) / Math.LN10;
}
// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
// Create lookup table
var ibanLookup = {};
for (var i$1 = 0; i$1 < 10; i$1++) {
  ibanLookup[String(i$1)] = String(i$1);
}
for (var _i2 = 0; _i2 < 26; _i2++) {
  ibanLookup[String.fromCharCode(65 + _i2)] = String(10 + _i2);
}
// How many decimal digits can we process? (for 64-bit float, this is 15)
var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
function ibanChecksum(address) {
  address = address.toUpperCase();
  address = address.substring(4) + address.substring(0, 2) + "00";
  var expanded = address.split("").map(function (c) {
    return ibanLookup[c];
  }).join("");
  // Javascript can handle integers safely up to 15 (decimal) digits
  while (expanded.length >= safeDigits) {
    var block = expanded.substring(0, safeDigits);
    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
  }
  var checksum = String(98 - parseInt(expanded, 10) % 97);
  while (checksum.length < 2) {
    checksum = "0" + checksum;
  }
  return checksum;
}
function getAddress(address) {
  var result = null;
  if (typeof address !== "string") {
    logger$D.throwArgumentError("invalid address", "address", address);
  }
  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    // Missing the 0x prefix
    if (address.substring(0, 2) !== "0x") {
      address = "0x" + address;
    }
    result = getChecksumAddress(address);
    // It is a checksummed address with a bad checksum
    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
      logger$D.throwArgumentError("bad address checksum", "address", address);
    }
    // Maybe ICAP? (we only support direct mode)
  } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    // It is an ICAP address with a bad checksum
    if (address.substring(2, 4) !== ibanChecksum(address)) {
      logger$D.throwArgumentError("bad icap checksum", "address", address);
    }
    result = _base36To16(address.substring(4));
    while (result.length < 40) {
      result = "0" + result;
    }
    result = getChecksumAddress("0x" + result);
  } else {
    logger$D.throwArgumentError("invalid address", "address", address);
  }
  return result;
}
function isAddress(address) {
  try {
    getAddress(address);
    return true;
  } catch (error) {}
  return false;
}
function getIcapAddress(address) {
  var base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();
  while (base36.length < 30) {
    base36 = "0" + base36;
  }
  return "XE" + ibanChecksum("XE00" + base36) + base36;
}
// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
function getContractAddress(transaction) {
  var from = null;
  try {
    from = getAddress(transaction.from);
  } catch (error) {
    logger$D.throwArgumentError("missing from address", "transaction", transaction);
  }
  var nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));
  return getAddress(hexDataSlice(keccak256$1(encode$2([from, nonce])), 12));
}
function getCreate2Address(from, salt, initCodeHash) {
  if (hexDataLength(salt) !== 32) {
    logger$D.throwArgumentError("salt must be 32 bytes", "salt", salt);
  }
  if (hexDataLength(initCodeHash) !== 32) {
    logger$D.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
  }
  return getAddress(hexDataSlice(keccak256$1(concat(["0xff", getAddress(from), salt, initCodeHash])), 12));
}

var lib_esm$f = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getAddress: getAddress,
  isAddress: isAddress,
  getIcapAddress: getIcapAddress,
  getContractAddress: getContractAddress,
  getCreate2Address: getCreate2Address
});

function _createSuper$w(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$w(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$w() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var AddressCoder = /*#__PURE__*/function (_Coder) {
  _inherits(AddressCoder, _Coder);
  var _super = _createSuper$w(AddressCoder);
  function AddressCoder(localName) {
    _classCallCheck(this, AddressCoder);
    return _super.call(this, "address", "address", localName, false);
  }
  _createClass(AddressCoder, [{
    key: "defaultValue",
    value: function defaultValue() {
      return "0x0000000000000000000000000000000000000000";
    }
  }, {
    key: "encode",
    value: function encode(writer, value) {
      try {
        value = getAddress(value);
      } catch (error) {
        this._throwError(error.message, value);
      }
      return writer.writeValue(value);
    }
  }, {
    key: "decode",
    value: function decode(reader) {
      return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
    }
  }]);
  return AddressCoder;
}(Coder);

function _createSuper$v(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$v(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$v() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
// Clones the functionality of an existing Coder, but without a localName
var AnonymousCoder = /*#__PURE__*/function (_Coder) {
  _inherits(AnonymousCoder, _Coder);
  var _super = _createSuper$v(AnonymousCoder);
  function AnonymousCoder(coder) {
    var _this;
    _classCallCheck(this, AnonymousCoder);
    _this = _super.call(this, coder.name, coder.type, undefined, coder.dynamic);
    _this.coder = coder;
    return _this;
  }
  _createClass(AnonymousCoder, [{
    key: "defaultValue",
    value: function defaultValue() {
      return this.coder.defaultValue();
    }
  }, {
    key: "encode",
    value: function encode(writer, value) {
      return this.coder.encode(writer, value);
    }
  }, {
    key: "decode",
    value: function decode(reader) {
      return this.coder.decode(reader);
    }
  }]);
  return AnonymousCoder;
}(Coder);

function _createSuper$u(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$u(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$u() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var logger$C = new Logger(version$n);
function pack$1(writer, coders, values) {
  var arrayValues = null;
  if (Array.isArray(values)) {
    arrayValues = values;
  } else if (values && typeof values === "object") {
    var unique = {};
    arrayValues = coders.map(function (coder) {
      var name = coder.localName;
      if (!name) {
        logger$C.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder: coder,
          value: values
        });
      }
      if (unique[name]) {
        logger$C.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder: coder,
          value: values
        });
      }
      unique[name] = true;
      return values[name];
    });
  } else {
    logger$C.throwArgumentError("invalid tuple value", "tuple", values);
  }
  if (coders.length !== arrayValues.length) {
    logger$C.throwArgumentError("types/value length mismatch", "tuple", values);
  }
  var staticWriter = new Writer(writer.wordSize);
  var dynamicWriter = new Writer(writer.wordSize);
  var updateFuncs = [];
  coders.forEach(function (coder, index) {
    var value = arrayValues[index];
    if (coder.dynamic) {
      // Get current dynamic offset (for the future pointer)
      var dynamicOffset = dynamicWriter.length;
      // Encode the dynamic value into the dynamicWriter
      coder.encode(dynamicWriter, value);
      // Prepare to populate the correct offset once we are done
      var updateFunc = staticWriter.writeUpdatableValue();
      updateFuncs.push(function (baseOffset) {
        updateFunc(baseOffset + dynamicOffset);
      });
    } else {
      coder.encode(staticWriter, value);
    }
  });
  // Backfill all the dynamic offsets, now that we know the static length
  updateFuncs.forEach(function (func) {
    func(staticWriter.length);
  });
  var length = writer.appendWriter(staticWriter);
  length += writer.appendWriter(dynamicWriter);
  return length;
}
function unpack(reader, coders) {
  var values = [];
  // A reader anchored to this base
  var baseReader = reader.subReader(0);
  coders.forEach(function (coder) {
    var value = null;
    if (coder.dynamic) {
      var offset = reader.readValue();
      var offsetReader = baseReader.subReader(offset.toNumber());
      try {
        value = coder.decode(offsetReader);
      } catch (error) {
        // Cannot recover from this
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    } else {
      try {
        value = coder.decode(reader);
      } catch (error) {
        // Cannot recover from this
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    }
    if (value != undefined) {
      values.push(value);
    }
  });
  // We only output named properties for uniquely named coders
  var uniqueNames = coders.reduce(function (accum, coder) {
    var name = coder.localName;
    if (name) {
      if (!accum[name]) {
        accum[name] = 0;
      }
      accum[name]++;
    }
    return accum;
  }, {});
  // Add any named parameters (i.e. tuples)
  coders.forEach(function (coder, index) {
    var name = coder.localName;
    if (!name || uniqueNames[name] !== 1) {
      return;
    }
    if (name === "length") {
      name = "_length";
    }
    if (values[name] != null) {
      return;
    }
    var value = values[index];
    if (value instanceof Error) {
      Object.defineProperty(values, name, {
        enumerable: true,
        get: function get() {
          throw value;
        }
      });
    } else {
      values[name] = value;
    }
  });
  var _loop = function _loop(i) {
    var value = values[i];
    if (value instanceof Error) {
      Object.defineProperty(values, i, {
        enumerable: true,
        get: function get() {
          throw value;
        }
      });
    }
  };
  for (var i = 0; i < values.length; i++) {
    _loop(i);
  }
  return Object.freeze(values);
}
var ArrayCoder = /*#__PURE__*/function (_Coder) {
  _inherits(ArrayCoder, _Coder);
  var _super = _createSuper$u(ArrayCoder);
  function ArrayCoder(coder, length, localName) {
    var _this;
    _classCallCheck(this, ArrayCoder);
    var type = coder.type + "[" + (length >= 0 ? length : "") + "]";
    var dynamic = length === -1 || coder.dynamic;
    _this = _super.call(this, "array", type, localName, dynamic);
    _this.coder = coder;
    _this.length = length;
    return _this;
  }
  _createClass(ArrayCoder, [{
    key: "defaultValue",
    value: function defaultValue() {
      // Verifies the child coder is valid (even if the array is dynamic or 0-length)
      var defaultChild = this.coder.defaultValue();
      var result = [];
      for (var i = 0; i < this.length; i++) {
        result.push(defaultChild);
      }
      return result;
    }
  }, {
    key: "encode",
    value: function encode(writer, value) {
      if (!Array.isArray(value)) {
        this._throwError("expected array value", value);
      }
      var count = this.length;
      if (count === -1) {
        count = value.length;
        writer.writeValue(value.length);
      }
      logger$C.checkArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
      var coders = [];
      for (var i = 0; i < value.length; i++) {
        coders.push(this.coder);
      }
      return pack$1(writer, coders, value);
    }
  }, {
    key: "decode",
    value: function decode(reader) {
      var count = this.length;
      if (count === -1) {
        count = reader.readValue().toNumber();
        // Check that there is *roughly* enough data to ensure
        // stray random data is not being read as a length. Each
        // slot requires at least 32 bytes for their value (or 32
        // bytes as a link to the data). This could use a much
        // tighter bound, but we are erroring on the side of safety.
        if (count * 32 > reader._data.length) {
          logger$C.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
            length: reader._data.length,
            count: count
          });
        }
      }
      var coders = [];
      for (var i = 0; i < count; i++) {
        coders.push(new AnonymousCoder(this.coder));
      }
      return reader.coerce(this.name, unpack(reader, coders));
    }
  }]);
  return ArrayCoder;
}(Coder);

function _createSuper$t(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$t(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$t() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var BooleanCoder = /*#__PURE__*/function (_Coder) {
  _inherits(BooleanCoder, _Coder);
  var _super = _createSuper$t(BooleanCoder);
  function BooleanCoder(localName) {
    _classCallCheck(this, BooleanCoder);
    return _super.call(this, "bool", "bool", localName, false);
  }
  _createClass(BooleanCoder, [{
    key: "defaultValue",
    value: function defaultValue() {
      return false;
    }
  }, {
    key: "encode",
    value: function encode(writer, value) {
      return writer.writeValue(value ? 1 : 0);
    }
  }, {
    key: "decode",
    value: function decode(reader) {
      return reader.coerce(this.type, !reader.readValue().isZero());
    }
  }]);
  return BooleanCoder;
}(Coder);

function _createSuper$s(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$s(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$s() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var DynamicBytesCoder = /*#__PURE__*/function (_Coder) {
  _inherits(DynamicBytesCoder, _Coder);
  var _super = _createSuper$s(DynamicBytesCoder);
  function DynamicBytesCoder(type, localName) {
    _classCallCheck(this, DynamicBytesCoder);
    return _super.call(this, type, type, localName, true);
  }
  _createClass(DynamicBytesCoder, [{
    key: "defaultValue",
    value: function defaultValue() {
      return "0x";
    }
  }, {
    key: "encode",
    value: function encode(writer, value) {
      value = arrayify(value);
      var length = writer.writeValue(value.length);
      length += writer.writeBytes(value);
      return length;
    }
  }, {
    key: "decode",
    value: function decode(reader) {
      return reader.readBytes(reader.readValue().toNumber(), true);
    }
  }]);
  return DynamicBytesCoder;
}(Coder);
var BytesCoder = /*#__PURE__*/function (_DynamicBytesCoder) {
  _inherits(BytesCoder, _DynamicBytesCoder);
  var _super2 = _createSuper$s(BytesCoder);
  function BytesCoder(localName) {
    _classCallCheck(this, BytesCoder);
    return _super2.call(this, "bytes", localName);
  }
  _createClass(BytesCoder, [{
    key: "decode",
    value: function decode(reader) {
      return reader.coerce(this.name, hexlify(_get(_getPrototypeOf(BytesCoder.prototype), "decode", this).call(this, reader)));
    }
  }]);
  return BytesCoder;
}(DynamicBytesCoder);

function _createSuper$r(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$r(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$r() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
// @TODO: Merge this with bytes
var FixedBytesCoder = /*#__PURE__*/function (_Coder) {
  _inherits(FixedBytesCoder, _Coder);
  var _super = _createSuper$r(FixedBytesCoder);
  function FixedBytesCoder(size, localName) {
    var _this;
    _classCallCheck(this, FixedBytesCoder);
    var name = "bytes" + String(size);
    _this = _super.call(this, name, name, localName, false);
    _this.size = size;
    return _this;
  }
  _createClass(FixedBytesCoder, [{
    key: "defaultValue",
    value: function defaultValue() {
      return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
    }
  }, {
    key: "encode",
    value: function encode(writer, value) {
      var data = arrayify(value);
      if (data.length !== this.size) {
        this._throwError("incorrect data length", value);
      }
      return writer.writeBytes(data);
    }
  }, {
    key: "decode",
    value: function decode(reader) {
      return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
    }
  }]);
  return FixedBytesCoder;
}(Coder);

function _createSuper$q(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$q(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$q() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var NullCoder = /*#__PURE__*/function (_Coder) {
  _inherits(NullCoder, _Coder);
  var _super = _createSuper$q(NullCoder);
  function NullCoder(localName) {
    _classCallCheck(this, NullCoder);
    return _super.call(this, "null", "", localName, false);
  }
  _createClass(NullCoder, [{
    key: "defaultValue",
    value: function defaultValue() {
      return null;
    }
  }, {
    key: "encode",
    value: function encode(writer, value) {
      if (value != null) {
        this._throwError("not null", value);
      }
      return writer.writeBytes([]);
    }
  }, {
    key: "decode",
    value: function decode(reader) {
      reader.readBytes(0);
      return reader.coerce(this.name, null);
    }
  }]);
  return NullCoder;
}(Coder);

var AddressZero = "0x0000000000000000000000000000000000000000";

var NegativeOne$1 = /*#__PURE__*/BigNumber.from(-1);
var Zero$1 = /*#__PURE__*/BigNumber.from(0);
var One$1 = /*#__PURE__*/BigNumber.from(1);
var Two = /*#__PURE__*/BigNumber.from(2);
var WeiPerEther = /*#__PURE__*/BigNumber.from("1000000000000000000");
var MaxUint256$1 = /*#__PURE__*/BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var MinInt256 = /*#__PURE__*/BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000");
var MaxInt256 = /*#__PURE__*/BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");

var HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";

// NFKC (composed)             // (decomposed)
var EtherSymbol = "\u039E"; // "\uD835\uDF63";

var index$3 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  AddressZero: AddressZero,
  NegativeOne: NegativeOne$1,
  Zero: Zero$1,
  One: One$1,
  Two: Two,
  WeiPerEther: WeiPerEther,
  MaxUint256: MaxUint256$1,
  MinInt256: MinInt256,
  MaxInt256: MaxInt256,
  HashZero: HashZero,
  EtherSymbol: EtherSymbol
});

function _createSuper$p(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$p(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$p() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var NumberCoder = /*#__PURE__*/function (_Coder) {
  _inherits(NumberCoder, _Coder);
  var _super = _createSuper$p(NumberCoder);
  function NumberCoder(size, signed, localName) {
    var _this;
    _classCallCheck(this, NumberCoder);
    var name = (signed ? "int" : "uint") + size * 8;
    _this = _super.call(this, name, name, localName, false);
    _this.size = size;
    _this.signed = signed;
    return _this;
  }
  _createClass(NumberCoder, [{
    key: "defaultValue",
    value: function defaultValue() {
      return 0;
    }
  }, {
    key: "encode",
    value: function encode(writer, value) {
      var v = BigNumber.from(value);
      // Check bounds are safe for encoding
      var maxUintValue = MaxUint256$1.mask(writer.wordSize * 8);
      if (this.signed) {
        var bounds = maxUintValue.mask(this.size * 8 - 1);
        if (v.gt(bounds) || v.lt(bounds.add(One$1).mul(NegativeOne$1))) {
          this._throwError("value out-of-bounds", value);
        }
      } else if (v.lt(Zero$1) || v.gt(maxUintValue.mask(this.size * 8))) {
        this._throwError("value out-of-bounds", value);
      }
      v = v.toTwos(this.size * 8).mask(this.size * 8);
      if (this.signed) {
        v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
      }
      return writer.writeValue(v);
    }
  }, {
    key: "decode",
    value: function decode(reader) {
      var value = reader.readValue().mask(this.size * 8);
      if (this.signed) {
        value = value.fromTwos(this.size * 8);
      }
      return reader.coerce(this.name, value);
    }
  }]);
  return NumberCoder;
}(Coder);

var version$k = "strings/5.7.0";

var logger$B = new Logger(version$k);
///////////////////////////////
var UnicodeNormalizationForm;
(function (UnicodeNormalizationForm) {
  UnicodeNormalizationForm["current"] = "";
  UnicodeNormalizationForm["NFC"] = "NFC";
  UnicodeNormalizationForm["NFD"] = "NFD";
  UnicodeNormalizationForm["NFKC"] = "NFKC";
  UnicodeNormalizationForm["NFKD"] = "NFKD";
})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
var Utf8ErrorReason;
(function (Utf8ErrorReason) {
  // A continuation byte was present where there was nothing to continue
  // - offset = the index the codepoint began in
  Utf8ErrorReason["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
  // An invalid (non-continuation) byte to start a UTF-8 codepoint was found
  // - offset = the index the codepoint began in
  Utf8ErrorReason["BAD_PREFIX"] = "bad codepoint prefix";
  // The string is too short to process the expected codepoint
  // - offset = the index the codepoint began in
  Utf8ErrorReason["OVERRUN"] = "string overrun";
  // A missing continuation byte was expected but not found
  // - offset = the index the continuation byte was expected at
  Utf8ErrorReason["MISSING_CONTINUE"] = "missing continuation byte";
  // The computed code point is outside the range for UTF-8
  // - offset       = start of this codepoint
  // - badCodepoint = the computed codepoint; outside the UTF-8 range
  Utf8ErrorReason["OUT_OF_RANGE"] = "out of UTF-8 range";
  // UTF-8 strings may not contain UTF-16 surrogate pairs
  // - offset       = start of this codepoint
  // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range
  Utf8ErrorReason["UTF16_SURROGATE"] = "UTF-16 surrogate";
  // The string is an overlong representation
  // - offset       = start of this codepoint
  // - badCodepoint = the computed codepoint; already bounds checked
  Utf8ErrorReason["OVERLONG"] = "overlong representation";
})(Utf8ErrorReason || (Utf8ErrorReason = {}));
function errorFunc(reason, offset, bytes, output, badCodepoint) {
  return logger$B.throwArgumentError("invalid codepoint at offset ".concat(offset, "; ").concat(reason), "bytes", bytes);
}
function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
  // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
  if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
    var i = 0;
    for (var o = offset + 1; o < bytes.length; o++) {
      if (bytes[o] >> 6 !== 0x02) {
        break;
      }
      i++;
    }
    return i;
  }
  // This byte runs us past the end of the string, so just jump to the end
  // (but the first byte was read already read and therefore skipped)
  if (reason === Utf8ErrorReason.OVERRUN) {
    return bytes.length - offset - 1;
  }
  // Nothing to skip
  return 0;
}
function replaceFunc(reason, offset, bytes, output, badCodepoint) {
  // Overlong representations are otherwise "valid" code points; just non-deistingtished
  if (reason === Utf8ErrorReason.OVERLONG) {
    output.push(badCodepoint);
    return 0;
  }
  // Put the replacement character into the output
  output.push(0xfffd);
  // Otherwise, process as if ignoring errors
  return ignoreFunc(reason, offset, bytes);
}
// Common error handing strategies
var Utf8ErrorFuncs = Object.freeze({
  error: errorFunc,
  ignore: ignoreFunc,
  replace: replaceFunc
});
// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
function getUtf8CodePoints(bytes, onError) {
  if (onError == null) {
    onError = Utf8ErrorFuncs.error;
  }
  bytes = arrayify(bytes);
  var result = [];
  var i = 0;
  // Invalid bytes are ignored
  while (i < bytes.length) {
    var c = bytes[i++];
    // 0xxx xxxx
    if (c >> 7 === 0) {
      result.push(c);
      continue;
    }
    // Multibyte; how many bytes left for this character?
    var extraLength = null;
    var overlongMask = null;
    // 110x xxxx 10xx xxxx
    if ((c & 0xe0) === 0xc0) {
      extraLength = 1;
      overlongMask = 0x7f;
      // 1110 xxxx 10xx xxxx 10xx xxxx
    } else if ((c & 0xf0) === 0xe0) {
      extraLength = 2;
      overlongMask = 0x7ff;
      // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
    } else if ((c & 0xf8) === 0xf0) {
      extraLength = 3;
      overlongMask = 0xffff;
    } else {
      if ((c & 0xc0) === 0x80) {
        i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
      } else {
        i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
      }
      continue;
    }
    // Do we have enough bytes in our data?
    if (i - 1 + extraLength >= bytes.length) {
      i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
      continue;
    }
    // Remove the length prefix from the char
    var res = c & (1 << 8 - extraLength - 1) - 1;
    for (var j = 0; j < extraLength; j++) {
      var nextChar = bytes[i];
      // Invalid continuation byte
      if ((nextChar & 0xc0) != 0x80) {
        i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
        res = null;
        break;
      }
      res = res << 6 | nextChar & 0x3f;
      i++;
    }
    // See above loop for invalid continuation byte
    if (res === null) {
      continue;
    }
    // Maximum code point
    if (res > 0x10ffff) {
      i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
      continue;
    }
    // Reserved for UTF-16 surrogate halves
    if (res >= 0xd800 && res <= 0xdfff) {
      i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
      continue;
    }
    // Check for overlong sequences (more bytes than needed)
    if (res <= overlongMask) {
      i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
      continue;
    }
    result.push(res);
  }
  return result;
}
// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
function toUtf8Bytes(str) {
  var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UnicodeNormalizationForm.current;
  if (form != UnicodeNormalizationForm.current) {
    logger$B.checkNormalize();
    str = str.normalize(form);
  }
  var result = [];
  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);
    if (c < 0x80) {
      result.push(c);
    } else if (c < 0x800) {
      result.push(c >> 6 | 0xc0);
      result.push(c & 0x3f | 0x80);
    } else if ((c & 0xfc00) == 0xd800) {
      i++;
      var c2 = str.charCodeAt(i);
      if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
        throw new Error("invalid utf-8 string");
      }
      // Surrogate Pair
      var pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
      result.push(pair >> 18 | 0xf0);
      result.push(pair >> 12 & 0x3f | 0x80);
      result.push(pair >> 6 & 0x3f | 0x80);
      result.push(pair & 0x3f | 0x80);
    } else {
      result.push(c >> 12 | 0xe0);
      result.push(c >> 6 & 0x3f | 0x80);
      result.push(c & 0x3f | 0x80);
    }
  }
  return arrayify(result);
}
function escapeChar(value) {
  var hex = "0000" + value.toString(16);
  return "\\u" + hex.substring(hex.length - 4);
}
function _toEscapedUtf8String(bytes, onError) {
  return '"' + getUtf8CodePoints(bytes, onError).map(function (codePoint) {
    if (codePoint < 256) {
      switch (codePoint) {
        case 8:
          return "\\b";
        case 9:
          return "\\t";
        case 10:
          return "\\n";
        case 13:
          return "\\r";
        case 34:
          return "\\\"";
        case 92:
          return "\\\\";
      }
      if (codePoint >= 32 && codePoint < 127) {
        return String.fromCharCode(codePoint);
      }
    }
    if (codePoint <= 0xffff) {
      return escapeChar(codePoint);
    }
    codePoint -= 0x10000;
    return escapeChar((codePoint >> 10 & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);
  }).join("") + '"';
}
function _toUtf8String(codePoints) {
  return codePoints.map(function (codePoint) {
    if (codePoint <= 0xffff) {
      return String.fromCharCode(codePoint);
    }
    codePoint -= 0x10000;
    return String.fromCharCode((codePoint >> 10 & 0x3ff) + 0xd800, (codePoint & 0x3ff) + 0xdc00);
  }).join("");
}
function toUtf8String(bytes, onError) {
  return _toUtf8String(getUtf8CodePoints(bytes, onError));
}
function toUtf8CodePoints(str) {
  var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UnicodeNormalizationForm.current;
  return getUtf8CodePoints(toUtf8Bytes(str, form));
}

function formatBytes32String(text) {
  // Get the bytes
  var bytes = toUtf8Bytes(text);
  // Check we have room for null-termination
  if (bytes.length > 31) {
    throw new Error("bytes32 string must be less than 32 bytes");
  }
  // Zero-pad (implicitly null-terminates)
  return hexlify(concat([bytes, HashZero]).slice(0, 32));
}
function parseBytes32String(bytes) {
  var data = arrayify(bytes);
  // Must be 32 bytes with a null-termination
  if (data.length !== 32) {
    throw new Error("invalid bytes32 - not 32 bytes long");
  }
  if (data[31] !== 0) {
    throw new Error("invalid bytes32 string - no null terminator");
  }
  // Find the null termination
  var length = 31;
  while (data[length - 1] === 0) {
    length--;
  }
  // Determine the string value
  return toUtf8String(data.slice(0, length));
}

function bytes2(data) {
  if (data.length % 4 !== 0) {
    throw new Error("bad data");
  }
  var result = [];
  for (var i = 0; i < data.length; i += 4) {
    result.push(parseInt(data.substring(i, i + 4), 16));
  }
  return result;
}
function createTable(data, func) {
  if (!func) {
    func = function func(value) {
      return [parseInt(value, 16)];
    };
  }
  var lo = 0;
  var result = {};
  data.split(",").forEach(function (pair) {
    var comps = pair.split(":");
    lo += parseInt(comps[0], 16);
    result[lo] = func(comps[1]);
  });
  return result;
}
function createRangeTable(data) {
  var hi = 0;
  return data.split(",").map(function (v) {
    var comps = v.split("-");
    if (comps.length === 1) {
      comps[1] = "0";
    } else if (comps[1] === "") {
      comps[1] = "1";
    }
    var lo = hi + parseInt(comps[0], 16);
    hi = parseInt(comps[1], 16);
    return {
      l: lo,
      h: hi
    };
  });
}
function matchMap(value, ranges) {
  var lo = 0;
  for (var i = 0; i < ranges.length; i++) {
    var range = ranges[i];
    lo += range.l;
    if (value >= lo && value <= lo + range.h && (value - lo) % (range.d || 1) === 0) {
      if (range.e && range.e.indexOf(value - lo) !== -1) {
        continue;
      }
      return range;
    }
  }
  return null;
}
var Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
// @TODO: Make this relative...
var Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map(function (v) {
  return parseInt(v, 16);
});
var Table_B_2_ranges = [{
  h: 25,
  s: 32,
  l: 65
}, {
  h: 30,
  s: 32,
  e: [23],
  l: 127
}, {
  h: 54,
  s: 1,
  e: [48],
  l: 64,
  d: 2
}, {
  h: 14,
  s: 1,
  l: 57,
  d: 2
}, {
  h: 44,
  s: 1,
  l: 17,
  d: 2
}, {
  h: 10,
  s: 1,
  e: [2, 6, 8],
  l: 61,
  d: 2
}, {
  h: 16,
  s: 1,
  l: 68,
  d: 2
}, {
  h: 84,
  s: 1,
  e: [18, 24, 66],
  l: 19,
  d: 2
}, {
  h: 26,
  s: 32,
  e: [17],
  l: 435
}, {
  h: 22,
  s: 1,
  l: 71,
  d: 2
}, {
  h: 15,
  s: 80,
  l: 40
}, {
  h: 31,
  s: 32,
  l: 16
}, {
  h: 32,
  s: 1,
  l: 80,
  d: 2
}, {
  h: 52,
  s: 1,
  l: 42,
  d: 2
}, {
  h: 12,
  s: 1,
  l: 55,
  d: 2
}, {
  h: 40,
  s: 1,
  e: [38],
  l: 15,
  d: 2
}, {
  h: 14,
  s: 1,
  l: 48,
  d: 2
}, {
  h: 37,
  s: 48,
  l: 49
}, {
  h: 148,
  s: 1,
  l: 6351,
  d: 2
}, {
  h: 88,
  s: 1,
  l: 160,
  d: 2
}, {
  h: 15,
  s: 16,
  l: 704
}, {
  h: 25,
  s: 26,
  l: 854
}, {
  h: 25,
  s: 32,
  l: 55915
}, {
  h: 37,
  s: 40,
  l: 1247
}, {
  h: 25,
  s: -119711,
  l: 53248
}, {
  h: 25,
  s: -119763,
  l: 52
}, {
  h: 25,
  s: -119815,
  l: 52
}, {
  h: 25,
  s: -119867,
  e: [1, 4, 5, 7, 8, 11, 12, 17],
  l: 52
}, {
  h: 25,
  s: -119919,
  l: 52
}, {
  h: 24,
  s: -119971,
  e: [2, 7, 8, 17],
  l: 52
}, {
  h: 24,
  s: -120023,
  e: [2, 7, 13, 15, 16, 17],
  l: 52
}, {
  h: 25,
  s: -120075,
  l: 52
}, {
  h: 25,
  s: -120127,
  l: 52
}, {
  h: 25,
  s: -120179,
  l: 52
}, {
  h: 25,
  s: -120231,
  l: 52
}, {
  h: 25,
  s: -120283,
  l: 52
}, {
  h: 25,
  s: -120335,
  l: 52
}, {
  h: 24,
  s: -119543,
  e: [17],
  l: 56
}, {
  h: 24,
  s: -119601,
  e: [17],
  l: 58
}, {
  h: 24,
  s: -119659,
  e: [17],
  l: 58
}, {
  h: 24,
  s: -119717,
  e: [17],
  l: 58
}, {
  h: 24,
  s: -119775,
  e: [17],
  l: 58
}];
var Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
var Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
var Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
var Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
function flatten(values) {
  return values.reduce(function (accum, value) {
    value.forEach(function (value) {
      accum.push(value);
    });
    return accum;
  }, []);
}
function _nameprepTableA1(codepoint) {
  return !!matchMap(codepoint, Table_A_1_ranges);
}
function _nameprepTableB2(codepoint) {
  var range = matchMap(codepoint, Table_B_2_ranges);
  if (range) {
    return [codepoint + range.s];
  }
  var codes = Table_B_2_lut_abs[codepoint];
  if (codes) {
    return codes;
  }
  var shift = Table_B_2_lut_rel[codepoint];
  if (shift) {
    return [codepoint + shift[0]];
  }
  var complex = Table_B_2_complex[codepoint];
  if (complex) {
    return complex;
  }
  return null;
}
function _nameprepTableC(codepoint) {
  return !!matchMap(codepoint, Table_C_ranges);
}
function nameprep(value) {
  // This allows platforms with incomplete normalize to bypass
  // it for very basic names which the built-in toLowerCase
  // will certainly handle correctly
  if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
    return value.toLowerCase();
  }
  // Get the code points (keeping the current normalization)
  var codes = toUtf8CodePoints(value);
  codes = flatten(codes.map(function (code) {
    // Substitute Table B.1 (Maps to Nothing)
    if (Table_B_1_flags.indexOf(code) >= 0) {
      return [];
    }
    if (code >= 0xfe00 && code <= 0xfe0f) {
      return [];
    }
    // Substitute Table B.2 (Case Folding)
    var codesTableB2 = _nameprepTableB2(code);
    if (codesTableB2) {
      return codesTableB2;
    }
    // No Substitution
    return [code];
  }));
  // Normalize using form KC
  codes = toUtf8CodePoints(_toUtf8String(codes), UnicodeNormalizationForm.NFKC);
  // Prohibit Tables C.1.2, C.2.2, C.3, C.4, C.5, C.6, C.7, C.8, C.9
  codes.forEach(function (code) {
    if (_nameprepTableC(code)) {
      throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
    }
  });
  // Prohibit Unassigned Code Points (Table A.1)
  codes.forEach(function (code) {
    if (_nameprepTableA1(code)) {
      throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
    }
  });
  // IDNA extras
  var name = _toUtf8String(codes);
  // IDNA: 4.2.3.1
  if (name.substring(0, 1) === "-" || name.substring(2, 4) === "--" || name.substring(name.length - 1) === "-") {
    throw new Error("invalid hyphen");
  }
  return name;
}

var lib_esm$e = /*#__PURE__*/Object.freeze({
  __proto__: null,
  _toEscapedUtf8String: _toEscapedUtf8String,
  toUtf8Bytes: toUtf8Bytes,
  toUtf8CodePoints: toUtf8CodePoints,
  toUtf8String: toUtf8String,
  Utf8ErrorFuncs: Utf8ErrorFuncs,
  get Utf8ErrorReason () { return Utf8ErrorReason; },
  get UnicodeNormalizationForm () { return UnicodeNormalizationForm; },
  formatBytes32String: formatBytes32String,
  parseBytes32String: parseBytes32String,
  nameprep: nameprep
});

function _createSuper$o(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$o(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$o() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var StringCoder = /*#__PURE__*/function (_DynamicBytesCoder) {
  _inherits(StringCoder, _DynamicBytesCoder);
  var _super = _createSuper$o(StringCoder);
  function StringCoder(localName) {
    _classCallCheck(this, StringCoder);
    return _super.call(this, "string", localName);
  }
  _createClass(StringCoder, [{
    key: "defaultValue",
    value: function defaultValue() {
      return "";
    }
  }, {
    key: "encode",
    value: function encode(writer, value) {
      return _get(_getPrototypeOf(StringCoder.prototype), "encode", this).call(this, writer, toUtf8Bytes(value));
    }
  }, {
    key: "decode",
    value: function decode(reader) {
      return toUtf8String(_get(_getPrototypeOf(StringCoder.prototype), "decode", this).call(this, reader));
    }
  }]);
  return StringCoder;
}(DynamicBytesCoder);

function _createSuper$n(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$n(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$n() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var TupleCoder = /*#__PURE__*/function (_Coder) {
  _inherits(TupleCoder, _Coder);
  var _super = _createSuper$n(TupleCoder);
  function TupleCoder(coders, localName) {
    var _this;
    _classCallCheck(this, TupleCoder);
    var dynamic = false;
    var types = [];
    coders.forEach(function (coder) {
      if (coder.dynamic) {
        dynamic = true;
      }
      types.push(coder.type);
    });
    var type = "tuple(" + types.join(",") + ")";
    _this = _super.call(this, "tuple", type, localName, dynamic);
    _this.coders = coders;
    return _this;
  }
  _createClass(TupleCoder, [{
    key: "defaultValue",
    value: function defaultValue() {
      var values = [];
      this.coders.forEach(function (coder) {
        values.push(coder.defaultValue());
      });
      // We only output named properties for uniquely named coders
      var uniqueNames = this.coders.reduce(function (accum, coder) {
        var name = coder.localName;
        if (name) {
          if (!accum[name]) {
            accum[name] = 0;
          }
          accum[name]++;
        }
        return accum;
      }, {});
      // Add named values
      this.coders.forEach(function (coder, index) {
        var name = coder.localName;
        if (!name || uniqueNames[name] !== 1) {
          return;
        }
        if (name === "length") {
          name = "_length";
        }
        if (values[name] != null) {
          return;
        }
        values[name] = values[index];
      });
      return Object.freeze(values);
    }
  }, {
    key: "encode",
    value: function encode(writer, value) {
      return pack$1(writer, this.coders, value);
    }
  }, {
    key: "decode",
    value: function decode(reader) {
      return reader.coerce(this.name, unpack(reader, this.coders));
    }
  }]);
  return TupleCoder;
}(Coder);

var logger$A = new Logger(version$n);
var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
var AbiCoder = /*#__PURE__*/function () {
  function AbiCoder(coerceFunc) {
    _classCallCheck(this, AbiCoder);
    defineReadOnly(this, "coerceFunc", coerceFunc || null);
  }
  _createClass(AbiCoder, [{
    key: "_getCoder",
    value: function _getCoder(param) {
      var _this = this;
      switch (param.baseType) {
        case "address":
          return new AddressCoder(param.name);
        case "bool":
          return new BooleanCoder(param.name);
        case "string":
          return new StringCoder(param.name);
        case "bytes":
          return new BytesCoder(param.name);
        case "array":
          return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
        case "tuple":
          return new TupleCoder((param.components || []).map(function (component) {
            return _this._getCoder(component);
          }), param.name);
        case "":
          return new NullCoder(param.name);
      }
      // u?int[0-9]*
      var match = param.type.match(paramTypeNumber);
      if (match) {
        var size = parseInt(match[2] || "256");
        if (size === 0 || size > 256 || size % 8 !== 0) {
          logger$A.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
        }
        return new NumberCoder(size / 8, match[1] === "int", param.name);
      }
      // bytes[0-9]+
      match = param.type.match(paramTypeBytes);
      if (match) {
        var _size = parseInt(match[1]);
        if (_size === 0 || _size > 32) {
          logger$A.throwArgumentError("invalid bytes length", "param", param);
        }
        return new FixedBytesCoder(_size, param.name);
      }
      return logger$A.throwArgumentError("invalid type", "type", param.type);
    }
  }, {
    key: "_getWordSize",
    value: function _getWordSize() {
      return 32;
    }
  }, {
    key: "_getReader",
    value: function _getReader(data, allowLoose) {
      return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
    }
  }, {
    key: "_getWriter",
    value: function _getWriter() {
      return new Writer(this._getWordSize());
    }
  }, {
    key: "getDefaultValue",
    value: function getDefaultValue(types) {
      var _this2 = this;
      var coders = types.map(function (type) {
        return _this2._getCoder(ParamType.from(type));
      });
      var coder = new TupleCoder(coders, "_");
      return coder.defaultValue();
    }
  }, {
    key: "encode",
    value: function encode(types, values) {
      var _this3 = this;
      if (types.length !== values.length) {
        logger$A.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
          count: {
            types: types.length,
            values: values.length
          },
          value: {
            types: types,
            values: values
          }
        });
      }
      var coders = types.map(function (type) {
        return _this3._getCoder(ParamType.from(type));
      });
      var coder = new TupleCoder(coders, "_");
      var writer = this._getWriter();
      coder.encode(writer, values);
      return writer.data;
    }
  }, {
    key: "decode",
    value: function decode(types, data, loose) {
      var _this4 = this;
      var coders = types.map(function (type) {
        return _this4._getCoder(ParamType.from(type));
      });
      var coder = new TupleCoder(coders, "_");
      return coder.decode(this._getReader(arrayify(data), loose));
    }
  }]);
  return AbiCoder;
}();
var defaultAbiCoder = new AbiCoder();

function id(text) {
  return keccak256$1(toUtf8Bytes(text));
}

var version$j = "hash/5.7.0";

function decode$1(textData) {
  textData = atob(textData);
  var data = [];
  for (var i = 0; i < textData.length; i++) {
    data.push(textData.charCodeAt(i));
  }
  return arrayify(data);
}
function encode$1(data) {
  data = arrayify(data);
  var textData = "";
  for (var i = 0; i < data.length; i++) {
    textData += String.fromCharCode(data[i]);
  }
  return btoa(textData);
}

var lib_esm$d = /*#__PURE__*/Object.freeze({
  __proto__: null,
  decode: decode$1,
  encode: encode$1
});

/**
 * MIT License
 *
 * Copyright (c) 2021 Andrew Raffensperger
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * This is a near carbon-copy of the original source (link below) with the
 * TypeScript typings added and a few tweaks to make it ES3-compatible.
 *
 * See: https://github.com/adraffy/ens-normalize.js
 */
// https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js
function flat(array, depth) {
  if (depth == null) {
    depth = 1;
  }
  var result = [];
  var forEach = result.forEach;
  var flatDeep = function flatDeep(arr, depth) {
    forEach.call(arr, function (val) {
      if (depth > 0 && Array.isArray(val)) {
        flatDeep(val, depth - 1);
      } else {
        result.push(val);
      }
    });
  };
  flatDeep(array, depth);
  return result;
}
function fromEntries(array) {
  var result = {};
  for (var i = 0; i < array.length; i++) {
    var value = array[i];
    result[value[0]] = value[1];
  }
  return result;
}
function decode_arithmetic(bytes) {
  var pos = 0;
  function u16() {
    return bytes[pos++] << 8 | bytes[pos++];
  }
  // decode the frequency table
  var symbol_count = u16();
  var total = 1;
  var acc = [0, 1]; // first symbol has frequency 1
  for (var i = 1; i < symbol_count; i++) {
    acc.push(total += u16());
  }
  // skip the sized-payload that the last 3 symbols index into
  var skip = u16();
  var pos_payload = pos;
  pos += skip;
  var read_width = 0;
  var read_buffer = 0;
  function read_bit() {
    if (read_width == 0) {
      // this will read beyond end of buffer
      // but (undefined|0) => zero pad
      read_buffer = read_buffer << 8 | bytes[pos++];
      read_width = 8;
    }
    return read_buffer >> --read_width & 1;
  }
  var N = 31;
  var FULL = Math.pow(2, N);
  var HALF = FULL >>> 1;
  var QRTR = HALF >> 1;
  var MASK = FULL - 1;
  // fill register
  var register = 0;
  for (var _i = 0; _i < N; _i++) {
    register = register << 1 | read_bit();
  }
  var symbols = [];
  var low = 0;
  var range = FULL; // treat like a float
  while (true) {
    var value = Math.floor(((register - low + 1) * total - 1) / range);
    var start = 0;
    var end = symbol_count;
    while (end - start > 1) {
      // binary search
      var mid = start + end >>> 1;
      if (value < acc[mid]) {
        end = mid;
      } else {
        start = mid;
      }
    }
    if (start == 0) break; // first symbol is end mark
    symbols.push(start);
    var a = low + Math.floor(range * acc[start] / total);
    var b = low + Math.floor(range * acc[start + 1] / total) - 1;
    while (((a ^ b) & HALF) == 0) {
      register = register << 1 & MASK | read_bit();
      a = a << 1 & MASK;
      b = b << 1 & MASK | 1;
    }
    while (a & ~b & QRTR) {
      register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
      a = a << 1 ^ HALF;
      b = (b ^ HALF) << 1 | HALF | 1;
    }
    low = a;
    range = 1 + b - a;
  }
  var offset = symbol_count - 4;
  return symbols.map(function (x) {
    switch (x - offset) {
      case 3:
        return offset + 0x10100 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);
      case 2:
        return offset + 0x100 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);
      case 1:
        return offset + bytes[pos_payload++];
      default:
        return x - 1;
    }
  });
}
// returns an iterator which returns the next symbol
function read_payload(v) {
  var pos = 0;
  return function () {
    return v[pos++];
  };
}
function read_compressed_payload(bytes) {
  return read_payload(decode_arithmetic(bytes));
}
// eg. [0,1,2,3...] => [0,-1,1,-2,...]
function signed(i) {
  return i & 1 ? ~i >> 1 : i >> 1;
}
function read_counts(n, next) {
  var v = Array(n);
  for (var i = 0; i < n; i++) {
    v[i] = 1 + next();
  }
  return v;
}
function read_ascending(n, next) {
  var v = Array(n);
  for (var i = 0, x = -1; i < n; i++) {
    v[i] = x += 1 + next();
  }
  return v;
}
function read_deltas(n, next) {
  var v = Array(n);
  for (var i = 0, x = 0; i < n; i++) {
    v[i] = x += signed(next());
  }
  return v;
}
function read_member_array(next, lookup) {
  var v = read_ascending(next(), next);
  var n = next();
  var vX = read_ascending(n, next);
  var vN = read_counts(n, next);
  for (var i = 0; i < n; i++) {
    for (var j = 0; j < vN[i]; j++) {
      v.push(vX[i] + j);
    }
  }
  return lookup ? v.map(function (x) {
    return lookup[x];
  }) : v;
}
// returns array of 
// [x, ys] => single replacement rule
// [x, ys, n, dx, dx] => linear map
function read_mapped_map(next) {
  var ret = [];
  while (true) {
    var w = next();
    if (w == 0) break;
    ret.push(read_linear_table(w, next));
  }
  while (true) {
    var _w = next() - 1;
    if (_w < 0) break;
    ret.push(read_replacement_table(_w, next));
  }
  return fromEntries(flat(ret));
}
function read_zero_terminated_array(next) {
  var v = [];
  while (true) {
    var i = next();
    if (i == 0) break;
    v.push(i);
  }
  return v;
}
function read_transposed(n, w, next) {
  var m = Array(n).fill(undefined).map(function () {
    return [];
  });
  for (var i = 0; i < w; i++) {
    read_deltas(n, next).forEach(function (x, j) {
      return m[j].push(x);
    });
  }
  return m;
}
function read_linear_table(w, next) {
  var dx = 1 + next();
  var dy = next();
  var vN = read_zero_terminated_array(next);
  var m = read_transposed(vN.length, 1 + w, next);
  return flat(m.map(function (v, i) {
    var x = v[0],
      ys = v.slice(1);
    //let [x, ...ys] = v;
    //return Array(vN[i]).fill().map((_, j) => {
    return Array(vN[i]).fill(undefined).map(function (_, j) {
      var j_dy = j * dy;
      return [x + j * dx, ys.map(function (y) {
        return y + j_dy;
      })];
    });
  }));
}
function read_replacement_table(w, next) {
  var n = 1 + next();
  var m = read_transposed(n, 1 + w, next);
  return m.map(function (v) {
    return [v[0], v.slice(1)];
  });
}
function read_emoji_trie(next) {
  var sorted = read_member_array(next).sort(function (a, b) {
    return a - b;
  });
  return read();
  function read() {
    var branches = [];
    while (true) {
      var keys = read_member_array(next, sorted);
      if (keys.length == 0) break;
      branches.push({
        set: new Set(keys),
        node: read()
      });
    }
    branches.sort(function (a, b) {
      return b.set.size - a.set.size;
    }); // sort by likelihood
    var temp = next();
    var valid = temp % 3;
    temp = temp / 3 | 0;
    var fe0f = !!(temp & 1);
    temp >>= 1;
    var save = temp == 1;
    var check = temp == 2;
    return {
      branches: branches,
      valid: valid,
      fe0f: fe0f,
      save: save,
      check: check
    };
  }
}

/**
 * MIT License
 *
 * Copyright (c) 2021 Andrew Raffensperger
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * This is a near carbon-copy of the original source (link below) with the
 * TypeScript typings added and a few tweaks to make it ES3-compatible.
 *
 * See: https://github.com/adraffy/ens-normalize.js
 */
function getData() {
  return read_compressed_payload(decode$1('AEQF2AO2DEsA2wIrAGsBRABxAN8AZwCcAEwAqgA0AGwAUgByADcATAAVAFYAIQAyACEAKAAYAFgAGwAjABQAMAAmADIAFAAfABQAKwATACoADgAbAA8AHQAYABoAGQAxADgALAAoADwAEwA9ABMAGgARAA4ADwAWABMAFgAIAA8AHgQXBYMA5BHJAS8JtAYoAe4AExozi0UAH21tAaMnBT8CrnIyhrMDhRgDygIBUAEHcoFHUPe8AXBjAewCjgDQR8IICIcEcQLwATXCDgzvHwBmBoHNAqsBdBcUAykgDhAMShskMgo8AY8jqAQfAUAfHw8BDw87MioGlCIPBwZCa4ELatMAAMspJVgsDl8AIhckSg8XAHdvTwBcIQEiDT4OPhUqbyECAEoAS34Aej8Ybx83JgT/Xw8gHxZ/7w8RICxPHA9vBw+Pfw8PHwAPFv+fAsAvCc8vEr8ivwD/EQ8Bol8OEBa/A78hrwAPCU8vESNvvwWfHwNfAVoDHr+ZAAED34YaAdJPAK7PLwSEgDLHAGo1Pz8Pvx9fUwMrpb8O/58VTzAPIBoXIyQJNF8hpwIVAT8YGAUADDNBaX3RAMomJCg9EhUeA29MABsZBTMNJipjOhc19gcIDR8bBwQHEggCWi6DIgLuAQYA+BAFCha3A5XiAEsqM7UFFgFLhAMjFTMYE1Klnw74nRVBG/ASCm0BYRN/BrsU3VoWy+S0vV8LQx+vN8gF2AC2AK5EAWwApgYDKmAAroQ0NDQ0AT+OCg7wAAIHRAbpNgVcBV0APTA5BfbPFgMLzcYL/QqqA82eBALKCjQCjqYCht0/k2+OAsXQAoP3ASTKDgDw6ACKAUYCMpIKJpRaAE4A5womABzZvs0REEKiACIQAd5QdAECAj4Ywg/wGqY2AVgAYADYvAoCGAEubA0gvAY2ALAAbpbvqpyEAGAEpgQAJgAG7gAgAEACmghUFwCqAMpAINQIwC4DthRAAPcycKgApoIdABwBfCisABoATwBqASIAvhnSBP8aH/ECeAKXAq40NjgDBTwFYQU6AXs3oABgAD4XNgmcCY1eCl5tIFZeUqGgyoNHABgAEQAaABNwWQAmABMATPMa3T34ADldyprmM1M2XociUQgLzvwAXT3xABgAEQAaABNwIGFAnADD8AAgAD4BBJWzaCcIAIEBFMAWwKoAAdq9BWAF5wLQpALEtQAKUSGkahR4GnJM+gsAwCgeFAiUAECQ0BQuL8AAIAAAADKeIheclvFqQAAETr4iAMxIARMgAMIoHhQIAn0E0pDQFC4HhznoAAAAIAI2C0/4lvFqQAAETgBJJwYCAy4ABgYAFAA8MBKYEH4eRhTkAjYeFcgACAYAeABsOqyQ5gRwDayqugEgaIIAtgoACgDmEABmBAWGme5OBJJA2m4cDeoAmITWAXwrMgOgAGwBCh6CBXYF1Tzg1wKAAFdiuABRAFwAXQBsAG8AdgBrAHYAbwCEAHEwfxQBVE5TEQADVFhTBwBDANILAqcCzgLTApQCrQL6vAAMAL8APLhNBKkE6glGKTAU4Dr4N2EYEwBCkABKk8rHAbYBmwIoAiU4Ajf/Aq4CowCAANIChzgaNBsCsTgeODcFXrgClQKdAqQBiQGYAqsCsjTsNHsfNPA0ixsAWTWiOAMFPDQSNCk2BDZHNow2TTZUNhk28Jk9VzI3QkEoAoICoQKwAqcAQAAxBV4FXbS9BW47YkIXP1ciUqs05DS/FwABUwJW11e6nHuYZmSh/RAYA8oMKvZ8KASoUAJYWAJ6ILAsAZSoqjpgA0ocBIhmDgDWAAawRDQoAAcuAj5iAHABZiR2AIgiHgCaAU68ACxuHAG0ygM8MiZIAlgBdF4GagJqAPZOHAMuBgoATkYAsABiAHgAMLoGDPj0HpKEBAAOJgAuALggTAHWAeAMEDbd20Uege0ADwAWADkAQgA9OHd+2MUQZBBhBgNNDkxxPxUQArEPqwvqERoM1irQ090ANK4H8ANYB/ADWANYB/AH8ANYB/ADWANYA1gDWBwP8B/YxRBkD00EcgWTBZAE2wiIJk4RhgctCNdUEnQjHEwDSgEBIypJITuYMxAlR0wRTQgIATZHbKx9PQNMMbBU+pCnA9AyVDlxBgMedhKlAC8PeCE1uk6DekxxpQpQT7NX9wBFBgASqwAS5gBJDSgAUCwGPQBI4zTYABNGAE2bAE3KAExdGABKaAbgAFBXAFCOAFBJABI2SWdObALDOq0//QomCZhvwHdTBkIQHCemEPgMNAG2ATwN7kvZBPIGPATKH34ZGg/OlZ0Ipi3eDO4m5C6igFsj9iqEBe5L9TzeC05RaQ9aC2YJ5DpkgU8DIgEOIowK3g06CG4Q9ArKbA3mEUYHOgPWSZsApgcCCxIdNhW2JhFirQsKOXgG/Br3C5AmsBMqev0F1BoiBk4BKhsAANAu6IWxWjJcHU9gBgQLJiPIFKlQIQ0mQLh4SRocBxYlqgKSQ3FKiFE3HpQh9zw+DWcuFFF9B/Y8BhlQC4I8n0asRQ8R0z6OPUkiSkwtBDaALDAnjAnQD4YMunxzAVoJIgmyDHITMhEYN8YIOgcaLpclJxYIIkaWYJsE+KAD9BPSAwwFQAlCBxQDthwuEy8VKgUOgSXYAvQ21i60ApBWgQEYBcwPJh/gEFFH4Q7qCJwCZgOEJewALhUiABginAhEZABgj9lTBi7MCMhqbSN1A2gU6GIRdAeSDlgHqBw0FcAc4nDJXgyGCSiksAlcAXYJmgFgBOQICjVcjKEgQmdUi1kYnCBiQUBd/QIyDGYVoES+h3kCjA9sEhwBNgF0BzoNAgJ4Ee4RbBCWCOyGBTW2M/k6JgRQIYQgEgooA1BszwsoJvoM+WoBpBJjAw00PnfvZ6xgtyUX/gcaMsZBYSHyC5NPzgydGsIYQ1QvGeUHwAP0GvQn60FYBgADpAQUOk4z7wS+C2oIjAlAAEoOpBgH2BhrCnKM0QEyjAG4mgNYkoQCcJAGOAcMAGgMiAV65gAeAqgIpAAGANADWAA6Aq4HngAaAIZCAT4DKDABIuYCkAOUCDLMAZYwAfQqBBzEDBYA+DhuSwLDsgKAa2ajBd5ZAo8CSjYBTiYEBk9IUgOwcuIA3ABMBhTgSAEWrEvMG+REAeBwLADIAPwABjYHBkIBzgH0bgC4AWALMgmjtLYBTuoqAIQAFmwB2AKKAN4ANgCA8gFUAE4FWvoF1AJQSgESMhksWGIBvAMgATQBDgB6BsyOpsoIIARuB9QCEBwV4gLvLwe2AgMi4BPOQsYCvd9WADIXUu5eZwqoCqdeaAC0YTQHMnM9UQAPH6k+yAdy/BZIiQImSwBQ5gBQQzSaNTFWSTYBpwGqKQK38AFtqwBI/wK37gK3rQK3sAK6280C0gK33AK3zxAAUEIAUD9SklKDArekArw5AEQAzAHCO147WTteO1k7XjtZO147WTteO1kDmChYI03AVU0oJqkKbV9GYewMpw3VRMk6ShPcYFJgMxPJLbgUwhXPJVcZPhq9JwYl5VUKDwUt1GYxCC00dhe9AEApaYNCY4ceMQpMHOhTklT5LRwAskujM7ANrRsWREEFSHXuYisWDwojAmSCAmJDXE6wXDchAqH4AmiZAmYKAp+FOBwMAmY8AmYnBG8EgAN/FAN+kzkHOXgYOYM6JCQCbB4CMjc4CwJtyAJtr/CLADRoRiwBaADfAOIASwYHmQyOAP8MwwAOtgJ3MAJ2o0ACeUxEAni7Hl3cRa9G9AJ8QAJ6yQJ9CgJ88UgBSH5kJQAsFklZSlwWGErNAtECAtDNSygDiFADh+dExpEzAvKiXQQDA69Lz0wuJgTQTU1NsAKLQAKK2cIcCB5EaAa4Ao44Ao5dQZiCAo7aAo5deVG1UzYLUtVUhgKT/AKTDQDqAB1VH1WwVdEHLBwplocy4nhnRTw6ApegAu+zWCKpAFomApaQApZ9nQCqWa1aCoJOADwClrYClk9cRVzSApnMApllXMtdCBoCnJw5wzqeApwXAp+cAp65iwAeEDIrEAKd8gKekwC2PmE1YfACntQCoG8BqgKeoCACnk+mY8lkKCYsAiewAiZ/AqD8AqBN2AKmMAKlzwKoAAB+AqfzaH1osgAESmodatICrOQCrK8CrWgCrQMCVx4CVd0CseLYAx9PbJgCsr4OArLpGGzhbWRtSWADJc4Ctl08QG6RAylGArhfArlIFgK5K3hwN3DiAr0aAy2zAzISAr6JcgMDM3ICvhtzI3NQAsPMAsMFc4N0TDZGdOEDPKgDPJsDPcACxX0CxkgCxhGKAshqUgLIRQLJUALJLwJkngLd03h6YniveSZL0QMYpGcDAmH1GfSVJXsMXpNevBICz2wCz20wTFTT9BSgAMeuAs90ASrrA04TfkwGAtwoAtuLAtJQA1JdA1NgAQIDVY2AikABzBfuYUZ2AILPg44C2sgC2d+EEYRKpz0DhqYAMANkD4ZyWvoAVgLfZgLeuXR4AuIw7RUB8zEoAfScAfLTiALr9ALpcXoAAur6AurlAPpIAboC7ooC652Wq5cEAu5AA4XhmHpw4XGiAvMEAGoDjheZlAL3FAORbwOSiAL3mQL52gL4Z5odmqy8OJsfA52EAv77ARwAOp8dn7QDBY4DpmsDptoA0sYDBmuhiaIGCgMMSgFgASACtgNGAJwEgLpoBgC8BGzAEowcggCEDC6kdjoAJAM0C5IKRoABZCgiAIzw3AYBLACkfng9ogigkgNmWAN6AEQCvrkEVqTGAwCsBRbAA+4iQkMCHR072jI2PTbUNsk2RjY5NvA23TZKNiU3EDcZN5I+RTxDRTBCJkK5VBYKFhZfwQCWygU3AJBRHpu+OytgNxa61A40GMsYjsn7BVwFXQVcBV0FaAVdBVwFXQVcBV0FXAVdBVwFXUsaCNyKAK4AAQUHBwKU7oICoW1e7jAEzgPxA+YDwgCkBFDAwADABKzAAOxFLhitA1UFTDeyPkM+bj51QkRCuwTQWWQ8X+0AWBYzsACNA8xwzAGm7EZ/QisoCTAbLDs6fnLfb8H2GccsbgFw13M1HAVkBW/Jxsm9CNRO8E8FDD0FBQw9FkcClOYCoMFegpDfADgcMiA2AJQACB8AsigKAIzIEAJKeBIApY5yPZQIAKQiHb4fvj5BKSRPQrZCOz0oXyxgOywfKAnGbgMClQaCAkILXgdeCD9IIGUgQj5fPoY+dT52Ao5CM0dAX9BTVG9SDzFwWTQAbxBzJF/lOEIQQglCCkKJIAls5AcClQICoKPMODEFxhi6KSAbiyfIRrMjtCgdWCAkPlFBIitCsEJRzAbMAV/OEyQzDg0OAQQEJ36i328/Mk9AybDJsQlq3tDRApUKAkFzXf1d/j9uALYP6hCoFgCTGD8kPsFKQiobrm0+zj0KSD8kPnVCRBwMDyJRTHFgMTJa5rwXQiQ2YfI/JD7BMEJEHGINTw4TOFlIRzwJO0icMQpyPyQ+wzJCRBv6DVgnKB01NgUKj2bwYzMqCoBkznBgEF+zYDIocwRIX+NgHj4HICNfh2C4CwdwFWpTG/lgUhYGAwRfv2Ts8mAaXzVgml/XYIJfuWC4HI1gUF9pYJZgMR6ilQHMAOwLAlDRefC0in4AXAEJA6PjCwc0IamOANMMCAECRQDFNRTZBgd+CwQlRA+r6+gLBDEFBnwUBXgKATIArwAGRAAHA3cDdAN2A3kDdwN9A3oDdQN7A30DfAN4A3oDfQAYEAAlAtYASwMAUAFsAHcKAHcAmgB3AHUAdQB2AHVu8UgAygDAAHcAdQB1AHYAdQALCgB3AAsAmgB3AAsCOwB3AAtu8UgAygDAAHgKAJoAdwB3AHUAdQB2AHUAeAB1AHUAdgB1bvFIAMoAwAALCgCaAHcACwB3AAsCOwB3AAtu8UgAygDAAH4ACwGgALcBpwC6AahdAu0COwLtbvFIAMoAwAALCgCaAu0ACwLtAAsCOwLtAAtu8UgAygDAA24ACwNvAAu0VsQAAzsAABCkjUIpAAsAUIusOggWcgMeBxVsGwL67U/2HlzmWOEeOgALASvuAAseAfpKUpnpGgYJDCIZM6YyARUE9ThqAD5iXQgnAJYJPnOzw0ZAEZxEKsIAkA4DhAHnTAIDxxUDK0lxCQlPYgIvIQVYJQBVqE1GakUAKGYiDToSBA1EtAYAXQJYAIF8GgMHRyAAIAjOe9YncekRAA0KACUrjwE7Ayc6AAYWAqaiKG4McEcqANoN3+Mg9TwCBhIkuCny+JwUQ29L008JluRxu3K+oAdqiHOqFH0AG5SUIfUJ5SxCGfxdipRzqTmT4V5Zb+r1Uo4Vm+NqSSEl2mNvR2JhIa8SpYO6ntdwFXHCWTCK8f2+Hxo7uiG3drDycAuKIMP5bhi06ACnqArH1rz4Rqg//lm6SgJGEVbF9xJHISaR6HxqxSnkw6shDnelHKNEfGUXSJRJ1GcsmtJw25xrZMDK9gXSm1/YMkdX4/6NKYOdtk/NQ3/NnDASjTc3fPjIjW/5sVfVObX2oTDWkr1dF9f3kxBsD3/3aQO8hPfRz+e0uEiJqt1161griu7gz8hDDwtpy+F+BWtefnKHZPAxcZoWbnznhJpy0e842j36bcNzGnIEusgGX0a8ZxsnjcSsPDZ09yZ36fCQbriHeQ72JRMILNl6ePPf2HWoVwgWAm1fb3V2sAY0+B6rAXqSwPBgseVmoqsBTSrm91+XasMYYySI8eeRxH3ZvHkMz3BQ5aJ3iUVbYPNM3/7emRtjlsMgv/9VyTsyt/mK+8fgWeT6SoFaclXqn42dAIsvAarF5vNNWHzKSkKQ/8Hfk5ZWK7r9yliOsooyBjRhfkHP4Q2DkWXQi6FG/9r/IwbmkV5T7JSopHKn1pJwm9tb5Ot0oyN1Z2mPpKXHTxx2nlK08fKk1hEYA8WgVVWL5lgx0iTv+KdojJeU23ZDjmiubXOxVXJKKi2Wjuh2HLZOFLiSC7Tls5SMh4f+Pj6xUSrNjFqLGehRNB8lC0QSLNmkJJx/wSG3MnjE9T1CkPwJI0wH2lfzwETIiVqUxg0dfu5q39Gt+hwdcxkhhNvQ4TyrBceof3Mhs/IxFci1HmHr4FMZgXEEczPiGCx0HRwzAqDq2j9AVm1kwN0mRVLWLylgtoPNapF5cY4Y1wJh/e0BBwZj44YgZrDNqvD/9Hv7GFYdUQeDJuQ3EWI4HaKqavU1XjC/n41kT4L79kqGq0kLhdTZvgP3TA3fS0ozVz+5piZsoOtIvBUFoMKbNcmBL6YxxaUAusHB38XrS8dQMnQwJfUUkpRoGr5AUeWicvBTzyK9g77+yCkf5PAysL7r/JjcZgrbvRpMW9iyaxZvKO6ceZN2EwIxKwVFPuvFuiEPGCoagbMo+SpydLrXqBzNCDGFCrO/rkcwa2xhokQZ5CdZ0AsU3JfSqJ6n5I14YA+P/uAgfhPU84Tlw7cEFfp7AEE8ey4sP12PTt4Cods1GRgDOB5xvyiR5m+Bx8O5nBCNctU8BevfV5A08x6RHd5jcwPTMDSZJOedIZ1cGQ704lxbAzqZOP05ZxaOghzSdvFBHYqomATARyAADK4elP8Ly3IrUZKfWh23Xy20uBUmLS4Pfagu9+oyVa2iPgqRP3F2CTUsvJ7+RYnN8fFZbU/HVvxvcFFDKkiTqV5UBZ3Gz54JAKByi9hkKMZJvuGgcSYXFmw08UyoQyVdfTD1/dMkCHXcTGAKeROgArsvmRrQTLUOXioOHGK2QkjHuoYFgXciZoTJd6Fs5q1QX1G+p/e26hYsEf7QZD1nnIyl/SFkNtYYmmBhpBrxl9WbY0YpHWRuw2Ll/tj9mD8P4snVzJl4F9J+1arVeTb9E5r2ILH04qStjxQNwn3m4YNqxmaNbLAqW2TN6LidwuJRqS+NXbtqxoeDXpxeGWmxzSkWxjkyCkX4NQRme6q5SAcC+M7+9ETfA/EwrzQajKakCwYyeunP6ZFlxU2oMEn1Pz31zeStW74G406ZJFCl1wAXIoUKkWotYEpOuXB1uVNxJ63dpJEqfxBeptwIHNrPz8BllZoIcBoXwgfJ+8VAUnVPvRvexnw0Ma/WiGYuJO5y8QTvEYBigFmhUxY5RqzE8OcywN/8m4UYrlaniJO75XQ6KSo9+tWHlu+hMi0UVdiKQp7NelnoZUzNaIyBPVeOwK6GNp+FfHuPOoyhaWuNvTYFkvxscMQWDh+zeFCFkgwbXftiV23ywJ4+uwRqmg9k3KzwIQpzppt8DBBOMbrqwQM5Gb05sEwdKzMiAqOloaA/lr0KA+1pr0/+HiWoiIjHA/wir2nIuS3PeU/ji3O6ZwoxcR1SZ9FhtLC5S0FIzFhbBWcGVP/KpxOPSiUoAdWUpqKH++6Scz507iCcxYI6rdMBICPJZea7OcmeFw5mObJSiqpjg2UoWNIs+cFhyDSt6geV5qgi3FunmwwDoGSMgerFOZGX1m0dMCYo5XOruxO063dwENK9DbnVM9wYFREzh4vyU1WYYJ/LRRp6oxgjqP/X5a8/4Af6p6NWkQferzBmXme0zY/4nwMJm/wd1tIqSwGz+E3xPEAOoZlJit3XddD7/BT1pllzOx+8bmQtANQ/S6fZexc6qi3W+Q2xcmXTUhuS5mpHQRvcxZUN0S5+PL9lXWUAaRZhEH8hTdAcuNMMCuVNKTEGtSUKNi3O6KhSaTzck8csZ2vWRZ+d7mW8c4IKwXIYd25S/zIftPkwPzufjEvOHWVD1m+FjpDVUTV0DGDuHj6QnaEwLu/dEgdLQOg9E1Sro9XHJ8ykLAwtPu+pxqKDuFexqON1sKQm7rwbE1E68UCfA/erovrTCG+DBSNg0l4goDQvZN6uNlbyLpcZAwj2UclycvLpIZMgv4yRlpb3YuMftozorbcGVHt/VeDV3+Fdf1TP0iuaCsPi2G4XeGhsyF1ubVDxkoJhmniQ0/jSg/eYML9KLfnCFgISWkp91eauR3IQvED0nAPXK+6hPCYs+n3+hCZbiskmVMG2da+0EsZPonUeIY8EbfusQXjsK/eFDaosbPjEfQS0RKG7yj5GG69M7MeO1HmiUYocgygJHL6M1qzUDDwUSmr99V7Sdr2F3JjQAJY+F0yH33Iv3+C9M38eML7gTgmNu/r2bUMiPvpYbZ6v1/IaESirBHNa7mPKn4dEmYg7v/+HQgPN1G79jBQ1+soydfDC2r+h2Bl/KIc5KjMK7OH6nb1jLsNf0EHVe2KBiE51ox636uyG6Lho0t3J34L5QY/ilE3mikaF4HKXG1mG1rCevT1Vv6GavltxoQe/bMrpZvRggnBxSEPEeEzkEdOxTnPXHVjUYdw8JYvjB/o7Eegc3Ma+NUxLLnsK0kJlinPmUHzHGtrk5+CAbVzFOBqpyy3QVUnzTDfC/0XD94/okH+OB+i7g9lolhWIjSnfIb+Eq43ZXOWmwvjyV/qqD+t0e+7mTEM74qP/Ozt8nmC7mRpyu63OB4KnUzFc074SqoyPUAgM+/TJGFo6T44EHnQU4X4z6qannVqgw/U7zCpwcmXV1AubIrvOmkKHazJAR55ePjp5tLBsN8vAqs3NAHdcEHOR2xQ0lsNAFzSUuxFQCFYvXLZJdOj9p4fNq6p0HBGUik2YzaI4xySy91KzhQ0+q1hjxvImRwPRf76tChlRkhRCi74NXZ9qUNeIwP+s5p+3m5nwPdNOHgSLD79n7O9m1n1uDHiMntq4nkYwV5OZ1ENbXxFd4PgrlvavZsyUO4MqYlqqn1O8W/I1dEZq5dXhrbETLaZIbC2Kj/Aa/QM+fqUOHdf0tXAQ1huZ3cmWECWSXy/43j35+Mvq9xws7JKseriZ1pEWKc8qlzNrGPUGcVgOa9cPJYIJsGnJTAUsEcDOEVULO5x0rXBijc1lgXEzQQKhROf8zIV82w8eswc78YX11KYLWQRcgHNJElBxfXr72lS2RBSl07qTKorO2uUDZr3sFhYsvnhLZn0A94KRzJ/7DEGIAhW5ZWFpL8gEwu1aLA9MuWZzNwl8Oze9Y+bX+v9gywRVnoB5I/8kXTXU3141yRLYrIOOz6SOnyHNy4SieqzkBXharjfjqq1q6tklaEbA8Qfm2DaIPs7OTq/nvJBjKfO2H9bH2cCMh1+5gspfycu8f/cuuRmtDjyqZ7uCIMyjdV3a+p3fqmXsRx4C8lujezIFHnQiVTXLXuI1XrwN3+siYYj2HHTvESUx8DlOTXpak9qFRK+L3mgJ1WsD7F4cu1aJoFoYQnu+wGDMOjJM3kiBQWHCcvhJ/HRdxodOQp45YZaOTA22Nb4XKCVxqkbwMYFhzYQYIAnCW8FW14uf98jhUG2zrKhQQ0q0CEq0t5nXyvUyvR8DvD69LU+g3i+HFWQMQ8PqZuHD+sNKAV0+M6EJC0szq7rEr7B5bQ8BcNHzvDMc9eqB5ZCQdTf80Obn4uzjwpYU7SISdtV0QGa9D3Wrh2BDQtpBKxaNFV+/Cy2P/Sv+8s7Ud0Fd74X4+o/TNztWgETUapy+majNQ68Lq3ee0ZO48VEbTZYiH1Co4OlfWef82RWeyUXo7woM03PyapGfikTnQinoNq5z5veLpeMV3HCAMTaZmA1oGLAn7XS3XYsz+XK7VMQsc4XKrmDXOLU/pSXVNUq8dIqTba///3x6LiLS6xs1xuCAYSfcQ3+rQgmu7uvf3THKt5Ooo97TqcbRqxx7EASizaQCBQllG/rYxVapMLgtLbZS64w1MDBMXX+PQpBKNwqUKOf2DDRDUXQf9EhOS0Qj4nTmlA8dzSLz/G1d+Ud8MTy/6ghhdiLpeerGY/UlDOfiuqFsMUU5/UYlP+BAmgRLuNpvrUaLlVkrqDievNVEAwF+4CoM1MZTmjxjJMsKJq+u8Zd7tNCUFy6LiyYXRJQ4VyvEQFFaCGKsxIwQkk7EzZ6LTJq2hUuPhvAW+gQnSG6J+MszC+7QCRHcnqDdyNRJ6T9xyS87A6MDutbzKGvGktpbXqtzWtXb9HsfK2cBMomjN9a4y+TaJLnXxAeX/HWzmf4cR4vALt/P4w4qgKY04ml4ZdLOinFYS6cup3G/1ie4+t1eOnpBNlqGqs75ilzkT4+DsZQxNvaSKJ//6zIbbk/M7LOhFmRc/1R+kBtz7JFGdZm/COotIdvQoXpTqP/1uqEUmCb/QWoGLMwO5ANcHzxdY48IGP5+J+zKOTBFZ4Pid+GTM+Wq12MV/H86xEJptBa6T+p3kgpwLedManBHC2GgNrFpoN2xnrMz9WFWX/8/ygSBkavq2Uv7FdCsLEYLu9LLIvAU0bNRDtzYl+/vXmjpIvuJFYjmI0im6QEYqnIeMsNjXG4vIutIGHijeAG/9EDBozKV5cldkHbLxHh25vT+ZEzbhXlqvpzKJwcEgfNwLAKFeo0/pvEE10XDB+EXRTXtSzJozQKFFAJhMxYkVaCW+E9AL7tMeU8acxidHqzb6lX4691UsDpy/LLRmT+epgW56+5Cw8tB4kMUv6s9lh3eRKbyGs+H/4mQMaYzPTf2OOdokEn+zzgvoD3FqNKk8QqGAXVsqcGdXrT62fSPkR2vROFi68A6se86UxRUk4cajfPyCC4G5wDhD+zNq4jodQ4u4n/m37Lr36n4LIAAsVr02dFi9AiwA81MYs2rm4eDlDNmdMRvEKRHfBwW5DdMNp0jPFZMeARqF/wL4XBfd+EMLBfMzpH5GH6NaW+1vrvMdg+VxDzatk3MXgO3ro3P/DpcC6+Mo4MySJhKJhSR01SGGGp5hPWmrrUgrv3lDnP+HhcI3nt3YqBoVAVTBAQT5iuhTg8nvPtd8ZeYj6w1x6RqGUBrSku7+N1+BaasZvjTk64RoIDlL8brpEcJx3OmY7jLoZsswdtmhfC/G21llXhITOwmvRDDeTTPbyASOa16cF5/A1fZAidJpqju3wYAy9avPR1ya6eNp9K8XYrrtuxlqi+bDKwlfrYdR0RRiKRVTLOH85+ZY7XSmzRpfZBJjaTa81VDcJHpZnZnSQLASGYW9l51ZV/h7eVzTi3Hv6hUsgc/51AqJRTkpbFVLXXszoBL8nBX0u/0jBLT8nH+fJePbrwURT58OY+UieRjd1vs04w0VG5VN2U6MoGZkQzKN/ptz0Q366dxoTGmj7i1NQGHi9GgnquXFYdrCfZBmeb7s0T6yrdlZH5cZuwHFyIJ/kAtGsTg0xH5taAAq44BAk1CPk9KVVbqQzrCUiFdF/6gtlPQ8bHHc1G1W92MXGZ5HEHftyLYs8mbD/9xYRUWkHmlM0zC2ilJlnNgV4bfALpQghxOUoZL7VTqtCHIaQSXm+YUMnpkXybnV+A6xlm2CVy8fn0Xlm2XRa0+zzOa21JWWmixfiPMSCZ7qA4rS93VN3pkpF1s5TonQjisHf7iU9ZGvUPOAKZcR1pbeVf/Ul7OhepGCaId9wOtqo7pJ7yLcBZ0pFkOF28y4zEI/kcUNmutBHaQpBdNM8vjCS6HZRokkeo88TBAjGyG7SR+6vUgTcyK9Imalj0kuxz0wmK+byQU11AiJFk/ya5dNduRClcnU64yGu/ieWSeOos1t3ep+RPIWQ2pyTYVbZltTbsb7NiwSi3AV+8KLWk7LxCnfZUetEM8ThnsSoGH38/nyAwFguJp8FjvlHtcWZuU4hPva0rHfr0UhOOJ/F6vS62FW7KzkmRll2HEc7oUq4fyi5T70Vl7YVIfsPHUCdHesf9Lk7WNVWO75JDkYbMI8TOW8JKVtLY9d6UJRITO8oKo0xS+o99Yy04iniGHAaGj88kEWgwv0OrHdY/nr76DOGNS59hXCGXzTKUvDl9iKpLSWYN1lxIeyywdNpTkhay74w2jFT6NS8qkjo5CxA1yfSYwp6AJIZNKIeEK5PJAW7ORgWgwp0VgzYpqovMrWxbu+DGZ6Lhie1RAqpzm8VUzKJOH3mCzWuTOLsN3VT/dv2eeYe9UjbR8YTBsLz7q60VN1sU51k+um1f8JxD5pPhbhSC8rRaB454tmh6YUWrJI3+GWY0qeWioj/tbkYITOkJaeuGt4JrJvHA+l0Gu7kY7XOaa05alMnRWVCXqFgLIwSY4uF59Ue5SU4QKuc/HamDxbr0x6csCetXGoP7Qn1Bk/J9DsynO/UD6iZ1Hyrz+jit0hDCwi/E9OjgKTbB3ZQKQ/0ZOvevfNHG0NK4Aj3Cp7NpRk07RT1i/S0EL93Ag8GRgKI9CfpajKyK6+Jj/PI1KO5/85VAwz2AwzP8FTBb075IxCXv6T9RVvWT2tUaqxDS92zrGUbWzUYk9mSs82pECH+fkqsDt93VW++4YsR/dHCYcQSYTO/KaBMDj9LSD/J/+z20Kq8XvZUAIHtm9hRPP3ItbuAu2Hm5lkPs92pd7kCxgRs0xOVBnZ13ccdA0aunrwv9SdqElJRC3g+oCu+nXyCgmXUs9yMjTMAIHfxZV+aPKcZeUBWt057Xo85Ks1Ir5gzEHCWqZEhrLZMuF11ziGtFQUds/EESajhagzcKsxamcSZxGth4UII+adPhQkUnx2WyN+4YWR+r3f8MnkyGFuR4zjzxJS8WsQYR5PTyRaD9ixa6Mh741nBHbzfjXHskGDq179xaRNrCIB1z1xRfWfjqw2pHc1zk9xlPpL8sQWAIuETZZhbnmL54rceXVNRvUiKrrqIkeogsl0XXb17ylNb0f4GA9Wd44vffEG8FSZGHEL2fbaTGRcSiCeA8PmA/f6Hz8HCS76fXUHwgwkzSwlI71ekZ7Fapmlk/KC+Hs8hUcw3N2LN5LhkVYyizYFl/uPeVP5lsoJHhhfWvvSWruCUW1ZcJOeuTbrDgywJ/qG07gZJplnTvLcYdNaH0KMYOYMGX+rB4NGPFmQsNaIwlWrfCezxre8zXBrsMT+edVLbLqN1BqB76JH4BvZTqUIMfGwPGEn+EnmTV86fPBaYbFL3DFEhjB45CewkXEAtJxk4/Ms2pPXnaRqdky0HOYdcUcE2zcXq4vaIvW2/v0nHFJH2XXe22ueDmq/18XGtELSq85j9X8q0tcNSSKJIX8FTuJF/Pf8j5PhqG2u+osvsLxYrvvfeVJL+4tkcXcr9JV7v0ERmj/X6fM3NC4j6dS1+9Umr2oPavqiAydTZPLMNRGY23LO9zAVDly7jD+70G5TPPLdhRIl4WxcYjLnM+SNcJ26FOrkrISUtPObIz5Zb3AG612krnpy15RMW+1cQjlnWFI6538qky9axd2oJmHIHP08KyP0ubGO+TQNOYuv2uh17yCIvR8VcStw7o1g0NM60sk+8Tq7YfIBJrtp53GkvzXH7OA0p8/n/u1satf/VJhtR1l8Wa6Gmaug7haSpaCaYQax6ta0mkutlb+eAOSG1aobM81D9A4iS1RRlzBBoVX6tU1S6WE2N9ORY6DfeLRC4l9Rvr5h95XDWB2mR1d4WFudpsgVYwiTwT31ljskD8ZyDOlm5DkGh9N/UB/0AI5Xvb8ZBmai2hQ4BWMqFwYnzxwB26YHSOv9WgY3JXnvoN+2R4rqGVh/LLDMtpFP+SpMGJNWvbIl5SOodbCczW2RKleksPoUeGEzrjtKHVdtZA+kfqO+rVx/iclCqwoopepvJpSTDjT+b9GWylGRF8EDbGlw6eUzmJM95Ovoz+kwLX3c2fTjFeYEsE7vUZm3mqdGJuKh2w9/QGSaqRHs99aScGOdDqkFcACoqdbBoQqqjamhH6Q9ng39JCg3lrGJwd50Qk9ovnqBTr8MME7Ps2wiVfygUmPoUBJJfJWX5Nda0nuncbFkA=='));
}

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
var r$2 = getData();
// @TODO: This should be lazily loaded
var VALID = new Set(read_member_array(r$2));
var IGNORED = new Set(read_member_array(r$2));
var MAPPED = read_mapped_map(r$2);
var EMOJI_ROOT = read_emoji_trie(r$2);
//const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));
//const STOP = 0x2E;
var HYPHEN = 0x2D;
var UNDERSCORE = 0x5F;
function explode_cp(name) {
  return toUtf8CodePoints(name);
}
function filter_fe0f(cps) {
  return cps.filter(function (cp) {
    return cp != 0xFE0F;
  });
}
function ens_normalize_post_check(name) {
  var _iterator = _createForOfIteratorHelper(name.split('.')),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var label = _step.value;
      var cps = explode_cp(label);
      try {
        for (var i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {
          if (cps[i] !== UNDERSCORE) {
            throw new Error("underscore only allowed at start");
          }
        }
        if (cps.length >= 4 && cps.every(function (cp) {
          return cp < 0x80;
        }) && cps[2] === HYPHEN && cps[3] === HYPHEN) {
          throw new Error("invalid label extension");
        }
      } catch (err) {
        throw new Error("Invalid label \"".concat(label, "\": ").concat(err.message));
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return name;
}
function ens_normalize(name) {
  return ens_normalize_post_check(normalize(name, filter_fe0f));
}
function normalize(name, emoji_filter) {
  var input = explode_cp(name).reverse(); // flip for pop
  var output = [];
  while (input.length) {
    var emoji = consume_emoji_reversed(input);
    if (emoji) {
      output.push.apply(output, _toConsumableArray(emoji_filter(emoji)));
      continue;
    }
    var cp = input.pop();
    if (VALID.has(cp)) {
      output.push(cp);
      continue;
    }
    if (IGNORED.has(cp)) {
      continue;
    }
    var cps = MAPPED[cp];
    if (cps) {
      output.push.apply(output, _toConsumableArray(cps));
      continue;
    }
    throw new Error("Disallowed codepoint: 0x".concat(cp.toString(16).toUpperCase()));
  }
  return ens_normalize_post_check(nfc(String.fromCodePoint.apply(String, output)));
}
function nfc(s) {
  return s.normalize('NFC');
}
function consume_emoji_reversed(cps, eaten) {
  var _a;
  var node = EMOJI_ROOT;
  var emoji;
  var saved;
  var stack = [];
  var pos = cps.length;
  if (eaten) eaten.length = 0; // clear input buffer (if needed)
  var _loop = function _loop() {
    var cp = cps[--pos];
    node = (_a = node.branches.find(function (x) {
      return x.set.has(cp);
    })) === null || _a === void 0 ? void 0 : _a.node;
    if (!node) return "break";
    if (node.save) {
      // remember
      saved = cp;
    } else if (node.check) {
      // check exclusion
      if (cp === saved) return "break";
    }
    stack.push(cp);
    if (node.fe0f) {
      stack.push(0xFE0F);
      if (pos > 0 && cps[pos - 1] == 0xFE0F) pos--; // consume optional FE0F
    }

    if (node.valid) {
      // this is a valid emoji (so far)
      emoji = stack.slice(); // copy stack
      if (node.valid == 2) emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)
      if (eaten) eaten.push.apply(eaten, _toConsumableArray(cps.slice(pos).reverse())); // copy input (if needed)
      cps.length = pos; // truncate
    }
  };
  while (pos) {
    var _ret = _loop();
    if (_ret === "break") break;
  }
  return emoji;
}

var logger$z = new Logger(version$j);
var Zeros$1 = new Uint8Array(32);
Zeros$1.fill(0);
function checkComponent(comp) {
  if (comp.length === 0) {
    throw new Error("invalid ENS name; empty component");
  }
  return comp;
}
function ensNameSplit(name) {
  var bytes = toUtf8Bytes(ens_normalize(name));
  var comps = [];
  if (name.length === 0) {
    return comps;
  }
  var last = 0;
  for (var i = 0; i < bytes.length; i++) {
    var d = bytes[i];
    // A separator (i.e. "."); copy this component
    if (d === 0x2e) {
      comps.push(checkComponent(bytes.slice(last, i)));
      last = i + 1;
    }
  }
  // There was a stray separator at the end of the name
  if (last >= bytes.length) {
    throw new Error("invalid ENS name; empty component");
  }
  comps.push(checkComponent(bytes.slice(last)));
  return comps;
}
function ensNormalize(name) {
  return ensNameSplit(name).map(function (comp) {
    return toUtf8String(comp);
  }).join(".");
}
function isValidName(name) {
  try {
    return ensNameSplit(name).length !== 0;
  } catch (error) {}
  return false;
}
function namehash(name) {
  /* istanbul ignore if */
  if (typeof name !== "string") {
    logger$z.throwArgumentError("invalid ENS name; not a string", "name", name);
  }
  var result = Zeros$1;
  var comps = ensNameSplit(name);
  while (comps.length) {
    result = keccak256$1(concat([result, keccak256$1(comps.pop())]));
  }
  return hexlify(result);
}
function dnsEncode(name) {
  return hexlify(concat(ensNameSplit(name).map(function (comp) {
    // DNS does not allow components over 63 bytes in length
    if (comp.length > 63) {
      throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");
    }
    var bytes = new Uint8Array(comp.length + 1);
    bytes.set(comp, 1);
    bytes[0] = bytes.length - 1;
    return bytes;
  }))) + "00";
}

var messagePrefix = "\x19Ethereum Signed Message:\n";
function hashMessage(message) {
  if (typeof message === "string") {
    message = toUtf8Bytes(message);
  }
  return keccak256$1(concat([toUtf8Bytes(messagePrefix), toUtf8Bytes(String(message.length)), message]));
}

var __awaiter$i = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger$y = new Logger(version$j);
var padding = new Uint8Array(32);
padding.fill(0);
var NegativeOne = BigNumber.from(-1);
var Zero = BigNumber.from(0);
var One = BigNumber.from(1);
var MaxUint256 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
function hexPadRight(value) {
  var bytes = arrayify(value);
  var padOffset = bytes.length % 32;
  if (padOffset) {
    return hexConcat([bytes, padding.slice(padOffset)]);
  }
  return hexlify(bytes);
}
var hexTrue = hexZeroPad(One.toHexString(), 32);
var hexFalse = hexZeroPad(Zero.toHexString(), 32);
var domainFieldTypes = {
  name: "string",
  version: "string",
  chainId: "uint256",
  verifyingContract: "address",
  salt: "bytes32"
};
var domainFieldNames = ["name", "version", "chainId", "verifyingContract", "salt"];
function checkString(key) {
  return function (value) {
    if (typeof value !== "string") {
      logger$y.throwArgumentError("invalid domain value for ".concat(JSON.stringify(key)), "domain.".concat(key), value);
    }
    return value;
  };
}
var domainChecks = {
  name: checkString("name"),
  version: checkString("version"),
  chainId: function chainId(value) {
    try {
      return BigNumber.from(value).toString();
    } catch (error) {}
    return logger$y.throwArgumentError("invalid domain value for \"chainId\"", "domain.chainId", value);
  },
  verifyingContract: function verifyingContract(value) {
    try {
      return getAddress(value).toLowerCase();
    } catch (error) {}
    return logger$y.throwArgumentError("invalid domain value \"verifyingContract\"", "domain.verifyingContract", value);
  },
  salt: function salt(value) {
    try {
      var bytes = arrayify(value);
      if (bytes.length !== 32) {
        throw new Error("bad length");
      }
      return hexlify(bytes);
    } catch (error) {}
    return logger$y.throwArgumentError("invalid domain value \"salt\"", "domain.salt", value);
  }
};
function getBaseEncoder(type) {
  // intXX and uintXX
  {
    var match = type.match(/^(u?)int(\d*)$/);
    if (match) {
      var signed = match[1] === "";
      var width = parseInt(match[2] || "256");
      if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) {
        logger$y.throwArgumentError("invalid numeric width", "type", type);
      }
      var boundsUpper = MaxUint256.mask(signed ? width - 1 : width);
      var boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;
      return function (value) {
        var v = BigNumber.from(value);
        if (v.lt(boundsLower) || v.gt(boundsUpper)) {
          logger$y.throwArgumentError("value out-of-bounds for ".concat(type), "value", value);
        }
        return hexZeroPad(v.toTwos(256).toHexString(), 32);
      };
    }
  }
  // bytesXX
  {
    var _match = type.match(/^bytes(\d+)$/);
    if (_match) {
      var _width = parseInt(_match[1]);
      if (_width === 0 || _width > 32 || _match[1] !== String(_width)) {
        logger$y.throwArgumentError("invalid bytes width", "type", type);
      }
      return function (value) {
        var bytes = arrayify(value);
        if (bytes.length !== _width) {
          logger$y.throwArgumentError("invalid length for ".concat(type), "value", value);
        }
        return hexPadRight(value);
      };
    }
  }
  switch (type) {
    case "address":
      return function (value) {
        return hexZeroPad(getAddress(value), 32);
      };
    case "bool":
      return function (value) {
        return !value ? hexFalse : hexTrue;
      };
    case "bytes":
      return function (value) {
        return keccak256$1(value);
      };
    case "string":
      return function (value) {
        return id(value);
      };
  }
  return null;
}
function encodeType(name, fields) {
  return "".concat(name, "(").concat(fields.map(function (_ref) {
    var name = _ref.name,
      type = _ref.type;
    return type + " " + name;
  }).join(","), ")");
}
var TypedDataEncoder = /*#__PURE__*/function () {
  function TypedDataEncoder(types) {
    _classCallCheck(this, TypedDataEncoder);
    defineReadOnly(this, "types", Object.freeze(deepCopy(types)));
    defineReadOnly(this, "_encoderCache", {});
    defineReadOnly(this, "_types", {});
    // Link struct types to their direct child structs
    var links = {};
    // Link structs to structs which contain them as a child
    var parents = {};
    // Link all subtypes within a given struct
    var subtypes = {};
    Object.keys(types).forEach(function (type) {
      links[type] = {};
      parents[type] = [];
      subtypes[type] = {};
    });
    var _loop = function _loop(name) {
      var uniqueNames = {};
      types[name].forEach(function (field) {
        // Check each field has a unique name
        if (uniqueNames[field.name]) {
          logger$y.throwArgumentError("duplicate variable name ".concat(JSON.stringify(field.name), " in ").concat(JSON.stringify(name)), "types", types);
        }
        uniqueNames[field.name] = true;
        // Get the base type (drop any array specifiers)
        var baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
        if (baseType === name) {
          logger$y.throwArgumentError("circular type reference to ".concat(JSON.stringify(baseType)), "types", types);
        }
        // Is this a base encoding type?
        var encoder = getBaseEncoder(baseType);
        if (encoder) {
          return;
        }
        if (!parents[baseType]) {
          logger$y.throwArgumentError("unknown type ".concat(JSON.stringify(baseType)), "types", types);
        }
        // Add linkage
        parents[baseType].push(name);
        links[name][baseType] = true;
      });
    };
    for (var name in types) {
      _loop(name);
    }
    // Deduce the primary type
    var primaryTypes = Object.keys(parents).filter(function (n) {
      return parents[n].length === 0;
    });
    if (primaryTypes.length === 0) {
      logger$y.throwArgumentError("missing primary type", "types", types);
    } else if (primaryTypes.length > 1) {
      logger$y.throwArgumentError("ambiguous primary types or unused types: ".concat(primaryTypes.map(function (t) {
        return JSON.stringify(t);
      }).join(", ")), "types", types);
    }
    defineReadOnly(this, "primaryType", primaryTypes[0]);
    // Check for circular type references
    function checkCircular(type, found) {
      if (found[type]) {
        logger$y.throwArgumentError("circular type reference to ".concat(JSON.stringify(type)), "types", types);
      }
      found[type] = true;
      Object.keys(links[type]).forEach(function (child) {
        if (!parents[child]) {
          return;
        }
        // Recursively check children
        checkCircular(child, found);
        // Mark all ancestors as having this decendant
        Object.keys(found).forEach(function (subtype) {
          subtypes[subtype][child] = true;
        });
      });
      delete found[type];
    }
    checkCircular(this.primaryType, {});
    // Compute each fully describe type
    for (var _name in subtypes) {
      var st = Object.keys(subtypes[_name]);
      st.sort();
      this._types[_name] = encodeType(_name, types[_name]) + st.map(function (t) {
        return encodeType(t, types[t]);
      }).join("");
    }
  }
  _createClass(TypedDataEncoder, [{
    key: "getEncoder",
    value: function getEncoder(type) {
      var encoder = this._encoderCache[type];
      if (!encoder) {
        encoder = this._encoderCache[type] = this._getEncoder(type);
      }
      return encoder;
    }
  }, {
    key: "_getEncoder",
    value: function _getEncoder(type) {
      var _this = this;
      // Basic encoder type (address, bool, uint256, etc)
      {
        var encoder = getBaseEncoder(type);
        if (encoder) {
          return encoder;
        }
      }
      // Array
      var match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
      if (match) {
        var subtype = match[1];
        var subEncoder = this.getEncoder(subtype);
        var length = parseInt(match[3]);
        return function (value) {
          if (length >= 0 && value.length !== length) {
            logger$y.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
          }
          var result = value.map(subEncoder);
          if (_this._types[subtype]) {
            result = result.map(keccak256$1);
          }
          return keccak256$1(hexConcat(result));
        };
      }
      // Struct
      var fields = this.types[type];
      if (fields) {
        var encodedType = id(this._types[type]);
        return function (value) {
          var values = fields.map(function (_ref2) {
            var name = _ref2.name,
              type = _ref2.type;
            var result = _this.getEncoder(type)(value[name]);
            if (_this._types[type]) {
              return keccak256$1(result);
            }
            return result;
          });
          values.unshift(encodedType);
          return hexConcat(values);
        };
      }
      return logger$y.throwArgumentError("unknown type: ".concat(type), "type", type);
    }
  }, {
    key: "encodeType",
    value: function encodeType(name) {
      var result = this._types[name];
      if (!result) {
        logger$y.throwArgumentError("unknown type: ".concat(JSON.stringify(name)), "name", name);
      }
      return result;
    }
  }, {
    key: "encodeData",
    value: function encodeData(type, value) {
      return this.getEncoder(type)(value);
    }
  }, {
    key: "hashStruct",
    value: function hashStruct(name, value) {
      return keccak256$1(this.encodeData(name, value));
    }
  }, {
    key: "encode",
    value: function encode(value) {
      return this.encodeData(this.primaryType, value);
    }
  }, {
    key: "hash",
    value: function hash(value) {
      return this.hashStruct(this.primaryType, value);
    }
  }, {
    key: "_visit",
    value: function _visit(type, value, callback) {
      var _this2 = this;
      // Basic encoder type (address, bool, uint256, etc)
      {
        var encoder = getBaseEncoder(type);
        if (encoder) {
          return callback(type, value);
        }
      }
      // Array
      var match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
      if (match) {
        var subtype = match[1];
        var length = parseInt(match[3]);
        if (length >= 0 && value.length !== length) {
          logger$y.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
        }
        return value.map(function (v) {
          return _this2._visit(subtype, v, callback);
        });
      }
      // Struct
      var fields = this.types[type];
      if (fields) {
        return fields.reduce(function (accum, _ref3) {
          var name = _ref3.name,
            type = _ref3.type;
          accum[name] = _this2._visit(type, value[name], callback);
          return accum;
        }, {});
      }
      return logger$y.throwArgumentError("unknown type: ".concat(type), "type", type);
    }
  }, {
    key: "visit",
    value: function visit(value, callback) {
      return this._visit(this.primaryType, value, callback);
    }
  }], [{
    key: "from",
    value: function from(types) {
      return new TypedDataEncoder(types);
    }
  }, {
    key: "getPrimaryType",
    value: function getPrimaryType(types) {
      return TypedDataEncoder.from(types).primaryType;
    }
  }, {
    key: "hashStruct",
    value: function hashStruct(name, types, value) {
      return TypedDataEncoder.from(types).hashStruct(name, value);
    }
  }, {
    key: "hashDomain",
    value: function hashDomain(domain) {
      var domainFields = [];
      for (var name in domain) {
        var type = domainFieldTypes[name];
        if (!type) {
          logger$y.throwArgumentError("invalid typed-data domain key: ".concat(JSON.stringify(name)), "domain", domain);
        }
        domainFields.push({
          name: name,
          type: type
        });
      }
      domainFields.sort(function (a, b) {
        return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
      });
      return TypedDataEncoder.hashStruct("EIP712Domain", {
        EIP712Domain: domainFields
      }, domain);
    }
  }, {
    key: "encode",
    value: function encode(domain, types, value) {
      return hexConcat(["0x1901", TypedDataEncoder.hashDomain(domain), TypedDataEncoder.from(types).hash(value)]);
    }
  }, {
    key: "hash",
    value: function hash(domain, types, value) {
      return keccak256$1(TypedDataEncoder.encode(domain, types, value));
    }
    // Replaces all address types with ENS names with their looked up address
  }, {
    key: "resolveNames",
    value: function resolveNames(domain, types, value, resolveName) {
      return __awaiter$i(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
        var ensCache, encoder, name;
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Make a copy to isolate it from the object passed in
                domain = shallowCopy(domain);
                // Look up all ENS names
                ensCache = {}; // Do we need to look up the domain's verifyingContract?
                if (domain.verifyingContract && !isHexString$1(domain.verifyingContract, 20)) {
                  ensCache[domain.verifyingContract] = "0x";
                }
                // We are going to use the encoder to visit all the base values
                encoder = TypedDataEncoder.from(types); // Get a list of all the addresses
                encoder.visit(value, function (type, value) {
                  if (type === "address" && !isHexString$1(value, 20)) {
                    ensCache[value] = "0x";
                  }
                  return value;
                });
                // Lookup each name
                _context.t0 = regenerator.keys(ensCache);
              case 6:
                if ((_context.t1 = _context.t0()).done) {
                  _context.next = 13;
                  break;
                }
                name = _context.t1.value;
                _context.next = 10;
                return resolveName(name);
              case 10:
                ensCache[name] = _context.sent;
                _context.next = 6;
                break;
              case 13:
                // Replace the domain verifyingContract if needed
                if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
                  domain.verifyingContract = ensCache[domain.verifyingContract];
                }
                // Replace all ENS names with their address
                value = encoder.visit(value, function (type, value) {
                  if (type === "address" && ensCache[value]) {
                    return ensCache[value];
                  }
                  return value;
                });
                return _context.abrupt("return", {
                  domain: domain,
                  value: value
                });
              case 16:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
    }
  }, {
    key: "getPayload",
    value: function getPayload(domain, types, value) {
      // Validate the domain fields
      TypedDataEncoder.hashDomain(domain);
      // Derive the EIP712Domain Struct reference type
      var domainValues = {};
      var domainTypes = [];
      domainFieldNames.forEach(function (name) {
        var value = domain[name];
        if (value == null) {
          return;
        }
        domainValues[name] = domainChecks[name](value);
        domainTypes.push({
          name: name,
          type: domainFieldTypes[name]
        });
      });
      var encoder = TypedDataEncoder.from(types);
      var typesWithDomain = shallowCopy(types);
      if (typesWithDomain.EIP712Domain) {
        logger$y.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types);
      } else {
        typesWithDomain.EIP712Domain = domainTypes;
      }
      // Validate the data structures and types
      encoder.encode(value);
      return {
        types: typesWithDomain,
        domain: domainValues,
        primaryType: encoder.primaryType,
        message: encoder.visit(value, function (type, value) {
          // bytes
          if (type.match(/^bytes(\d*)/)) {
            return hexlify(arrayify(value));
          }
          // uint or int
          if (type.match(/^u?int/)) {
            return BigNumber.from(value).toString();
          }
          switch (type) {
            case "address":
              return value.toLowerCase();
            case "bool":
              return !!value;
            case "string":
              if (typeof value !== "string") {
                logger$y.throwArgumentError("invalid string", "value", value);
              }
              return value;
          }
          return logger$y.throwArgumentError("unsupported type", "type", type);
        })
      };
    }
  }]);
  return TypedDataEncoder;
}();

var lib_esm$c = /*#__PURE__*/Object.freeze({
  __proto__: null,
  id: id,
  dnsEncode: dnsEncode,
  namehash: namehash,
  isValidName: isValidName,
  ensNormalize: ensNormalize,
  messagePrefix: messagePrefix,
  hashMessage: hashMessage,
  _TypedDataEncoder: TypedDataEncoder
});

function _createSuper$m(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$m(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$m() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var logger$x = new Logger(version$n);
var LogDescription = /*#__PURE__*/function (_Description) {
  _inherits(LogDescription, _Description);
  var _super = _createSuper$m(LogDescription);
  function LogDescription() {
    _classCallCheck(this, LogDescription);
    return _super.apply(this, arguments);
  }
  return _createClass(LogDescription);
}(Description);
var TransactionDescription = /*#__PURE__*/function (_Description2) {
  _inherits(TransactionDescription, _Description2);
  var _super2 = _createSuper$m(TransactionDescription);
  function TransactionDescription() {
    _classCallCheck(this, TransactionDescription);
    return _super2.apply(this, arguments);
  }
  return _createClass(TransactionDescription);
}(Description);
var ErrorDescription = /*#__PURE__*/function (_Description3) {
  _inherits(ErrorDescription, _Description3);
  var _super3 = _createSuper$m(ErrorDescription);
  function ErrorDescription() {
    _classCallCheck(this, ErrorDescription);
    return _super3.apply(this, arguments);
  }
  return _createClass(ErrorDescription);
}(Description);
var Indexed = /*#__PURE__*/function (_Description4) {
  _inherits(Indexed, _Description4);
  var _super4 = _createSuper$m(Indexed);
  function Indexed() {
    _classCallCheck(this, Indexed);
    return _super4.apply(this, arguments);
  }
  _createClass(Indexed, null, [{
    key: "isIndexed",
    value: function isIndexed(value) {
      return !!(value && value._isIndexed);
    }
  }]);
  return Indexed;
}(Description);
var BuiltinErrors = {
  "0x08c379a0": {
    signature: "Error(string)",
    name: "Error",
    inputs: ["string"],
    reason: true
  },
  "0x4e487b71": {
    signature: "Panic(uint256)",
    name: "Panic",
    inputs: ["uint256"]
  }
};
function wrapAccessError(property, error) {
  var wrap = new Error("deferred error during ABI decoding triggered accessing ".concat(property));
  wrap.error = error;
  return wrap;
}
/*
function checkNames(fragment: Fragment, type: "input" | "output", params: Array<ParamType>): void {
    params.reduce((accum, param) => {
        if (param.name) {
            if (accum[param.name]) {
                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format("full") }`, "fragment", fragment);
            }
            accum[param.name] = true;
        }
        return accum;
    }, <{ [ name: string ]: boolean }>{ });
}
*/
var Interface = /*#__PURE__*/function () {
  function Interface(fragments) {
    var _this = this;
    _classCallCheck(this, Interface);
    var abi = [];
    if (typeof fragments === "string") {
      abi = JSON.parse(fragments);
    } else {
      abi = fragments;
    }
    defineReadOnly(this, "fragments", abi.map(function (fragment) {
      return Fragment.from(fragment);
    }).filter(function (fragment) {
      return fragment != null;
    }));
    defineReadOnly(this, "_abiCoder", getStatic(this instanceof Interface ? this.constructor : void 0, "getAbiCoder")());
    defineReadOnly(this, "functions", {});
    defineReadOnly(this, "errors", {});
    defineReadOnly(this, "events", {});
    defineReadOnly(this, "structs", {});
    // Add all fragments by their signature
    this.fragments.forEach(function (fragment) {
      var bucket = null;
      switch (fragment.type) {
        case "constructor":
          if (_this.deploy) {
            logger$x.warn("duplicate definition - constructor");
            return;
          }
          //checkNames(fragment, "input", fragment.inputs);
          defineReadOnly(_this, "deploy", fragment);
          return;
        case "function":
          //checkNames(fragment, "input", fragment.inputs);
          //checkNames(fragment, "output", (<FunctionFragment>fragment).outputs);
          bucket = _this.functions;
          break;
        case "event":
          //checkNames(fragment, "input", fragment.inputs);
          bucket = _this.events;
          break;
        case "error":
          bucket = _this.errors;
          break;
        default:
          return;
      }
      var signature = fragment.format();
      if (bucket[signature]) {
        logger$x.warn("duplicate definition - " + signature);
        return;
      }
      bucket[signature] = fragment;
    });
    // If we do not have a constructor add a default
    if (!this.deploy) {
      defineReadOnly(this, "deploy", ConstructorFragment.from({
        payable: false,
        type: "constructor"
      }));
    }
    defineReadOnly(this, "_isInterface", true);
  }
  _createClass(Interface, [{
    key: "format",
    value: function format(_format) {
      if (!_format) {
        _format = FormatTypes.full;
      }
      if (_format === FormatTypes.sighash) {
        logger$x.throwArgumentError("interface does not support formatting sighash", "format", _format);
      }
      var abi = this.fragments.map(function (fragment) {
        return fragment.format(_format);
      });
      // We need to re-bundle the JSON fragments a bit
      if (_format === FormatTypes.json) {
        return JSON.stringify(abi.map(function (j) {
          return JSON.parse(j);
        }));
      }
      return abi;
    }
    // Sub-classes can override these to handle other blockchains
  }, {
    key: "getFunction",
    value:
    // Find a function definition by any means necessary (unless it is ambiguous)
    function getFunction(nameOrSignatureOrSighash) {
      if (isHexString$1(nameOrSignatureOrSighash)) {
        for (var name in this.functions) {
          if (nameOrSignatureOrSighash === this.getSighash(name)) {
            return this.functions[name];
          }
        }
        logger$x.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
      }
      // It is a bare name, look up the function (will return null if ambiguous)
      if (nameOrSignatureOrSighash.indexOf("(") === -1) {
        var _name = nameOrSignatureOrSighash.trim();
        var matching = Object.keys(this.functions).filter(function (f) {
          return f.split("(" /* fix:) */)[0] === _name;
        });
        if (matching.length === 0) {
          logger$x.throwArgumentError("no matching function", "name", _name);
        } else if (matching.length > 1) {
          logger$x.throwArgumentError("multiple matching functions", "name", _name);
        }
        return this.functions[matching[0]];
      }
      // Normalize the signature and lookup the function
      var result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
      if (!result) {
        logger$x.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
      }
      return result;
    }
    // Find an event definition by any means necessary (unless it is ambiguous)
  }, {
    key: "getEvent",
    value: function getEvent(nameOrSignatureOrTopic) {
      if (isHexString$1(nameOrSignatureOrTopic)) {
        var topichash = nameOrSignatureOrTopic.toLowerCase();
        for (var name in this.events) {
          if (topichash === this.getEventTopic(name)) {
            return this.events[name];
          }
        }
        logger$x.throwArgumentError("no matching event", "topichash", topichash);
      }
      // It is a bare name, look up the function (will return null if ambiguous)
      if (nameOrSignatureOrTopic.indexOf("(") === -1) {
        var _name2 = nameOrSignatureOrTopic.trim();
        var matching = Object.keys(this.events).filter(function (f) {
          return f.split("(" /* fix:) */)[0] === _name2;
        });
        if (matching.length === 0) {
          logger$x.throwArgumentError("no matching event", "name", _name2);
        } else if (matching.length > 1) {
          logger$x.throwArgumentError("multiple matching events", "name", _name2);
        }
        return this.events[matching[0]];
      }
      // Normalize the signature and lookup the function
      var result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
      if (!result) {
        logger$x.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
      }
      return result;
    }
    // Find a function definition by any means necessary (unless it is ambiguous)
  }, {
    key: "getError",
    value: function getError(nameOrSignatureOrSighash) {
      if (isHexString$1(nameOrSignatureOrSighash)) {
        var getSighash = getStatic(this.constructor, "getSighash");
        for (var name in this.errors) {
          var error = this.errors[name];
          if (nameOrSignatureOrSighash === getSighash(error)) {
            return this.errors[name];
          }
        }
        logger$x.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
      }
      // It is a bare name, look up the function (will return null if ambiguous)
      if (nameOrSignatureOrSighash.indexOf("(") === -1) {
        var _name3 = nameOrSignatureOrSighash.trim();
        var matching = Object.keys(this.errors).filter(function (f) {
          return f.split("(" /* fix:) */)[0] === _name3;
        });
        if (matching.length === 0) {
          logger$x.throwArgumentError("no matching error", "name", _name3);
        } else if (matching.length > 1) {
          logger$x.throwArgumentError("multiple matching errors", "name", _name3);
        }
        return this.errors[matching[0]];
      }
      // Normalize the signature and lookup the function
      var result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
      if (!result) {
        logger$x.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
      }
      return result;
    }
    // Get the sighash (the bytes4 selector) used by Solidity to identify a function
  }, {
    key: "getSighash",
    value: function getSighash(fragment) {
      if (typeof fragment === "string") {
        try {
          fragment = this.getFunction(fragment);
        } catch (error) {
          try {
            fragment = this.getError(fragment);
          } catch (_) {
            throw error;
          }
        }
      }
      return getStatic(this.constructor, "getSighash")(fragment);
    }
    // Get the topic (the bytes32 hash) used by Solidity to identify an event
  }, {
    key: "getEventTopic",
    value: function getEventTopic(eventFragment) {
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }
      return getStatic(this.constructor, "getEventTopic")(eventFragment);
    }
  }, {
    key: "_decodeParams",
    value: function _decodeParams(params, data) {
      return this._abiCoder.decode(params, data);
    }
  }, {
    key: "_encodeParams",
    value: function _encodeParams(params, values) {
      return this._abiCoder.encode(params, values);
    }
  }, {
    key: "encodeDeploy",
    value: function encodeDeploy(values) {
      return this._encodeParams(this.deploy.inputs, values || []);
    }
  }, {
    key: "decodeErrorResult",
    value: function decodeErrorResult(fragment, data) {
      if (typeof fragment === "string") {
        fragment = this.getError(fragment);
      }
      var bytes = arrayify(data);
      if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
        logger$x.throwArgumentError("data signature does not match error ".concat(fragment.name, "."), "data", hexlify(bytes));
      }
      return this._decodeParams(fragment.inputs, bytes.slice(4));
    }
  }, {
    key: "encodeErrorResult",
    value: function encodeErrorResult(fragment, values) {
      if (typeof fragment === "string") {
        fragment = this.getError(fragment);
      }
      return hexlify(concat([this.getSighash(fragment), this._encodeParams(fragment.inputs, values || [])]));
    }
    // Decode the data for a function call (e.g. tx.data)
  }, {
    key: "decodeFunctionData",
    value: function decodeFunctionData(functionFragment, data) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      var bytes = arrayify(data);
      if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
        logger$x.throwArgumentError("data signature does not match function ".concat(functionFragment.name, "."), "data", hexlify(bytes));
      }
      return this._decodeParams(functionFragment.inputs, bytes.slice(4));
    }
    // Encode the data for a function call (e.g. tx.data)
  }, {
    key: "encodeFunctionData",
    value: function encodeFunctionData(functionFragment, values) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));
    }
    // Decode the result from a function call (e.g. from eth_call)
  }, {
    key: "decodeFunctionResult",
    value: function decodeFunctionResult(functionFragment, data) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      var bytes = arrayify(data);
      var reason = null;
      var message = "";
      var errorArgs = null;
      var errorName = null;
      var errorSignature = null;
      switch (bytes.length % this._abiCoder._getWordSize()) {
        case 0:
          try {
            return this._abiCoder.decode(functionFragment.outputs, bytes);
          } catch (error) {}
          break;
        case 4:
          {
            var selector = hexlify(bytes.slice(0, 4));
            var builtin = BuiltinErrors[selector];
            if (builtin) {
              errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
              errorName = builtin.name;
              errorSignature = builtin.signature;
              if (builtin.reason) {
                reason = errorArgs[0];
              }
              if (errorName === "Error") {
                message = "; VM Exception while processing transaction: reverted with reason string ".concat(JSON.stringify(errorArgs[0]));
              } else if (errorName === "Panic") {
                message = "; VM Exception while processing transaction: reverted with panic code ".concat(errorArgs[0]);
              }
            } else {
              try {
                var error = this.getError(selector);
                errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
                errorName = error.name;
                errorSignature = error.format();
              } catch (error) {}
            }
            break;
          }
      }
      return logger$x.throwError("call revert exception" + message, Logger.errors.CALL_EXCEPTION, {
        method: functionFragment.format(),
        data: hexlify(data),
        errorArgs: errorArgs,
        errorName: errorName,
        errorSignature: errorSignature,
        reason: reason
      });
    }
    // Encode the result for a function call (e.g. for eth_call)
  }, {
    key: "encodeFunctionResult",
    value: function encodeFunctionResult(functionFragment, values) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
    }
    // Create the filter for the event with search criteria (e.g. for eth_filterLog)
  }, {
    key: "encodeFilterTopics",
    value: function encodeFilterTopics(eventFragment, values) {
      var _this2 = this;
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }
      if (values.length > eventFragment.inputs.length) {
        logger$x.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
          argument: "values",
          value: values
        });
      }
      var topics = [];
      if (!eventFragment.anonymous) {
        topics.push(this.getEventTopic(eventFragment));
      }
      var encodeTopic = function encodeTopic(param, value) {
        if (param.type === "string") {
          return id(value);
        } else if (param.type === "bytes") {
          return keccak256$1(hexlify(value));
        }
        if (param.type === "bool" && typeof value === "boolean") {
          value = value ? "0x01" : "0x00";
        }
        if (param.type.match(/^u?int/)) {
          value = BigNumber.from(value).toHexString();
        }
        // Check addresses are valid
        if (param.type === "address") {
          _this2._abiCoder.encode(["address"], [value]);
        }
        return hexZeroPad(hexlify(value), 32);
      };
      values.forEach(function (value, index) {
        var param = eventFragment.inputs[index];
        if (!param.indexed) {
          if (value != null) {
            logger$x.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
          }
          return;
        }
        if (value == null) {
          topics.push(null);
        } else if (param.baseType === "array" || param.baseType === "tuple") {
          logger$x.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value);
        } else if (Array.isArray(value)) {
          topics.push(value.map(function (value) {
            return encodeTopic(param, value);
          }));
        } else {
          topics.push(encodeTopic(param, value));
        }
      });
      // Trim off trailing nulls
      while (topics.length && topics[topics.length - 1] === null) {
        topics.pop();
      }
      return topics;
    }
  }, {
    key: "encodeEventLog",
    value: function encodeEventLog(eventFragment, values) {
      var _this3 = this;
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }
      var topics = [];
      var dataTypes = [];
      var dataValues = [];
      if (!eventFragment.anonymous) {
        topics.push(this.getEventTopic(eventFragment));
      }
      if (values.length !== eventFragment.inputs.length) {
        logger$x.throwArgumentError("event arguments/values mismatch", "values", values);
      }
      eventFragment.inputs.forEach(function (param, index) {
        var value = values[index];
        if (param.indexed) {
          if (param.type === "string") {
            topics.push(id(value));
          } else if (param.type === "bytes") {
            topics.push(keccak256$1(value));
          } else if (param.baseType === "tuple" || param.baseType === "array") {
            // @TODO
            throw new Error("not implemented");
          } else {
            topics.push(_this3._abiCoder.encode([param.type], [value]));
          }
        } else {
          dataTypes.push(param);
          dataValues.push(value);
        }
      });
      return {
        data: this._abiCoder.encode(dataTypes, dataValues),
        topics: topics
      };
    }
    // Decode a filter for the event and the search criteria
  }, {
    key: "decodeEventLog",
    value: function decodeEventLog(eventFragment, data, topics) {
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }
      if (topics != null && !eventFragment.anonymous) {
        var topicHash = this.getEventTopic(eventFragment);
        if (!isHexString$1(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
          logger$x.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, {
            argument: "topics[0]",
            expected: topicHash,
            value: topics[0]
          });
        }
        topics = topics.slice(1);
      }
      var indexed = [];
      var nonIndexed = [];
      var dynamic = [];
      eventFragment.inputs.forEach(function (param, index) {
        if (param.indexed) {
          if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
            indexed.push(ParamType.fromObject({
              type: "bytes32",
              name: param.name
            }));
            dynamic.push(true);
          } else {
            indexed.push(param);
            dynamic.push(false);
          }
        } else {
          nonIndexed.push(param);
          dynamic.push(false);
        }
      });
      var resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;
      var resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
      var result = [];
      var nonIndexedIndex = 0,
        indexedIndex = 0;
      eventFragment.inputs.forEach(function (param, index) {
        if (param.indexed) {
          if (resultIndexed == null) {
            result[index] = new Indexed({
              _isIndexed: true,
              hash: null
            });
          } else if (dynamic[index]) {
            result[index] = new Indexed({
              _isIndexed: true,
              hash: resultIndexed[indexedIndex++]
            });
          } else {
            try {
              result[index] = resultIndexed[indexedIndex++];
            } catch (error) {
              result[index] = error;
            }
          }
        } else {
          try {
            result[index] = resultNonIndexed[nonIndexedIndex++];
          } catch (error) {
            result[index] = error;
          }
        }
        // Add the keyword argument if named and safe
        if (param.name && result[param.name] == null) {
          var value = result[index];
          // Make error named values throw on access
          if (value instanceof Error) {
            Object.defineProperty(result, param.name, {
              enumerable: true,
              get: function get() {
                throw wrapAccessError("property ".concat(JSON.stringify(param.name)), value);
              }
            });
          } else {
            result[param.name] = value;
          }
        }
      });
      // Make all error indexed values throw on access
      var _loop = function _loop(i) {
        var value = result[i];
        if (value instanceof Error) {
          Object.defineProperty(result, i, {
            enumerable: true,
            get: function get() {
              throw wrapAccessError("index ".concat(i), value);
            }
          });
        }
      };
      for (var i = 0; i < result.length; i++) {
        _loop(i);
      }
      return Object.freeze(result);
    }
    // Given a transaction, find the matching function fragment (if any) and
    // determine all its properties and call parameters
  }, {
    key: "parseTransaction",
    value: function parseTransaction(tx) {
      var fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
      if (!fragment) {
        return null;
      }
      return new TransactionDescription({
        args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
        functionFragment: fragment,
        name: fragment.name,
        signature: fragment.format(),
        sighash: this.getSighash(fragment),
        value: BigNumber.from(tx.value || "0")
      });
    }
    // @TODO
    //parseCallResult(data: BytesLike): ??
    // Given an event log, find the matching event fragment (if any) and
    // determine all its properties and values
  }, {
    key: "parseLog",
    value: function parseLog(log) {
      var fragment = this.getEvent(log.topics[0]);
      if (!fragment || fragment.anonymous) {
        return null;
      }
      // @TODO: If anonymous, and the only method, and the input count matches, should we parse?
      //        Probably not, because just because it is the only event in the ABI does
      //        not mean we have the full ABI; maybe just a fragment?
      return new LogDescription({
        eventFragment: fragment,
        name: fragment.name,
        signature: fragment.format(),
        topic: this.getEventTopic(fragment),
        args: this.decodeEventLog(fragment, log.data, log.topics)
      });
    }
  }, {
    key: "parseError",
    value: function parseError(data) {
      var hexData = hexlify(data);
      var fragment = this.getError(hexData.substring(0, 10).toLowerCase());
      if (!fragment) {
        return null;
      }
      return new ErrorDescription({
        args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
        errorFragment: fragment,
        name: fragment.name,
        signature: fragment.format(),
        sighash: this.getSighash(fragment)
      });
    }
    /*
    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
        if (Interface.isInterface(value)) {
            return value;
        }
        if (typeof(value) === "string") {
            return new Interface(JSON.parse(value));
        }
        return new Interface(value);
    }
    */
  }], [{
    key: "getAbiCoder",
    value: function getAbiCoder() {
      return defaultAbiCoder;
    }
  }, {
    key: "getAddress",
    value: function getAddress$1(address) {
      return getAddress(address);
    }
  }, {
    key: "getSighash",
    value: function getSighash(fragment) {
      return hexDataSlice(id(fragment.format()), 0, 4);
    }
  }, {
    key: "getEventTopic",
    value: function getEventTopic(eventFragment) {
      return id(eventFragment.format());
    }
  }, {
    key: "isInterface",
    value: function isInterface(value) {
      return !!(value && value._isInterface);
    }
  }]);
  return Interface;
}();

var lib_esm$b = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ConstructorFragment: ConstructorFragment,
  ErrorFragment: ErrorFragment,
  EventFragment: EventFragment,
  Fragment: Fragment,
  FunctionFragment: FunctionFragment,
  ParamType: ParamType,
  FormatTypes: FormatTypes,
  AbiCoder: AbiCoder,
  defaultAbiCoder: defaultAbiCoder,
  Interface: Interface,
  Indexed: Indexed,
  checkResultErrors: checkResultErrors,
  LogDescription: LogDescription,
  TransactionDescription: TransactionDescription
});

var version$i = "abstract-provider/5.7.0";

function _createSuper$l(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$l(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$l() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __awaiter$h = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger$w = new Logger(version$i);
//export type CallTransactionable = {
//    call(transaction: TransactionRequest): Promise<TransactionResponse>;
//};
var ForkEvent = /*#__PURE__*/function (_Description) {
  _inherits(ForkEvent, _Description);
  var _super = _createSuper$l(ForkEvent);
  function ForkEvent() {
    _classCallCheck(this, ForkEvent);
    return _super.apply(this, arguments);
  }
  _createClass(ForkEvent, null, [{
    key: "isForkEvent",
    value: function isForkEvent(value) {
      return !!(value && value._isForkEvent);
    }
  }]);
  return ForkEvent;
}(Description);
///////////////////////////////
// Exported Abstracts
var Provider = /*#__PURE__*/function () {
  function Provider() {
    _classCallCheck(this, Provider);
    logger$w.checkAbstract(this instanceof Provider ? this.constructor : void 0, Provider);
    defineReadOnly(this, "_isProvider", true);
  }
  _createClass(Provider, [{
    key: "getFeeData",
    value: function getFeeData() {
      return __awaiter$h(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
        var _yield$resolvePropert, block, gasPrice, lastBaseFeePerGas, maxFeePerGas, maxPriorityFeePerGas;
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return resolveProperties({
                  block: this.getBlock("latest"),
                  gasPrice: this.getGasPrice()["catch"](function (error) {
                    // @TODO: Why is this now failing on Calaveras?
                    //console.log(error);
                    return null;
                  })
                });
              case 2:
                _yield$resolvePropert = _context.sent;
                block = _yield$resolvePropert.block;
                gasPrice = _yield$resolvePropert.gasPrice;
                lastBaseFeePerGas = null, maxFeePerGas = null, maxPriorityFeePerGas = null;
                if (block && block.baseFeePerGas) {
                  // We may want to compute this more accurately in the future,
                  // using the formula "check if the base fee is correct".
                  // See: https://eips.ethereum.org/EIPS/eip-1559
                  lastBaseFeePerGas = block.baseFeePerGas;
                  maxPriorityFeePerGas = BigNumber.from("1500000000");
                  maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
                }
                return _context.abrupt("return", {
                  lastBaseFeePerGas: lastBaseFeePerGas,
                  maxFeePerGas: maxFeePerGas,
                  maxPriorityFeePerGas: maxPriorityFeePerGas,
                  gasPrice: gasPrice
                });
              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
    }
    // Alias for "on"
  }, {
    key: "addListener",
    value: function addListener(eventName, listener) {
      return this.on(eventName, listener);
    }
    // Alias for "off"
  }, {
    key: "removeListener",
    value: function removeListener(eventName, listener) {
      return this.off(eventName, listener);
    }
  }], [{
    key: "isProvider",
    value: function isProvider(value) {
      return !!(value && value._isProvider);
    }
  }]);
  return Provider;
}();

var version$h = "abstract-signer/5.7.0";

function _createSuper$k(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$k(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$k() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __awaiter$g = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger$v = new Logger(version$h);
var allowedTransactionKeys$3 = ["accessList", "ccipReadEnabled", "chainId", "customData", "data", "from", "gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "to", "type", "value"];
var forwardErrors = [Logger.errors.INSUFFICIENT_FUNDS, Logger.errors.NONCE_EXPIRED, Logger.errors.REPLACEMENT_UNDERPRICED];
var Signer = /*#__PURE__*/function () {
  ///////////////////
  // Sub-classes MUST call super
  function Signer() {
    _classCallCheck(this, Signer);
    logger$v.checkAbstract(this instanceof Signer ? this.constructor : void 0, Signer);
    defineReadOnly(this, "_isSigner", true);
  }
  ///////////////////
  // Sub-classes MAY override these
  _createClass(Signer, [{
    key: "getBalance",
    value: function getBalance(blockTag) {
      return __awaiter$g(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this._checkProvider("getBalance");
                _context.next = 3;
                return this.provider.getBalance(this.getAddress(), blockTag);
              case 3:
                return _context.abrupt("return", _context.sent);
              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
    }
  }, {
    key: "getTransactionCount",
    value: function getTransactionCount(blockTag) {
      return __awaiter$g(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee2() {
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this._checkProvider("getTransactionCount");
                _context2.next = 3;
                return this.provider.getTransactionCount(this.getAddress(), blockTag);
              case 3:
                return _context2.abrupt("return", _context2.sent);
              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
    }
    // Populates "from" if unspecified, and estimates the gas for the transaction
  }, {
    key: "estimateGas",
    value: function estimateGas(transaction) {
      return __awaiter$g(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee3() {
        var tx;
        return regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this._checkProvider("estimateGas");
                _context3.next = 3;
                return resolveProperties(this.checkTransaction(transaction));
              case 3:
                tx = _context3.sent;
                _context3.next = 6;
                return this.provider.estimateGas(tx);
              case 6:
                return _context3.abrupt("return", _context3.sent);
              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
    }
    // Populates "from" if unspecified, and calls with the transaction
  }, {
    key: "call",
    value: function call(transaction, blockTag) {
      return __awaiter$g(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee4() {
        var tx;
        return regenerator.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this._checkProvider("call");
                _context4.next = 3;
                return resolveProperties(this.checkTransaction(transaction));
              case 3:
                tx = _context4.sent;
                _context4.next = 6;
                return this.provider.call(tx, blockTag);
              case 6:
                return _context4.abrupt("return", _context4.sent);
              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
    }
    // Populates all fields in a transaction, signs it and sends it to the network
  }, {
    key: "sendTransaction",
    value: function sendTransaction(transaction) {
      return __awaiter$g(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee5() {
        var tx, signedTx;
        return regenerator.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this._checkProvider("sendTransaction");
                _context5.next = 3;
                return this.populateTransaction(transaction);
              case 3:
                tx = _context5.sent;
                _context5.next = 6;
                return this.signTransaction(tx);
              case 6:
                signedTx = _context5.sent;
                _context5.next = 9;
                return this.provider.sendTransaction(signedTx);
              case 9:
                return _context5.abrupt("return", _context5.sent);
              case 10:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));
    }
  }, {
    key: "getChainId",
    value: function getChainId() {
      return __awaiter$g(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee6() {
        var network;
        return regenerator.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this._checkProvider("getChainId");
                _context6.next = 3;
                return this.provider.getNetwork();
              case 3:
                network = _context6.sent;
                return _context6.abrupt("return", network.chainId);
              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));
    }
  }, {
    key: "getGasPrice",
    value: function getGasPrice() {
      return __awaiter$g(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee7() {
        return regenerator.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                this._checkProvider("getGasPrice");
                _context7.next = 3;
                return this.provider.getGasPrice();
              case 3:
                return _context7.abrupt("return", _context7.sent);
              case 4:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));
    }
  }, {
    key: "getFeeData",
    value: function getFeeData() {
      return __awaiter$g(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee8() {
        return regenerator.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                this._checkProvider("getFeeData");
                _context8.next = 3;
                return this.provider.getFeeData();
              case 3:
                return _context8.abrupt("return", _context8.sent);
              case 4:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));
    }
  }, {
    key: "resolveName",
    value: function resolveName(name) {
      return __awaiter$g(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee9() {
        return regenerator.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                this._checkProvider("resolveName");
                _context9.next = 3;
                return this.provider.resolveName(name);
              case 3:
                return _context9.abrupt("return", _context9.sent);
              case 4:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));
    }
    // Checks a transaction does not contain invalid keys and if
    // no "from" is provided, populates it.
    // - does NOT require a provider
    // - adds "from" is not present
    // - returns a COPY (safe to mutate the result)
    // By default called from: (overriding these prevents it)
    //   - call
    //   - estimateGas
    //   - populateTransaction (and therefor sendTransaction)
  }, {
    key: "checkTransaction",
    value: function checkTransaction(transaction) {
      for (var key in transaction) {
        if (allowedTransactionKeys$3.indexOf(key) === -1) {
          logger$v.throwArgumentError("invalid transaction key: " + key, "transaction", transaction);
        }
      }
      var tx = shallowCopy(transaction);
      if (tx.from == null) {
        tx.from = this.getAddress();
      } else {
        // Make sure any provided address matches this signer
        tx.from = Promise.all([Promise.resolve(tx.from), this.getAddress()]).then(function (result) {
          if (result[0].toLowerCase() !== result[1].toLowerCase()) {
            logger$v.throwArgumentError("from address mismatch", "transaction", transaction);
          }
          return result[0];
        });
      }
      return tx;
    }
    // Populates ALL keys for a transaction and checks that "from" matches
    // this Signer. Should be used by sendTransaction but NOT by signTransaction.
    // By default called from: (overriding these prevents it)
    //   - sendTransaction
    //
    // Notes:
    //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas
  }, {
    key: "populateTransaction",
    value: function populateTransaction(transaction) {
      return __awaiter$g(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee11() {
        var _this = this;
        var tx, hasEip1559, feeData, gasPrice;
        return regenerator.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return resolveProperties(this.checkTransaction(transaction));
              case 2:
                tx = _context11.sent;
                if (tx.to != null) {
                  tx.to = Promise.resolve(tx.to).then(function (to) {
                    return __awaiter$g(_this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee10() {
                      var address;
                      return regenerator.wrap(function _callee10$(_context10) {
                        while (1) {
                          switch (_context10.prev = _context10.next) {
                            case 0:
                              if (!(to == null)) {
                                _context10.next = 2;
                                break;
                              }
                              return _context10.abrupt("return", null);
                            case 2:
                              _context10.next = 4;
                              return this.resolveName(to);
                            case 4:
                              address = _context10.sent;
                              if (address == null) {
                                logger$v.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                              }
                              return _context10.abrupt("return", address);
                            case 7:
                            case "end":
                              return _context10.stop();
                          }
                        }
                      }, _callee10, this);
                    }));
                  });
                  // Prevent this error from causing an UnhandledPromiseException
                  tx.to["catch"](function (error) {});
                }
                // Do not allow mixing pre-eip-1559 and eip-1559 properties
                hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;
                if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {
                  logger$v.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
                } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {
                  logger$v.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
                }
                if (!((tx.type === 2 || tx.type == null) && tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {
                  _context11.next = 10;
                  break;
                }
                // Fully-formed EIP-1559 transaction (skip getFeeData)
                tx.type = 2;
                _context11.next = 18;
                break;
              case 10:
                if (!(tx.type === 0 || tx.type === 1)) {
                  _context11.next = 14;
                  break;
                }
                // Explicit Legacy or EIP-2930 transaction
                // Populate missing gasPrice
                if (tx.gasPrice == null) {
                  tx.gasPrice = this.getGasPrice();
                }
                _context11.next = 18;
                break;
              case 14:
                _context11.next = 16;
                return this.getFeeData();
              case 16:
                feeData = _context11.sent;
                if (tx.type == null) {
                  // We need to auto-detect the intended type of this transaction...
                  if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
                    // The network supports EIP-1559!
                    // Upgrade transaction from null to eip-1559
                    tx.type = 2;
                    if (tx.gasPrice != null) {
                      // Using legacy gasPrice property on an eip-1559 network,
                      // so use gasPrice as both fee properties
                      gasPrice = tx.gasPrice;
                      delete tx.gasPrice;
                      tx.maxFeePerGas = gasPrice;
                      tx.maxPriorityFeePerGas = gasPrice;
                    } else {
                      // Populate missing fee data
                      if (tx.maxFeePerGas == null) {
                        tx.maxFeePerGas = feeData.maxFeePerGas;
                      }
                      if (tx.maxPriorityFeePerGas == null) {
                        tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                      }
                    }
                  } else if (feeData.gasPrice != null) {
                    // Network doesn't support EIP-1559...
                    // ...but they are trying to use EIP-1559 properties
                    if (hasEip1559) {
                      logger$v.throwError("network does not support EIP-1559", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "populateTransaction"
                      });
                    }
                    // Populate missing fee data
                    if (tx.gasPrice == null) {
                      tx.gasPrice = feeData.gasPrice;
                    }
                    // Explicitly set untyped transaction to legacy
                    tx.type = 0;
                  } else {
                    // getFeeData has failed us.
                    logger$v.throwError("failed to get consistent fee data", Logger.errors.UNSUPPORTED_OPERATION, {
                      operation: "signer.getFeeData"
                    });
                  }
                } else if (tx.type === 2) {
                  // Explicitly using EIP-1559
                  // Populate missing fee data
                  if (tx.maxFeePerGas == null) {
                    tx.maxFeePerGas = feeData.maxFeePerGas;
                  }
                  if (tx.maxPriorityFeePerGas == null) {
                    tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                  }
                }
              case 18:
                if (tx.nonce == null) {
                  tx.nonce = this.getTransactionCount("pending");
                }
                if (tx.gasLimit == null) {
                  tx.gasLimit = this.estimateGas(tx)["catch"](function (error) {
                    if (forwardErrors.indexOf(error.code) >= 0) {
                      throw error;
                    }
                    return logger$v.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                      error: error,
                      tx: tx
                    });
                  });
                }
                if (tx.chainId == null) {
                  tx.chainId = this.getChainId();
                } else {
                  tx.chainId = Promise.all([Promise.resolve(tx.chainId), this.getChainId()]).then(function (results) {
                    if (results[1] !== 0 && results[0] !== results[1]) {
                      logger$v.throwArgumentError("chainId address mismatch", "transaction", transaction);
                    }
                    return results[0];
                  });
                }
                _context11.next = 23;
                return resolveProperties(tx);
              case 23:
                return _context11.abrupt("return", _context11.sent);
              case 24:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));
    }
    ///////////////////
    // Sub-classes SHOULD leave these alone
  }, {
    key: "_checkProvider",
    value: function _checkProvider(operation) {
      if (!this.provider) {
        logger$v.throwError("missing provider", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: operation || "_checkProvider"
        });
      }
    }
  }], [{
    key: "isSigner",
    value: function isSigner(value) {
      return !!(value && value._isSigner);
    }
  }]);
  return Signer;
}();
var VoidSigner = /*#__PURE__*/function (_Signer) {
  _inherits(VoidSigner, _Signer);
  var _super = _createSuper$k(VoidSigner);
  function VoidSigner(address, provider) {
    var _this2;
    _classCallCheck(this, VoidSigner);
    _this2 = _super.call(this);
    defineReadOnly(_assertThisInitialized(_this2), "address", address);
    defineReadOnly(_assertThisInitialized(_this2), "provider", provider || null);
    return _this2;
  }
  _createClass(VoidSigner, [{
    key: "getAddress",
    value: function getAddress() {
      return Promise.resolve(this.address);
    }
  }, {
    key: "_fail",
    value: function _fail(message, operation) {
      return Promise.resolve().then(function () {
        logger$v.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, {
          operation: operation
        });
      });
    }
  }, {
    key: "signMessage",
    value: function signMessage(message) {
      return this._fail("VoidSigner cannot sign messages", "signMessage");
    }
  }, {
    key: "signTransaction",
    value: function signTransaction(transaction) {
      return this._fail("VoidSigner cannot sign transactions", "signTransaction");
    }
  }, {
    key: "_signTypedData",
    value: function _signTypedData(domain, types, value) {
      return this._fail("VoidSigner cannot sign typed data", "signTypedData");
    }
  }, {
    key: "connect",
    value: function connect(provider) {
      return new VoidSigner(this.address, provider);
    }
  }]);
  return VoidSigner;
}(Signer);

var bn$3 = {exports: {}};

(function (module) {
	(function (module, exports) {

	  // Utils
	  function assert(val, msg) {
	    if (!val) throw new Error(msg || 'Assertion failed');
	  }

	  // Could use `inherits` module, but don't want to move from single file
	  // architecture yet.
	  function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function TempCtor() {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  }

	  // BN

	  function BN(number, base, endian) {
	    if (BN.isBN(number)) {
	      return number;
	    }
	    this.negative = 0;
	    this.words = null;
	    this.length = 0;

	    // Reduction context
	    this.red = null;
	    if (number !== null) {
	      if (base === 'le' || base === 'be') {
	        endian = base;
	        base = 10;
	      }
	      this._init(number || 0, base || 10, endian || 'be');
	    }
	  }
	  if (typeof module === 'object') {
	    module.exports = BN;
	  } else {
	    exports.BN = BN;
	  }
	  BN.BN = BN;
	  BN.wordSize = 26;
	  var Buffer;
	  try {
	    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
	      Buffer = window.Buffer;
	    } else {
	      Buffer = require('buffer').Buffer;
	    }
	  } catch (e) {}
	  BN.isBN = function isBN(num) {
	    if (num instanceof BN) {
	      return true;
	    }
	    return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
	  };
	  BN.max = function max(left, right) {
	    if (left.cmp(right) > 0) return left;
	    return right;
	  };
	  BN.min = function min(left, right) {
	    if (left.cmp(right) < 0) return left;
	    return right;
	  };
	  BN.prototype._init = function init(number, base, endian) {
	    if (typeof number === 'number') {
	      return this._initNumber(number, base, endian);
	    }
	    if (typeof number === 'object') {
	      return this._initArray(number, base, endian);
	    }
	    if (base === 'hex') {
	      base = 16;
	    }
	    assert(base === (base | 0) && base >= 2 && base <= 36);
	    number = number.toString().replace(/\s+/g, '');
	    var start = 0;
	    if (number[0] === '-') {
	      start++;
	      this.negative = 1;
	    }
	    if (start < number.length) {
	      if (base === 16) {
	        this._parseHex(number, start, endian);
	      } else {
	        this._parseBase(number, base, start);
	        if (endian === 'le') {
	          this._initArray(this.toArray(), base, endian);
	        }
	      }
	    }
	  };
	  BN.prototype._initNumber = function _initNumber(number, base, endian) {
	    if (number < 0) {
	      this.negative = 1;
	      number = -number;
	    }
	    if (number < 0x4000000) {
	      this.words = [number & 0x3ffffff];
	      this.length = 1;
	    } else if (number < 0x10000000000000) {
	      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
	      this.length = 2;
	    } else {
	      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
	      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
	      this.length = 3;
	    }
	    if (endian !== 'le') return;

	    // Reverse the bytes
	    this._initArray(this.toArray(), base, endian);
	  };
	  BN.prototype._initArray = function _initArray(number, base, endian) {
	    // Perhaps a Uint8Array
	    assert(typeof number.length === 'number');
	    if (number.length <= 0) {
	      this.words = [0];
	      this.length = 1;
	      return this;
	    }
	    this.length = Math.ceil(number.length / 3);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }
	    var j, w;
	    var off = 0;
	    if (endian === 'be') {
	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
	        w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
	        this.words[j] |= w << off & 0x3ffffff;
	        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    } else if (endian === 'le') {
	      for (i = 0, j = 0; i < number.length; i += 3) {
	        w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
	        this.words[j] |= w << off & 0x3ffffff;
	        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    }
	    return this._strip();
	  };
	  function parseHex4Bits(string, index) {
	    var c = string.charCodeAt(index);
	    // '0' - '9'
	    if (c >= 48 && c <= 57) {
	      return c - 48;
	      // 'A' - 'F'
	    } else if (c >= 65 && c <= 70) {
	      return c - 55;
	      // 'a' - 'f'
	    } else if (c >= 97 && c <= 102) {
	      return c - 87;
	    } else {
	      assert(false, 'Invalid character in ' + string);
	    }
	  }
	  function parseHexByte(string, lowerBound, index) {
	    var r = parseHex4Bits(string, index);
	    if (index - 1 >= lowerBound) {
	      r |= parseHex4Bits(string, index - 1) << 4;
	    }
	    return r;
	  }
	  BN.prototype._parseHex = function _parseHex(number, start, endian) {
	    // Create possibly bigger array to ensure that it fits the number
	    this.length = Math.ceil((number.length - start) / 6);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    // 24-bits chunks
	    var off = 0;
	    var j = 0;
	    var w;
	    if (endian === 'be') {
	      for (i = number.length - 1; i >= start; i -= 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    } else {
	      var parseLength = number.length - start;
	      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    }
	    this._strip();
	  };
	  function parseBase(str, start, end, mul) {
	    var r = 0;
	    var b = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;
	      r *= mul;

	      // 'a'
	      if (c >= 49) {
	        b = c - 49 + 0xa;

	        // 'A'
	      } else if (c >= 17) {
	        b = c - 17 + 0xa;

	        // '0' - '9'
	      } else {
	        b = c;
	      }
	      assert(c >= 0 && b < mul, 'Invalid character');
	      r += b;
	    }
	    return r;
	  }
	  BN.prototype._parseBase = function _parseBase(number, base, start) {
	    // Initialize as zero
	    this.words = [0];
	    this.length = 1;

	    // Find length of limb in base
	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
	      limbLen++;
	    }
	    limbLen--;
	    limbPow = limbPow / base | 0;
	    var total = number.length - start;
	    var mod = total % limbLen;
	    var end = Math.min(total, total - mod) + start;
	    var word = 0;
	    for (var i = start; i < end; i += limbLen) {
	      word = parseBase(number, i, i + limbLen, base);
	      this.imuln(limbPow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }
	    if (mod !== 0) {
	      var pow = 1;
	      word = parseBase(number, i, number.length, base);
	      for (i = 0; i < mod; i++) {
	        pow *= base;
	      }
	      this.imuln(pow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }
	    this._strip();
	  };
	  BN.prototype.copy = function copy(dest) {
	    dest.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      dest.words[i] = this.words[i];
	    }
	    dest.length = this.length;
	    dest.negative = this.negative;
	    dest.red = this.red;
	  };
	  function move(dest, src) {
	    dest.words = src.words;
	    dest.length = src.length;
	    dest.negative = src.negative;
	    dest.red = src.red;
	  }
	  BN.prototype._move = function _move(dest) {
	    move(dest, this);
	  };
	  BN.prototype.clone = function clone() {
	    var r = new BN(null);
	    this.copy(r);
	    return r;
	  };
	  BN.prototype._expand = function _expand(size) {
	    while (this.length < size) {
	      this.words[this.length++] = 0;
	    }
	    return this;
	  };

	  // Remove leading `0` from `this`
	  BN.prototype._strip = function strip() {
	    while (this.length > 1 && this.words[this.length - 1] === 0) {
	      this.length--;
	    }
	    return this._normSign();
	  };
	  BN.prototype._normSign = function _normSign() {
	    // -0 = 0
	    if (this.length === 1 && this.words[0] === 0) {
	      this.negative = 0;
	    }
	    return this;
	  };

	  // Check Symbol.for because not everywhere where Symbol defined
	  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
	  if (typeof Symbol !== 'undefined' && typeof Symbol["for"] === 'function') {
	    try {
	      BN.prototype[Symbol["for"]('nodejs.util.inspect.custom')] = inspect;
	    } catch (e) {
	      BN.prototype.inspect = inspect;
	    }
	  } else {
	    BN.prototype.inspect = inspect;
	  }
	  function inspect() {
	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	  }

	  /*
	   var zeros = [];
	  var groupSizes = [];
	  var groupBases = [];
	   var s = '';
	  var i = -1;
	  while (++i < BN.wordSize) {
	    zeros[i] = s;
	    s += '0';
	  }
	  groupSizes[0] = 0;
	  groupSizes[1] = 0;
	  groupBases[0] = 0;
	  groupBases[1] = 0;
	  var base = 2 - 1;
	  while (++base < 36 + 1) {
	    var groupSize = 0;
	    var groupBase = 1;
	    while (groupBase < (1 << BN.wordSize) / base) {
	      groupBase *= base;
	      groupSize += 1;
	    }
	    groupSizes[base] = groupSize;
	    groupBases[base] = groupBase;
	  }
	   */

	  var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
	  var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
	  var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
	  BN.prototype.toString = function toString(base, padding) {
	    base = base || 10;
	    padding = padding | 0 || 1;
	    var out;
	    if (base === 16 || base === 'hex') {
	      out = '';
	      var off = 0;
	      var carry = 0;
	      for (var i = 0; i < this.length; i++) {
	        var w = this.words[i];
	        var word = ((w << off | carry) & 0xffffff).toString(16);
	        carry = w >>> 24 - off & 0xffffff;
	        off += 2;
	        if (off >= 26) {
	          off -= 26;
	          i--;
	        }
	        if (carry !== 0 || i !== this.length - 1) {
	          out = zeros[6 - word.length] + word + out;
	        } else {
	          out = word + out;
	        }
	      }
	      if (carry !== 0) {
	        out = carry.toString(16) + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }
	    if (base === (base | 0) && base >= 2 && base <= 36) {
	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
	      var groupSize = groupSizes[base];
	      // var groupBase = Math.pow(base, groupSize);
	      var groupBase = groupBases[base];
	      out = '';
	      var c = this.clone();
	      c.negative = 0;
	      while (!c.isZero()) {
	        var r = c.modrn(groupBase).toString(base);
	        c = c.idivn(groupBase);
	        if (!c.isZero()) {
	          out = zeros[groupSize - r.length] + r + out;
	        } else {
	          out = r + out;
	        }
	      }
	      if (this.isZero()) {
	        out = '0' + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }
	    assert(false, 'Base should be between 2 and 36');
	  };
	  BN.prototype.toNumber = function toNumber() {
	    var ret = this.words[0];
	    if (this.length === 2) {
	      ret += this.words[1] * 0x4000000;
	    } else if (this.length === 3 && this.words[2] === 0x01) {
	      // NOTE: at this stage it is known that the top bit is set
	      ret += 0x10000000000000 + this.words[1] * 0x4000000;
	    } else if (this.length > 2) {
	      assert(false, 'Number can only safely store up to 53 bits');
	    }
	    return this.negative !== 0 ? -ret : ret;
	  };
	  BN.prototype.toJSON = function toJSON() {
	    return this.toString(16, 2);
	  };
	  if (Buffer) {
	    BN.prototype.toBuffer = function toBuffer(endian, length) {
	      return this.toArrayLike(Buffer, endian, length);
	    };
	  }
	  BN.prototype.toArray = function toArray(endian, length) {
	    return this.toArrayLike(Array, endian, length);
	  };
	  var allocate = function allocate(ArrayType, size) {
	    if (ArrayType.allocUnsafe) {
	      return ArrayType.allocUnsafe(size);
	    }
	    return new ArrayType(size);
	  };
	  BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
	    this._strip();
	    var byteLength = this.byteLength();
	    var reqLength = length || Math.max(1, byteLength);
	    assert(byteLength <= reqLength, 'byte array longer than desired length');
	    assert(reqLength > 0, 'Requested array length <= 0');
	    var res = allocate(ArrayType, reqLength);
	    var postfix = endian === 'le' ? 'LE' : 'BE';
	    this['_toArrayLike' + postfix](res, byteLength);
	    return res;
	  };
	  BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
	    var position = 0;
	    var carry = 0;
	    for (var i = 0, shift = 0; i < this.length; i++) {
	      var word = this.words[i] << shift | carry;
	      res[position++] = word & 0xff;
	      if (position < res.length) {
	        res[position++] = word >> 8 & 0xff;
	      }
	      if (position < res.length) {
	        res[position++] = word >> 16 & 0xff;
	      }
	      if (shift === 6) {
	        if (position < res.length) {
	          res[position++] = word >> 24 & 0xff;
	        }
	        carry = 0;
	        shift = 0;
	      } else {
	        carry = word >>> 24;
	        shift += 2;
	      }
	    }
	    if (position < res.length) {
	      res[position++] = carry;
	      while (position < res.length) {
	        res[position++] = 0;
	      }
	    }
	  };
	  BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
	    var position = res.length - 1;
	    var carry = 0;
	    for (var i = 0, shift = 0; i < this.length; i++) {
	      var word = this.words[i] << shift | carry;
	      res[position--] = word & 0xff;
	      if (position >= 0) {
	        res[position--] = word >> 8 & 0xff;
	      }
	      if (position >= 0) {
	        res[position--] = word >> 16 & 0xff;
	      }
	      if (shift === 6) {
	        if (position >= 0) {
	          res[position--] = word >> 24 & 0xff;
	        }
	        carry = 0;
	        shift = 0;
	      } else {
	        carry = word >>> 24;
	        shift += 2;
	      }
	    }
	    if (position >= 0) {
	      res[position--] = carry;
	      while (position >= 0) {
	        res[position--] = 0;
	      }
	    }
	  };
	  if (Math.clz32) {
	    BN.prototype._countBits = function _countBits(w) {
	      return 32 - Math.clz32(w);
	    };
	  } else {
	    BN.prototype._countBits = function _countBits(w) {
	      var t = w;
	      var r = 0;
	      if (t >= 0x1000) {
	        r += 13;
	        t >>>= 13;
	      }
	      if (t >= 0x40) {
	        r += 7;
	        t >>>= 7;
	      }
	      if (t >= 0x8) {
	        r += 4;
	        t >>>= 4;
	      }
	      if (t >= 0x02) {
	        r += 2;
	        t >>>= 2;
	      }
	      return r + t;
	    };
	  }
	  BN.prototype._zeroBits = function _zeroBits(w) {
	    // Short-cut
	    if (w === 0) return 26;
	    var t = w;
	    var r = 0;
	    if ((t & 0x1fff) === 0) {
	      r += 13;
	      t >>>= 13;
	    }
	    if ((t & 0x7f) === 0) {
	      r += 7;
	      t >>>= 7;
	    }
	    if ((t & 0xf) === 0) {
	      r += 4;
	      t >>>= 4;
	    }
	    if ((t & 0x3) === 0) {
	      r += 2;
	      t >>>= 2;
	    }
	    if ((t & 0x1) === 0) {
	      r++;
	    }
	    return r;
	  };

	  // Return number of used bits in a BN
	  BN.prototype.bitLength = function bitLength() {
	    var w = this.words[this.length - 1];
	    var hi = this._countBits(w);
	    return (this.length - 1) * 26 + hi;
	  };
	  function toBitArray(num) {
	    var w = new Array(num.bitLength());
	    for (var bit = 0; bit < w.length; bit++) {
	      var off = bit / 26 | 0;
	      var wbit = bit % 26;
	      w[bit] = num.words[off] >>> wbit & 0x01;
	    }
	    return w;
	  }

	  // Number of trailing zero bits
	  BN.prototype.zeroBits = function zeroBits() {
	    if (this.isZero()) return 0;
	    var r = 0;
	    for (var i = 0; i < this.length; i++) {
	      var b = this._zeroBits(this.words[i]);
	      r += b;
	      if (b !== 26) break;
	    }
	    return r;
	  };
	  BN.prototype.byteLength = function byteLength() {
	    return Math.ceil(this.bitLength() / 8);
	  };
	  BN.prototype.toTwos = function toTwos(width) {
	    if (this.negative !== 0) {
	      return this.abs().inotn(width).iaddn(1);
	    }
	    return this.clone();
	  };
	  BN.prototype.fromTwos = function fromTwos(width) {
	    if (this.testn(width - 1)) {
	      return this.notn(width).iaddn(1).ineg();
	    }
	    return this.clone();
	  };
	  BN.prototype.isNeg = function isNeg() {
	    return this.negative !== 0;
	  };

	  // Return negative clone of `this`
	  BN.prototype.neg = function neg() {
	    return this.clone().ineg();
	  };
	  BN.prototype.ineg = function ineg() {
	    if (!this.isZero()) {
	      this.negative ^= 1;
	    }
	    return this;
	  };

	  // Or `num` with `this` in-place
	  BN.prototype.iuor = function iuor(num) {
	    while (this.length < num.length) {
	      this.words[this.length++] = 0;
	    }
	    for (var i = 0; i < num.length; i++) {
	      this.words[i] = this.words[i] | num.words[i];
	    }
	    return this._strip();
	  };
	  BN.prototype.ior = function ior(num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuor(num);
	  };

	  // Or `num` with `this`
	  BN.prototype.or = function or(num) {
	    if (this.length > num.length) return this.clone().ior(num);
	    return num.clone().ior(this);
	  };
	  BN.prototype.uor = function uor(num) {
	    if (this.length > num.length) return this.clone().iuor(num);
	    return num.clone().iuor(this);
	  };

	  // And `num` with `this` in-place
	  BN.prototype.iuand = function iuand(num) {
	    // b = min-length(num, this)
	    var b;
	    if (this.length > num.length) {
	      b = num;
	    } else {
	      b = this;
	    }
	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = this.words[i] & num.words[i];
	    }
	    this.length = b.length;
	    return this._strip();
	  };
	  BN.prototype.iand = function iand(num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuand(num);
	  };

	  // And `num` with `this`
	  BN.prototype.and = function and(num) {
	    if (this.length > num.length) return this.clone().iand(num);
	    return num.clone().iand(this);
	  };
	  BN.prototype.uand = function uand(num) {
	    if (this.length > num.length) return this.clone().iuand(num);
	    return num.clone().iuand(this);
	  };

	  // Xor `num` with `this` in-place
	  BN.prototype.iuxor = function iuxor(num) {
	    // a.length > b.length
	    var a;
	    var b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }
	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = a.words[i] ^ b.words[i];
	    }
	    if (this !== a) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }
	    this.length = a.length;
	    return this._strip();
	  };
	  BN.prototype.ixor = function ixor(num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuxor(num);
	  };

	  // Xor `num` with `this`
	  BN.prototype.xor = function xor(num) {
	    if (this.length > num.length) return this.clone().ixor(num);
	    return num.clone().ixor(this);
	  };
	  BN.prototype.uxor = function uxor(num) {
	    if (this.length > num.length) return this.clone().iuxor(num);
	    return num.clone().iuxor(this);
	  };

	  // Not ``this`` with ``width`` bitwidth
	  BN.prototype.inotn = function inotn(width) {
	    assert(typeof width === 'number' && width >= 0);
	    var bytesNeeded = Math.ceil(width / 26) | 0;
	    var bitsLeft = width % 26;

	    // Extend the buffer with leading zeroes
	    this._expand(bytesNeeded);
	    if (bitsLeft > 0) {
	      bytesNeeded--;
	    }

	    // Handle complete words
	    for (var i = 0; i < bytesNeeded; i++) {
	      this.words[i] = ~this.words[i] & 0x3ffffff;
	    }

	    // Handle the residue
	    if (bitsLeft > 0) {
	      this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
	    }

	    // And remove leading zeroes
	    return this._strip();
	  };
	  BN.prototype.notn = function notn(width) {
	    return this.clone().inotn(width);
	  };

	  // Set `bit` of `this`
	  BN.prototype.setn = function setn(bit, val) {
	    assert(typeof bit === 'number' && bit >= 0);
	    var off = bit / 26 | 0;
	    var wbit = bit % 26;
	    this._expand(off + 1);
	    if (val) {
	      this.words[off] = this.words[off] | 1 << wbit;
	    } else {
	      this.words[off] = this.words[off] & ~(1 << wbit);
	    }
	    return this._strip();
	  };

	  // Add `num` to `this` in-place
	  BN.prototype.iadd = function iadd(num) {
	    var r;

	    // negative + positive
	    if (this.negative !== 0 && num.negative === 0) {
	      this.negative = 0;
	      r = this.isub(num);
	      this.negative ^= 1;
	      return this._normSign();

	      // positive + negative
	    } else if (this.negative === 0 && num.negative !== 0) {
	      num.negative = 0;
	      r = this.isub(num);
	      num.negative = 1;
	      return r._normSign();
	    }

	    // a.length > b.length
	    var a, b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }
	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }
	    this.length = a.length;
	    if (carry !== 0) {
	      this.words[this.length] = carry;
	      this.length++;
	      // Copy the rest of the words
	    } else if (a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }
	    return this;
	  };

	  // Add `num` to `this`
	  BN.prototype.add = function add(num) {
	    var res;
	    if (num.negative !== 0 && this.negative === 0) {
	      num.negative = 0;
	      res = this.sub(num);
	      num.negative ^= 1;
	      return res;
	    } else if (num.negative === 0 && this.negative !== 0) {
	      this.negative = 0;
	      res = num.sub(this);
	      this.negative = 1;
	      return res;
	    }
	    if (this.length > num.length) return this.clone().iadd(num);
	    return num.clone().iadd(this);
	  };

	  // Subtract `num` from `this` in-place
	  BN.prototype.isub = function isub(num) {
	    // this - (-num) = this + num
	    if (num.negative !== 0) {
	      num.negative = 0;
	      var r = this.iadd(num);
	      num.negative = 1;
	      return r._normSign();

	      // -this - num = -(this + num)
	    } else if (this.negative !== 0) {
	      this.negative = 0;
	      this.iadd(num);
	      this.negative = 1;
	      return this._normSign();
	    }

	    // At this point both numbers are positive
	    var cmp = this.cmp(num);

	    // Optimization - zeroify
	    if (cmp === 0) {
	      this.negative = 0;
	      this.length = 1;
	      this.words[0] = 0;
	      return this;
	    }

	    // a > b
	    var a, b;
	    if (cmp > 0) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }
	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }

	    // Copy rest of the words
	    if (carry === 0 && i < a.length && a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }
	    this.length = Math.max(this.length, i);
	    if (a !== this) {
	      this.negative = 1;
	    }
	    return this._strip();
	  };

	  // Subtract `num` from `this`
	  BN.prototype.sub = function sub(num) {
	    return this.clone().isub(num);
	  };
	  function smallMulTo(self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    var len = self.length + num.length | 0;
	    out.length = len;
	    len = len - 1 | 0;

	    // Peel one iteration (compiler can't do it, because of code complexity)
	    var a = self.words[0] | 0;
	    var b = num.words[0] | 0;
	    var r = a * b;
	    var lo = r & 0x3ffffff;
	    var carry = r / 0x4000000 | 0;
	    out.words[0] = lo;
	    for (var k = 1; k < len; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = carry >>> 26;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = k - j | 0;
	        a = self.words[i] | 0;
	        b = num.words[j] | 0;
	        r = a * b + rword;
	        ncarry += r / 0x4000000 | 0;
	        rword = r & 0x3ffffff;
	      }
	      out.words[k] = rword | 0;
	      carry = ncarry | 0;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry | 0;
	    } else {
	      out.length--;
	    }
	    return out._strip();
	  }

	  // TODO(indutny): it may be reasonable to omit it for users who don't need
	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
	  // multiplication (like elliptic secp256k1).
	  var comb10MulTo = function comb10MulTo(self, num, out) {
	    var a = self.words;
	    var b = num.words;
	    var o = out.words;
	    var c = 0;
	    var lo;
	    var mid;
	    var hi;
	    var a0 = a[0] | 0;
	    var al0 = a0 & 0x1fff;
	    var ah0 = a0 >>> 13;
	    var a1 = a[1] | 0;
	    var al1 = a1 & 0x1fff;
	    var ah1 = a1 >>> 13;
	    var a2 = a[2] | 0;
	    var al2 = a2 & 0x1fff;
	    var ah2 = a2 >>> 13;
	    var a3 = a[3] | 0;
	    var al3 = a3 & 0x1fff;
	    var ah3 = a3 >>> 13;
	    var a4 = a[4] | 0;
	    var al4 = a4 & 0x1fff;
	    var ah4 = a4 >>> 13;
	    var a5 = a[5] | 0;
	    var al5 = a5 & 0x1fff;
	    var ah5 = a5 >>> 13;
	    var a6 = a[6] | 0;
	    var al6 = a6 & 0x1fff;
	    var ah6 = a6 >>> 13;
	    var a7 = a[7] | 0;
	    var al7 = a7 & 0x1fff;
	    var ah7 = a7 >>> 13;
	    var a8 = a[8] | 0;
	    var al8 = a8 & 0x1fff;
	    var ah8 = a8 >>> 13;
	    var a9 = a[9] | 0;
	    var al9 = a9 & 0x1fff;
	    var ah9 = a9 >>> 13;
	    var b0 = b[0] | 0;
	    var bl0 = b0 & 0x1fff;
	    var bh0 = b0 >>> 13;
	    var b1 = b[1] | 0;
	    var bl1 = b1 & 0x1fff;
	    var bh1 = b1 >>> 13;
	    var b2 = b[2] | 0;
	    var bl2 = b2 & 0x1fff;
	    var bh2 = b2 >>> 13;
	    var b3 = b[3] | 0;
	    var bl3 = b3 & 0x1fff;
	    var bh3 = b3 >>> 13;
	    var b4 = b[4] | 0;
	    var bl4 = b4 & 0x1fff;
	    var bh4 = b4 >>> 13;
	    var b5 = b[5] | 0;
	    var bl5 = b5 & 0x1fff;
	    var bh5 = b5 >>> 13;
	    var b6 = b[6] | 0;
	    var bl6 = b6 & 0x1fff;
	    var bh6 = b6 >>> 13;
	    var b7 = b[7] | 0;
	    var bl7 = b7 & 0x1fff;
	    var bh7 = b7 >>> 13;
	    var b8 = b[8] | 0;
	    var bl8 = b8 & 0x1fff;
	    var bh8 = b8 >>> 13;
	    var b9 = b[9] | 0;
	    var bl9 = b9 & 0x1fff;
	    var bh9 = b9 >>> 13;
	    out.negative = self.negative ^ num.negative;
	    out.length = 19;
	    /* k = 0 */
	    lo = Math.imul(al0, bl0);
	    mid = Math.imul(al0, bh0);
	    mid = mid + Math.imul(ah0, bl0) | 0;
	    hi = Math.imul(ah0, bh0);
	    var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
	    w0 &= 0x3ffffff;
	    /* k = 1 */
	    lo = Math.imul(al1, bl0);
	    mid = Math.imul(al1, bh0);
	    mid = mid + Math.imul(ah1, bl0) | 0;
	    hi = Math.imul(ah1, bh0);
	    lo = lo + Math.imul(al0, bl1) | 0;
	    mid = mid + Math.imul(al0, bh1) | 0;
	    mid = mid + Math.imul(ah0, bl1) | 0;
	    hi = hi + Math.imul(ah0, bh1) | 0;
	    var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
	    w1 &= 0x3ffffff;
	    /* k = 2 */
	    lo = Math.imul(al2, bl0);
	    mid = Math.imul(al2, bh0);
	    mid = mid + Math.imul(ah2, bl0) | 0;
	    hi = Math.imul(ah2, bh0);
	    lo = lo + Math.imul(al1, bl1) | 0;
	    mid = mid + Math.imul(al1, bh1) | 0;
	    mid = mid + Math.imul(ah1, bl1) | 0;
	    hi = hi + Math.imul(ah1, bh1) | 0;
	    lo = lo + Math.imul(al0, bl2) | 0;
	    mid = mid + Math.imul(al0, bh2) | 0;
	    mid = mid + Math.imul(ah0, bl2) | 0;
	    hi = hi + Math.imul(ah0, bh2) | 0;
	    var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
	    w2 &= 0x3ffffff;
	    /* k = 3 */
	    lo = Math.imul(al3, bl0);
	    mid = Math.imul(al3, bh0);
	    mid = mid + Math.imul(ah3, bl0) | 0;
	    hi = Math.imul(ah3, bh0);
	    lo = lo + Math.imul(al2, bl1) | 0;
	    mid = mid + Math.imul(al2, bh1) | 0;
	    mid = mid + Math.imul(ah2, bl1) | 0;
	    hi = hi + Math.imul(ah2, bh1) | 0;
	    lo = lo + Math.imul(al1, bl2) | 0;
	    mid = mid + Math.imul(al1, bh2) | 0;
	    mid = mid + Math.imul(ah1, bl2) | 0;
	    hi = hi + Math.imul(ah1, bh2) | 0;
	    lo = lo + Math.imul(al0, bl3) | 0;
	    mid = mid + Math.imul(al0, bh3) | 0;
	    mid = mid + Math.imul(ah0, bl3) | 0;
	    hi = hi + Math.imul(ah0, bh3) | 0;
	    var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
	    w3 &= 0x3ffffff;
	    /* k = 4 */
	    lo = Math.imul(al4, bl0);
	    mid = Math.imul(al4, bh0);
	    mid = mid + Math.imul(ah4, bl0) | 0;
	    hi = Math.imul(ah4, bh0);
	    lo = lo + Math.imul(al3, bl1) | 0;
	    mid = mid + Math.imul(al3, bh1) | 0;
	    mid = mid + Math.imul(ah3, bl1) | 0;
	    hi = hi + Math.imul(ah3, bh1) | 0;
	    lo = lo + Math.imul(al2, bl2) | 0;
	    mid = mid + Math.imul(al2, bh2) | 0;
	    mid = mid + Math.imul(ah2, bl2) | 0;
	    hi = hi + Math.imul(ah2, bh2) | 0;
	    lo = lo + Math.imul(al1, bl3) | 0;
	    mid = mid + Math.imul(al1, bh3) | 0;
	    mid = mid + Math.imul(ah1, bl3) | 0;
	    hi = hi + Math.imul(ah1, bh3) | 0;
	    lo = lo + Math.imul(al0, bl4) | 0;
	    mid = mid + Math.imul(al0, bh4) | 0;
	    mid = mid + Math.imul(ah0, bl4) | 0;
	    hi = hi + Math.imul(ah0, bh4) | 0;
	    var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
	    w4 &= 0x3ffffff;
	    /* k = 5 */
	    lo = Math.imul(al5, bl0);
	    mid = Math.imul(al5, bh0);
	    mid = mid + Math.imul(ah5, bl0) | 0;
	    hi = Math.imul(ah5, bh0);
	    lo = lo + Math.imul(al4, bl1) | 0;
	    mid = mid + Math.imul(al4, bh1) | 0;
	    mid = mid + Math.imul(ah4, bl1) | 0;
	    hi = hi + Math.imul(ah4, bh1) | 0;
	    lo = lo + Math.imul(al3, bl2) | 0;
	    mid = mid + Math.imul(al3, bh2) | 0;
	    mid = mid + Math.imul(ah3, bl2) | 0;
	    hi = hi + Math.imul(ah3, bh2) | 0;
	    lo = lo + Math.imul(al2, bl3) | 0;
	    mid = mid + Math.imul(al2, bh3) | 0;
	    mid = mid + Math.imul(ah2, bl3) | 0;
	    hi = hi + Math.imul(ah2, bh3) | 0;
	    lo = lo + Math.imul(al1, bl4) | 0;
	    mid = mid + Math.imul(al1, bh4) | 0;
	    mid = mid + Math.imul(ah1, bl4) | 0;
	    hi = hi + Math.imul(ah1, bh4) | 0;
	    lo = lo + Math.imul(al0, bl5) | 0;
	    mid = mid + Math.imul(al0, bh5) | 0;
	    mid = mid + Math.imul(ah0, bl5) | 0;
	    hi = hi + Math.imul(ah0, bh5) | 0;
	    var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
	    w5 &= 0x3ffffff;
	    /* k = 6 */
	    lo = Math.imul(al6, bl0);
	    mid = Math.imul(al6, bh0);
	    mid = mid + Math.imul(ah6, bl0) | 0;
	    hi = Math.imul(ah6, bh0);
	    lo = lo + Math.imul(al5, bl1) | 0;
	    mid = mid + Math.imul(al5, bh1) | 0;
	    mid = mid + Math.imul(ah5, bl1) | 0;
	    hi = hi + Math.imul(ah5, bh1) | 0;
	    lo = lo + Math.imul(al4, bl2) | 0;
	    mid = mid + Math.imul(al4, bh2) | 0;
	    mid = mid + Math.imul(ah4, bl2) | 0;
	    hi = hi + Math.imul(ah4, bh2) | 0;
	    lo = lo + Math.imul(al3, bl3) | 0;
	    mid = mid + Math.imul(al3, bh3) | 0;
	    mid = mid + Math.imul(ah3, bl3) | 0;
	    hi = hi + Math.imul(ah3, bh3) | 0;
	    lo = lo + Math.imul(al2, bl4) | 0;
	    mid = mid + Math.imul(al2, bh4) | 0;
	    mid = mid + Math.imul(ah2, bl4) | 0;
	    hi = hi + Math.imul(ah2, bh4) | 0;
	    lo = lo + Math.imul(al1, bl5) | 0;
	    mid = mid + Math.imul(al1, bh5) | 0;
	    mid = mid + Math.imul(ah1, bl5) | 0;
	    hi = hi + Math.imul(ah1, bh5) | 0;
	    lo = lo + Math.imul(al0, bl6) | 0;
	    mid = mid + Math.imul(al0, bh6) | 0;
	    mid = mid + Math.imul(ah0, bl6) | 0;
	    hi = hi + Math.imul(ah0, bh6) | 0;
	    var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
	    w6 &= 0x3ffffff;
	    /* k = 7 */
	    lo = Math.imul(al7, bl0);
	    mid = Math.imul(al7, bh0);
	    mid = mid + Math.imul(ah7, bl0) | 0;
	    hi = Math.imul(ah7, bh0);
	    lo = lo + Math.imul(al6, bl1) | 0;
	    mid = mid + Math.imul(al6, bh1) | 0;
	    mid = mid + Math.imul(ah6, bl1) | 0;
	    hi = hi + Math.imul(ah6, bh1) | 0;
	    lo = lo + Math.imul(al5, bl2) | 0;
	    mid = mid + Math.imul(al5, bh2) | 0;
	    mid = mid + Math.imul(ah5, bl2) | 0;
	    hi = hi + Math.imul(ah5, bh2) | 0;
	    lo = lo + Math.imul(al4, bl3) | 0;
	    mid = mid + Math.imul(al4, bh3) | 0;
	    mid = mid + Math.imul(ah4, bl3) | 0;
	    hi = hi + Math.imul(ah4, bh3) | 0;
	    lo = lo + Math.imul(al3, bl4) | 0;
	    mid = mid + Math.imul(al3, bh4) | 0;
	    mid = mid + Math.imul(ah3, bl4) | 0;
	    hi = hi + Math.imul(ah3, bh4) | 0;
	    lo = lo + Math.imul(al2, bl5) | 0;
	    mid = mid + Math.imul(al2, bh5) | 0;
	    mid = mid + Math.imul(ah2, bl5) | 0;
	    hi = hi + Math.imul(ah2, bh5) | 0;
	    lo = lo + Math.imul(al1, bl6) | 0;
	    mid = mid + Math.imul(al1, bh6) | 0;
	    mid = mid + Math.imul(ah1, bl6) | 0;
	    hi = hi + Math.imul(ah1, bh6) | 0;
	    lo = lo + Math.imul(al0, bl7) | 0;
	    mid = mid + Math.imul(al0, bh7) | 0;
	    mid = mid + Math.imul(ah0, bl7) | 0;
	    hi = hi + Math.imul(ah0, bh7) | 0;
	    var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
	    w7 &= 0x3ffffff;
	    /* k = 8 */
	    lo = Math.imul(al8, bl0);
	    mid = Math.imul(al8, bh0);
	    mid = mid + Math.imul(ah8, bl0) | 0;
	    hi = Math.imul(ah8, bh0);
	    lo = lo + Math.imul(al7, bl1) | 0;
	    mid = mid + Math.imul(al7, bh1) | 0;
	    mid = mid + Math.imul(ah7, bl1) | 0;
	    hi = hi + Math.imul(ah7, bh1) | 0;
	    lo = lo + Math.imul(al6, bl2) | 0;
	    mid = mid + Math.imul(al6, bh2) | 0;
	    mid = mid + Math.imul(ah6, bl2) | 0;
	    hi = hi + Math.imul(ah6, bh2) | 0;
	    lo = lo + Math.imul(al5, bl3) | 0;
	    mid = mid + Math.imul(al5, bh3) | 0;
	    mid = mid + Math.imul(ah5, bl3) | 0;
	    hi = hi + Math.imul(ah5, bh3) | 0;
	    lo = lo + Math.imul(al4, bl4) | 0;
	    mid = mid + Math.imul(al4, bh4) | 0;
	    mid = mid + Math.imul(ah4, bl4) | 0;
	    hi = hi + Math.imul(ah4, bh4) | 0;
	    lo = lo + Math.imul(al3, bl5) | 0;
	    mid = mid + Math.imul(al3, bh5) | 0;
	    mid = mid + Math.imul(ah3, bl5) | 0;
	    hi = hi + Math.imul(ah3, bh5) | 0;
	    lo = lo + Math.imul(al2, bl6) | 0;
	    mid = mid + Math.imul(al2, bh6) | 0;
	    mid = mid + Math.imul(ah2, bl6) | 0;
	    hi = hi + Math.imul(ah2, bh6) | 0;
	    lo = lo + Math.imul(al1, bl7) | 0;
	    mid = mid + Math.imul(al1, bh7) | 0;
	    mid = mid + Math.imul(ah1, bl7) | 0;
	    hi = hi + Math.imul(ah1, bh7) | 0;
	    lo = lo + Math.imul(al0, bl8) | 0;
	    mid = mid + Math.imul(al0, bh8) | 0;
	    mid = mid + Math.imul(ah0, bl8) | 0;
	    hi = hi + Math.imul(ah0, bh8) | 0;
	    var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
	    w8 &= 0x3ffffff;
	    /* k = 9 */
	    lo = Math.imul(al9, bl0);
	    mid = Math.imul(al9, bh0);
	    mid = mid + Math.imul(ah9, bl0) | 0;
	    hi = Math.imul(ah9, bh0);
	    lo = lo + Math.imul(al8, bl1) | 0;
	    mid = mid + Math.imul(al8, bh1) | 0;
	    mid = mid + Math.imul(ah8, bl1) | 0;
	    hi = hi + Math.imul(ah8, bh1) | 0;
	    lo = lo + Math.imul(al7, bl2) | 0;
	    mid = mid + Math.imul(al7, bh2) | 0;
	    mid = mid + Math.imul(ah7, bl2) | 0;
	    hi = hi + Math.imul(ah7, bh2) | 0;
	    lo = lo + Math.imul(al6, bl3) | 0;
	    mid = mid + Math.imul(al6, bh3) | 0;
	    mid = mid + Math.imul(ah6, bl3) | 0;
	    hi = hi + Math.imul(ah6, bh3) | 0;
	    lo = lo + Math.imul(al5, bl4) | 0;
	    mid = mid + Math.imul(al5, bh4) | 0;
	    mid = mid + Math.imul(ah5, bl4) | 0;
	    hi = hi + Math.imul(ah5, bh4) | 0;
	    lo = lo + Math.imul(al4, bl5) | 0;
	    mid = mid + Math.imul(al4, bh5) | 0;
	    mid = mid + Math.imul(ah4, bl5) | 0;
	    hi = hi + Math.imul(ah4, bh5) | 0;
	    lo = lo + Math.imul(al3, bl6) | 0;
	    mid = mid + Math.imul(al3, bh6) | 0;
	    mid = mid + Math.imul(ah3, bl6) | 0;
	    hi = hi + Math.imul(ah3, bh6) | 0;
	    lo = lo + Math.imul(al2, bl7) | 0;
	    mid = mid + Math.imul(al2, bh7) | 0;
	    mid = mid + Math.imul(ah2, bl7) | 0;
	    hi = hi + Math.imul(ah2, bh7) | 0;
	    lo = lo + Math.imul(al1, bl8) | 0;
	    mid = mid + Math.imul(al1, bh8) | 0;
	    mid = mid + Math.imul(ah1, bl8) | 0;
	    hi = hi + Math.imul(ah1, bh8) | 0;
	    lo = lo + Math.imul(al0, bl9) | 0;
	    mid = mid + Math.imul(al0, bh9) | 0;
	    mid = mid + Math.imul(ah0, bl9) | 0;
	    hi = hi + Math.imul(ah0, bh9) | 0;
	    var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
	    w9 &= 0x3ffffff;
	    /* k = 10 */
	    lo = Math.imul(al9, bl1);
	    mid = Math.imul(al9, bh1);
	    mid = mid + Math.imul(ah9, bl1) | 0;
	    hi = Math.imul(ah9, bh1);
	    lo = lo + Math.imul(al8, bl2) | 0;
	    mid = mid + Math.imul(al8, bh2) | 0;
	    mid = mid + Math.imul(ah8, bl2) | 0;
	    hi = hi + Math.imul(ah8, bh2) | 0;
	    lo = lo + Math.imul(al7, bl3) | 0;
	    mid = mid + Math.imul(al7, bh3) | 0;
	    mid = mid + Math.imul(ah7, bl3) | 0;
	    hi = hi + Math.imul(ah7, bh3) | 0;
	    lo = lo + Math.imul(al6, bl4) | 0;
	    mid = mid + Math.imul(al6, bh4) | 0;
	    mid = mid + Math.imul(ah6, bl4) | 0;
	    hi = hi + Math.imul(ah6, bh4) | 0;
	    lo = lo + Math.imul(al5, bl5) | 0;
	    mid = mid + Math.imul(al5, bh5) | 0;
	    mid = mid + Math.imul(ah5, bl5) | 0;
	    hi = hi + Math.imul(ah5, bh5) | 0;
	    lo = lo + Math.imul(al4, bl6) | 0;
	    mid = mid + Math.imul(al4, bh6) | 0;
	    mid = mid + Math.imul(ah4, bl6) | 0;
	    hi = hi + Math.imul(ah4, bh6) | 0;
	    lo = lo + Math.imul(al3, bl7) | 0;
	    mid = mid + Math.imul(al3, bh7) | 0;
	    mid = mid + Math.imul(ah3, bl7) | 0;
	    hi = hi + Math.imul(ah3, bh7) | 0;
	    lo = lo + Math.imul(al2, bl8) | 0;
	    mid = mid + Math.imul(al2, bh8) | 0;
	    mid = mid + Math.imul(ah2, bl8) | 0;
	    hi = hi + Math.imul(ah2, bh8) | 0;
	    lo = lo + Math.imul(al1, bl9) | 0;
	    mid = mid + Math.imul(al1, bh9) | 0;
	    mid = mid + Math.imul(ah1, bl9) | 0;
	    hi = hi + Math.imul(ah1, bh9) | 0;
	    var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
	    w10 &= 0x3ffffff;
	    /* k = 11 */
	    lo = Math.imul(al9, bl2);
	    mid = Math.imul(al9, bh2);
	    mid = mid + Math.imul(ah9, bl2) | 0;
	    hi = Math.imul(ah9, bh2);
	    lo = lo + Math.imul(al8, bl3) | 0;
	    mid = mid + Math.imul(al8, bh3) | 0;
	    mid = mid + Math.imul(ah8, bl3) | 0;
	    hi = hi + Math.imul(ah8, bh3) | 0;
	    lo = lo + Math.imul(al7, bl4) | 0;
	    mid = mid + Math.imul(al7, bh4) | 0;
	    mid = mid + Math.imul(ah7, bl4) | 0;
	    hi = hi + Math.imul(ah7, bh4) | 0;
	    lo = lo + Math.imul(al6, bl5) | 0;
	    mid = mid + Math.imul(al6, bh5) | 0;
	    mid = mid + Math.imul(ah6, bl5) | 0;
	    hi = hi + Math.imul(ah6, bh5) | 0;
	    lo = lo + Math.imul(al5, bl6) | 0;
	    mid = mid + Math.imul(al5, bh6) | 0;
	    mid = mid + Math.imul(ah5, bl6) | 0;
	    hi = hi + Math.imul(ah5, bh6) | 0;
	    lo = lo + Math.imul(al4, bl7) | 0;
	    mid = mid + Math.imul(al4, bh7) | 0;
	    mid = mid + Math.imul(ah4, bl7) | 0;
	    hi = hi + Math.imul(ah4, bh7) | 0;
	    lo = lo + Math.imul(al3, bl8) | 0;
	    mid = mid + Math.imul(al3, bh8) | 0;
	    mid = mid + Math.imul(ah3, bl8) | 0;
	    hi = hi + Math.imul(ah3, bh8) | 0;
	    lo = lo + Math.imul(al2, bl9) | 0;
	    mid = mid + Math.imul(al2, bh9) | 0;
	    mid = mid + Math.imul(ah2, bl9) | 0;
	    hi = hi + Math.imul(ah2, bh9) | 0;
	    var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
	    w11 &= 0x3ffffff;
	    /* k = 12 */
	    lo = Math.imul(al9, bl3);
	    mid = Math.imul(al9, bh3);
	    mid = mid + Math.imul(ah9, bl3) | 0;
	    hi = Math.imul(ah9, bh3);
	    lo = lo + Math.imul(al8, bl4) | 0;
	    mid = mid + Math.imul(al8, bh4) | 0;
	    mid = mid + Math.imul(ah8, bl4) | 0;
	    hi = hi + Math.imul(ah8, bh4) | 0;
	    lo = lo + Math.imul(al7, bl5) | 0;
	    mid = mid + Math.imul(al7, bh5) | 0;
	    mid = mid + Math.imul(ah7, bl5) | 0;
	    hi = hi + Math.imul(ah7, bh5) | 0;
	    lo = lo + Math.imul(al6, bl6) | 0;
	    mid = mid + Math.imul(al6, bh6) | 0;
	    mid = mid + Math.imul(ah6, bl6) | 0;
	    hi = hi + Math.imul(ah6, bh6) | 0;
	    lo = lo + Math.imul(al5, bl7) | 0;
	    mid = mid + Math.imul(al5, bh7) | 0;
	    mid = mid + Math.imul(ah5, bl7) | 0;
	    hi = hi + Math.imul(ah5, bh7) | 0;
	    lo = lo + Math.imul(al4, bl8) | 0;
	    mid = mid + Math.imul(al4, bh8) | 0;
	    mid = mid + Math.imul(ah4, bl8) | 0;
	    hi = hi + Math.imul(ah4, bh8) | 0;
	    lo = lo + Math.imul(al3, bl9) | 0;
	    mid = mid + Math.imul(al3, bh9) | 0;
	    mid = mid + Math.imul(ah3, bl9) | 0;
	    hi = hi + Math.imul(ah3, bh9) | 0;
	    var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
	    w12 &= 0x3ffffff;
	    /* k = 13 */
	    lo = Math.imul(al9, bl4);
	    mid = Math.imul(al9, bh4);
	    mid = mid + Math.imul(ah9, bl4) | 0;
	    hi = Math.imul(ah9, bh4);
	    lo = lo + Math.imul(al8, bl5) | 0;
	    mid = mid + Math.imul(al8, bh5) | 0;
	    mid = mid + Math.imul(ah8, bl5) | 0;
	    hi = hi + Math.imul(ah8, bh5) | 0;
	    lo = lo + Math.imul(al7, bl6) | 0;
	    mid = mid + Math.imul(al7, bh6) | 0;
	    mid = mid + Math.imul(ah7, bl6) | 0;
	    hi = hi + Math.imul(ah7, bh6) | 0;
	    lo = lo + Math.imul(al6, bl7) | 0;
	    mid = mid + Math.imul(al6, bh7) | 0;
	    mid = mid + Math.imul(ah6, bl7) | 0;
	    hi = hi + Math.imul(ah6, bh7) | 0;
	    lo = lo + Math.imul(al5, bl8) | 0;
	    mid = mid + Math.imul(al5, bh8) | 0;
	    mid = mid + Math.imul(ah5, bl8) | 0;
	    hi = hi + Math.imul(ah5, bh8) | 0;
	    lo = lo + Math.imul(al4, bl9) | 0;
	    mid = mid + Math.imul(al4, bh9) | 0;
	    mid = mid + Math.imul(ah4, bl9) | 0;
	    hi = hi + Math.imul(ah4, bh9) | 0;
	    var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
	    w13 &= 0x3ffffff;
	    /* k = 14 */
	    lo = Math.imul(al9, bl5);
	    mid = Math.imul(al9, bh5);
	    mid = mid + Math.imul(ah9, bl5) | 0;
	    hi = Math.imul(ah9, bh5);
	    lo = lo + Math.imul(al8, bl6) | 0;
	    mid = mid + Math.imul(al8, bh6) | 0;
	    mid = mid + Math.imul(ah8, bl6) | 0;
	    hi = hi + Math.imul(ah8, bh6) | 0;
	    lo = lo + Math.imul(al7, bl7) | 0;
	    mid = mid + Math.imul(al7, bh7) | 0;
	    mid = mid + Math.imul(ah7, bl7) | 0;
	    hi = hi + Math.imul(ah7, bh7) | 0;
	    lo = lo + Math.imul(al6, bl8) | 0;
	    mid = mid + Math.imul(al6, bh8) | 0;
	    mid = mid + Math.imul(ah6, bl8) | 0;
	    hi = hi + Math.imul(ah6, bh8) | 0;
	    lo = lo + Math.imul(al5, bl9) | 0;
	    mid = mid + Math.imul(al5, bh9) | 0;
	    mid = mid + Math.imul(ah5, bl9) | 0;
	    hi = hi + Math.imul(ah5, bh9) | 0;
	    var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
	    w14 &= 0x3ffffff;
	    /* k = 15 */
	    lo = Math.imul(al9, bl6);
	    mid = Math.imul(al9, bh6);
	    mid = mid + Math.imul(ah9, bl6) | 0;
	    hi = Math.imul(ah9, bh6);
	    lo = lo + Math.imul(al8, bl7) | 0;
	    mid = mid + Math.imul(al8, bh7) | 0;
	    mid = mid + Math.imul(ah8, bl7) | 0;
	    hi = hi + Math.imul(ah8, bh7) | 0;
	    lo = lo + Math.imul(al7, bl8) | 0;
	    mid = mid + Math.imul(al7, bh8) | 0;
	    mid = mid + Math.imul(ah7, bl8) | 0;
	    hi = hi + Math.imul(ah7, bh8) | 0;
	    lo = lo + Math.imul(al6, bl9) | 0;
	    mid = mid + Math.imul(al6, bh9) | 0;
	    mid = mid + Math.imul(ah6, bl9) | 0;
	    hi = hi + Math.imul(ah6, bh9) | 0;
	    var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
	    w15 &= 0x3ffffff;
	    /* k = 16 */
	    lo = Math.imul(al9, bl7);
	    mid = Math.imul(al9, bh7);
	    mid = mid + Math.imul(ah9, bl7) | 0;
	    hi = Math.imul(ah9, bh7);
	    lo = lo + Math.imul(al8, bl8) | 0;
	    mid = mid + Math.imul(al8, bh8) | 0;
	    mid = mid + Math.imul(ah8, bl8) | 0;
	    hi = hi + Math.imul(ah8, bh8) | 0;
	    lo = lo + Math.imul(al7, bl9) | 0;
	    mid = mid + Math.imul(al7, bh9) | 0;
	    mid = mid + Math.imul(ah7, bl9) | 0;
	    hi = hi + Math.imul(ah7, bh9) | 0;
	    var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
	    w16 &= 0x3ffffff;
	    /* k = 17 */
	    lo = Math.imul(al9, bl8);
	    mid = Math.imul(al9, bh8);
	    mid = mid + Math.imul(ah9, bl8) | 0;
	    hi = Math.imul(ah9, bh8);
	    lo = lo + Math.imul(al8, bl9) | 0;
	    mid = mid + Math.imul(al8, bh9) | 0;
	    mid = mid + Math.imul(ah8, bl9) | 0;
	    hi = hi + Math.imul(ah8, bh9) | 0;
	    var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
	    w17 &= 0x3ffffff;
	    /* k = 18 */
	    lo = Math.imul(al9, bl9);
	    mid = Math.imul(al9, bh9);
	    mid = mid + Math.imul(ah9, bl9) | 0;
	    hi = Math.imul(ah9, bh9);
	    var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
	    c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
	    w18 &= 0x3ffffff;
	    o[0] = w0;
	    o[1] = w1;
	    o[2] = w2;
	    o[3] = w3;
	    o[4] = w4;
	    o[5] = w5;
	    o[6] = w6;
	    o[7] = w7;
	    o[8] = w8;
	    o[9] = w9;
	    o[10] = w10;
	    o[11] = w11;
	    o[12] = w12;
	    o[13] = w13;
	    o[14] = w14;
	    o[15] = w15;
	    o[16] = w16;
	    o[17] = w17;
	    o[18] = w18;
	    if (c !== 0) {
	      o[19] = c;
	      out.length++;
	    }
	    return out;
	  };

	  // Polyfill comb
	  if (!Math.imul) {
	    comb10MulTo = smallMulTo;
	  }
	  function bigMulTo(self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    out.length = self.length + num.length;
	    var carry = 0;
	    var hncarry = 0;
	    for (var k = 0; k < out.length - 1; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = hncarry;
	      hncarry = 0;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = k - j;
	        var a = self.words[i] | 0;
	        var b = num.words[j] | 0;
	        var r = a * b;
	        var lo = r & 0x3ffffff;
	        ncarry = ncarry + (r / 0x4000000 | 0) | 0;
	        lo = lo + rword | 0;
	        rword = lo & 0x3ffffff;
	        ncarry = ncarry + (lo >>> 26) | 0;
	        hncarry += ncarry >>> 26;
	        ncarry &= 0x3ffffff;
	      }
	      out.words[k] = rword;
	      carry = ncarry;
	      ncarry = hncarry;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry;
	    } else {
	      out.length--;
	    }
	    return out._strip();
	  }
	  function jumboMulTo(self, num, out) {
	    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
	    // var fftm = new FFTM();
	    // return fftm.mulp(self, num, out);
	    return bigMulTo(self, num, out);
	  }
	  BN.prototype.mulTo = function mulTo(num, out) {
	    var res;
	    var len = this.length + num.length;
	    if (this.length === 10 && num.length === 10) {
	      res = comb10MulTo(this, num, out);
	    } else if (len < 63) {
	      res = smallMulTo(this, num, out);
	    } else if (len < 1024) {
	      res = bigMulTo(this, num, out);
	    } else {
	      res = jumboMulTo(this, num, out);
	    }
	    return res;
	  };

	  // Multiply `this` by `num`
	  BN.prototype.mul = function mul(num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return this.mulTo(num, out);
	  };

	  // Multiply employing FFT
	  BN.prototype.mulf = function mulf(num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return jumboMulTo(this, num, out);
	  };

	  // In-place Multiplication
	  BN.prototype.imul = function imul(num) {
	    return this.clone().mulTo(num, this);
	  };
	  BN.prototype.imuln = function imuln(num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);

	    // Carry
	    var carry = 0;
	    for (var i = 0; i < this.length; i++) {
	      var w = (this.words[i] | 0) * num;
	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
	      carry >>= 26;
	      carry += w / 0x4000000 | 0;
	      // NOTE: lo is 27bit maximum
	      carry += lo >>> 26;
	      this.words[i] = lo & 0x3ffffff;
	    }
	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }
	    return isNegNum ? this.ineg() : this;
	  };
	  BN.prototype.muln = function muln(num) {
	    return this.clone().imuln(num);
	  };

	  // `this` * `this`
	  BN.prototype.sqr = function sqr() {
	    return this.mul(this);
	  };

	  // `this` * `this` in-place
	  BN.prototype.isqr = function isqr() {
	    return this.imul(this.clone());
	  };

	  // Math.pow(`this`, `num`)
	  BN.prototype.pow = function pow(num) {
	    var w = toBitArray(num);
	    if (w.length === 0) return new BN(1);

	    // Skip leading zeroes
	    var res = this;
	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
	      if (w[i] !== 0) break;
	    }
	    if (++i < w.length) {
	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
	        if (w[i] === 0) continue;
	        res = res.mul(q);
	      }
	    }
	    return res;
	  };

	  // Shift-left in-place
	  BN.prototype.iushln = function iushln(bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;
	    var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
	    var i;
	    if (r !== 0) {
	      var carry = 0;
	      for (i = 0; i < this.length; i++) {
	        var newCarry = this.words[i] & carryMask;
	        var c = (this.words[i] | 0) - newCarry << r;
	        this.words[i] = c | carry;
	        carry = newCarry >>> 26 - r;
	      }
	      if (carry) {
	        this.words[i] = carry;
	        this.length++;
	      }
	    }
	    if (s !== 0) {
	      for (i = this.length - 1; i >= 0; i--) {
	        this.words[i + s] = this.words[i];
	      }
	      for (i = 0; i < s; i++) {
	        this.words[i] = 0;
	      }
	      this.length += s;
	    }
	    return this._strip();
	  };
	  BN.prototype.ishln = function ishln(bits) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushln(bits);
	  };

	  // Shift-right in-place
	  // NOTE: `hint` is a lowest bit before trailing zeroes
	  // NOTE: if `extended` is present - it will be filled with destroyed bits
	  BN.prototype.iushrn = function iushrn(bits, hint, extended) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var h;
	    if (hint) {
	      h = (hint - hint % 26) / 26;
	    } else {
	      h = 0;
	    }
	    var r = bits % 26;
	    var s = Math.min((bits - r) / 26, this.length);
	    var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
	    var maskedWords = extended;
	    h -= s;
	    h = Math.max(0, h);

	    // Extended mode, copy masked part
	    if (maskedWords) {
	      for (var i = 0; i < s; i++) {
	        maskedWords.words[i] = this.words[i];
	      }
	      maskedWords.length = s;
	    }
	    if (s === 0) ; else if (this.length > s) {
	      this.length -= s;
	      for (i = 0; i < this.length; i++) {
	        this.words[i] = this.words[i + s];
	      }
	    } else {
	      this.words[0] = 0;
	      this.length = 1;
	    }
	    var carry = 0;
	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
	      var word = this.words[i] | 0;
	      this.words[i] = carry << 26 - r | word >>> r;
	      carry = word & mask;
	    }

	    // Push carried bits as a mask
	    if (maskedWords && carry !== 0) {
	      maskedWords.words[maskedWords.length++] = carry;
	    }
	    if (this.length === 0) {
	      this.words[0] = 0;
	      this.length = 1;
	    }
	    return this._strip();
	  };
	  BN.prototype.ishrn = function ishrn(bits, hint, extended) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushrn(bits, hint, extended);
	  };

	  // Shift-left
	  BN.prototype.shln = function shln(bits) {
	    return this.clone().ishln(bits);
	  };
	  BN.prototype.ushln = function ushln(bits) {
	    return this.clone().iushln(bits);
	  };

	  // Shift-right
	  BN.prototype.shrn = function shrn(bits) {
	    return this.clone().ishrn(bits);
	  };
	  BN.prototype.ushrn = function ushrn(bits) {
	    return this.clone().iushrn(bits);
	  };

	  // Test if n bit is set
	  BN.prototype.testn = function testn(bit) {
	    assert(typeof bit === 'number' && bit >= 0);
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) return false;

	    // Check bit and return
	    var w = this.words[s];
	    return !!(w & q);
	  };

	  // Return only lowers bits of number (in-place)
	  BN.prototype.imaskn = function imaskn(bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;
	    assert(this.negative === 0, 'imaskn works only with positive numbers');
	    if (this.length <= s) {
	      return this;
	    }
	    if (r !== 0) {
	      s++;
	    }
	    this.length = Math.min(s, this.length);
	    if (r !== 0) {
	      var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
	      this.words[this.length - 1] &= mask;
	    }
	    return this._strip();
	  };

	  // Return only lowers bits of number
	  BN.prototype.maskn = function maskn(bits) {
	    return this.clone().imaskn(bits);
	  };

	  // Add plain number `num` to `this`
	  BN.prototype.iaddn = function iaddn(num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.isubn(-num);

	    // Possible sign change
	    if (this.negative !== 0) {
	      if (this.length === 1 && (this.words[0] | 0) <= num) {
	        this.words[0] = num - (this.words[0] | 0);
	        this.negative = 0;
	        return this;
	      }
	      this.negative = 0;
	      this.isubn(num);
	      this.negative = 1;
	      return this;
	    }

	    // Add without checks
	    return this._iaddn(num);
	  };
	  BN.prototype._iaddn = function _iaddn(num) {
	    this.words[0] += num;

	    // Carry
	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
	      this.words[i] -= 0x4000000;
	      if (i === this.length - 1) {
	        this.words[i + 1] = 1;
	      } else {
	        this.words[i + 1]++;
	      }
	    }
	    this.length = Math.max(this.length, i + 1);
	    return this;
	  };

	  // Subtract plain number `num` from `this`
	  BN.prototype.isubn = function isubn(num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.iaddn(-num);
	    if (this.negative !== 0) {
	      this.negative = 0;
	      this.iaddn(num);
	      this.negative = 1;
	      return this;
	    }
	    this.words[0] -= num;
	    if (this.length === 1 && this.words[0] < 0) {
	      this.words[0] = -this.words[0];
	      this.negative = 1;
	    } else {
	      // Carry
	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
	        this.words[i] += 0x4000000;
	        this.words[i + 1] -= 1;
	      }
	    }
	    return this._strip();
	  };
	  BN.prototype.addn = function addn(num) {
	    return this.clone().iaddn(num);
	  };
	  BN.prototype.subn = function subn(num) {
	    return this.clone().isubn(num);
	  };
	  BN.prototype.iabs = function iabs() {
	    this.negative = 0;
	    return this;
	  };
	  BN.prototype.abs = function abs() {
	    return this.clone().iabs();
	  };
	  BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
	    var len = num.length + shift;
	    var i;
	    this._expand(len);
	    var w;
	    var carry = 0;
	    for (i = 0; i < num.length; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      var right = (num.words[i] | 0) * mul;
	      w -= right & 0x3ffffff;
	      carry = (w >> 26) - (right / 0x4000000 | 0);
	      this.words[i + shift] = w & 0x3ffffff;
	    }
	    for (; i < this.length - shift; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      carry = w >> 26;
	      this.words[i + shift] = w & 0x3ffffff;
	    }
	    if (carry === 0) return this._strip();

	    // Subtraction overflow
	    assert(carry === -1);
	    carry = 0;
	    for (i = 0; i < this.length; i++) {
	      w = -(this.words[i] | 0) + carry;
	      carry = w >> 26;
	      this.words[i] = w & 0x3ffffff;
	    }
	    this.negative = 1;
	    return this._strip();
	  };
	  BN.prototype._wordDiv = function _wordDiv(num, mode) {
	    var shift = this.length - num.length;
	    var a = this.clone();
	    var b = num;

	    // Normalize
	    var bhi = b.words[b.length - 1] | 0;
	    var bhiBits = this._countBits(bhi);
	    shift = 26 - bhiBits;
	    if (shift !== 0) {
	      b = b.ushln(shift);
	      a.iushln(shift);
	      bhi = b.words[b.length - 1] | 0;
	    }

	    // Initialize quotient
	    var m = a.length - b.length;
	    var q;
	    if (mode !== 'mod') {
	      q = new BN(null);
	      q.length = m + 1;
	      q.words = new Array(q.length);
	      for (var i = 0; i < q.length; i++) {
	        q.words[i] = 0;
	      }
	    }
	    var diff = a.clone()._ishlnsubmul(b, 1, m);
	    if (diff.negative === 0) {
	      a = diff;
	      if (q) {
	        q.words[m] = 1;
	      }
	    }
	    for (var j = m - 1; j >= 0; j--) {
	      var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);

	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
	      // (0x7ffffff)
	      qj = Math.min(qj / bhi | 0, 0x3ffffff);
	      a._ishlnsubmul(b, qj, j);
	      while (a.negative !== 0) {
	        qj--;
	        a.negative = 0;
	        a._ishlnsubmul(b, 1, j);
	        if (!a.isZero()) {
	          a.negative ^= 1;
	        }
	      }
	      if (q) {
	        q.words[j] = qj;
	      }
	    }
	    if (q) {
	      q._strip();
	    }
	    a._strip();

	    // Denormalize
	    if (mode !== 'div' && shift !== 0) {
	      a.iushrn(shift);
	    }
	    return {
	      div: q || null,
	      mod: a
	    };
	  };

	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
	  //       to `div` to request div only, or be absent to
	  //       request both div & mod
	  //       2) `positive` is true if unsigned mod is requested
	  BN.prototype.divmod = function divmod(num, mode, positive) {
	    assert(!num.isZero());
	    if (this.isZero()) {
	      return {
	        div: new BN(0),
	        mod: new BN(0)
	      };
	    }
	    var div, mod, res;
	    if (this.negative !== 0 && num.negative === 0) {
	      res = this.neg().divmod(num, mode);
	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }
	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.iadd(num);
	        }
	      }
	      return {
	        div: div,
	        mod: mod
	      };
	    }
	    if (this.negative === 0 && num.negative !== 0) {
	      res = this.divmod(num.neg(), mode);
	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }
	      return {
	        div: div,
	        mod: res.mod
	      };
	    }
	    if ((this.negative & num.negative) !== 0) {
	      res = this.neg().divmod(num.neg(), mode);
	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.isub(num);
	        }
	      }
	      return {
	        div: res.div,
	        mod: mod
	      };
	    }

	    // Both numbers are positive at this point

	    // Strip both numbers to approximate shift value
	    if (num.length > this.length || this.cmp(num) < 0) {
	      return {
	        div: new BN(0),
	        mod: this
	      };
	    }

	    // Very short reduction
	    if (num.length === 1) {
	      if (mode === 'div') {
	        return {
	          div: this.divn(num.words[0]),
	          mod: null
	        };
	      }
	      if (mode === 'mod') {
	        return {
	          div: null,
	          mod: new BN(this.modrn(num.words[0]))
	        };
	      }
	      return {
	        div: this.divn(num.words[0]),
	        mod: new BN(this.modrn(num.words[0]))
	      };
	    }
	    return this._wordDiv(num, mode);
	  };

	  // Find `this` / `num`
	  BN.prototype.div = function div(num) {
	    return this.divmod(num, 'div', false).div;
	  };

	  // Find `this` % `num`
	  BN.prototype.mod = function mod(num) {
	    return this.divmod(num, 'mod', false).mod;
	  };
	  BN.prototype.umod = function umod(num) {
	    return this.divmod(num, 'mod', true).mod;
	  };

	  // Find Round(`this` / `num`)
	  BN.prototype.divRound = function divRound(num) {
	    var dm = this.divmod(num);

	    // Fast case - exact division
	    if (dm.mod.isZero()) return dm.div;
	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
	    var half = num.ushrn(1);
	    var r2 = num.andln(1);
	    var cmp = mod.cmp(half);

	    // Round down
	    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

	    // Round up
	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
	  };
	  BN.prototype.modrn = function modrn(num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;
	    assert(num <= 0x3ffffff);
	    var p = (1 << 26) % num;
	    var acc = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      acc = (p * acc + (this.words[i] | 0)) % num;
	    }
	    return isNegNum ? -acc : acc;
	  };

	  // WARNING: DEPRECATED
	  BN.prototype.modn = function modn(num) {
	    return this.modrn(num);
	  };

	  // In-place division by number
	  BN.prototype.idivn = function idivn(num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;
	    assert(num <= 0x3ffffff);
	    var carry = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var w = (this.words[i] | 0) + carry * 0x4000000;
	      this.words[i] = w / num | 0;
	      carry = w % num;
	    }
	    this._strip();
	    return isNegNum ? this.ineg() : this;
	  };
	  BN.prototype.divn = function divn(num) {
	    return this.clone().idivn(num);
	  };
	  BN.prototype.egcd = function egcd(p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());
	    var x = this;
	    var y = p.clone();
	    if (x.negative !== 0) {
	      x = x.umod(p);
	    } else {
	      x = x.clone();
	    }

	    // A * x + B * y = x
	    var A = new BN(1);
	    var B = new BN(0);

	    // C * x + D * y = y
	    var C = new BN(0);
	    var D = new BN(1);
	    var g = 0;
	    while (x.isEven() && y.isEven()) {
	      x.iushrn(1);
	      y.iushrn(1);
	      ++g;
	    }
	    var yp = y.clone();
	    var xp = x.clone();
	    while (!x.isZero()) {
	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
	      }
	      if (i > 0) {
	        x.iushrn(i);
	        while (i-- > 0) {
	          if (A.isOdd() || B.isOdd()) {
	            A.iadd(yp);
	            B.isub(xp);
	          }
	          A.iushrn(1);
	          B.iushrn(1);
	        }
	      }
	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
	      }
	      if (j > 0) {
	        y.iushrn(j);
	        while (j-- > 0) {
	          if (C.isOdd() || D.isOdd()) {
	            C.iadd(yp);
	            D.isub(xp);
	          }
	          C.iushrn(1);
	          D.iushrn(1);
	        }
	      }
	      if (x.cmp(y) >= 0) {
	        x.isub(y);
	        A.isub(C);
	        B.isub(D);
	      } else {
	        y.isub(x);
	        C.isub(A);
	        D.isub(B);
	      }
	    }
	    return {
	      a: C,
	      b: D,
	      gcd: y.iushln(g)
	    };
	  };

	  // This is reduced incarnation of the binary EEA
	  // above, designated to invert members of the
	  // _prime_ fields F(p) at a maximal speed
	  BN.prototype._invmp = function _invmp(p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());
	    var a = this;
	    var b = p.clone();
	    if (a.negative !== 0) {
	      a = a.umod(p);
	    } else {
	      a = a.clone();
	    }
	    var x1 = new BN(1);
	    var x2 = new BN(0);
	    var delta = b.clone();
	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
	      }
	      if (i > 0) {
	        a.iushrn(i);
	        while (i-- > 0) {
	          if (x1.isOdd()) {
	            x1.iadd(delta);
	          }
	          x1.iushrn(1);
	        }
	      }
	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
	      }
	      if (j > 0) {
	        b.iushrn(j);
	        while (j-- > 0) {
	          if (x2.isOdd()) {
	            x2.iadd(delta);
	          }
	          x2.iushrn(1);
	        }
	      }
	      if (a.cmp(b) >= 0) {
	        a.isub(b);
	        x1.isub(x2);
	      } else {
	        b.isub(a);
	        x2.isub(x1);
	      }
	    }
	    var res;
	    if (a.cmpn(1) === 0) {
	      res = x1;
	    } else {
	      res = x2;
	    }
	    if (res.cmpn(0) < 0) {
	      res.iadd(p);
	    }
	    return res;
	  };
	  BN.prototype.gcd = function gcd(num) {
	    if (this.isZero()) return num.abs();
	    if (num.isZero()) return this.abs();
	    var a = this.clone();
	    var b = num.clone();
	    a.negative = 0;
	    b.negative = 0;

	    // Remove common factor of two
	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
	      a.iushrn(1);
	      b.iushrn(1);
	    }
	    do {
	      while (a.isEven()) {
	        a.iushrn(1);
	      }
	      while (b.isEven()) {
	        b.iushrn(1);
	      }
	      var r = a.cmp(b);
	      if (r < 0) {
	        // Swap `a` and `b` to make `a` always bigger than `b`
	        var t = a;
	        a = b;
	        b = t;
	      } else if (r === 0 || b.cmpn(1) === 0) {
	        break;
	      }
	      a.isub(b);
	    } while (true);
	    return b.iushln(shift);
	  };

	  // Invert number in the field F(num)
	  BN.prototype.invm = function invm(num) {
	    return this.egcd(num).a.umod(num);
	  };
	  BN.prototype.isEven = function isEven() {
	    return (this.words[0] & 1) === 0;
	  };
	  BN.prototype.isOdd = function isOdd() {
	    return (this.words[0] & 1) === 1;
	  };

	  // And first word and num
	  BN.prototype.andln = function andln(num) {
	    return this.words[0] & num;
	  };

	  // Increment at the bit position in-line
	  BN.prototype.bincn = function bincn(bit) {
	    assert(typeof bit === 'number');
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) {
	      this._expand(s + 1);
	      this.words[s] |= q;
	      return this;
	    }

	    // Add bit and propagate, if needed
	    var carry = q;
	    for (var i = s; carry !== 0 && i < this.length; i++) {
	      var w = this.words[i] | 0;
	      w += carry;
	      carry = w >>> 26;
	      w &= 0x3ffffff;
	      this.words[i] = w;
	    }
	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }
	    return this;
	  };
	  BN.prototype.isZero = function isZero() {
	    return this.length === 1 && this.words[0] === 0;
	  };
	  BN.prototype.cmpn = function cmpn(num) {
	    var negative = num < 0;
	    if (this.negative !== 0 && !negative) return -1;
	    if (this.negative === 0 && negative) return 1;
	    this._strip();
	    var res;
	    if (this.length > 1) {
	      res = 1;
	    } else {
	      if (negative) {
	        num = -num;
	      }
	      assert(num <= 0x3ffffff, 'Number is too big');
	      var w = this.words[0] | 0;
	      res = w === num ? 0 : w < num ? -1 : 1;
	    }
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Compare two numbers and return:
	  // 1 - if `this` > `num`
	  // 0 - if `this` == `num`
	  // -1 - if `this` < `num`
	  BN.prototype.cmp = function cmp(num) {
	    if (this.negative !== 0 && num.negative === 0) return -1;
	    if (this.negative === 0 && num.negative !== 0) return 1;
	    var res = this.ucmp(num);
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Unsigned comparison
	  BN.prototype.ucmp = function ucmp(num) {
	    // At this point both numbers have the same sign
	    if (this.length > num.length) return 1;
	    if (this.length < num.length) return -1;
	    var res = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var a = this.words[i] | 0;
	      var b = num.words[i] | 0;
	      if (a === b) continue;
	      if (a < b) {
	        res = -1;
	      } else if (a > b) {
	        res = 1;
	      }
	      break;
	    }
	    return res;
	  };
	  BN.prototype.gtn = function gtn(num) {
	    return this.cmpn(num) === 1;
	  };
	  BN.prototype.gt = function gt(num) {
	    return this.cmp(num) === 1;
	  };
	  BN.prototype.gten = function gten(num) {
	    return this.cmpn(num) >= 0;
	  };
	  BN.prototype.gte = function gte(num) {
	    return this.cmp(num) >= 0;
	  };
	  BN.prototype.ltn = function ltn(num) {
	    return this.cmpn(num) === -1;
	  };
	  BN.prototype.lt = function lt(num) {
	    return this.cmp(num) === -1;
	  };
	  BN.prototype.lten = function lten(num) {
	    return this.cmpn(num) <= 0;
	  };
	  BN.prototype.lte = function lte(num) {
	    return this.cmp(num) <= 0;
	  };
	  BN.prototype.eqn = function eqn(num) {
	    return this.cmpn(num) === 0;
	  };
	  BN.prototype.eq = function eq(num) {
	    return this.cmp(num) === 0;
	  };

	  //
	  // A reduce context, could be using montgomery or something better, depending
	  // on the `m` itself.
	  //
	  BN.red = function red(num) {
	    return new Red(num);
	  };
	  BN.prototype.toRed = function toRed(ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    assert(this.negative === 0, 'red works only with positives');
	    return ctx.convertTo(this)._forceRed(ctx);
	  };
	  BN.prototype.fromRed = function fromRed() {
	    assert(this.red, 'fromRed works only with numbers in reduction context');
	    return this.red.convertFrom(this);
	  };
	  BN.prototype._forceRed = function _forceRed(ctx) {
	    this.red = ctx;
	    return this;
	  };
	  BN.prototype.forceRed = function forceRed(ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    return this._forceRed(ctx);
	  };
	  BN.prototype.redAdd = function redAdd(num) {
	    assert(this.red, 'redAdd works only with red numbers');
	    return this.red.add(this, num);
	  };
	  BN.prototype.redIAdd = function redIAdd(num) {
	    assert(this.red, 'redIAdd works only with red numbers');
	    return this.red.iadd(this, num);
	  };
	  BN.prototype.redSub = function redSub(num) {
	    assert(this.red, 'redSub works only with red numbers');
	    return this.red.sub(this, num);
	  };
	  BN.prototype.redISub = function redISub(num) {
	    assert(this.red, 'redISub works only with red numbers');
	    return this.red.isub(this, num);
	  };
	  BN.prototype.redShl = function redShl(num) {
	    assert(this.red, 'redShl works only with red numbers');
	    return this.red.shl(this, num);
	  };
	  BN.prototype.redMul = function redMul(num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.mul(this, num);
	  };
	  BN.prototype.redIMul = function redIMul(num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.imul(this, num);
	  };
	  BN.prototype.redSqr = function redSqr() {
	    assert(this.red, 'redSqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqr(this);
	  };
	  BN.prototype.redISqr = function redISqr() {
	    assert(this.red, 'redISqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.isqr(this);
	  };

	  // Square root over p
	  BN.prototype.redSqrt = function redSqrt() {
	    assert(this.red, 'redSqrt works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqrt(this);
	  };
	  BN.prototype.redInvm = function redInvm() {
	    assert(this.red, 'redInvm works only with red numbers');
	    this.red._verify1(this);
	    return this.red.invm(this);
	  };

	  // Return negative clone of `this` % `red modulo`
	  BN.prototype.redNeg = function redNeg() {
	    assert(this.red, 'redNeg works only with red numbers');
	    this.red._verify1(this);
	    return this.red.neg(this);
	  };
	  BN.prototype.redPow = function redPow(num) {
	    assert(this.red && !num.red, 'redPow(normalNum)');
	    this.red._verify1(this);
	    return this.red.pow(this, num);
	  };

	  // Prime numbers with efficient reduction
	  var primes = {
	    k256: null,
	    p224: null,
	    p192: null,
	    p25519: null
	  };

	  // Pseudo-Mersenne prime
	  function MPrime(name, p) {
	    // P = 2 ^ N - K
	    this.name = name;
	    this.p = new BN(p, 16);
	    this.n = this.p.bitLength();
	    this.k = new BN(1).iushln(this.n).isub(this.p);
	    this.tmp = this._tmp();
	  }
	  MPrime.prototype._tmp = function _tmp() {
	    var tmp = new BN(null);
	    tmp.words = new Array(Math.ceil(this.n / 13));
	    return tmp;
	  };
	  MPrime.prototype.ireduce = function ireduce(num) {
	    // Assumes that `num` is less than `P^2`
	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
	    var r = num;
	    var rlen;
	    do {
	      this.split(r, this.tmp);
	      r = this.imulK(r);
	      r = r.iadd(this.tmp);
	      rlen = r.bitLength();
	    } while (rlen > this.n);
	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
	    if (cmp === 0) {
	      r.words[0] = 0;
	      r.length = 1;
	    } else if (cmp > 0) {
	      r.isub(this.p);
	    } else {
	      if (r.strip !== undefined) {
	        // r is a BN v4 instance
	        r.strip();
	      } else {
	        // r is a BN v5 instance
	        r._strip();
	      }
	    }
	    return r;
	  };
	  MPrime.prototype.split = function split(input, out) {
	    input.iushrn(this.n, 0, out);
	  };
	  MPrime.prototype.imulK = function imulK(num) {
	    return num.imul(this.k);
	  };
	  function K256() {
	    MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	  }
	  inherits(K256, MPrime);
	  K256.prototype.split = function split(input, output) {
	    // 256 = 9 * 26 + 22
	    var mask = 0x3fffff;
	    var outLen = Math.min(input.length, 9);
	    for (var i = 0; i < outLen; i++) {
	      output.words[i] = input.words[i];
	    }
	    output.length = outLen;
	    if (input.length <= 9) {
	      input.words[0] = 0;
	      input.length = 1;
	      return;
	    }

	    // Shift by 9 limbs
	    var prev = input.words[9];
	    output.words[output.length++] = prev & mask;
	    for (i = 10; i < input.length; i++) {
	      var next = input.words[i] | 0;
	      input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
	      prev = next;
	    }
	    prev >>>= 22;
	    input.words[i - 10] = prev;
	    if (prev === 0 && input.length > 10) {
	      input.length -= 10;
	    } else {
	      input.length -= 9;
	    }
	  };
	  K256.prototype.imulK = function imulK(num) {
	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
	    num.words[num.length] = 0;
	    num.words[num.length + 1] = 0;
	    num.length += 2;

	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
	    var lo = 0;
	    for (var i = 0; i < num.length; i++) {
	      var w = num.words[i] | 0;
	      lo += w * 0x3d1;
	      num.words[i] = lo & 0x3ffffff;
	      lo = w * 0x40 + (lo / 0x4000000 | 0);
	    }

	    // Fast length reduction
	    if (num.words[num.length - 1] === 0) {
	      num.length--;
	      if (num.words[num.length - 1] === 0) {
	        num.length--;
	      }
	    }
	    return num;
	  };
	  function P224() {
	    MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	  }
	  inherits(P224, MPrime);
	  function P192() {
	    MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	  }
	  inherits(P192, MPrime);
	  function P25519() {
	    // 2 ^ 255 - 19
	    MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	  }
	  inherits(P25519, MPrime);
	  P25519.prototype.imulK = function imulK(num) {
	    // K = 0x13
	    var carry = 0;
	    for (var i = 0; i < num.length; i++) {
	      var hi = (num.words[i] | 0) * 0x13 + carry;
	      var lo = hi & 0x3ffffff;
	      hi >>>= 26;
	      num.words[i] = lo;
	      carry = hi;
	    }
	    if (carry !== 0) {
	      num.words[num.length++] = carry;
	    }
	    return num;
	  };

	  // Exported mostly for testing purposes, use plain name instead
	  BN._prime = function prime(name) {
	    // Cached version of prime
	    if (primes[name]) return primes[name];
	    var prime;
	    if (name === 'k256') {
	      prime = new K256();
	    } else if (name === 'p224') {
	      prime = new P224();
	    } else if (name === 'p192') {
	      prime = new P192();
	    } else if (name === 'p25519') {
	      prime = new P25519();
	    } else {
	      throw new Error('Unknown prime ' + name);
	    }
	    primes[name] = prime;
	    return prime;
	  };

	  //
	  // Base reduction engine
	  //
	  function Red(m) {
	    if (typeof m === 'string') {
	      var prime = BN._prime(m);
	      this.m = prime.p;
	      this.prime = prime;
	    } else {
	      assert(m.gtn(1), 'modulus must be greater than 1');
	      this.m = m;
	      this.prime = null;
	    }
	  }
	  Red.prototype._verify1 = function _verify1(a) {
	    assert(a.negative === 0, 'red works only with positives');
	    assert(a.red, 'red works only with red numbers');
	  };
	  Red.prototype._verify2 = function _verify2(a, b) {
	    assert((a.negative | b.negative) === 0, 'red works only with positives');
	    assert(a.red && a.red === b.red, 'red works only with red numbers');
	  };
	  Red.prototype.imod = function imod(a) {
	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
	    move(a, a.umod(this.m)._forceRed(this));
	    return a;
	  };
	  Red.prototype.neg = function neg(a) {
	    if (a.isZero()) {
	      return a.clone();
	    }
	    return this.m.sub(a)._forceRed(this);
	  };
	  Red.prototype.add = function add(a, b) {
	    this._verify2(a, b);
	    var res = a.add(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res._forceRed(this);
	  };
	  Red.prototype.iadd = function iadd(a, b) {
	    this._verify2(a, b);
	    var res = a.iadd(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res;
	  };
	  Red.prototype.sub = function sub(a, b) {
	    this._verify2(a, b);
	    var res = a.sub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res._forceRed(this);
	  };
	  Red.prototype.isub = function isub(a, b) {
	    this._verify2(a, b);
	    var res = a.isub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res;
	  };
	  Red.prototype.shl = function shl(a, num) {
	    this._verify1(a);
	    return this.imod(a.ushln(num));
	  };
	  Red.prototype.imul = function imul(a, b) {
	    this._verify2(a, b);
	    return this.imod(a.imul(b));
	  };
	  Red.prototype.mul = function mul(a, b) {
	    this._verify2(a, b);
	    return this.imod(a.mul(b));
	  };
	  Red.prototype.isqr = function isqr(a) {
	    return this.imul(a, a.clone());
	  };
	  Red.prototype.sqr = function sqr(a) {
	    return this.mul(a, a);
	  };
	  Red.prototype.sqrt = function sqrt(a) {
	    if (a.isZero()) return a.clone();
	    var mod3 = this.m.andln(3);
	    assert(mod3 % 2 === 1);

	    // Fast case
	    if (mod3 === 3) {
	      var pow = this.m.add(new BN(1)).iushrn(2);
	      return this.pow(a, pow);
	    }

	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
	    //
	    // Find Q and S, that Q * 2 ^ S = (P - 1)
	    var q = this.m.subn(1);
	    var s = 0;
	    while (!q.isZero() && q.andln(1) === 0) {
	      s++;
	      q.iushrn(1);
	    }
	    assert(!q.isZero());
	    var one = new BN(1).toRed(this);
	    var nOne = one.redNeg();

	    // Find quadratic non-residue
	    // NOTE: Max is such because of generalized Riemann hypothesis.
	    var lpow = this.m.subn(1).iushrn(1);
	    var z = this.m.bitLength();
	    z = new BN(2 * z * z).toRed(this);
	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
	      z.redIAdd(nOne);
	    }
	    var c = this.pow(z, q);
	    var r = this.pow(a, q.addn(1).iushrn(1));
	    var t = this.pow(a, q);
	    var m = s;
	    while (t.cmp(one) !== 0) {
	      var tmp = t;
	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
	        tmp = tmp.redSqr();
	      }
	      assert(i < m);
	      var b = this.pow(c, new BN(1).iushln(m - i - 1));
	      r = r.redMul(b);
	      c = b.redSqr();
	      t = t.redMul(c);
	      m = i;
	    }
	    return r;
	  };
	  Red.prototype.invm = function invm(a) {
	    var inv = a._invmp(this.m);
	    if (inv.negative !== 0) {
	      inv.negative = 0;
	      return this.imod(inv).redNeg();
	    } else {
	      return this.imod(inv);
	    }
	  };
	  Red.prototype.pow = function pow(a, num) {
	    if (num.isZero()) return new BN(1).toRed(this);
	    if (num.cmpn(1) === 0) return a.clone();
	    var windowSize = 4;
	    var wnd = new Array(1 << windowSize);
	    wnd[0] = new BN(1).toRed(this);
	    wnd[1] = a;
	    for (var i = 2; i < wnd.length; i++) {
	      wnd[i] = this.mul(wnd[i - 1], a);
	    }
	    var res = wnd[0];
	    var current = 0;
	    var currentLen = 0;
	    var start = num.bitLength() % 26;
	    if (start === 0) {
	      start = 26;
	    }
	    for (i = num.length - 1; i >= 0; i--) {
	      var word = num.words[i];
	      for (var j = start - 1; j >= 0; j--) {
	        var bit = word >> j & 1;
	        if (res !== wnd[0]) {
	          res = this.sqr(res);
	        }
	        if (bit === 0 && current === 0) {
	          currentLen = 0;
	          continue;
	        }
	        current <<= 1;
	        current |= bit;
	        currentLen++;
	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
	        res = this.mul(res, wnd[current]);
	        currentLen = 0;
	        current = 0;
	      }
	      start = 26;
	    }
	    return res;
	  };
	  Red.prototype.convertTo = function convertTo(num) {
	    var r = num.umod(this.m);
	    return r === num ? r.clone() : r;
	  };
	  Red.prototype.convertFrom = function convertFrom(num) {
	    var res = num.clone();
	    res.red = null;
	    return res;
	  };

	  //
	  // Montgomery method engine
	  //

	  BN.mont = function mont(num) {
	    return new Mont(num);
	  };
	  function Mont(m) {
	    Red.call(this, m);
	    this.shift = this.m.bitLength();
	    if (this.shift % 26 !== 0) {
	      this.shift += 26 - this.shift % 26;
	    }
	    this.r = new BN(1).iushln(this.shift);
	    this.r2 = this.imod(this.r.sqr());
	    this.rinv = this.r._invmp(this.m);
	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
	    this.minv = this.minv.umod(this.r);
	    this.minv = this.r.sub(this.minv);
	  }
	  inherits(Mont, Red);
	  Mont.prototype.convertTo = function convertTo(num) {
	    return this.imod(num.ushln(this.shift));
	  };
	  Mont.prototype.convertFrom = function convertFrom(num) {
	    var r = this.imod(num.mul(this.rinv));
	    r.red = null;
	    return r;
	  };
	  Mont.prototype.imul = function imul(a, b) {
	    if (a.isZero() || b.isZero()) {
	      a.words[0] = 0;
	      a.length = 1;
	      return a;
	    }
	    var t = a.imul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;
	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }
	    return res._forceRed(this);
	  };
	  Mont.prototype.mul = function mul(a, b) {
	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
	    var t = a.mul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;
	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }
	    return res._forceRed(this);
	  };
	  Mont.prototype.invm = function invm(a) {
	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
	    var res = this.imod(a._invmp(this.m).mul(this.r2));
	    return res._forceRed(this);
	  };
	})(module, commonjsGlobal);
} (bn$3));

var BN = bn$3.exports;

var hash$1 = {};

var utils$g = {};

var minimalisticAssert$1 = assert$b;
function assert$b(val, msg) {
  if (!val) throw new Error(msg || 'Assertion failed');
}
assert$b.equal = function assertEqual(l, r, msg) {
  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
};

var inherits$2 = {exports: {}};

var inherits_browser$1 = {exports: {}};

var hasRequiredInherits_browser;

function requireInherits_browser () {
	if (hasRequiredInherits_browser) return inherits_browser$1.exports;
	hasRequiredInherits_browser = 1;
	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  inherits_browser$1.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      ctor.prototype = Object.create(superCtor.prototype, {
	        constructor: {
	          value: ctor,
	          enumerable: false,
	          writable: true,
	          configurable: true
	        }
	      });
	    }
	  };
	} else {
	  // old school shim for old browsers
	  inherits_browser$1.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      var TempCtor = function TempCtor() {};
	      TempCtor.prototype = superCtor.prototype;
	      ctor.prototype = new TempCtor();
	      ctor.prototype.constructor = ctor;
	    }
	  };
	}
	return inherits_browser$1.exports;
}

(function (module) {
	try {
	  var util = require('util');
	  /* istanbul ignore next */
	  if (typeof util.inherits !== 'function') throw '';
	  module.exports = util.inherits;
	} catch (e) {
	  /* istanbul ignore next */
	  module.exports = requireInherits_browser();
	}
} (inherits$2));

var assert$a = minimalisticAssert$1;
var inherits$1 = inherits$2.exports;
utils$g.inherits = inherits$1;
function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}
function toArray(msg, enc) {
  if (Array.isArray(msg)) return msg.slice();
  if (!msg) return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = c >> 6 | 192;
          res[p++] = c & 63 | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = c >> 18 | 240;
          res[p++] = c >> 12 & 63 | 128;
          res[p++] = c >> 6 & 63 | 128;
          res[p++] = c & 63 | 128;
        } else {
          res[p++] = c >> 12 | 224;
          res[p++] = c >> 6 & 63 | 128;
          res[p++] = c & 63 | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0) msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2) {
        res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    }
  } else {
    for (i = 0; i < msg.length; i++) {
      res[i] = msg[i] | 0;
    }
  }
  return res;
}
utils$g.toArray = toArray;
function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    res += zero2(msg[i].toString(16));
  }
  return res;
}
utils$g.toHex = toHex;
function htonl(w) {
  var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
  return res >>> 0;
}
utils$g.htonl = htonl;
function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little') w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
utils$g.toHex32 = toHex32;
function zero2(word) {
  if (word.length === 1) return '0' + word;else return word;
}
utils$g.zero2 = zero2;
function zero8(word) {
  if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;
}
utils$g.zero8 = zero8;
function join32(msg, start, end, endian) {
  var len = end - start;
  assert$a(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
utils$g.join32 = join32;
function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = m >>> 16 & 0xff;
      res[k + 2] = m >>> 8 & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = m >>> 16 & 0xff;
      res[k + 1] = m >>> 8 & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
utils$g.split32 = split32;
function rotr32$1(w, b) {
  return w >>> b | w << 32 - b;
}
utils$g.rotr32 = rotr32$1;
function rotl32$2(w, b) {
  return w << b | w >>> 32 - b;
}
utils$g.rotl32 = rotl32$2;
function sum32$3(a, b) {
  return a + b >>> 0;
}
utils$g.sum32 = sum32$3;
function sum32_3$1(a, b, c) {
  return a + b + c >>> 0;
}
utils$g.sum32_3 = sum32_3$1;
function sum32_4$2(a, b, c, d) {
  return a + b + c + d >>> 0;
}
utils$g.sum32_4 = sum32_4$2;
function sum32_5$2(a, b, c, d, e) {
  return a + b + c + d + e >>> 0;
}
utils$g.sum32_5 = sum32_5$2;
function sum64$1(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];
  var lo = al + bl >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
utils$g.sum64 = sum64$1;
function sum64_hi$1(ah, al, bh, bl) {
  var lo = al + bl >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
utils$g.sum64_hi = sum64_hi$1;
function sum64_lo$1(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
utils$g.sum64_lo = sum64_lo$1;
function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = lo + bl >>> 0;
  carry += lo < al ? 1 : 0;
  lo = lo + cl >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = lo + dl >>> 0;
  carry += lo < dl ? 1 : 0;
  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
utils$g.sum64_4_hi = sum64_4_hi$1;
function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
utils$g.sum64_4_lo = sum64_4_lo$1;
function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = lo + bl >>> 0;
  carry += lo < al ? 1 : 0;
  lo = lo + cl >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = lo + dl >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = lo + el >>> 0;
  carry += lo < el ? 1 : 0;
  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
utils$g.sum64_5_hi = sum64_5_hi$1;
function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;
  return lo >>> 0;
}
utils$g.sum64_5_lo = sum64_5_lo$1;
function rotr64_hi$1(ah, al, num) {
  var r = al << 32 - num | ah >>> num;
  return r >>> 0;
}
utils$g.rotr64_hi = rotr64_hi$1;
function rotr64_lo$1(ah, al, num) {
  var r = ah << 32 - num | al >>> num;
  return r >>> 0;
}
utils$g.rotr64_lo = rotr64_lo$1;
function shr64_hi$1(ah, al, num) {
  return ah >>> num;
}
utils$g.shr64_hi = shr64_hi$1;
function shr64_lo$1(ah, al, num) {
  var r = ah << 32 - num | al >>> num;
  return r >>> 0;
}
utils$g.shr64_lo = shr64_lo$1;

var common$5 = {};

var utils$f = utils$g;
var assert$9 = minimalisticAssert$1;
function BlockHash$4() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';
  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
common$5.BlockHash = BlockHash$4;
BlockHash$4.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils$f.toArray(msg, enc);
  if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0) this.pending = null;
    msg = utils$f.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32) {
      this._update(msg, i, i + this._delta32);
    }
  }
  return this;
};
BlockHash$4.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert$9(this.pending === null);
  return this._digest(enc);
};
BlockHash$4.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - (len + this.padLength) % bytes;
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++) {
    res[i] = 0;
  }

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++) {
      res[i++] = 0;
    }
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = len >>> 24 & 0xff;
    res[i++] = len >>> 16 & 0xff;
    res[i++] = len >>> 8 & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = len >>> 8 & 0xff;
    res[i++] = len >>> 16 & 0xff;
    res[i++] = len >>> 24 & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    for (t = 8; t < this.padLength; t++) {
      res[i++] = 0;
    }
  }
  return res;
};

var sha = {};

var common$4 = {};

var utils$e = utils$g;
var rotr32 = utils$e.rotr32;
function ft_1$1(s, x, y, z) {
  if (s === 0) return ch32$1(x, y, z);
  if (s === 1 || s === 3) return p32(x, y, z);
  if (s === 2) return maj32$1(x, y, z);
}
common$4.ft_1 = ft_1$1;
function ch32$1(x, y, z) {
  return x & y ^ ~x & z;
}
common$4.ch32 = ch32$1;
function maj32$1(x, y, z) {
  return x & y ^ x & z ^ y & z;
}
common$4.maj32 = maj32$1;
function p32(x, y, z) {
  return x ^ y ^ z;
}
common$4.p32 = p32;
function s0_256$1(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
common$4.s0_256 = s0_256$1;
function s1_256$1(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
common$4.s1_256 = s1_256$1;
function g0_256$1(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
}
common$4.g0_256 = g0_256$1;
function g1_256$1(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
}
common$4.g1_256 = g1_256$1;

var utils$d = utils$g;
var common$3 = common$5;
var shaCommon$1 = common$4;
var rotl32$1 = utils$d.rotl32;
var sum32$2 = utils$d.sum32;
var sum32_5$1 = utils$d.sum32_5;
var ft_1 = shaCommon$1.ft_1;
var BlockHash$3 = common$3.BlockHash;
var sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];
function SHA1() {
  if (!(this instanceof SHA1)) return new SHA1();
  BlockHash$3.call(this);
  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
  this.W = new Array(80);
}
utils$d.inherits(SHA1, BlockHash$3);
var _1 = SHA1;
SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;
SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;
  for (var i = 0; i < 16; i++) {
    W[i] = msg[start + i];
  }
  for (; i < W.length; i++) {
    W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
  }
  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32$1(b, 30);
    b = a;
    a = t;
  }
  this.h[0] = sum32$2(this.h[0], a);
  this.h[1] = sum32$2(this.h[1], b);
  this.h[2] = sum32$2(this.h[2], c);
  this.h[3] = sum32$2(this.h[3], d);
  this.h[4] = sum32$2(this.h[4], e);
};
SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils$d.toHex32(this.h, 'big');else return utils$d.split32(this.h, 'big');
};

var utils$c = utils$g;
var common$2 = common$5;
var shaCommon = common$4;
var assert$8 = minimalisticAssert$1;
var sum32$1 = utils$c.sum32;
var sum32_4$1 = utils$c.sum32_4;
var sum32_5 = utils$c.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;
var BlockHash$2 = common$2.BlockHash;
var sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];
function SHA256$1() {
  if (!(this instanceof SHA256$1)) return new SHA256$1();
  BlockHash$2.call(this);
  this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils$c.inherits(SHA256$1, BlockHash$2);
var _256 = SHA256$1;
SHA256$1.blockSize = 512;
SHA256$1.outSize = 256;
SHA256$1.hmacStrength = 192;
SHA256$1.padLength = 64;
SHA256$1.prototype._update = function _update(msg, start) {
  var W = this.W;
  for (var i = 0; i < 16; i++) {
    W[i] = msg[start + i];
  }
  for (; i < W.length; i++) {
    W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
  }
  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];
  assert$8(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32$1(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32$1(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32$1(T1, T2);
  }
  this.h[0] = sum32$1(this.h[0], a);
  this.h[1] = sum32$1(this.h[1], b);
  this.h[2] = sum32$1(this.h[2], c);
  this.h[3] = sum32$1(this.h[3], d);
  this.h[4] = sum32$1(this.h[4], e);
  this.h[5] = sum32$1(this.h[5], f);
  this.h[6] = sum32$1(this.h[6], g);
  this.h[7] = sum32$1(this.h[7], h);
};
SHA256$1.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils$c.toHex32(this.h, 'big');else return utils$c.split32(this.h, 'big');
};

var utils$b = utils$g;
var SHA256 = _256;
function SHA224() {
  if (!(this instanceof SHA224)) return new SHA224();
  SHA256.call(this);
  this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
}
utils$b.inherits(SHA224, SHA256);
var _224 = SHA224;
SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;
SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex') return utils$b.toHex32(this.h.slice(0, 7), 'big');else return utils$b.split32(this.h.slice(0, 7), 'big');
};

var utils$a = utils$g;
var common$1 = common$5;
var assert$7 = minimalisticAssert$1;
var rotr64_hi = utils$a.rotr64_hi;
var rotr64_lo = utils$a.rotr64_lo;
var shr64_hi = utils$a.shr64_hi;
var shr64_lo = utils$a.shr64_lo;
var sum64 = utils$a.sum64;
var sum64_hi = utils$a.sum64_hi;
var sum64_lo = utils$a.sum64_lo;
var sum64_4_hi = utils$a.sum64_4_hi;
var sum64_4_lo = utils$a.sum64_4_lo;
var sum64_5_hi = utils$a.sum64_5_hi;
var sum64_5_lo = utils$a.sum64_5_lo;
var BlockHash$1 = common$1.BlockHash;
var sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];
function SHA512$1() {
  if (!(this instanceof SHA512$1)) return new SHA512$1();
  BlockHash$1.call(this);
  this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils$a.inherits(SHA512$1, BlockHash$1);
var _512 = SHA512$1;
SHA512$1.blockSize = 1024;
SHA512$1.outSize = 512;
SHA512$1.hmacStrength = 192;
SHA512$1.padLength = 128;
SHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++) {
    W[i] = msg[start + i];
  }
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14]; // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32]; // i - 16
    var c3_lo = W[i - 31];
    W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
  }
};
SHA512$1.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);
  var W = this.W;
  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];
  assert$7(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];
    var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
    hh = gh;
    hl = gl;
    gh = fh;
    gl = fl;
    fh = eh;
    fl = el;
    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);
    dh = ch;
    dl = cl;
    ch = bh;
    cl = bl;
    bh = ah;
    bl = al;
    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }
  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};
SHA512$1.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils$a.toHex32(this.h, 'big');else return utils$a.split32(this.h, 'big');
};
function ch64_hi(xh, xl, yh, yl, zh) {
  var r = xh & yh ^ ~xh & zh;
  if (r < 0) r += 0x100000000;
  return r;
}
function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = xl & yl ^ ~xl & zl;
  if (r < 0) r += 0x100000000;
  return r;
}
function maj64_hi(xh, xl, yh, yl, zh) {
  var r = xh & yh ^ xh & zh ^ yh & zh;
  if (r < 0) r += 0x100000000;
  return r;
}
function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = xl & yl ^ xl & zl ^ yl & zl;
  if (r < 0) r += 0x100000000;
  return r;
}
function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2); // 34
  var c2_hi = rotr64_hi(xl, xh, 7); // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}
function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2); // 34
  var c2_lo = rotr64_lo(xl, xh, 7); // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}
function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9); // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}
function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9); // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}
function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);
  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}
function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);
  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}
function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29); // 61
  var c2_hi = shr64_hi(xh, xl, 6);
  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}
function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29); // 61
  var c2_lo = shr64_lo(xh, xl, 6);
  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

var utils$9 = utils$g;
var SHA512 = _512;
function SHA384() {
  if (!(this instanceof SHA384)) return new SHA384();
  SHA512.call(this);
  this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];
}
utils$9.inherits(SHA384, SHA512);
var _384 = SHA384;
SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;
SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils$9.toHex32(this.h.slice(0, 12), 'big');else return utils$9.split32(this.h.slice(0, 12), 'big');
};

sha.sha1 = _1;
sha.sha224 = _224;
sha.sha256 = _256;
sha.sha384 = _384;
sha.sha512 = _512;

var ripemd = {};

var utils$8 = utils$g;
var common = common$5;
var rotl32 = utils$8.rotl32;
var sum32 = utils$8.sum32;
var sum32_3 = utils$8.sum32_3;
var sum32_4 = utils$8.sum32_4;
var BlockHash = common.BlockHash;
function RIPEMD160() {
  if (!(this instanceof RIPEMD160)) return new RIPEMD160();
  BlockHash.call(this);
  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
  this.endian = 'little';
}
utils$8.inherits(RIPEMD160, BlockHash);
ripemd.ripemd160 = RIPEMD160;
RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;
RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(rotl32(sum32_4(A, f$1(j, B, C, D), msg[r$1[j] + start], K(j)), s$1[j]), E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(rotl32(sum32_4(Ah, f$1(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};
RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils$8.toHex32(this.h, 'little');else return utils$8.split32(this.h, 'little');
};
function f$1(j, x, y, z) {
  if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);
}
function K(j) {
  if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;
}
function Kh(j) {
  if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;
}
var r$1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
var rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
var s$1 = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
var sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];

var utils$7 = utils$g;
var assert$6 = minimalisticAssert$1;
function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;
  this._init(utils$7.toArray(key, enc));
}
var hmac$1 = Hmac;
Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
  assert$6(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++) {
    key.push(0);
  }
  for (i = 0; i < key.length; i++) {
    key[i] ^= 0x36;
  }
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++) {
    key[i] ^= 0x6a;
  }
  this.outer = new this.Hash().update(key);
};
Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};
Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

(function (exports) {
	var hash = exports;
	hash.utils = utils$g;
	hash.common = common$5;
	hash.sha = sha;
	hash.ripemd = ripemd;
	hash.hmac = hmac$1;

	// Proxy hash functions to the main object
	hash.sha1 = hash.sha.sha1;
	hash.sha256 = hash.sha.sha256;
	hash.sha224 = hash.sha.sha224;
	hash.sha384 = hash.sha.sha384;
	hash.sha512 = hash.sha.sha512;
	hash.ripemd160 = hash.ripemd.ripemd160;
} (hash$1));

function createCommonjsModule(fn, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function require(path, base) {
      return commonjsRequire$1(path, base === undefined || base === null ? module.path : base);
    }
  }, fn(module, module.exports), module.exports;
}
function commonjsRequire$1() {
  throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}
var minimalisticAssert = assert$1;
function assert$1(val, msg) {
  if (!val) throw new Error(msg || 'Assertion failed');
}
assert$1.equal = function assertEqual(l, r, msg) {
  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
};
var utils_1 = createCommonjsModule(function (module, exports) {

  var utils = exports;
  function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg !== 'string') {
      for (var i = 0; i < msg.length; i++) {
        res[i] = msg[i] | 0;
      }
      return res;
    }
    if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0) msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2) {
        res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    } else {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi) res.push(hi, lo);else res.push(lo);
      }
    }
    return res;
  }
  utils.toArray = toArray;
  function zero2(word) {
    if (word.length === 1) return '0' + word;else return word;
  }
  utils.zero2 = zero2;
  function toHex(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++) {
      res += zero2(msg[i].toString(16));
    }
    return res;
  }
  utils.toHex = toHex;
  utils.encode = function encode(arr, enc) {
    if (enc === 'hex') return toHex(arr);else return arr;
  };
});
var utils_1$1 = createCommonjsModule(function (module, exports) {

  var utils = exports;
  utils.assert = minimalisticAssert;
  utils.toArray = utils_1.toArray;
  utils.zero2 = utils_1.zero2;
  utils.toHex = utils_1.toHex;
  utils.encode = utils_1.encode;

  // Represent num in a w-NAF form
  function getNAF(num, w, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);
    var ws = 1 << w + 1;
    var k = num.clone();
    for (var i = 0; i < naf.length; i++) {
      var z;
      var mod = k.andln(ws - 1);
      if (k.isOdd()) {
        if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;
        k.isubn(z);
      } else {
        z = 0;
      }
      naf[i] = z;
      k.iushrn(1);
    }
    return naf;
  }
  utils.getNAF = getNAF;

  // Represent k1, k2 in a Joint Sparse Form
  function getJSF(k1, k2) {
    var jsf = [[], []];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    var m8;
    while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
      // First phase
      var m14 = k1.andln(3) + d1 & 3;
      var m24 = k2.andln(3) + d2 & 3;
      if (m14 === 3) m14 = -1;
      if (m24 === 3) m24 = -1;
      var u1;
      if ((m14 & 1) === 0) {
        u1 = 0;
      } else {
        m8 = k1.andln(7) + d1 & 7;
        if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;
      }
      jsf[0].push(u1);
      var u2;
      if ((m24 & 1) === 0) {
        u2 = 0;
      } else {
        m8 = k2.andln(7) + d2 & 7;
        if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;
      }
      jsf[1].push(u2);

      // Second phase
      if (2 * d1 === u1 + 1) d1 = 1 - d1;
      if (2 * d2 === u2 + 1) d2 = 1 - d2;
      k1.iushrn(1);
      k2.iushrn(1);
    }
    return jsf;
  }
  utils.getJSF = getJSF;
  function cachedProperty(obj, name, computer) {
    var key = '_' + name;
    obj.prototype[name] = function cachedProperty() {
      return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
    };
  }
  utils.cachedProperty = cachedProperty;
  function parseBytes(bytes) {
    return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;
  }
  utils.parseBytes = parseBytes;
  function intFromLE(bytes) {
    return new BN(bytes, 'hex', 'le');
  }
  utils.intFromLE = intFromLE;
});
var getNAF = utils_1$1.getNAF;
var getJSF = utils_1$1.getJSF;
var assert$1$1 = utils_1$1.assert;
function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);
  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
var base$2 = BaseCurve;
BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};
BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};
BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert$1$1(p.precomputed);
  var doubles = p._getDoubles();
  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  var j;
  var nafW;
  for (j = 0; j < naf.length; j += doubles.step) {
    nafW = 0;
    for (var l = j + doubles.step - 1; l >= j; l--) {
      nafW = (nafW << 1) + naf[l];
    }
    repr.push(nafW);
  }
  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (j = 0; j < repr.length; j++) {
      nafW = repr[j];
      if (nafW === i) b = b.mixedAdd(doubles.points[j]);else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};
BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var l = 0; i >= 0 && naf[i] === 0; i--) {
      l++;
    }
    if (i >= 0) l++;
    acc = acc.dblp(l);
    if (i < 0) break;
    var z = naf[i];
    assert$1$1(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
    } else {
      // J +- J
      if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};
BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  var i;
  var j;
  var p;
  for (i = 0; i < len; i++) {
    p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }
    var comb = [points[a], /* 1 */
    null, /* 3 */
    null, /* 5 */
    points[b] /* 7 */];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }
    var index = [-3, /* -1 -1 */
    -1, /* -1 0 */
    -5, /* -1 1 */
    -7, /* 0 -1 */
    0, /* 0 0 */
    7, /* 0 1 */
    5, /* 1 -1 */
    1, /* 1 0 */
    3 /* 1 1 */];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;
      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }
  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (i = max; i >= 0; i--) {
    var k = 0;
    while (i >= 0) {
      var zero = true;
      for (j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0) zero = false;
      }
      if (!zero) break;
      k++;
      i--;
    }
    if (i >= 0) k++;
    acc = acc.dblp(k);
    if (i < 0) break;
    for (j = 0; j < len; j++) {
      var z = tmp[j];
      if (z === 0) continue;else if (z > 0) p = wnd[j][z - 1 >> 1];else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
      if (p.type === 'affine') acc = acc.mixedAdd(p);else acc = acc.add(p);
    }
  }
  // Zeroify references
  for (i = 0; i < len; i++) {
    wnd[i] = null;
  }
  if (jacobianResult) return acc;else return acc.toP();
};
function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;
BasePoint.prototype.eq = function eq( /*other*/
) {
  throw new Error('Not implemented');
};
BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};
BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils_1$1.toArray(bytes, enc);
  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06) assert$1$1(bytes[bytes.length - 1] % 2 === 0);else if (bytes[0] === 0x07) assert$1$1(bytes[bytes.length - 1] % 2 === 1);
    var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};
BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};
BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);
  if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);
  return [0x04].concat(x, this.getY().toArray('be', len));
};
BasePoint.prototype.encode = function encode(enc, compact) {
  return utils_1$1.encode(this._encode(compact), enc);
};
BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed) return this;
  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;
  return this;
};
BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed) return false;
  var doubles = this.precomputed.doubles;
  if (!doubles) return false;
  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};
BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
  var doubles = [this];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++) {
      acc = acc.dbl();
    }
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};
BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
  var res = [this];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++) {
    res[i] = res[i - 1].add(dbl);
  }
  return {
    wnd: wnd,
    points: res
  };
};
BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};
BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++) {
    r = r.dbl();
  }
  return r;
};
var inherits_browser = createCommonjsModule(function (module) {
  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function TempCtor() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }
});
var assert$2 = utils_1$1.assert;
function ShortCurve(conf) {
  base$2.call(this, 'short', conf);
  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();
  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits_browser(ShortCurve, base$2);
var short_1 = ShortCurve;
ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function (vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }
  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};
ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();
  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [l1, l2];
};
ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;
  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));
    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;
    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;
  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }
  return [{
    a: a1,
    b: b1
  }, {
    a: a2,
    b: b2
  }];
};
ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];
  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);
  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return {
    k1: k1,
    k2: k2
  };
};
ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red) x = x.toRed(this.red);
  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
  return this.point(x, y);
};
ShortCurve.prototype.validate = function validate(point) {
  if (point.inf) return true;
  var x = point.x;
  var y = point.y;
  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};
ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();
    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }
    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};
function Point(curve, x, y, isRed) {
  base$2.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits_browser(Point, base$2.BasePoint);
ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};
ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};
Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo) return;
  var pre = this.precomputed;
  if (pre && pre.beta) return pre.beta;
  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function endoMul(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};
Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed) return [this.x, this.y];
  return [this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  }];
};
Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string') obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2]) return res;
  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }
  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [res].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [res].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};
Point.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};
Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};
Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf) return p;

  // P + O = P
  if (p.inf) return this;

  // P + P = 2P
  if (this.eq(p)) return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p)) return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};
Point.prototype.dbl = function dbl() {
  if (this.inf) return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
  var a = this.curve.a;
  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};
Point.prototype.getX = function getX() {
  return this.x.fromRed();
};
Point.prototype.getY = function getY() {
  return this.y.fromRed();
};
Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity()) return this;else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);else return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [this, p2];
  var coeffs = [k1, k2];
  if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [this, p2];
  var coeffs = [k1, k2];
  if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
Point.prototype.eq = function eq(p) {
  return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};
Point.prototype.neg = function neg(_precompute) {
  if (this.inf) return this;
  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function negate(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};
Point.prototype.toJ = function toJ() {
  if (this.inf) return this.curve.jpoint(null, null, null);
  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};
function JPoint(curve, x, y, z) {
  base$2.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red) this.x = this.x.toRed(this.curve.red);
  if (!this.y.red) this.y = this.y.toRed(this.curve.red);
  if (!this.z.red) this.z = this.z.toRed(this.curve.red);
  this.zOne = this.z === this.curve.one;
}
inherits_browser(JPoint, base$2.BasePoint);
ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};
JPoint.prototype.toP = function toP() {
  if (this.isInfinity()) return this.curve.point(null, null);
  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);
  return this.curve.point(ax, ay);
};
JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity()) return p;

  // P + O = P
  if (p.isInfinity()) return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));
  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
  }
  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);
  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity()) return p.toJ();

  // P + O = P
  if (p.isInfinity()) return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);
  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
  }
  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);
  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0) return this;
  if (this.isInfinity()) return this;
  if (!pow) return this.dbl();
  var i;
  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (i = 0; i < pow; i++) {
      r = r.dbl();
    }
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
    jx = nx;
    jz = nz;
    jyd = dny;
  }
  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity()) return this;
  if (this.curve.zeroA) return this._zeroDbl();else if (this.curve.threeA) return this._threeDbl();else return this._dbl();
};
JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();
  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();
  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);
  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA) return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);
  return this.curve._wnafMul(this, k);
};
JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine') return this.eq(p.toJ());
  if (this === p) return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};
JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0) return true;
  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0) return false;
    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0) return true;
  }
};
JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
};
JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};
var curve_1 = createCommonjsModule(function (module, exports) {

  var curve = exports;
  curve.base = base$2;
  curve["short"] = short_1;
  curve.mont = /*RicMoo:ethers:require(./mont)*/null;
  curve.edwards = /*RicMoo:ethers:require(./edwards)*/null;
});
var curves_1 = createCommonjsModule(function (module, exports) {

  var curves = exports;
  var assert = utils_1$1.assert;
  function PresetCurve(options) {
    if (options.type === 'short') this.curve = new curve_1["short"](options);else if (options.type === 'edwards') this.curve = new curve_1.edwards(options);else this.curve = new curve_1.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    assert(this.g.validate(), 'Invalid curve');
    assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
  }
  curves.PresetCurve = PresetCurve;
  function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
      configurable: true,
      enumerable: true,
      get: function get() {
        var curve = new PresetCurve(options);
        Object.defineProperty(curves, name, {
          configurable: true,
          enumerable: true,
          value: curve
        });
        return curve;
      }
    });
  }
  defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: hash$1.sha256,
    gRed: false,
    g: ['188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012', '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811']
  });
  defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: hash$1.sha256,
    gRed: false,
    g: ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21', 'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34']
  });
  defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: hash$1.sha256,
    gRed: false,
    g: ['6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296', '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5']
  });
  defineCurve('p384', {
    type: 'short',
    prime: null,
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 ffffffff',
    a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 fffffffc',
    b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' + '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
    n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' + 'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
    hash: hash$1.sha384,
    gRed: false,
    g: ['aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' + '5502f25d bf55296c 3a545e38 72760ab7', '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' + '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f']
  });
  defineCurve('p521', {
    type: 'short',
    prime: null,
    p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff',
    a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff fffffffc',
    b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' + '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' + '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
    n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' + 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
    hash: hash$1.sha512,
    gRed: false,
    g: ['000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' + '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' + 'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66', '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' + '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' + '3fad0761 353c7086 a272c240 88be9476 9fd16650']
  });
  defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '1',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash$1.sha256,
    gRed: false,
    g: ['9']
  });
  defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    // -121665 * (121666^(-1)) (mod P)
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash$1.sha256,
    gRed: false,
    g: ['216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658']
  });
  var pre;
  try {
    pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/null.crash();
  } catch (e) {
    pre = undefined;
  }
  defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: hash$1.sha256,
    // Precomputed endomorphism
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [{
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    }, {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }],
    gRed: false,
    g: ['79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', pre]
  });
});
function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;
  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;
  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;
  var entropy = utils_1.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils_1.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils_1.toArray(options.pers, options.persEnc || 'hex');
  minimalisticAssert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
var hmacDrbg$1 = HmacDRBG;
HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);
  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }
  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000; // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash$1.hmac(this.hash, this.K);
};
HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac().update(this.V).update([0x00]);
  if (seed) kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed) return;
  this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();
  this.V = this._hmac().update(this.V).digest();
};
HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }
  entropy = utils_1.toArray(entropy, entropyEnc);
  add = utils_1.toArray(add, addEnc);
  minimalisticAssert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._update(entropy.concat(add || []));
  this._reseed = 1;
};
HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval) throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils_1.toArray(add, addEnc || 'hex');
    this._update(add);
  }
  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }
  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils_1.encode(res, enc);
};
var assert$3 = utils_1$1.assert;
function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv) this._importPrivate(options.priv, options.privEnc);
  if (options.pub) this._importPublic(options.pub, options.pubEnc);
}
var key$3 = KeyPair;
KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair) return pub;
  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};
KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair) return priv;
  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};
KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();
  if (pub.isInfinity()) return {
    result: false,
    reason: 'Invalid public key'
  };
  if (!pub.validate()) return {
    result: false,
    reason: 'Public key is not a point'
  };
  if (!pub.mul(this.ec.curve.n).isInfinity()) return {
    result: false,
    reason: 'Public key * N != O'
  };
  return {
    result: true,
    reason: null
  };
};
KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }
  if (!this.pub) this.pub = this.ec.g.mul(this.priv);
  if (!enc) return this.pub;
  return this.pub.encode(enc, compact);
};
KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex') return this.priv.toString(16, 2);else return this.priv;
};
KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};
KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert$3(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') {
      assert$3(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  if (!pub.validate()) {
    assert$3(pub.validate(), 'public point not validated');
  }
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};
KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};
KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};
var assert$4 = utils_1$1.assert;
function Signature(options, enc) {
  if (options instanceof Signature) return options;
  if (this._importDER(options, enc)) return;
  assert$4(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined) this.recoveryParam = null;else this.recoveryParam = options.recoveryParam;
}
var signature$3 = Signature;
function Position() {
  this.place = 0;
}
function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;

  // Indefinite length or overflow
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }

  // Leading zeroes
  if (val <= 0x7f) {
    return false;
  }
  p.place = off;
  return val;
}
function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}
Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils_1$1.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if (len === false) {
    return false;
  }
  if (len + p.place !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  if (rlen === false) {
    return false;
  }
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (slen === false) {
    return false;
  }
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0) {
    if (r[1] & 0x80) {
      r = r.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }
  if (s[0] === 0) {
    if (s[1] & 0x80) {
      s = s.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }
  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;
  return true;
};
function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push(len >>> (octets << 3) & 0xff);
  }
  arr.push(len);
}
Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80) r = [0].concat(r);
  // Pad values
  if (s[0] & 0x80) s = [0].concat(s);
  r = rmPadding(r);
  s = rmPadding(s);
  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [0x02];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [0x30];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils_1$1.encode(res, enc);
};
var rand = /*RicMoo:ethers:require(brorand)*/function rand() {
  throw new Error('unsupported');
};
var assert$5 = utils_1$1.assert;
function EC(options) {
  if (!(this instanceof EC)) return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert$5(Object.prototype.hasOwnProperty.call(curves_1, options), 'Unknown curve ' + options);
    options = curves_1[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves_1.PresetCurve) options = {
    curve: options
  };
  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
var ec$1 = EC;
EC.prototype.keyPair = function keyPair(options) {
  return new key$3(this, options);
};
EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return key$3.fromPrivate(this, priv, enc);
};
EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return key$3.fromPublic(this, pub, enc);
};
EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options) options = {};

  // Instantiate Hmac_DRBG
  var drbg = new hmacDrbg$1({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });
  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  for (;;) {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0) continue;
    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  }
};
EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0) msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);else return msg;
};
EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options) options = {};
  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new hmacDrbg$1({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));
  for (var iter = 0;; iter++) {
    var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
    var kp = this.g.mul(k);
    if (kp.isInfinity()) continue;
    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0) continue;
    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0) continue;
    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }
    return new signature$3({
      r: r,
      s: s,
      recoveryParam: recoveryParam
    });
  }
};
EC.prototype.verify = function verify(msg, signature$1, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature$1 = new signature$3(signature$1, 'hex');

  // Perform primitive values validation
  var r = signature$1.r;
  var s = signature$1.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);
  var p;
  if (!this.curve._maxwellTrick) {
    p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;
    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity()) return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};
EC.prototype.recoverPubKey = function (msg, signature$1, j, enc) {
  assert$5((3 & j) === j, 'The recovery param is more than two bits');
  signature$1 = new signature$3(signature$1, enc);
  var n = this.n;
  var e = new BN(msg);
  var r = signature$1.r;
  var s = signature$1.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);else r = this.curve.pointFromX(r, isYOdd);
  var rInv = signature$1.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};
EC.prototype.getKeyRecoveryParam = function (e, signature$1, Q, enc) {
  signature$1 = new signature$3(signature$1, enc);
  if (signature$1.recoveryParam !== null) return signature$1.recoveryParam;
  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature$1, i);
    } catch (e) {
      continue;
    }
    if (Qprime.eq(Q)) return i;
  }
  throw new Error('Unable to find valid recovery factor');
};
var elliptic_1 = createCommonjsModule(function (module, exports) {

  var elliptic = exports;
  elliptic.version = /*RicMoo:ethers*/{
    version: "6.5.4"
  }.version;
  elliptic.utils = utils_1$1;
  elliptic.rand = /*RicMoo:ethers:require(brorand)*/function () {
    throw new Error('unsupported');
  };
  elliptic.curve = curve_1;
  elliptic.curves = curves_1;

  // Protocols
  elliptic.ec = ec$1;
  elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/null;
});
var EC$1 = elliptic_1.ec;

var version$g = "signing-key/5.7.0";

var logger$u = new Logger(version$g);
var _curve = null;
function getCurve() {
  if (!_curve) {
    _curve = new EC$1("secp256k1");
  }
  return _curve;
}
var SigningKey = /*#__PURE__*/function () {
  function SigningKey(privateKey) {
    _classCallCheck(this, SigningKey);
    defineReadOnly(this, "curve", "secp256k1");
    defineReadOnly(this, "privateKey", hexlify(privateKey));
    if (hexDataLength(this.privateKey) !== 32) {
      logger$u.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
    }
    var keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
    defineReadOnly(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
    defineReadOnly(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
    defineReadOnly(this, "_isSigningKey", true);
  }
  _createClass(SigningKey, [{
    key: "_addPoint",
    value: function _addPoint(other) {
      var p0 = getCurve().keyFromPublic(arrayify(this.publicKey));
      var p1 = getCurve().keyFromPublic(arrayify(other));
      return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
    }
  }, {
    key: "signDigest",
    value: function signDigest(digest) {
      var keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
      var digestBytes = arrayify(digest);
      if (digestBytes.length !== 32) {
        logger$u.throwArgumentError("bad digest length", "digest", digest);
      }
      var signature = keyPair.sign(digestBytes, {
        canonical: true
      });
      return splitSignature({
        recoveryParam: signature.recoveryParam,
        r: hexZeroPad("0x" + signature.r.toString(16), 32),
        s: hexZeroPad("0x" + signature.s.toString(16), 32)
      });
    }
  }, {
    key: "computeSharedSecret",
    value: function computeSharedSecret(otherKey) {
      var keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
      var otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));
      return hexZeroPad("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
    }
  }], [{
    key: "isSigningKey",
    value: function isSigningKey(value) {
      return !!(value && value._isSigningKey);
    }
  }]);
  return SigningKey;
}();
function recoverPublicKey(digest, signature) {
  var sig = splitSignature(signature);
  var rs = {
    r: arrayify(sig.r),
    s: arrayify(sig.s)
  };
  return "0x" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode("hex", false);
}
function computePublicKey(key, compressed) {
  var bytes = arrayify(key);
  if (bytes.length === 32) {
    var signingKey = new SigningKey(bytes);
    if (compressed) {
      return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
    }
    return signingKey.publicKey;
  } else if (bytes.length === 33) {
    if (compressed) {
      return hexlify(bytes);
    }
    return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
  } else if (bytes.length === 65) {
    if (!compressed) {
      return hexlify(bytes);
    }
    return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
  }
  return logger$u.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
}

var lib_esm$a = /*#__PURE__*/Object.freeze({
  __proto__: null,
  SigningKey: SigningKey,
  recoverPublicKey: recoverPublicKey,
  computePublicKey: computePublicKey
});

var version$f = "transactions/5.7.0";

var logger$t = new Logger(version$f);
var TransactionTypes;
(function (TransactionTypes) {
  TransactionTypes[TransactionTypes["legacy"] = 0] = "legacy";
  TransactionTypes[TransactionTypes["eip2930"] = 1] = "eip2930";
  TransactionTypes[TransactionTypes["eip1559"] = 2] = "eip1559";
})(TransactionTypes || (TransactionTypes = {}));
///////////////////////////////
function handleAddress(value) {
  if (value === "0x") {
    return null;
  }
  return getAddress(value);
}
function handleNumber(value) {
  if (value === "0x") {
    return Zero$1;
  }
  return BigNumber.from(value);
}
// Legacy Transaction Fields
var transactionFields = [{
  name: "nonce",
  maxLength: 32,
  numeric: true
}, {
  name: "gasPrice",
  maxLength: 32,
  numeric: true
}, {
  name: "gasLimit",
  maxLength: 32,
  numeric: true
}, {
  name: "to",
  length: 20
}, {
  name: "value",
  maxLength: 32,
  numeric: true
}, {
  name: "data"
}];
var allowedTransactionKeys$2 = {
  chainId: true,
  data: true,
  gasLimit: true,
  gasPrice: true,
  nonce: true,
  to: true,
  type: true,
  value: true
};
function computeAddress(key) {
  var publicKey = computePublicKey(key);
  return getAddress(hexDataSlice(keccak256$1(hexDataSlice(publicKey, 1)), 12));
}
function recoverAddress(digest, signature) {
  return computeAddress(recoverPublicKey(arrayify(digest), signature));
}
function formatNumber(value, name) {
  var result = stripZeros(BigNumber.from(value).toHexString());
  if (result.length > 32) {
    logger$t.throwArgumentError("invalid length for " + name, "transaction:" + name, value);
  }
  return result;
}
function accessSetify(addr, storageKeys) {
  return {
    address: getAddress(addr),
    storageKeys: (storageKeys || []).map(function (storageKey, index) {
      if (hexDataLength(storageKey) !== 32) {
        logger$t.throwArgumentError("invalid access list storageKey", "accessList[".concat(addr, ":").concat(index, "]"), storageKey);
      }
      return storageKey.toLowerCase();
    })
  };
}
function accessListify(value) {
  if (Array.isArray(value)) {
    return value.map(function (set, index) {
      if (Array.isArray(set)) {
        if (set.length > 2) {
          logger$t.throwArgumentError("access list expected to be [ address, storageKeys[] ]", "value[".concat(index, "]"), set);
        }
        return accessSetify(set[0], set[1]);
      }
      return accessSetify(set.address, set.storageKeys);
    });
  }
  var result = Object.keys(value).map(function (addr) {
    var storageKeys = value[addr].reduce(function (accum, storageKey) {
      accum[storageKey] = true;
      return accum;
    }, {});
    return accessSetify(addr, Object.keys(storageKeys).sort());
  });
  result.sort(function (a, b) {
    return a.address.localeCompare(b.address);
  });
  return result;
}
function formatAccessList(value) {
  return accessListify(value).map(function (set) {
    return [set.address, set.storageKeys];
  });
}
function _serializeEip1559(transaction, signature) {
  // If there is an explicit gasPrice, make sure it matches the
  // EIP-1559 fees; otherwise they may not understand what they
  // think they are setting in terms of fee.
  if (transaction.gasPrice != null) {
    var gasPrice = BigNumber.from(transaction.gasPrice);
    var maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);
    if (!gasPrice.eq(maxFeePerGas)) {
      logger$t.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
        gasPrice: gasPrice,
        maxFeePerGas: maxFeePerGas
      });
    }
  }
  var fields = [formatNumber(transaction.chainId || 0, "chainId"), formatNumber(transaction.nonce || 0, "nonce"), formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"), formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"), formatNumber(transaction.gasLimit || 0, "gasLimit"), transaction.to != null ? getAddress(transaction.to) : "0x", formatNumber(transaction.value || 0, "value"), transaction.data || "0x", formatAccessList(transaction.accessList || [])];
  if (signature) {
    var sig = splitSignature(signature);
    fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
    fields.push(stripZeros(sig.r));
    fields.push(stripZeros(sig.s));
  }
  return hexConcat(["0x02", encode$2(fields)]);
}
function _serializeEip2930(transaction, signature) {
  var fields = [formatNumber(transaction.chainId || 0, "chainId"), formatNumber(transaction.nonce || 0, "nonce"), formatNumber(transaction.gasPrice || 0, "gasPrice"), formatNumber(transaction.gasLimit || 0, "gasLimit"), transaction.to != null ? getAddress(transaction.to) : "0x", formatNumber(transaction.value || 0, "value"), transaction.data || "0x", formatAccessList(transaction.accessList || [])];
  if (signature) {
    var sig = splitSignature(signature);
    fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
    fields.push(stripZeros(sig.r));
    fields.push(stripZeros(sig.s));
  }
  return hexConcat(["0x01", encode$2(fields)]);
}
// Legacy Transactions and EIP-155
function _serialize(transaction, signature) {
  checkProperties(transaction, allowedTransactionKeys$2);
  var raw = [];
  transactionFields.forEach(function (fieldInfo) {
    var value = transaction[fieldInfo.name] || [];
    var options = {};
    if (fieldInfo.numeric) {
      options.hexPad = "left";
    }
    value = arrayify(hexlify(value, options));
    // Fixed-width field
    if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
      logger$t.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
    }
    // Variable-width (with a maximum)
    if (fieldInfo.maxLength) {
      value = stripZeros(value);
      if (value.length > fieldInfo.maxLength) {
        logger$t.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
      }
    }
    raw.push(hexlify(value));
  });
  var chainId = 0;
  if (transaction.chainId != null) {
    // A chainId was provided; if non-zero we'll use EIP-155
    chainId = transaction.chainId;
    if (typeof chainId !== "number") {
      logger$t.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
    }
  } else if (signature && !isBytesLike(signature) && signature.v > 28) {
    // No chainId provided, but the signature is signing with EIP-155; derive chainId
    chainId = Math.floor((signature.v - 35) / 2);
  }
  // We have an EIP-155 transaction (chainId was specified and non-zero)
  if (chainId !== 0) {
    raw.push(hexlify(chainId)); // @TODO: hexValue?
    raw.push("0x");
    raw.push("0x");
  }
  // Requesting an unsigned transaction
  if (!signature) {
    return encode$2(raw);
  }
  // The splitSignature will ensure the transaction has a recoveryParam in the
  // case that the signTransaction function only adds a v.
  var sig = splitSignature(signature);
  // We pushed a chainId and null r, s on for hashing only; remove those
  var v = 27 + sig.recoveryParam;
  if (chainId !== 0) {
    raw.pop();
    raw.pop();
    raw.pop();
    v += chainId * 2 + 8;
    // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!
    if (sig.v > 28 && sig.v !== v) {
      logger$t.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
    }
  } else if (sig.v !== v) {
    logger$t.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
  }
  raw.push(hexlify(v));
  raw.push(stripZeros(arrayify(sig.r)));
  raw.push(stripZeros(arrayify(sig.s)));
  return encode$2(raw);
}
function serialize$1(transaction, signature) {
  // Legacy and EIP-155 Transactions
  if (transaction.type == null || transaction.type === 0) {
    if (transaction.accessList != null) {
      logger$t.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
    }
    return _serialize(transaction, signature);
  }
  // Typed Transactions (EIP-2718)
  switch (transaction.type) {
    case 1:
      return _serializeEip2930(transaction, signature);
    case 2:
      return _serializeEip1559(transaction, signature);
  }
  return logger$t.throwError("unsupported transaction type: ".concat(transaction.type), Logger.errors.UNSUPPORTED_OPERATION, {
    operation: "serializeTransaction",
    transactionType: transaction.type
  });
}
function _parseEipSignature(tx, fields, serialize) {
  try {
    var recid = handleNumber(fields[0]).toNumber();
    if (recid !== 0 && recid !== 1) {
      throw new Error("bad recid");
    }
    tx.v = recid;
  } catch (error) {
    logger$t.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
  }
  tx.r = hexZeroPad(fields[1], 32);
  tx.s = hexZeroPad(fields[2], 32);
  try {
    var digest = keccak256$1(serialize(tx));
    tx.from = recoverAddress(digest, {
      r: tx.r,
      s: tx.s,
      recoveryParam: tx.v
    });
  } catch (error) {}
}
function _parseEip1559(payload) {
  var transaction = decode$2(payload.slice(1));
  if (transaction.length !== 9 && transaction.length !== 12) {
    logger$t.throwArgumentError("invalid component count for transaction type: 2", "payload", hexlify(payload));
  }
  var maxPriorityFeePerGas = handleNumber(transaction[2]);
  var maxFeePerGas = handleNumber(transaction[3]);
  var tx = {
    type: 2,
    chainId: handleNumber(transaction[0]).toNumber(),
    nonce: handleNumber(transaction[1]).toNumber(),
    maxPriorityFeePerGas: maxPriorityFeePerGas,
    maxFeePerGas: maxFeePerGas,
    gasPrice: null,
    gasLimit: handleNumber(transaction[4]),
    to: handleAddress(transaction[5]),
    value: handleNumber(transaction[6]),
    data: transaction[7],
    accessList: accessListify(transaction[8])
  };
  // Unsigned EIP-1559 Transaction
  if (transaction.length === 9) {
    return tx;
  }
  tx.hash = keccak256$1(payload);
  _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
  return tx;
}
function _parseEip2930(payload) {
  var transaction = decode$2(payload.slice(1));
  if (transaction.length !== 8 && transaction.length !== 11) {
    logger$t.throwArgumentError("invalid component count for transaction type: 1", "payload", hexlify(payload));
  }
  var tx = {
    type: 1,
    chainId: handleNumber(transaction[0]).toNumber(),
    nonce: handleNumber(transaction[1]).toNumber(),
    gasPrice: handleNumber(transaction[2]),
    gasLimit: handleNumber(transaction[3]),
    to: handleAddress(transaction[4]),
    value: handleNumber(transaction[5]),
    data: transaction[6],
    accessList: accessListify(transaction[7])
  };
  // Unsigned EIP-2930 Transaction
  if (transaction.length === 8) {
    return tx;
  }
  tx.hash = keccak256$1(payload);
  _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
  return tx;
}
// Legacy Transactions and EIP-155
function _parse(rawTransaction) {
  var transaction = decode$2(rawTransaction);
  if (transaction.length !== 9 && transaction.length !== 6) {
    logger$t.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
  }
  var tx = {
    nonce: handleNumber(transaction[0]).toNumber(),
    gasPrice: handleNumber(transaction[1]),
    gasLimit: handleNumber(transaction[2]),
    to: handleAddress(transaction[3]),
    value: handleNumber(transaction[4]),
    data: transaction[5],
    chainId: 0
  };
  // Legacy unsigned transaction
  if (transaction.length === 6) {
    return tx;
  }
  try {
    tx.v = BigNumber.from(transaction[6]).toNumber();
  } catch (error) {
    // @TODO: What makes snese to do? The v is too big
    return tx;
  }
  tx.r = hexZeroPad(transaction[7], 32);
  tx.s = hexZeroPad(transaction[8], 32);
  if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {
    // EIP-155 unsigned transaction
    tx.chainId = tx.v;
    tx.v = 0;
  } else {
    // Signed Transaction
    tx.chainId = Math.floor((tx.v - 35) / 2);
    if (tx.chainId < 0) {
      tx.chainId = 0;
    }
    var recoveryParam = tx.v - 27;
    var raw = transaction.slice(0, 6);
    if (tx.chainId !== 0) {
      raw.push(hexlify(tx.chainId));
      raw.push("0x");
      raw.push("0x");
      recoveryParam -= tx.chainId * 2 + 8;
    }
    var digest = keccak256$1(encode$2(raw));
    try {
      tx.from = recoverAddress(digest, {
        r: hexlify(tx.r),
        s: hexlify(tx.s),
        recoveryParam: recoveryParam
      });
    } catch (error) {}
    tx.hash = keccak256$1(rawTransaction);
  }
  tx.type = null;
  return tx;
}
function parse$1(rawTransaction) {
  var payload = arrayify(rawTransaction);
  // Legacy and EIP-155 Transactions
  if (payload[0] > 0x7f) {
    return _parse(payload);
  }
  // Typed Transaction (EIP-2718)
  switch (payload[0]) {
    case 1:
      return _parseEip2930(payload);
    case 2:
      return _parseEip1559(payload);
  }
  return logger$t.throwError("unsupported transaction type: ".concat(payload[0]), Logger.errors.UNSUPPORTED_OPERATION, {
    operation: "parseTransaction",
    transactionType: payload[0]
  });
}

var lib_esm$9 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  get TransactionTypes () { return TransactionTypes; },
  computeAddress: computeAddress,
  recoverAddress: recoverAddress,
  accessListify: accessListify,
  serialize: serialize$1,
  parse: parse$1
});

var version$e = "contracts/5.7.0";

function _createSuper$j(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$j(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$j() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __awaiter$f = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger$s = new Logger(version$e);
///////////////////////////////
var allowedTransactionKeys$1 = {
  chainId: true,
  data: true,
  from: true,
  gasLimit: true,
  gasPrice: true,
  nonce: true,
  to: true,
  value: true,
  type: true,
  accessList: true,
  maxFeePerGas: true,
  maxPriorityFeePerGas: true,
  customData: true,
  ccipReadEnabled: true
};
function resolveName(resolver, nameOrPromise) {
  return __awaiter$f(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
    var name, address;
    return regenerator.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return nameOrPromise;
          case 2:
            name = _context.sent;
            if (typeof name !== "string") {
              logger$s.throwArgumentError("invalid address or ENS name", "name", name);
            }
            // If it is already an address, just use it (after adding checksum)
            _context.prev = 4;
            return _context.abrupt("return", getAddress(name));
          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](4);
          case 10:
            if (!resolver) {
              logger$s.throwError("a provider or signer is needed to resolve ENS names", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "resolveName"
              });
            }
            _context.next = 13;
            return resolver.resolveName(name);
          case 13:
            address = _context.sent;
            if (address == null) {
              logger$s.throwArgumentError("resolver or addr is not configured for ENS name", "name", name);
            }
            return _context.abrupt("return", address);
          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[4, 8]]);
  }));
}
// Recursively replaces ENS names with promises to resolve the name and resolves all properties
function resolveAddresses(resolver, value, paramType) {
  return __awaiter$f(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee2() {
    return regenerator.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!Array.isArray(paramType)) {
              _context2.next = 4;
              break;
            }
            _context2.next = 3;
            return Promise.all(paramType.map(function (paramType, index) {
              return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType.name], paramType);
            }));
          case 3:
            return _context2.abrupt("return", _context2.sent);
          case 4:
            if (!(paramType.type === "address")) {
              _context2.next = 8;
              break;
            }
            _context2.next = 7;
            return resolveName(resolver, value);
          case 7:
            return _context2.abrupt("return", _context2.sent);
          case 8:
            if (!(paramType.type === "tuple")) {
              _context2.next = 12;
              break;
            }
            _context2.next = 11;
            return resolveAddresses(resolver, value, paramType.components);
          case 11:
            return _context2.abrupt("return", _context2.sent);
          case 12:
            if (!(paramType.baseType === "array")) {
              _context2.next = 18;
              break;
            }
            if (Array.isArray(value)) {
              _context2.next = 15;
              break;
            }
            return _context2.abrupt("return", Promise.reject(logger$s.makeError("invalid value for array", Logger.errors.INVALID_ARGUMENT, {
              argument: "value",
              value: value
            })));
          case 15:
            _context2.next = 17;
            return Promise.all(value.map(function (v) {
              return resolveAddresses(resolver, v, paramType.arrayChildren);
            }));
          case 17:
            return _context2.abrupt("return", _context2.sent);
          case 18:
            return _context2.abrupt("return", value);
          case 19:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
}
function populateTransaction(contract, fragment, args) {
  return __awaiter$f(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee4() {
    var _this = this;
    var overrides, resolved, data, tx, ro, intrinsic, bytes, i, roValue, leftovers;
    return regenerator.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            // If an extra argument is given, it is overrides
            overrides = {};
            if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
              overrides = shallowCopy(args.pop());
            }
            // Make sure the parameter count matches
            logger$s.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
            // Populate "from" override (allow promises)
            if (contract.signer) {
              if (overrides.from) {
                // Contracts with a Signer are from the Signer's frame-of-reference;
                // but we allow overriding "from" if it matches the signer
                overrides.from = resolveProperties({
                  override: resolveName(contract.signer, overrides.from),
                  signer: contract.signer.getAddress()
                }).then(function (check) {
                  return __awaiter$f(_this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee3() {
                    return regenerator.wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            if (getAddress(check.signer) !== check.override) {
                              logger$s.throwError("Contract with a Signer cannot override from", Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "overrides.from"
                              });
                            }
                            return _context3.abrupt("return", check.override);
                          case 2:
                          case "end":
                            return _context3.stop();
                        }
                      }
                    }, _callee3);
                  }));
                });
              } else {
                overrides.from = contract.signer.getAddress();
              }
            } else if (overrides.from) {
              overrides.from = resolveName(contract.provider, overrides.from);
              //} else {
              // Contracts without a signer can override "from", and if
              // unspecified the zero address is used
              //overrides.from = AddressZero;
            }
            // Wait for all dependencies to be resolved (prefer the signer over the provider)
            _context4.next = 6;
            return resolveProperties({
              args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
              address: contract.resolvedAddress,
              overrides: resolveProperties(overrides) || {}
            });
          case 6:
            resolved = _context4.sent;
            // The ABI coded transaction
            data = contract["interface"].encodeFunctionData(fragment, resolved.args);
            tx = {
              data: data,
              to: resolved.address
            }; // Resolved Overrides
            ro = resolved.overrides; // Populate simple overrides
            if (ro.nonce != null) {
              tx.nonce = BigNumber.from(ro.nonce).toNumber();
            }
            if (ro.gasLimit != null) {
              tx.gasLimit = BigNumber.from(ro.gasLimit);
            }
            if (ro.gasPrice != null) {
              tx.gasPrice = BigNumber.from(ro.gasPrice);
            }
            if (ro.maxFeePerGas != null) {
              tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);
            }
            if (ro.maxPriorityFeePerGas != null) {
              tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);
            }
            if (ro.from != null) {
              tx.from = ro.from;
            }
            if (ro.type != null) {
              tx.type = ro.type;
            }
            if (ro.accessList != null) {
              tx.accessList = accessListify(ro.accessList);
            }
            // If there was no "gasLimit" override, but the ABI specifies a default, use it
            if (tx.gasLimit == null && fragment.gas != null) {
              // Compute the intrinsic gas cost for this transaction
              // @TODO: This is based on the yellow paper as of Petersburg; this is something
              // we may wish to parameterize in v6 as part of the Network object. Since this
              // is always a non-nil to address, we can ignore G_create, but may wish to add
              // similar logic to the ContractFactory.
              intrinsic = 21000;
              bytes = arrayify(data);
              for (i = 0; i < bytes.length; i++) {
                intrinsic += 4;
                if (bytes[i]) {
                  intrinsic += 64;
                }
              }
              tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);
            }
            // Populate "value" override
            if (ro.value) {
              roValue = BigNumber.from(ro.value);
              if (!roValue.isZero() && !fragment.payable) {
                logger$s.throwError("non-payable method cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "overrides.value",
                  value: overrides.value
                });
              }
              tx.value = roValue;
            }
            if (ro.customData) {
              tx.customData = shallowCopy(ro.customData);
            }
            if (ro.ccipReadEnabled) {
              tx.ccipReadEnabled = !!ro.ccipReadEnabled;
            }
            // Remove the overrides
            delete overrides.nonce;
            delete overrides.gasLimit;
            delete overrides.gasPrice;
            delete overrides.from;
            delete overrides.value;
            delete overrides.type;
            delete overrides.accessList;
            delete overrides.maxFeePerGas;
            delete overrides.maxPriorityFeePerGas;
            delete overrides.customData;
            delete overrides.ccipReadEnabled;
            // Make sure there are no stray overrides, which may indicate a
            // typo or using an unsupported key.
            leftovers = Object.keys(overrides).filter(function (key) {
              return overrides[key] != null;
            });
            if (leftovers.length) {
              logger$s.throwError("cannot override ".concat(leftovers.map(function (l) {
                return JSON.stringify(l);
              }).join(",")), Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "overrides",
                overrides: leftovers
              });
            }
            return _context4.abrupt("return", tx);
          case 36:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
}
function buildPopulate(contract, fragment) {
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return populateTransaction(contract, fragment, args);
  };
}
function buildEstimate(contract, fragment) {
  var signerOrProvider = contract.signer || contract.provider;
  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return __awaiter$f(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee5() {
      var tx;
      return regenerator.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (!signerOrProvider) {
                logger$s.throwError("estimate require a provider or signer", Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "estimateGas"
                });
              }
              _context5.next = 3;
              return populateTransaction(contract, fragment, args);
            case 3:
              tx = _context5.sent;
              _context5.next = 6;
              return signerOrProvider.estimateGas(tx);
            case 6:
              return _context5.abrupt("return", _context5.sent);
            case 7:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));
  };
}
function addContractWait(contract, tx) {
  var wait = tx.wait.bind(tx);
  tx.wait = function (confirmations) {
    return wait(confirmations).then(function (receipt) {
      receipt.events = receipt.logs.map(function (log) {
        var event = deepCopy(log);
        var parsed = null;
        try {
          parsed = contract["interface"].parseLog(log);
        } catch (e) {}
        // Successfully parsed the event log; include it
        if (parsed) {
          event.args = parsed.args;
          event.decode = function (data, topics) {
            return contract["interface"].decodeEventLog(parsed.eventFragment, data, topics);
          };
          event.event = parsed.name;
          event.eventSignature = parsed.signature;
        }
        // Useful operations
        event.removeListener = function () {
          return contract.provider;
        };
        event.getBlock = function () {
          return contract.provider.getBlock(receipt.blockHash);
        };
        event.getTransaction = function () {
          return contract.provider.getTransaction(receipt.transactionHash);
        };
        event.getTransactionReceipt = function () {
          return Promise.resolve(receipt);
        };
        return event;
      });
      return receipt;
    });
  };
}
function buildCall(contract, fragment, collapseSimple) {
  var signerOrProvider = contract.signer || contract.provider;
  return function () {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return __awaiter$f(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee6() {
      var blockTag, overrides, tx, result, value;
      return regenerator.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              // Extract the "blockTag" override if present
              blockTag = undefined;
              if (!(args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object")) {
                _context6.next = 9;
                break;
              }
              overrides = shallowCopy(args.pop());
              if (!(overrides.blockTag != null)) {
                _context6.next = 7;
                break;
              }
              _context6.next = 6;
              return overrides.blockTag;
            case 6:
              blockTag = _context6.sent;
            case 7:
              delete overrides.blockTag;
              args.push(overrides);
            case 9:
              if (!(contract.deployTransaction != null)) {
                _context6.next = 12;
                break;
              }
              _context6.next = 12;
              return contract._deployed(blockTag);
            case 12:
              _context6.next = 14;
              return populateTransaction(contract, fragment, args);
            case 14:
              tx = _context6.sent;
              _context6.next = 17;
              return signerOrProvider.call(tx, blockTag);
            case 17:
              result = _context6.sent;
              _context6.prev = 18;
              value = contract["interface"].decodeFunctionResult(fragment, result);
              if (collapseSimple && fragment.outputs.length === 1) {
                value = value[0];
              }
              return _context6.abrupt("return", value);
            case 24:
              _context6.prev = 24;
              _context6.t0 = _context6["catch"](18);
              if (_context6.t0.code === Logger.errors.CALL_EXCEPTION) {
                _context6.t0.address = contract.address;
                _context6.t0.args = args;
                _context6.t0.transaction = tx;
              }
              throw _context6.t0;
            case 28:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, null, [[18, 24]]);
    }));
  };
}
function buildSend(contract, fragment) {
  return function () {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    return __awaiter$f(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee7() {
      var txRequest, tx;
      return regenerator.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (!contract.signer) {
                logger$s.throwError("sending a transaction requires a signer", Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "sendTransaction"
                });
              }
              // If the contract was just deployed, wait until it is mined
              if (!(contract.deployTransaction != null)) {
                _context7.next = 4;
                break;
              }
              _context7.next = 4;
              return contract._deployed();
            case 4:
              _context7.next = 6;
              return populateTransaction(contract, fragment, args);
            case 6:
              txRequest = _context7.sent;
              _context7.next = 9;
              return contract.signer.sendTransaction(txRequest);
            case 9:
              tx = _context7.sent;
              // Tweak the tx.wait so the receipt has extra properties
              addContractWait(contract, tx);
              return _context7.abrupt("return", tx);
            case 12:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));
  };
}
function buildDefault(contract, fragment, collapseSimple) {
  if (fragment.constant) {
    return buildCall(contract, fragment, collapseSimple);
  }
  return buildSend(contract, fragment);
}
function getEventTag$1(filter) {
  if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
    return "*";
  }
  return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map(function (topic) {
    if (Array.isArray(topic)) {
      return topic.join("|");
    }
    return topic;
  }).join(":") : "");
}
var RunningEvent = /*#__PURE__*/function () {
  function RunningEvent(tag, filter) {
    _classCallCheck(this, RunningEvent);
    defineReadOnly(this, "tag", tag);
    defineReadOnly(this, "filter", filter);
    this._listeners = [];
  }
  _createClass(RunningEvent, [{
    key: "addListener",
    value: function addListener(listener, once) {
      this._listeners.push({
        listener: listener,
        once: once
      });
    }
  }, {
    key: "removeListener",
    value: function removeListener(listener) {
      var done = false;
      this._listeners = this._listeners.filter(function (item) {
        if (done || item.listener !== listener) {
          return true;
        }
        done = true;
        return false;
      });
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners() {
      this._listeners = [];
    }
  }, {
    key: "listeners",
    value: function listeners() {
      return this._listeners.map(function (i) {
        return i.listener;
      });
    }
  }, {
    key: "listenerCount",
    value: function listenerCount() {
      return this._listeners.length;
    }
  }, {
    key: "run",
    value: function run(args) {
      var _this2 = this;
      var listenerCount = this.listenerCount();
      this._listeners = this._listeners.filter(function (item) {
        var argsCopy = args.slice();
        // Call the callback in the next event loop
        setTimeout(function () {
          item.listener.apply(_this2, argsCopy);
        }, 0);
        // Reschedule it if it not "once"
        return !item.once;
      });
      return listenerCount;
    }
  }, {
    key: "prepareEvent",
    value: function prepareEvent(event) {}
    // Returns the array that will be applied to an emit
  }, {
    key: "getEmit",
    value: function getEmit(event) {
      return [event];
    }
  }]);
  return RunningEvent;
}();
var ErrorRunningEvent = /*#__PURE__*/function (_RunningEvent) {
  _inherits(ErrorRunningEvent, _RunningEvent);
  var _super = _createSuper$j(ErrorRunningEvent);
  function ErrorRunningEvent() {
    _classCallCheck(this, ErrorRunningEvent);
    return _super.call(this, "error", null);
  }
  return _createClass(ErrorRunningEvent);
}(RunningEvent); // @TODO Fragment should inherit Wildcard? and just override getEmit?
//       or have a common abstract super class, with enough constructor
//       options to configure both.
// A Fragment Event will populate all the properties that Wildcard
// will, and additionally dereference the arguments when emitting
var FragmentRunningEvent = /*#__PURE__*/function (_RunningEvent2) {
  _inherits(FragmentRunningEvent, _RunningEvent2);
  var _super2 = _createSuper$j(FragmentRunningEvent);
  function FragmentRunningEvent(address, contractInterface, fragment, topics) {
    var _this3;
    _classCallCheck(this, FragmentRunningEvent);
    var filter = {
      address: address
    };
    var topic = contractInterface.getEventTopic(fragment);
    if (topics) {
      if (topic !== topics[0]) {
        logger$s.throwArgumentError("topic mismatch", "topics", topics);
      }
      filter.topics = topics.slice();
    } else {
      filter.topics = [topic];
    }
    _this3 = _super2.call(this, getEventTag$1(filter), filter);
    defineReadOnly(_assertThisInitialized(_this3), "address", address);
    defineReadOnly(_assertThisInitialized(_this3), "interface", contractInterface);
    defineReadOnly(_assertThisInitialized(_this3), "fragment", fragment);
    return _this3;
  }
  _createClass(FragmentRunningEvent, [{
    key: "prepareEvent",
    value: function prepareEvent(event) {
      var _this4 = this;
      _get(_getPrototypeOf(FragmentRunningEvent.prototype), "prepareEvent", this).call(this, event);
      event.event = this.fragment.name;
      event.eventSignature = this.fragment.format();
      event.decode = function (data, topics) {
        return _this4["interface"].decodeEventLog(_this4.fragment, data, topics);
      };
      try {
        event.args = this["interface"].decodeEventLog(this.fragment, event.data, event.topics);
      } catch (error) {
        event.args = null;
        event.decodeError = error;
      }
    }
  }, {
    key: "getEmit",
    value: function getEmit(event) {
      var errors = checkResultErrors(event.args);
      if (errors.length) {
        throw errors[0].error;
      }
      var args = (event.args || []).slice();
      args.push(event);
      return args;
    }
  }]);
  return FragmentRunningEvent;
}(RunningEvent); // A Wildcard Event will attempt to populate:
//  - event            The name of the event name
//  - eventSignature   The full signature of the event
//  - decode           A function to decode data and topics
//  - args             The decoded data and topics
var WildcardRunningEvent = /*#__PURE__*/function (_RunningEvent3) {
  _inherits(WildcardRunningEvent, _RunningEvent3);
  var _super3 = _createSuper$j(WildcardRunningEvent);
  function WildcardRunningEvent(address, contractInterface) {
    var _this5;
    _classCallCheck(this, WildcardRunningEvent);
    _this5 = _super3.call(this, "*", {
      address: address
    });
    defineReadOnly(_assertThisInitialized(_this5), "address", address);
    defineReadOnly(_assertThisInitialized(_this5), "interface", contractInterface);
    return _this5;
  }
  _createClass(WildcardRunningEvent, [{
    key: "prepareEvent",
    value: function prepareEvent(event) {
      var _this6 = this;
      _get(_getPrototypeOf(WildcardRunningEvent.prototype), "prepareEvent", this).call(this, event);
      try {
        var parsed = this["interface"].parseLog(event);
        event.event = parsed.name;
        event.eventSignature = parsed.signature;
        event.decode = function (data, topics) {
          return _this6["interface"].decodeEventLog(parsed.eventFragment, data, topics);
        };
        event.args = parsed.args;
      } catch (error) {
        // No matching event
      }
    }
  }]);
  return WildcardRunningEvent;
}(RunningEvent);
var BaseContract = /*#__PURE__*/function () {
  function BaseContract(addressOrName, contractInterface, signerOrProvider) {
    var _this7 = this;
    _classCallCheck(this, BaseContract);
    // @TODO: Maybe still check the addressOrName looks like a valid address or name?
    //address = getAddress(address);
    defineReadOnly(this, "interface", getStatic(this instanceof BaseContract ? this.constructor : void 0, "getInterface")(contractInterface));
    if (signerOrProvider == null) {
      defineReadOnly(this, "provider", null);
      defineReadOnly(this, "signer", null);
    } else if (Signer.isSigner(signerOrProvider)) {
      defineReadOnly(this, "provider", signerOrProvider.provider || null);
      defineReadOnly(this, "signer", signerOrProvider);
    } else if (Provider.isProvider(signerOrProvider)) {
      defineReadOnly(this, "provider", signerOrProvider);
      defineReadOnly(this, "signer", null);
    } else {
      logger$s.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
    }
    defineReadOnly(this, "callStatic", {});
    defineReadOnly(this, "estimateGas", {});
    defineReadOnly(this, "functions", {});
    defineReadOnly(this, "populateTransaction", {});
    defineReadOnly(this, "filters", {});
    {
      var uniqueFilters = {};
      Object.keys(this["interface"].events).forEach(function (eventSignature) {
        var event = _this7["interface"].events[eventSignature];
        defineReadOnly(_this7.filters, eventSignature, function () {
          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
          }
          return {
            address: _this7.address,
            topics: _this7["interface"].encodeFilterTopics(event, args)
          };
        });
        if (!uniqueFilters[event.name]) {
          uniqueFilters[event.name] = [];
        }
        uniqueFilters[event.name].push(eventSignature);
      });
      Object.keys(uniqueFilters).forEach(function (name) {
        var filters = uniqueFilters[name];
        if (filters.length === 1) {
          defineReadOnly(_this7.filters, name, _this7.filters[filters[0]]);
        } else {
          logger$s.warn("Duplicate definition of ".concat(name, " (").concat(filters.join(", "), ")"));
        }
      });
    }
    defineReadOnly(this, "_runningEvents", {});
    defineReadOnly(this, "_wrappedEmits", {});
    if (addressOrName == null) {
      logger$s.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
    }
    defineReadOnly(this, "address", addressOrName);
    if (this.provider) {
      defineReadOnly(this, "resolvedAddress", resolveName(this.provider, addressOrName));
    } else {
      try {
        defineReadOnly(this, "resolvedAddress", Promise.resolve(getAddress(addressOrName)));
      } catch (error) {
        // Without a provider, we cannot use ENS names
        logger$s.throwError("provider is required to use ENS name as contract address", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "new Contract"
        });
      }
    }
    // Swallow bad ENS names to prevent Unhandled Exceptions
    this.resolvedAddress["catch"](function (e) {});
    var uniqueNames = {};
    var uniqueSignatures = {};
    Object.keys(this["interface"].functions).forEach(function (signature) {
      var fragment = _this7["interface"].functions[signature];
      // Check that the signature is unique; if not the ABI generation has
      // not been cleaned or may be incorrectly generated
      if (uniqueSignatures[signature]) {
        logger$s.warn("Duplicate ABI entry for ".concat(JSON.stringify(signature)));
        return;
      }
      uniqueSignatures[signature] = true;
      // Track unique names; we only expose bare named functions if they
      // are ambiguous
      {
        var name = fragment.name;
        if (!uniqueNames["%".concat(name)]) {
          uniqueNames["%".concat(name)] = [];
        }
        uniqueNames["%".concat(name)].push(signature);
      }
      if (_this7[signature] == null) {
        defineReadOnly(_this7, signature, buildDefault(_this7, fragment, true));
      }
      // We do not collapse simple calls on this bucket, which allows
      // frameworks to safely use this without introspection as well as
      // allows decoding error recovery.
      if (_this7.functions[signature] == null) {
        defineReadOnly(_this7.functions, signature, buildDefault(_this7, fragment, false));
      }
      if (_this7.callStatic[signature] == null) {
        defineReadOnly(_this7.callStatic, signature, buildCall(_this7, fragment, true));
      }
      if (_this7.populateTransaction[signature] == null) {
        defineReadOnly(_this7.populateTransaction, signature, buildPopulate(_this7, fragment));
      }
      if (_this7.estimateGas[signature] == null) {
        defineReadOnly(_this7.estimateGas, signature, buildEstimate(_this7, fragment));
      }
    });
    Object.keys(uniqueNames).forEach(function (name) {
      // Ambiguous names to not get attached as bare names
      var signatures = uniqueNames[name];
      if (signatures.length > 1) {
        return;
      }
      // Strip off the leading "%" used for prototype protection
      name = name.substring(1);
      var signature = signatures[0];
      // If overwriting a member property that is null, swallow the error
      try {
        if (_this7[name] == null) {
          defineReadOnly(_this7, name, _this7[signature]);
        }
      } catch (e) {}
      if (_this7.functions[name] == null) {
        defineReadOnly(_this7.functions, name, _this7.functions[signature]);
      }
      if (_this7.callStatic[name] == null) {
        defineReadOnly(_this7.callStatic, name, _this7.callStatic[signature]);
      }
      if (_this7.populateTransaction[name] == null) {
        defineReadOnly(_this7.populateTransaction, name, _this7.populateTransaction[signature]);
      }
      if (_this7.estimateGas[name] == null) {
        defineReadOnly(_this7.estimateGas, name, _this7.estimateGas[signature]);
      }
    });
  }
  _createClass(BaseContract, [{
    key: "deployed",
    value:
    // @TODO: Allow timeout?
    function deployed() {
      return this._deployed();
    }
  }, {
    key: "_deployed",
    value: function _deployed(blockTag) {
      var _this8 = this;
      if (!this._deployedPromise) {
        // If we were just deployed, we know the transaction we should occur in
        if (this.deployTransaction) {
          this._deployedPromise = this.deployTransaction.wait().then(function () {
            return _this8;
          });
        } else {
          // @TODO: Once we allow a timeout to be passed in, we will wait
          // up to that many blocks for getCode
          // Otherwise, poll for our code to be deployed
          this._deployedPromise = this.provider.getCode(this.address, blockTag).then(function (code) {
            if (code === "0x") {
              logger$s.throwError("contract not deployed", Logger.errors.UNSUPPORTED_OPERATION, {
                contractAddress: _this8.address,
                operation: "getDeployed"
              });
            }
            return _this8;
          });
        }
      }
      return this._deployedPromise;
    }
    // @TODO:
    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>
    // @TODO:
    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>
  }, {
    key: "fallback",
    value: function fallback(overrides) {
      var _this9 = this;
      if (!this.signer) {
        logger$s.throwError("sending a transactions require a signer", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "sendTransaction(fallback)"
        });
      }
      var tx = shallowCopy(overrides || {});
      ["from", "to"].forEach(function (key) {
        if (tx[key] == null) {
          return;
        }
        logger$s.throwError("cannot override " + key, Logger.errors.UNSUPPORTED_OPERATION, {
          operation: key
        });
      });
      tx.to = this.resolvedAddress;
      return this.deployed().then(function () {
        return _this9.signer.sendTransaction(tx);
      });
    }
    // Reconnect to a different signer or provider
  }, {
    key: "connect",
    value: function connect(signerOrProvider) {
      if (typeof signerOrProvider === "string") {
        signerOrProvider = new VoidSigner(signerOrProvider, this.provider);
      }
      var contract = new this.constructor(this.address, this["interface"], signerOrProvider);
      if (this.deployTransaction) {
        defineReadOnly(contract, "deployTransaction", this.deployTransaction);
      }
      return contract;
    }
    // Re-attach to a different on-chain instance of this contract
  }, {
    key: "attach",
    value: function attach(addressOrName) {
      return new this.constructor(addressOrName, this["interface"], this.signer || this.provider);
    }
  }, {
    key: "_normalizeRunningEvent",
    value: function _normalizeRunningEvent(runningEvent) {
      // Already have an instance of this event running; we can re-use it
      if (this._runningEvents[runningEvent.tag]) {
        return this._runningEvents[runningEvent.tag];
      }
      return runningEvent;
    }
  }, {
    key: "_getRunningEvent",
    value: function _getRunningEvent(eventName) {
      if (typeof eventName === "string") {
        // Listen for "error" events (if your contract has an error event, include
        // the full signature to bypass this special event keyword)
        if (eventName === "error") {
          return this._normalizeRunningEvent(new ErrorRunningEvent());
        }
        // Listen for any event that is registered
        if (eventName === "event") {
          return this._normalizeRunningEvent(new RunningEvent("event", null));
        }
        // Listen for any event
        if (eventName === "*") {
          return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this["interface"]));
        }
        // Get the event Fragment (throws if ambiguous/unknown event)
        var fragment = this["interface"].getEvent(eventName);
        return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this["interface"], fragment));
      }
      // We have topics to filter by...
      if (eventName.topics && eventName.topics.length > 0) {
        // Is it a known topichash? (throws if no matching topichash)
        try {
          var topic = eventName.topics[0];
          if (typeof topic !== "string") {
            throw new Error("invalid topic"); // @TODO: May happen for anonymous events
          }

          var _fragment = this["interface"].getEvent(topic);
          return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this["interface"], _fragment, eventName.topics));
        } catch (error) {}
        // Filter by the unknown topichash
        var filter = {
          address: this.address,
          topics: eventName.topics
        };
        return this._normalizeRunningEvent(new RunningEvent(getEventTag$1(filter), filter));
      }
      return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this["interface"]));
    }
  }, {
    key: "_checkRunningEvents",
    value: function _checkRunningEvents(runningEvent) {
      if (runningEvent.listenerCount() === 0) {
        delete this._runningEvents[runningEvent.tag];
        // If we have a poller for this, remove it
        var emit = this._wrappedEmits[runningEvent.tag];
        if (emit && runningEvent.filter) {
          this.provider.off(runningEvent.filter, emit);
          delete this._wrappedEmits[runningEvent.tag];
        }
      }
    }
    // Subclasses can override this to gracefully recover
    // from parse errors if they wish
  }, {
    key: "_wrapEvent",
    value: function _wrapEvent(runningEvent, log, listener) {
      var _this10 = this;
      var event = deepCopy(log);
      event.removeListener = function () {
        if (!listener) {
          return;
        }
        runningEvent.removeListener(listener);
        _this10._checkRunningEvents(runningEvent);
      };
      event.getBlock = function () {
        return _this10.provider.getBlock(log.blockHash);
      };
      event.getTransaction = function () {
        return _this10.provider.getTransaction(log.transactionHash);
      };
      event.getTransactionReceipt = function () {
        return _this10.provider.getTransactionReceipt(log.transactionHash);
      };
      // This may throw if the topics and data mismatch the signature
      runningEvent.prepareEvent(event);
      return event;
    }
  }, {
    key: "_addEventListener",
    value: function _addEventListener(runningEvent, listener, once) {
      var _this11 = this;
      if (!this.provider) {
        logger$s.throwError("events require a provider or a signer with a provider", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "once"
        });
      }
      runningEvent.addListener(listener, once);
      // Track this running event and its listeners (may already be there; but no hard in updating)
      this._runningEvents[runningEvent.tag] = runningEvent;
      // If we are not polling the provider, start polling
      if (!this._wrappedEmits[runningEvent.tag]) {
        var wrappedEmit = function wrappedEmit(log) {
          var event = _this11._wrapEvent(runningEvent, log, listener);
          // Try to emit the result for the parameterized event...
          if (event.decodeError == null) {
            try {
              var args = runningEvent.getEmit(event);
              _this11.emit.apply(_this11, [runningEvent.filter].concat(_toConsumableArray(args)));
            } catch (error) {
              event.decodeError = error.error;
            }
          }
          // Always emit "event" for fragment-base events
          if (runningEvent.filter != null) {
            _this11.emit("event", event);
          }
          // Emit "error" if there was an error
          if (event.decodeError != null) {
            _this11.emit("error", event.decodeError, event);
          }
        };
        this._wrappedEmits[runningEvent.tag] = wrappedEmit;
        // Special events, like "error" do not have a filter
        if (runningEvent.filter != null) {
          this.provider.on(runningEvent.filter, wrappedEmit);
        }
      }
    }
  }, {
    key: "queryFilter",
    value: function queryFilter(event, fromBlockOrBlockhash, toBlock) {
      var _this12 = this;
      var runningEvent = this._getRunningEvent(event);
      var filter = shallowCopy(runningEvent.filter);
      if (typeof fromBlockOrBlockhash === "string" && isHexString$1(fromBlockOrBlockhash, 32)) {
        if (toBlock != null) {
          logger$s.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
        }
        filter.blockHash = fromBlockOrBlockhash;
      } else {
        filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;
        filter.toBlock = toBlock != null ? toBlock : "latest";
      }
      return this.provider.getLogs(filter).then(function (logs) {
        return logs.map(function (log) {
          return _this12._wrapEvent(runningEvent, log, null);
        });
      });
    }
  }, {
    key: "on",
    value: function on(event, listener) {
      this._addEventListener(this._getRunningEvent(event), listener, false);
      return this;
    }
  }, {
    key: "once",
    value: function once(event, listener) {
      this._addEventListener(this._getRunningEvent(event), listener, true);
      return this;
    }
  }, {
    key: "emit",
    value: function emit(eventName) {
      if (!this.provider) {
        return false;
      }
      var runningEvent = this._getRunningEvent(eventName);
      for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
        args[_key6 - 1] = arguments[_key6];
      }
      var result = runningEvent.run(args) > 0;
      // May have drained all the "once" events; check for living events
      this._checkRunningEvents(runningEvent);
      return result;
    }
  }, {
    key: "listenerCount",
    value: function listenerCount(eventName) {
      var _this13 = this;
      if (!this.provider) {
        return 0;
      }
      if (eventName == null) {
        return Object.keys(this._runningEvents).reduce(function (accum, key) {
          return accum + _this13._runningEvents[key].listenerCount();
        }, 0);
      }
      return this._getRunningEvent(eventName).listenerCount();
    }
  }, {
    key: "listeners",
    value: function listeners(eventName) {
      var _this14 = this;
      if (!this.provider) {
        return [];
      }
      if (eventName == null) {
        var _ret = function () {
          var result = [];
          for (var tag in _this14._runningEvents) {
            _this14._runningEvents[tag].listeners().forEach(function (listener) {
              result.push(listener);
            });
          }
          return {
            v: result
          };
        }();
        if (typeof _ret === "object") return _ret.v;
      }
      return this._getRunningEvent(eventName).listeners();
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners(eventName) {
      if (!this.provider) {
        return this;
      }
      if (eventName == null) {
        for (var tag in this._runningEvents) {
          var _runningEvent = this._runningEvents[tag];
          _runningEvent.removeAllListeners();
          this._checkRunningEvents(_runningEvent);
        }
        return this;
      }
      // Delete any listeners
      var runningEvent = this._getRunningEvent(eventName);
      runningEvent.removeAllListeners();
      this._checkRunningEvents(runningEvent);
      return this;
    }
  }, {
    key: "off",
    value: function off(eventName, listener) {
      if (!this.provider) {
        return this;
      }
      var runningEvent = this._getRunningEvent(eventName);
      runningEvent.removeListener(listener);
      this._checkRunningEvents(runningEvent);
      return this;
    }
  }, {
    key: "removeListener",
    value: function removeListener(eventName, listener) {
      return this.off(eventName, listener);
    }
  }], [{
    key: "getContractAddress",
    value: function getContractAddress$1(transaction) {
      return getContractAddress(transaction);
    }
  }, {
    key: "getInterface",
    value: function getInterface(contractInterface) {
      if (Interface.isInterface(contractInterface)) {
        return contractInterface;
      }
      return new Interface(contractInterface);
    }
  }, {
    key: "isIndexed",
    value: function isIndexed(value) {
      return Indexed.isIndexed(value);
    }
  }]);
  return BaseContract;
}();
var Contract = /*#__PURE__*/function (_BaseContract) {
  _inherits(Contract, _BaseContract);
  var _super4 = _createSuper$j(Contract);
  function Contract() {
    _classCallCheck(this, Contract);
    return _super4.apply(this, arguments);
  }
  return _createClass(Contract);
}(BaseContract);
var ContractFactory = /*#__PURE__*/function () {
  function ContractFactory(contractInterface, bytecode, signer) {
    _classCallCheck(this, ContractFactory);
    var bytecodeHex = null;
    if (typeof bytecode === "string") {
      bytecodeHex = bytecode;
    } else if (isBytes(bytecode)) {
      bytecodeHex = hexlify(bytecode);
    } else if (bytecode && typeof bytecode.object === "string") {
      // Allow the bytecode object from the Solidity compiler
      bytecodeHex = bytecode.object;
    } else {
      // Crash in the next verification step
      bytecodeHex = "!";
    }
    // Make sure it is 0x prefixed
    if (bytecodeHex.substring(0, 2) !== "0x") {
      bytecodeHex = "0x" + bytecodeHex;
    }
    // Make sure the final result is valid bytecode
    if (!isHexString$1(bytecodeHex) || bytecodeHex.length % 2) {
      logger$s.throwArgumentError("invalid bytecode", "bytecode", bytecode);
    }
    // If we have a signer, make sure it is valid
    if (signer && !Signer.isSigner(signer)) {
      logger$s.throwArgumentError("invalid signer", "signer", signer);
    }
    defineReadOnly(this, "bytecode", bytecodeHex);
    defineReadOnly(this, "interface", getStatic(this instanceof ContractFactory ? this.constructor : void 0, "getInterface")(contractInterface));
    defineReadOnly(this, "signer", signer || null);
  }
  // @TODO: Future; rename to populateTransaction?
  _createClass(ContractFactory, [{
    key: "getDeployTransaction",
    value: function getDeployTransaction() {
      var tx = {};
      // If we have 1 additional argument, we allow transaction overrides
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }
      if (args.length === this["interface"].deploy.inputs.length + 1 && typeof args[args.length - 1] === "object") {
        tx = shallowCopy(args.pop());
        for (var key in tx) {
          if (!allowedTransactionKeys$1[key]) {
            throw new Error("unknown transaction override " + key);
          }
        }
      }
      // Do not allow these to be overridden in a deployment transaction
      ["data", "from", "to"].forEach(function (key) {
        if (tx[key] == null) {
          return;
        }
        logger$s.throwError("cannot override " + key, Logger.errors.UNSUPPORTED_OPERATION, {
          operation: key
        });
      });
      if (tx.value) {
        var value = BigNumber.from(tx.value);
        if (!value.isZero() && !this["interface"].deploy.payable) {
          logger$s.throwError("non-payable constructor cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "overrides.value",
            value: tx.value
          });
        }
      }
      // Make sure the call matches the constructor signature
      logger$s.checkArgumentCount(args.length, this["interface"].deploy.inputs.length, " in Contract constructor");
      // Set the data to the bytecode + the encoded constructor arguments
      tx.data = hexlify(concat([this.bytecode, this["interface"].encodeDeploy(args)]));
      return tx;
    }
  }, {
    key: "deploy",
    value: function deploy() {
      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        args[_key8] = arguments[_key8];
      }
      return __awaiter$f(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee8() {
        var overrides, params, unsignedTx, tx, address, contract;
        return regenerator.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                overrides = {}; // If 1 extra parameter was passed in, it contains overrides
                if (args.length === this["interface"].deploy.inputs.length + 1) {
                  overrides = args.pop();
                }
                // Make sure the call matches the constructor signature
                logger$s.checkArgumentCount(args.length, this["interface"].deploy.inputs.length, " in Contract constructor");
                // Resolve ENS names and promises in the arguments
                _context8.next = 5;
                return resolveAddresses(this.signer, args, this["interface"].deploy.inputs);
              case 5:
                params = _context8.sent;
                params.push(overrides);
                // Get the deployment transaction (with optional overrides)
                unsignedTx = this.getDeployTransaction.apply(this, _toConsumableArray(params)); // Send the deployment transaction
                _context8.next = 10;
                return this.signer.sendTransaction(unsignedTx);
              case 10:
                tx = _context8.sent;
                address = getStatic(this.constructor, "getContractAddress")(tx);
                contract = getStatic(this.constructor, "getContract")(address, this["interface"], this.signer); // Add the modified wait that wraps events
                addContractWait(contract, tx);
                defineReadOnly(contract, "deployTransaction", tx);
                return _context8.abrupt("return", contract);
              case 16:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));
    }
  }, {
    key: "attach",
    value: function attach(address) {
      return this.constructor.getContract(address, this["interface"], this.signer);
    }
  }, {
    key: "connect",
    value: function connect(signer) {
      return new this.constructor(this["interface"], this.bytecode, signer);
    }
  }], [{
    key: "fromSolidity",
    value: function fromSolidity(compilerOutput, signer) {
      if (compilerOutput == null) {
        logger$s.throwError("missing compiler output", Logger.errors.MISSING_ARGUMENT, {
          argument: "compilerOutput"
        });
      }
      if (typeof compilerOutput === "string") {
        compilerOutput = JSON.parse(compilerOutput);
      }
      var abi = compilerOutput.abi;
      var bytecode = null;
      if (compilerOutput.bytecode) {
        bytecode = compilerOutput.bytecode;
      } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
        bytecode = compilerOutput.evm.bytecode;
      }
      return new this(abi, bytecode, signer);
    }
  }, {
    key: "getInterface",
    value: function getInterface(contractInterface) {
      return Contract.getInterface(contractInterface);
    }
  }, {
    key: "getContractAddress",
    value: function getContractAddress$1(tx) {
      return getContractAddress(tx);
    }
  }, {
    key: "getContract",
    value: function getContract(address, contractInterface, signer) {
      return new Contract(address, contractInterface, signer);
    }
  }]);
  return ContractFactory;
}();

var BaseX = /*#__PURE__*/function () {
  function BaseX(alphabet) {
    _classCallCheck(this, BaseX);
    defineReadOnly(this, "alphabet", alphabet);
    defineReadOnly(this, "base", alphabet.length);
    defineReadOnly(this, "_alphabetMap", {});
    defineReadOnly(this, "_leader", alphabet.charAt(0));
    // pre-compute lookup table
    for (var i = 0; i < alphabet.length; i++) {
      this._alphabetMap[alphabet.charAt(i)] = i;
    }
  }
  _createClass(BaseX, [{
    key: "encode",
    value: function encode(value) {
      var source = arrayify(value);
      if (source.length === 0) {
        return "";
      }
      var digits = [0];
      for (var i = 0; i < source.length; ++i) {
        var carry = source[i];
        for (var j = 0; j < digits.length; ++j) {
          carry += digits[j] << 8;
          digits[j] = carry % this.base;
          carry = carry / this.base | 0;
        }
        while (carry > 0) {
          digits.push(carry % this.base);
          carry = carry / this.base | 0;
        }
      }
      var string = "";
      // deal with leading zeros
      for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) {
        string += this._leader;
      }
      // convert digits to a string
      for (var q = digits.length - 1; q >= 0; --q) {
        string += this.alphabet[digits[q]];
      }
      return string;
    }
  }, {
    key: "decode",
    value: function decode(value) {
      if (typeof value !== "string") {
        throw new TypeError("Expected String");
      }
      var bytes = [];
      if (value.length === 0) {
        return new Uint8Array(bytes);
      }
      bytes.push(0);
      for (var i = 0; i < value.length; i++) {
        var _byte = this._alphabetMap[value[i]];
        if (_byte === undefined) {
          throw new Error("Non-base" + this.base + " character");
        }
        var carry = _byte;
        for (var j = 0; j < bytes.length; ++j) {
          carry += bytes[j] * this.base;
          bytes[j] = carry & 0xff;
          carry >>= 8;
        }
        while (carry > 0) {
          bytes.push(carry & 0xff);
          carry >>= 8;
        }
      }
      // deal with leading zeros
      for (var k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
        bytes.push(0);
      }
      return arrayify(new Uint8Array(bytes.reverse()));
    }
  }]);
  return BaseX;
}();
var Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
var Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
//console.log(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj"))
//console.log(Base58.encode(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj")))

var lib_esm$8 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  BaseX: BaseX,
  Base32: Base32,
  Base58: Base58
});

var SupportedAlgorithm;
(function (SupportedAlgorithm) {
  SupportedAlgorithm["sha256"] = "sha256";
  SupportedAlgorithm["sha512"] = "sha512";
})(SupportedAlgorithm || (SupportedAlgorithm = {}));

var version$d = "sha2/5.7.0";

var logger$r = new Logger(version$d);
function ripemd160(data) {
  return "0x" + hash$1.ripemd160().update(arrayify(data)).digest("hex");
}
function sha256$1(data) {
  return "0x" + hash$1.sha256().update(arrayify(data)).digest("hex");
}
function sha512(data) {
  return "0x" + hash$1.sha512().update(arrayify(data)).digest("hex");
}
function computeHmac(algorithm, key, data) {
  if (!SupportedAlgorithm[algorithm]) {
    logger$r.throwError("unsupported algorithm " + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "hmac",
      algorithm: algorithm
    });
  }
  return "0x" + hash$1.hmac(hash$1[algorithm], arrayify(key)).update(arrayify(data)).digest("hex");
}

var lib_esm$7 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  computeHmac: computeHmac,
  ripemd160: ripemd160,
  sha256: sha256$1,
  sha512: sha512,
  get SupportedAlgorithm () { return SupportedAlgorithm; }
});

function pbkdf2$1(password, salt, iterations, keylen, hashAlgorithm) {
  password = arrayify(password);
  salt = arrayify(salt);
  var hLen;
  var l = 1;
  var DK = new Uint8Array(keylen);
  var block1 = new Uint8Array(salt.length + 4);
  block1.set(salt);
  //salt.copy(block1, 0, 0, salt.length)
  var r;
  var T;
  for (var i = 1; i <= l; i++) {
    //block1.writeUInt32BE(i, salt.length)
    block1[salt.length] = i >> 24 & 0xff;
    block1[salt.length + 1] = i >> 16 & 0xff;
    block1[salt.length + 2] = i >> 8 & 0xff;
    block1[salt.length + 3] = i & 0xff;
    //let U = createHmac(password).update(block1).digest();
    var U = arrayify(computeHmac(hashAlgorithm, password, block1));
    if (!hLen) {
      hLen = U.length;
      T = new Uint8Array(hLen);
      l = Math.ceil(keylen / hLen);
      r = keylen - (l - 1) * hLen;
    }
    //U.copy(T, 0, 0, hLen)
    T.set(U);
    for (var j = 1; j < iterations; j++) {
      //U = createHmac(password).update(U).digest();
      U = arrayify(computeHmac(hashAlgorithm, password, U));
      for (var k = 0; k < hLen; k++) {
        T[k] ^= U[k];
      }
    }
    var destPos = (i - 1) * hLen;
    var len = i === l ? r : hLen;
    //T.copy(DK, destPos, 0, len)
    DK.set(arrayify(T).slice(0, len), destPos);
  }
  return hexlify(DK);
}

var version$c = "wordlists/5.7.0";

var logger$q = new Logger(version$c);
var Wordlist = /*#__PURE__*/function () {
  function Wordlist(locale) {
    _classCallCheck(this, Wordlist);
    logger$q.checkAbstract(this instanceof Wordlist ? this.constructor : void 0, Wordlist);
    defineReadOnly(this, "locale", locale);
  }
  // Subclasses may override this
  _createClass(Wordlist, [{
    key: "split",
    value: function split(mnemonic) {
      return mnemonic.toLowerCase().split(/ +/g);
    }
    // Subclasses may override this
  }, {
    key: "join",
    value: function join(words) {
      return words.join(" ");
    }
  }], [{
    key: "check",
    value: function check(wordlist) {
      var words = [];
      for (var i = 0; i < 2048; i++) {
        var word = wordlist.getWord(i);
        /* istanbul ignore if */
        if (i !== wordlist.getWordIndex(word)) {
          return "0x";
        }
        words.push(word);
      }
      return id(words.join("\n") + "\n");
    }
  }, {
    key: "register",
    value: function register(lang, name) {
      if (!name) {
        name = lang.locale;
      }
    }
  }]);
  return Wordlist;
}();

function _createSuper$i(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$i(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$i() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
var wordlist = null;
function loadWords(lang) {
  if (wordlist != null) {
    return;
  }
  wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
  // Verify the computed list matches the official list
  /* istanbul ignore if */
  if (Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
    wordlist = null;
    throw new Error("BIP39 Wordlist for en (English) FAILED");
  }
}
var LangEn = /*#__PURE__*/function (_Wordlist) {
  _inherits(LangEn, _Wordlist);
  var _super = _createSuper$i(LangEn);
  function LangEn() {
    _classCallCheck(this, LangEn);
    return _super.call(this, "en");
  }
  _createClass(LangEn, [{
    key: "getWord",
    value: function getWord(index) {
      loadWords(this);
      return wordlist[index];
    }
  }, {
    key: "getWordIndex",
    value: function getWordIndex(word) {
      loadWords(this);
      return wordlist.indexOf(word);
    }
  }]);
  return LangEn;
}(Wordlist);
var langEn = new LangEn();
Wordlist.register(langEn);

var wordlists = {
  en: langEn
};

var version$b = "hdnode/5.7.0";

var logger$p = new Logger(version$b);
var N$1 = BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
// "Bitcoin seed"
var MasterSecret = toUtf8Bytes("Bitcoin seed");
var HardenedBit = 0x80000000;
// Returns a byte with the MSB bits set
function getUpperMask(bits) {
  return (1 << bits) - 1 << 8 - bits;
}
// Returns a byte with the LSB bits set
function getLowerMask(bits) {
  return (1 << bits) - 1;
}
function bytes32(value) {
  return hexZeroPad(hexlify(value), 32);
}
function base58check(data) {
  return Base58.encode(concat([data, hexDataSlice(sha256$1(sha256$1(data)), 0, 4)]));
}
function getWordlist(wordlist) {
  if (wordlist == null) {
    return wordlists["en"];
  }
  if (typeof wordlist === "string") {
    var words = wordlists[wordlist];
    if (words == null) {
      logger$p.throwArgumentError("unknown locale", "wordlist", wordlist);
    }
    return words;
  }
  return wordlist;
}
var _constructorGuard$1 = {};
var defaultPath = "m/44'/60'/0'/0/0";
var HDNode = /*#__PURE__*/function () {
  /**
   *  This constructor should not be called directly.
   *
   *  Please use:
   *   - fromMnemonic
   *   - fromSeed
   */
  function HDNode(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {
    _classCallCheck(this, HDNode);
    /* istanbul ignore if */
    if (constructorGuard !== _constructorGuard$1) {
      throw new Error("HDNode constructor cannot be called directly");
    }
    if (privateKey) {
      var signingKey = new SigningKey(privateKey);
      defineReadOnly(this, "privateKey", signingKey.privateKey);
      defineReadOnly(this, "publicKey", signingKey.compressedPublicKey);
    } else {
      defineReadOnly(this, "privateKey", null);
      defineReadOnly(this, "publicKey", hexlify(publicKey));
    }
    defineReadOnly(this, "parentFingerprint", parentFingerprint);
    defineReadOnly(this, "fingerprint", hexDataSlice(ripemd160(sha256$1(this.publicKey)), 0, 4));
    defineReadOnly(this, "address", computeAddress(this.publicKey));
    defineReadOnly(this, "chainCode", chainCode);
    defineReadOnly(this, "index", index);
    defineReadOnly(this, "depth", depth);
    if (mnemonicOrPath == null) {
      // From a source that does not preserve the path (e.g. extended keys)
      defineReadOnly(this, "mnemonic", null);
      defineReadOnly(this, "path", null);
    } else if (typeof mnemonicOrPath === "string") {
      // From a source that does not preserve the mnemonic (e.g. neutered)
      defineReadOnly(this, "mnemonic", null);
      defineReadOnly(this, "path", mnemonicOrPath);
    } else {
      // From a fully qualified source
      defineReadOnly(this, "mnemonic", mnemonicOrPath);
      defineReadOnly(this, "path", mnemonicOrPath.path);
    }
  }
  _createClass(HDNode, [{
    key: "extendedKey",
    get: function get() {
      // We only support the mainnet values for now, but if anyone needs
      // testnet values, let me know. I believe current sentiment is that
      // we should always use mainnet, and use BIP-44 to derive the network
      //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
      //   - Testnet: public=0x043587CF, private=0x04358394
      if (this.depth >= 256) {
        throw new Error("Depth too large!");
      }
      return base58check(concat([this.privateKey != null ? "0x0488ADE4" : "0x0488B21E", hexlify(this.depth), this.parentFingerprint, hexZeroPad(hexlify(this.index), 4), this.chainCode, this.privateKey != null ? concat(["0x00", this.privateKey]) : this.publicKey]));
    }
  }, {
    key: "neuter",
    value: function neuter() {
      return new HDNode(_constructorGuard$1, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
    }
  }, {
    key: "_derive",
    value: function _derive(index) {
      if (index > 0xffffffff) {
        throw new Error("invalid index - " + String(index));
      }
      // Base path
      var path = this.path;
      if (path) {
        path += "/" + (index & ~HardenedBit);
      }
      var data = new Uint8Array(37);
      if (index & HardenedBit) {
        if (!this.privateKey) {
          throw new Error("cannot derive child of neutered node");
        }
        // Data = 0x00 || ser_256(k_par)
        data.set(arrayify(this.privateKey), 1);
        // Hardened path
        if (path) {
          path += "'";
        }
      } else {
        // Data = ser_p(point(k_par))
        data.set(arrayify(this.publicKey));
      }
      // Data += ser_32(i)
      for (var i = 24; i >= 0; i -= 8) {
        data[33 + (i >> 3)] = index >> 24 - i & 0xff;
      }
      var I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));
      var IL = I.slice(0, 32);
      var IR = I.slice(32);
      // The private key
      var ki = null;
      // The public key
      var Ki = null;
      if (this.privateKey) {
        ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N$1));
      } else {
        var ek = new SigningKey(hexlify(IL));
        Ki = ek._addPoint(this.publicKey);
      }
      var mnemonicOrPath = path;
      var srcMnemonic = this.mnemonic;
      if (srcMnemonic) {
        mnemonicOrPath = Object.freeze({
          phrase: srcMnemonic.phrase,
          path: path,
          locale: srcMnemonic.locale || "en"
        });
      }
      return new HDNode(_constructorGuard$1, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
    }
  }, {
    key: "derivePath",
    value: function derivePath(path) {
      var components = path.split("/");
      if (components.length === 0 || components[0] === "m" && this.depth !== 0) {
        throw new Error("invalid path - " + path);
      }
      if (components[0] === "m") {
        components.shift();
      }
      var result = this;
      for (var i = 0; i < components.length; i++) {
        var component = components[i];
        if (component.match(/^[0-9]+'$/)) {
          var index = parseInt(component.substring(0, component.length - 1));
          if (index >= HardenedBit) {
            throw new Error("invalid path index - " + component);
          }
          result = result._derive(HardenedBit + index);
        } else if (component.match(/^[0-9]+$/)) {
          var _index = parseInt(component);
          if (_index >= HardenedBit) {
            throw new Error("invalid path index - " + component);
          }
          result = result._derive(_index);
        } else {
          throw new Error("invalid path component - " + component);
        }
      }
      return result;
    }
  }], [{
    key: "_fromSeed",
    value: function _fromSeed(seed, mnemonic) {
      var seedArray = arrayify(seed);
      if (seedArray.length < 16 || seedArray.length > 64) {
        throw new Error("invalid seed");
      }
      var I = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));
      return new HDNode(_constructorGuard$1, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic);
    }
  }, {
    key: "fromMnemonic",
    value: function fromMnemonic(mnemonic, password, wordlist) {
      // If a locale name was passed in, find the associated wordlist
      wordlist = getWordlist(wordlist);
      // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)
      mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);
      return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
        phrase: mnemonic,
        path: "m",
        locale: wordlist.locale
      });
    }
  }, {
    key: "fromSeed",
    value: function fromSeed(seed) {
      return HDNode._fromSeed(seed, null);
    }
  }, {
    key: "fromExtendedKey",
    value: function fromExtendedKey(extendedKey) {
      var bytes = Base58.decode(extendedKey);
      if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
        logger$p.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
      }
      var depth = bytes[4];
      var parentFingerprint = hexlify(bytes.slice(5, 9));
      var index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);
      var chainCode = hexlify(bytes.slice(13, 45));
      var key = bytes.slice(45, 78);
      switch (hexlify(bytes.slice(0, 4))) {
        // Public Key
        case "0x0488b21e":
        case "0x043587cf":
          return new HDNode(_constructorGuard$1, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);
        // Private Key
        case "0x0488ade4":
        case "0x04358394 ":
          if (key[0] !== 0) {
            break;
          }
          return new HDNode(_constructorGuard$1, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
      }
      return logger$p.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
    }
  }]);
  return HDNode;
}();
function mnemonicToSeed(mnemonic, password) {
  if (!password) {
    password = "";
  }
  var salt = toUtf8Bytes("mnemonic" + password, UnicodeNormalizationForm.NFKD);
  return pbkdf2$1(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
}
function mnemonicToEntropy(mnemonic, wordlist) {
  wordlist = getWordlist(wordlist);
  logger$p.checkNormalize();
  var words = wordlist.split(mnemonic);
  if (words.length % 3 !== 0) {
    throw new Error("invalid mnemonic");
  }
  var entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));
  var offset = 0;
  for (var i = 0; i < words.length; i++) {
    var index = wordlist.getWordIndex(words[i].normalize("NFKD"));
    if (index === -1) {
      throw new Error("invalid mnemonic");
    }
    for (var bit = 0; bit < 11; bit++) {
      if (index & 1 << 10 - bit) {
        entropy[offset >> 3] |= 1 << 7 - offset % 8;
      }
      offset++;
    }
  }
  var entropyBits = 32 * words.length / 3;
  var checksumBits = words.length / 3;
  var checksumMask = getUpperMask(checksumBits);
  var checksum = arrayify(sha256$1(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
    throw new Error("invalid checksum");
  }
  return hexlify(entropy.slice(0, entropyBits / 8));
}
function entropyToMnemonic(entropy, wordlist) {
  wordlist = getWordlist(wordlist);
  entropy = arrayify(entropy);
  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {
    throw new Error("invalid entropy");
  }
  var indices = [0];
  var remainingBits = 11;
  for (var i = 0; i < entropy.length; i++) {
    // Consume the whole byte (with still more to go)
    if (remainingBits > 8) {
      indices[indices.length - 1] <<= 8;
      indices[indices.length - 1] |= entropy[i];
      remainingBits -= 8;
      // This byte will complete an 11-bit index
    } else {
      indices[indices.length - 1] <<= remainingBits;
      indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;
      // Start the next word
      indices.push(entropy[i] & getLowerMask(8 - remainingBits));
      remainingBits += 3;
    }
  }
  // Compute the checksum bits
  var checksumBits = entropy.length / 4;
  var checksum = arrayify(sha256$1(entropy))[0] & getUpperMask(checksumBits);
  // Shift the checksum into the word indices
  indices[indices.length - 1] <<= checksumBits;
  indices[indices.length - 1] |= checksum >> 8 - checksumBits;
  return wordlist.join(indices.map(function (index) {
    return wordlist.getWord(index);
  }));
}
function isValidMnemonic(mnemonic, wordlist) {
  try {
    mnemonicToEntropy(mnemonic, wordlist);
    return true;
  } catch (error) {}
  return false;
}
function getAccountPath(index) {
  if (typeof index !== "number" || index < 0 || index >= HardenedBit || index % 1) {
    logger$p.throwArgumentError("invalid account index", "index", index);
  }
  return "m/44'/60'/".concat(index, "'/0/0");
}

var lib_esm$6 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  defaultPath: defaultPath,
  HDNode: HDNode,
  mnemonicToSeed: mnemonicToSeed,
  mnemonicToEntropy: mnemonicToEntropy,
  entropyToMnemonic: entropyToMnemonic,
  isValidMnemonic: isValidMnemonic,
  getAccountPath: getAccountPath
});

var version$a = "random/5.7.0";

var logger$o = new Logger(version$a);
// Debugging line for testing browser lib in node
//const window = { crypto: { getRandomValues: () => { } } };
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis
function getGlobal() {
  if (typeof self !== 'undefined') {
    return self;
  }
  if (typeof window !== 'undefined') {
    return window;
  }
  if (typeof global !== 'undefined') {
    return global;
  }
  throw new Error('unable to locate global object');
}
var anyGlobal$1 = getGlobal();
var crypto$1 = anyGlobal$1.crypto || anyGlobal$1.msCrypto;
if (!crypto$1 || !crypto$1.getRandomValues) {
  logger$o.warn("WARNING: Missing strong random number source");
  crypto$1 = {
    getRandomValues: function getRandomValues(buffer) {
      return logger$o.throwError("no secure random source avaialble", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "crypto.getRandomValues"
      });
    }
  };
}
function randomBytes(length) {
  if (length <= 0 || length > 1024 || length % 1 || length != length) {
    logger$o.throwArgumentError("invalid length", "length", length);
  }
  var result = new Uint8Array(length);
  crypto$1.getRandomValues(result);
  return arrayify(result);
}

function shuffled(array) {
  array = array.slice();
  for (var i = array.length - 1; i > 0; i--) {
    var j = Math.floor(Math.random() * (i + 1));
    var tmp = array[i];
    array[i] = array[j];
    array[j] = tmp;
  }
  return array;
}

var lib_esm$5 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  randomBytes: randomBytes,
  shuffled: shuffled
});

var aesJs = {exports: {}};

(function (module, exports) {

	(function (root) {
	  function checkInt(value) {
	    return parseInt(value) === value;
	  }
	  function checkInts(arrayish) {
	    if (!checkInt(arrayish.length)) {
	      return false;
	    }
	    for (var i = 0; i < arrayish.length; i++) {
	      if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
	        return false;
	      }
	    }
	    return true;
	  }
	  function coerceArray(arg, copy) {
	    // ArrayBuffer view
	    if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {
	      if (copy) {
	        if (arg.slice) {
	          arg = arg.slice();
	        } else {
	          arg = Array.prototype.slice.call(arg);
	        }
	      }
	      return arg;
	    }

	    // It's an array; check it is a valid representation of a byte
	    if (Array.isArray(arg)) {
	      if (!checkInts(arg)) {
	        throw new Error('Array contains invalid value: ' + arg);
	      }
	      return new Uint8Array(arg);
	    }

	    // Something else, but behaves like an array (maybe a Buffer? Arguments?)
	    if (checkInt(arg.length) && checkInts(arg)) {
	      return new Uint8Array(arg);
	    }
	    throw new Error('unsupported array-like object');
	  }
	  function createArray(length) {
	    return new Uint8Array(length);
	  }
	  function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
	    if (sourceStart != null || sourceEnd != null) {
	      if (sourceArray.slice) {
	        sourceArray = sourceArray.slice(sourceStart, sourceEnd);
	      } else {
	        sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
	      }
	    }
	    targetArray.set(sourceArray, targetStart);
	  }
	  var convertUtf8 = function () {
	    function toBytes(text) {
	      var result = [],
	        i = 0;
	      text = encodeURI(text);
	      while (i < text.length) {
	        var c = text.charCodeAt(i++);

	        // if it is a % sign, encode the following 2 bytes as a hex value
	        if (c === 37) {
	          result.push(parseInt(text.substr(i, 2), 16));
	          i += 2;

	          // otherwise, just the actual byte
	        } else {
	          result.push(c);
	        }
	      }
	      return coerceArray(result);
	    }
	    function fromBytes(bytes) {
	      var result = [],
	        i = 0;
	      while (i < bytes.length) {
	        var c = bytes[i];
	        if (c < 128) {
	          result.push(String.fromCharCode(c));
	          i++;
	        } else if (c > 191 && c < 224) {
	          result.push(String.fromCharCode((c & 0x1f) << 6 | bytes[i + 1] & 0x3f));
	          i += 2;
	        } else {
	          result.push(String.fromCharCode((c & 0x0f) << 12 | (bytes[i + 1] & 0x3f) << 6 | bytes[i + 2] & 0x3f));
	          i += 3;
	        }
	      }
	      return result.join('');
	    }
	    return {
	      toBytes: toBytes,
	      fromBytes: fromBytes
	    };
	  }();
	  var convertHex = function () {
	    function toBytes(text) {
	      var result = [];
	      for (var i = 0; i < text.length; i += 2) {
	        result.push(parseInt(text.substr(i, 2), 16));
	      }
	      return result;
	    }

	    // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
	    var Hex = '0123456789abcdef';
	    function fromBytes(bytes) {
	      var result = [];
	      for (var i = 0; i < bytes.length; i++) {
	        var v = bytes[i];
	        result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
	      }
	      return result.join('');
	    }
	    return {
	      toBytes: toBytes,
	      fromBytes: fromBytes
	    };
	  }();

	  // Number of rounds by keysize
	  var numberOfRounds = {
	    16: 10,
	    24: 12,
	    32: 14
	  };

	  // Round constant words
	  var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];

	  // S-box and Inverse S-box (S is for Substitution)
	  var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
	  var Si = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

	  // Transformations for encryption
	  var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
	  var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
	  var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
	  var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];

	  // Transformations for decryption
	  var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
	  var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
	  var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
	  var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];

	  // Transformations for decryption key expansion
	  var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
	  var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
	  var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
	  var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];
	  function convertToInt32(bytes) {
	    var result = [];
	    for (var i = 0; i < bytes.length; i += 4) {
	      result.push(bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]);
	    }
	    return result;
	  }
	  var AES = function AES(key) {
	    if (!(this instanceof AES)) {
	      throw Error('AES must be instanitated with `new`');
	    }
	    Object.defineProperty(this, 'key', {
	      value: coerceArray(key, true)
	    });
	    this._prepare();
	  };
	  AES.prototype._prepare = function () {
	    var rounds = numberOfRounds[this.key.length];
	    if (rounds == null) {
	      throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
	    }

	    // encryption round keys
	    this._Ke = [];

	    // decryption round keys
	    this._Kd = [];
	    for (var i = 0; i <= rounds; i++) {
	      this._Ke.push([0, 0, 0, 0]);
	      this._Kd.push([0, 0, 0, 0]);
	    }
	    var roundKeyCount = (rounds + 1) * 4;
	    var KC = this.key.length / 4;

	    // convert the key into ints
	    var tk = convertToInt32(this.key);

	    // copy values into round key arrays
	    var index;
	    for (var i = 0; i < KC; i++) {
	      index = i >> 2;
	      this._Ke[index][i % 4] = tk[i];
	      this._Kd[rounds - index][i % 4] = tk[i];
	    }

	    // key expansion (fips-197 section 5.2)
	    var rconpointer = 0;
	    var t = KC,
	      tt;
	    while (t < roundKeyCount) {
	      tt = tk[KC - 1];
	      tk[0] ^= S[tt >> 16 & 0xFF] << 24 ^ S[tt >> 8 & 0xFF] << 16 ^ S[tt & 0xFF] << 8 ^ S[tt >> 24 & 0xFF] ^ rcon[rconpointer] << 24;
	      rconpointer += 1;

	      // key expansion (for non-256 bit)
	      if (KC != 8) {
	        for (var i = 1; i < KC; i++) {
	          tk[i] ^= tk[i - 1];
	        }

	        // key expansion for 256-bit keys is "slightly different" (fips-197)
	      } else {
	        for (var i = 1; i < KC / 2; i++) {
	          tk[i] ^= tk[i - 1];
	        }
	        tt = tk[KC / 2 - 1];
	        tk[KC / 2] ^= S[tt & 0xFF] ^ S[tt >> 8 & 0xFF] << 8 ^ S[tt >> 16 & 0xFF] << 16 ^ S[tt >> 24 & 0xFF] << 24;
	        for (var i = KC / 2 + 1; i < KC; i++) {
	          tk[i] ^= tk[i - 1];
	        }
	      }

	      // copy values into round key arrays
	      var i = 0,
	        r,
	        c;
	      while (i < KC && t < roundKeyCount) {
	        r = t >> 2;
	        c = t % 4;
	        this._Ke[r][c] = tk[i];
	        this._Kd[rounds - r][c] = tk[i++];
	        t++;
	      }
	    }

	    // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
	    for (var r = 1; r < rounds; r++) {
	      for (var c = 0; c < 4; c++) {
	        tt = this._Kd[r][c];
	        this._Kd[r][c] = U1[tt >> 24 & 0xFF] ^ U2[tt >> 16 & 0xFF] ^ U3[tt >> 8 & 0xFF] ^ U4[tt & 0xFF];
	      }
	    }
	  };
	  AES.prototype.encrypt = function (plaintext) {
	    if (plaintext.length != 16) {
	      throw new Error('invalid plaintext size (must be 16 bytes)');
	    }
	    var rounds = this._Ke.length - 1;
	    var a = [0, 0, 0, 0];

	    // convert plaintext to (ints ^ key)
	    var t = convertToInt32(plaintext);
	    for (var i = 0; i < 4; i++) {
	      t[i] ^= this._Ke[0][i];
	    }

	    // apply round transforms
	    for (var r = 1; r < rounds; r++) {
	      for (var i = 0; i < 4; i++) {
	        a[i] = T1[t[i] >> 24 & 0xff] ^ T2[t[(i + 1) % 4] >> 16 & 0xff] ^ T3[t[(i + 2) % 4] >> 8 & 0xff] ^ T4[t[(i + 3) % 4] & 0xff] ^ this._Ke[r][i];
	      }
	      t = a.slice();
	    }

	    // the last round is special
	    var result = createArray(16),
	      tt;
	    for (var i = 0; i < 4; i++) {
	      tt = this._Ke[rounds][i];
	      result[4 * i] = (S[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;
	      result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;
	      result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;
	      result[4 * i + 3] = (S[t[(i + 3) % 4] & 0xff] ^ tt) & 0xff;
	    }
	    return result;
	  };
	  AES.prototype.decrypt = function (ciphertext) {
	    if (ciphertext.length != 16) {
	      throw new Error('invalid ciphertext size (must be 16 bytes)');
	    }
	    var rounds = this._Kd.length - 1;
	    var a = [0, 0, 0, 0];

	    // convert plaintext to (ints ^ key)
	    var t = convertToInt32(ciphertext);
	    for (var i = 0; i < 4; i++) {
	      t[i] ^= this._Kd[0][i];
	    }

	    // apply round transforms
	    for (var r = 1; r < rounds; r++) {
	      for (var i = 0; i < 4; i++) {
	        a[i] = T5[t[i] >> 24 & 0xff] ^ T6[t[(i + 3) % 4] >> 16 & 0xff] ^ T7[t[(i + 2) % 4] >> 8 & 0xff] ^ T8[t[(i + 1) % 4] & 0xff] ^ this._Kd[r][i];
	      }
	      t = a.slice();
	    }

	    // the last round is special
	    var result = createArray(16),
	      tt;
	    for (var i = 0; i < 4; i++) {
	      tt = this._Kd[rounds][i];
	      result[4 * i] = (Si[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;
	      result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;
	      result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;
	      result[4 * i + 3] = (Si[t[(i + 1) % 4] & 0xff] ^ tt) & 0xff;
	    }
	    return result;
	  };

	  /**
	   *  Mode Of Operation - Electonic Codebook (ECB)
	   */
	  var ModeOfOperationECB = function ModeOfOperationECB(key) {
	    if (!(this instanceof ModeOfOperationECB)) {
	      throw Error('AES must be instanitated with `new`');
	    }
	    this.description = "Electronic Code Block";
	    this.name = "ecb";
	    this._aes = new AES(key);
	  };
	  ModeOfOperationECB.prototype.encrypt = function (plaintext) {
	    plaintext = coerceArray(plaintext);
	    if (plaintext.length % 16 !== 0) {
	      throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
	    }
	    var ciphertext = createArray(plaintext.length);
	    var block = createArray(16);
	    for (var i = 0; i < plaintext.length; i += 16) {
	      copyArray(plaintext, block, 0, i, i + 16);
	      block = this._aes.encrypt(block);
	      copyArray(block, ciphertext, i);
	    }
	    return ciphertext;
	  };
	  ModeOfOperationECB.prototype.decrypt = function (ciphertext) {
	    ciphertext = coerceArray(ciphertext);
	    if (ciphertext.length % 16 !== 0) {
	      throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
	    }
	    var plaintext = createArray(ciphertext.length);
	    var block = createArray(16);
	    for (var i = 0; i < ciphertext.length; i += 16) {
	      copyArray(ciphertext, block, 0, i, i + 16);
	      block = this._aes.decrypt(block);
	      copyArray(block, plaintext, i);
	    }
	    return plaintext;
	  };

	  /**
	   *  Mode Of Operation - Cipher Block Chaining (CBC)
	   */
	  var ModeOfOperationCBC = function ModeOfOperationCBC(key, iv) {
	    if (!(this instanceof ModeOfOperationCBC)) {
	      throw Error('AES must be instanitated with `new`');
	    }
	    this.description = "Cipher Block Chaining";
	    this.name = "cbc";
	    if (!iv) {
	      iv = createArray(16);
	    } else if (iv.length != 16) {
	      throw new Error('invalid initialation vector size (must be 16 bytes)');
	    }
	    this._lastCipherblock = coerceArray(iv, true);
	    this._aes = new AES(key);
	  };
	  ModeOfOperationCBC.prototype.encrypt = function (plaintext) {
	    plaintext = coerceArray(plaintext);
	    if (plaintext.length % 16 !== 0) {
	      throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
	    }
	    var ciphertext = createArray(plaintext.length);
	    var block = createArray(16);
	    for (var i = 0; i < plaintext.length; i += 16) {
	      copyArray(plaintext, block, 0, i, i + 16);
	      for (var j = 0; j < 16; j++) {
	        block[j] ^= this._lastCipherblock[j];
	      }
	      this._lastCipherblock = this._aes.encrypt(block);
	      copyArray(this._lastCipherblock, ciphertext, i);
	    }
	    return ciphertext;
	  };
	  ModeOfOperationCBC.prototype.decrypt = function (ciphertext) {
	    ciphertext = coerceArray(ciphertext);
	    if (ciphertext.length % 16 !== 0) {
	      throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
	    }
	    var plaintext = createArray(ciphertext.length);
	    var block = createArray(16);
	    for (var i = 0; i < ciphertext.length; i += 16) {
	      copyArray(ciphertext, block, 0, i, i + 16);
	      block = this._aes.decrypt(block);
	      for (var j = 0; j < 16; j++) {
	        plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
	      }
	      copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
	    }
	    return plaintext;
	  };

	  /**
	   *  Mode Of Operation - Cipher Feedback (CFB)
	   */
	  var ModeOfOperationCFB = function ModeOfOperationCFB(key, iv, segmentSize) {
	    if (!(this instanceof ModeOfOperationCFB)) {
	      throw Error('AES must be instanitated with `new`');
	    }
	    this.description = "Cipher Feedback";
	    this.name = "cfb";
	    if (!iv) {
	      iv = createArray(16);
	    } else if (iv.length != 16) {
	      throw new Error('invalid initialation vector size (must be 16 size)');
	    }
	    if (!segmentSize) {
	      segmentSize = 1;
	    }
	    this.segmentSize = segmentSize;
	    this._shiftRegister = coerceArray(iv, true);
	    this._aes = new AES(key);
	  };
	  ModeOfOperationCFB.prototype.encrypt = function (plaintext) {
	    if (plaintext.length % this.segmentSize != 0) {
	      throw new Error('invalid plaintext size (must be segmentSize bytes)');
	    }
	    var encrypted = coerceArray(plaintext, true);
	    var xorSegment;
	    for (var i = 0; i < encrypted.length; i += this.segmentSize) {
	      xorSegment = this._aes.encrypt(this._shiftRegister);
	      for (var j = 0; j < this.segmentSize; j++) {
	        encrypted[i + j] ^= xorSegment[j];
	      }

	      // Shift the register
	      copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
	      copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
	    }
	    return encrypted;
	  };
	  ModeOfOperationCFB.prototype.decrypt = function (ciphertext) {
	    if (ciphertext.length % this.segmentSize != 0) {
	      throw new Error('invalid ciphertext size (must be segmentSize bytes)');
	    }
	    var plaintext = coerceArray(ciphertext, true);
	    var xorSegment;
	    for (var i = 0; i < plaintext.length; i += this.segmentSize) {
	      xorSegment = this._aes.encrypt(this._shiftRegister);
	      for (var j = 0; j < this.segmentSize; j++) {
	        plaintext[i + j] ^= xorSegment[j];
	      }

	      // Shift the register
	      copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
	      copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
	    }
	    return plaintext;
	  };

	  /**
	   *  Mode Of Operation - Output Feedback (OFB)
	   */
	  var ModeOfOperationOFB = function ModeOfOperationOFB(key, iv) {
	    if (!(this instanceof ModeOfOperationOFB)) {
	      throw Error('AES must be instanitated with `new`');
	    }
	    this.description = "Output Feedback";
	    this.name = "ofb";
	    if (!iv) {
	      iv = createArray(16);
	    } else if (iv.length != 16) {
	      throw new Error('invalid initialation vector size (must be 16 bytes)');
	    }
	    this._lastPrecipher = coerceArray(iv, true);
	    this._lastPrecipherIndex = 16;
	    this._aes = new AES(key);
	  };
	  ModeOfOperationOFB.prototype.encrypt = function (plaintext) {
	    var encrypted = coerceArray(plaintext, true);
	    for (var i = 0; i < encrypted.length; i++) {
	      if (this._lastPrecipherIndex === 16) {
	        this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
	        this._lastPrecipherIndex = 0;
	      }
	      encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
	    }
	    return encrypted;
	  };

	  // Decryption is symetric
	  ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;

	  /**
	   *  Counter object for CTR common mode of operation
	   */
	  var Counter = function Counter(initialValue) {
	    if (!(this instanceof Counter)) {
	      throw Error('Counter must be instanitated with `new`');
	    }

	    // We allow 0, but anything false-ish uses the default 1
	    if (initialValue !== 0 && !initialValue) {
	      initialValue = 1;
	    }
	    if (typeof initialValue === 'number') {
	      this._counter = createArray(16);
	      this.setValue(initialValue);
	    } else {
	      this.setBytes(initialValue);
	    }
	  };
	  Counter.prototype.setValue = function (value) {
	    if (typeof value !== 'number' || parseInt(value) != value) {
	      throw new Error('invalid counter value (must be an integer)');
	    }
	    for (var index = 15; index >= 0; --index) {
	      this._counter[index] = value % 256;
	      value = value >> 8;
	    }
	  };
	  Counter.prototype.setBytes = function (bytes) {
	    bytes = coerceArray(bytes, true);
	    if (bytes.length != 16) {
	      throw new Error('invalid counter bytes size (must be 16 bytes)');
	    }
	    this._counter = bytes;
	  };
	  Counter.prototype.increment = function () {
	    for (var i = 15; i >= 0; i--) {
	      if (this._counter[i] === 255) {
	        this._counter[i] = 0;
	      } else {
	        this._counter[i]++;
	        break;
	      }
	    }
	  };

	  /**
	   *  Mode Of Operation - Counter (CTR)
	   */
	  var ModeOfOperationCTR = function ModeOfOperationCTR(key, counter) {
	    if (!(this instanceof ModeOfOperationCTR)) {
	      throw Error('AES must be instanitated with `new`');
	    }
	    this.description = "Counter";
	    this.name = "ctr";
	    if (!(counter instanceof Counter)) {
	      counter = new Counter(counter);
	    }
	    this._counter = counter;
	    this._remainingCounter = null;
	    this._remainingCounterIndex = 16;
	    this._aes = new AES(key);
	  };
	  ModeOfOperationCTR.prototype.encrypt = function (plaintext) {
	    var encrypted = coerceArray(plaintext, true);
	    for (var i = 0; i < encrypted.length; i++) {
	      if (this._remainingCounterIndex === 16) {
	        this._remainingCounter = this._aes.encrypt(this._counter._counter);
	        this._remainingCounterIndex = 0;
	        this._counter.increment();
	      }
	      encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
	    }
	    return encrypted;
	  };

	  // Decryption is symetric
	  ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;

	  ///////////////////////
	  // Padding

	  // See:https://tools.ietf.org/html/rfc2315
	  function pkcs7pad(data) {
	    data = coerceArray(data, true);
	    var padder = 16 - data.length % 16;
	    var result = createArray(data.length + padder);
	    copyArray(data, result);
	    for (var i = data.length; i < result.length; i++) {
	      result[i] = padder;
	    }
	    return result;
	  }
	  function pkcs7strip(data) {
	    data = coerceArray(data, true);
	    if (data.length < 16) {
	      throw new Error('PKCS#7 invalid length');
	    }
	    var padder = data[data.length - 1];
	    if (padder > 16) {
	      throw new Error('PKCS#7 padding byte out of range');
	    }
	    var length = data.length - padder;
	    for (var i = 0; i < padder; i++) {
	      if (data[length + i] !== padder) {
	        throw new Error('PKCS#7 invalid padding byte');
	      }
	    }
	    var result = createArray(length);
	    copyArray(data, result, 0, 0, length);
	    return result;
	  }

	  ///////////////////////
	  // Exporting

	  // The block cipher
	  var aesjs = {
	    AES: AES,
	    Counter: Counter,
	    ModeOfOperation: {
	      ecb: ModeOfOperationECB,
	      cbc: ModeOfOperationCBC,
	      cfb: ModeOfOperationCFB,
	      ofb: ModeOfOperationOFB,
	      ctr: ModeOfOperationCTR
	    },
	    utils: {
	      hex: convertHex,
	      utf8: convertUtf8
	    },
	    padding: {
	      pkcs7: {
	        pad: pkcs7pad,
	        strip: pkcs7strip
	      }
	    },
	    _arrayTest: {
	      coerceArray: coerceArray,
	      createArray: createArray,
	      copyArray: copyArray
	    }
	  };

	  // node.js
	  {
	    module.exports = aesjs;

	    // RequireJS/AMD
	    // http://www.requirejs.org/docs/api.html
	    // https://github.com/amdjs/amdjs-api/wiki/AMD
	  }
	})();
} (aesJs));

var aes$1 = aesJs.exports;

var version$9 = "json-wallets/5.7.0";

function looseArrayify(hexString) {
  if (typeof hexString === 'string' && hexString.substring(0, 2) !== '0x') {
    hexString = '0x' + hexString;
  }
  return arrayify(hexString);
}
function zpad(value, length) {
  value = String(value);
  while (value.length < length) {
    value = '0' + value;
  }
  return value;
}
function getPassword(password) {
  if (typeof password === 'string') {
    return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);
  }
  return arrayify(password);
}
function searchPath(object, path) {
  var currentChild = object;
  var comps = path.toLowerCase().split('/');
  for (var i = 0; i < comps.length; i++) {
    // Search for a child object with a case-insensitive matching key
    var matchingChild = null;
    for (var key in currentChild) {
      if (key.toLowerCase() === comps[i]) {
        matchingChild = currentChild[key];
        break;
      }
    }
    // Didn't find one. :'(
    if (matchingChild === null) {
      return null;
    }
    // Now check this child...
    currentChild = matchingChild;
  }
  return currentChild;
}
// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)
function uuidV4(randomBytes) {
  var bytes = arrayify(randomBytes);
  // Section: 4.1.3:
  // - time_hi_and_version[12:16] = 0b0100
  bytes[6] = bytes[6] & 0x0f | 0x40;
  // Section 4.4
  // - clock_seq_hi_and_reserved[6] = 0b0
  // - clock_seq_hi_and_reserved[7] = 0b1
  bytes[8] = bytes[8] & 0x3f | 0x80;
  var value = hexlify(bytes);
  return [value.substring(2, 10), value.substring(10, 14), value.substring(14, 18), value.substring(18, 22), value.substring(22, 34)].join("-");
}

function _createSuper$h(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$h(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$h() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var logger$n = new Logger(version$9);
var CrowdsaleAccount = /*#__PURE__*/function (_Description) {
  _inherits(CrowdsaleAccount, _Description);
  var _super = _createSuper$h(CrowdsaleAccount);
  function CrowdsaleAccount() {
    _classCallCheck(this, CrowdsaleAccount);
    return _super.apply(this, arguments);
  }
  _createClass(CrowdsaleAccount, [{
    key: "isCrowdsaleAccount",
    value: function isCrowdsaleAccount(value) {
      return !!(value && value._isCrowdsaleAccount);
    }
  }]);
  return CrowdsaleAccount;
}(Description);
// See: https://github.com/ethereum/pyethsaletool
function decrypt$1(json, password) {
  var data = JSON.parse(json);
  password = getPassword(password);
  // Ethereum Address
  var ethaddr = getAddress(searchPath(data, "ethaddr"));
  // Encrypted Seed
  var encseed = looseArrayify(searchPath(data, "encseed"));
  if (!encseed || encseed.length % 16 !== 0) {
    logger$n.throwArgumentError("invalid encseed", "json", json);
  }
  var key = arrayify(pbkdf2$1(password, password, 2000, 32, "sha256")).slice(0, 16);
  var iv = encseed.slice(0, 16);
  var encryptedSeed = encseed.slice(16);
  // Decrypt the seed
  var aesCbc = new aes$1.ModeOfOperation.cbc(key, iv);
  var seed = aes$1.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));
  // This wallet format is weird... Convert the binary encoded hex to a string.
  var seedHex = "";
  for (var i = 0; i < seed.length; i++) {
    seedHex += String.fromCharCode(seed[i]);
  }
  var seedHexBytes = toUtf8Bytes(seedHex);
  var privateKey = keccak256$1(seedHexBytes);
  return new CrowdsaleAccount({
    _isCrowdsaleAccount: true,
    address: ethaddr,
    privateKey: privateKey
  });
}

function isCrowdsaleWallet(json) {
  var data = null;
  try {
    data = JSON.parse(json);
  } catch (error) {
    return false;
  }
  return data.encseed && data.ethaddr;
}
function isKeystoreWallet(json) {
  var data = null;
  try {
    data = JSON.parse(json);
  } catch (error) {
    return false;
  }
  if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
    return false;
  }
  // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff
  return true;
}
//export function isJsonWallet(json: string): boolean {
//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));
//}
function getJsonWalletAddress(json) {
  if (isCrowdsaleWallet(json)) {
    try {
      return getAddress(JSON.parse(json).ethaddr);
    } catch (error) {
      return null;
    }
  }
  if (isKeystoreWallet(json)) {
    try {
      return getAddress(JSON.parse(json).address);
    } catch (error) {
      return null;
    }
  }
  return null;
}

var scrypt$1 = {exports: {}};

(function (module, exports) {

	(function (root) {
	  var MAX_VALUE = 0x7fffffff;

	  // The SHA256 and PBKDF2 implementation are from scrypt-async-js:
	  // See: https://github.com/dchest/scrypt-async-js
	  function SHA256(m) {
	    var K = new Uint32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);
	    var h0 = 0x6a09e667,
	      h1 = 0xbb67ae85,
	      h2 = 0x3c6ef372,
	      h3 = 0xa54ff53a;
	    var h4 = 0x510e527f,
	      h5 = 0x9b05688c,
	      h6 = 0x1f83d9ab,
	      h7 = 0x5be0cd19;
	    var w = new Uint32Array(64);
	    function blocks(p) {
	      var off = 0,
	        len = p.length;
	      while (len >= 64) {
	        var a = h0,
	          b = h1,
	          c = h2,
	          d = h3,
	          e = h4,
	          f = h5,
	          g = h6,
	          h = h7,
	          u = void 0,
	          _i = void 0,
	          j = void 0,
	          t1 = void 0,
	          t2 = void 0;
	        for (_i = 0; _i < 16; _i++) {
	          j = off + _i * 4;
	          w[_i] = (p[j] & 0xff) << 24 | (p[j + 1] & 0xff) << 16 | (p[j + 2] & 0xff) << 8 | p[j + 3] & 0xff;
	        }
	        for (_i = 16; _i < 64; _i++) {
	          u = w[_i - 2];
	          t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;
	          u = w[_i - 15];
	          t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;
	          w[_i] = (t1 + w[_i - 7] | 0) + (t2 + w[_i - 16] | 0) | 0;
	        }
	        for (_i = 0; _i < 64; _i++) {
	          t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f ^ ~e & g) | 0) + (h + (K[_i] + w[_i] | 0) | 0) | 0;
	          t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;
	          h = g;
	          g = f;
	          f = e;
	          e = d + t1 | 0;
	          d = c;
	          c = b;
	          b = a;
	          a = t1 + t2 | 0;
	        }
	        h0 = h0 + a | 0;
	        h1 = h1 + b | 0;
	        h2 = h2 + c | 0;
	        h3 = h3 + d | 0;
	        h4 = h4 + e | 0;
	        h5 = h5 + f | 0;
	        h6 = h6 + g | 0;
	        h7 = h7 + h | 0;
	        off += 64;
	        len -= 64;
	      }
	    }
	    blocks(m);
	    var i,
	      bytesLeft = m.length % 64,
	      bitLenHi = m.length / 0x20000000 | 0,
	      bitLenLo = m.length << 3,
	      numZeros = bytesLeft < 56 ? 56 : 120,
	      p = m.slice(m.length - bytesLeft, m.length);
	    p.push(0x80);
	    for (i = bytesLeft + 1; i < numZeros; i++) {
	      p.push(0);
	    }
	    p.push(bitLenHi >>> 24 & 0xff);
	    p.push(bitLenHi >>> 16 & 0xff);
	    p.push(bitLenHi >>> 8 & 0xff);
	    p.push(bitLenHi >>> 0 & 0xff);
	    p.push(bitLenLo >>> 24 & 0xff);
	    p.push(bitLenLo >>> 16 & 0xff);
	    p.push(bitLenLo >>> 8 & 0xff);
	    p.push(bitLenLo >>> 0 & 0xff);
	    blocks(p);
	    return [h0 >>> 24 & 0xff, h0 >>> 16 & 0xff, h0 >>> 8 & 0xff, h0 >>> 0 & 0xff, h1 >>> 24 & 0xff, h1 >>> 16 & 0xff, h1 >>> 8 & 0xff, h1 >>> 0 & 0xff, h2 >>> 24 & 0xff, h2 >>> 16 & 0xff, h2 >>> 8 & 0xff, h2 >>> 0 & 0xff, h3 >>> 24 & 0xff, h3 >>> 16 & 0xff, h3 >>> 8 & 0xff, h3 >>> 0 & 0xff, h4 >>> 24 & 0xff, h4 >>> 16 & 0xff, h4 >>> 8 & 0xff, h4 >>> 0 & 0xff, h5 >>> 24 & 0xff, h5 >>> 16 & 0xff, h5 >>> 8 & 0xff, h5 >>> 0 & 0xff, h6 >>> 24 & 0xff, h6 >>> 16 & 0xff, h6 >>> 8 & 0xff, h6 >>> 0 & 0xff, h7 >>> 24 & 0xff, h7 >>> 16 & 0xff, h7 >>> 8 & 0xff, h7 >>> 0 & 0xff];
	  }
	  function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
	    // compress password if it's longer than hash block length
	    password = password.length <= 64 ? password : SHA256(password);
	    var innerLen = 64 + salt.length + 4;
	    var inner = new Array(innerLen);
	    var outerKey = new Array(64);
	    var i;
	    var dk = [];

	    // inner = (password ^ ipad) || salt || counter
	    for (i = 0; i < 64; i++) {
	      inner[i] = 0x36;
	    }
	    for (i = 0; i < password.length; i++) {
	      inner[i] ^= password[i];
	    }
	    for (i = 0; i < salt.length; i++) {
	      inner[64 + i] = salt[i];
	    }
	    for (i = innerLen - 4; i < innerLen; i++) {
	      inner[i] = 0;
	    }

	    // outerKey = password ^ opad
	    for (i = 0; i < 64; i++) {
	      outerKey[i] = 0x5c;
	    }
	    for (i = 0; i < password.length; i++) {
	      outerKey[i] ^= password[i];
	    }

	    // increments counter inside inner
	    function incrementCounter() {
	      for (var _i2 = innerLen - 1; _i2 >= innerLen - 4; _i2--) {
	        inner[_i2]++;
	        if (inner[_i2] <= 0xff) return;
	        inner[_i2] = 0;
	      }
	    }

	    // output blocks = SHA256(outerKey || SHA256(inner)) ...
	    while (dkLen >= 32) {
	      incrementCounter();
	      dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
	      dkLen -= 32;
	    }
	    if (dkLen > 0) {
	      incrementCounter();
	      dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
	    }
	    return dk;
	  }

	  // The following is an adaptation of scryptsy
	  // See: https://www.npmjs.com/package/scryptsy
	  function blockmix_salsa8(BY, Yi, r, x, _X) {
	    var i;
	    arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);
	    for (i = 0; i < 2 * r; i++) {
	      blockxor(BY, i * 16, _X, 16);
	      salsa20_8(_X, x);
	      arraycopy(_X, 0, BY, Yi + i * 16, 16);
	    }
	    for (i = 0; i < r; i++) {
	      arraycopy(BY, Yi + i * 2 * 16, BY, i * 16, 16);
	    }
	    for (i = 0; i < r; i++) {
	      arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
	    }
	  }
	  function R(a, b) {
	    return a << b | a >>> 32 - b;
	  }
	  function salsa20_8(B, x) {
	    arraycopy(B, 0, x, 0, 16);
	    for (var i = 8; i > 0; i -= 2) {
	      x[4] ^= R(x[0] + x[12], 7);
	      x[8] ^= R(x[4] + x[0], 9);
	      x[12] ^= R(x[8] + x[4], 13);
	      x[0] ^= R(x[12] + x[8], 18);
	      x[9] ^= R(x[5] + x[1], 7);
	      x[13] ^= R(x[9] + x[5], 9);
	      x[1] ^= R(x[13] + x[9], 13);
	      x[5] ^= R(x[1] + x[13], 18);
	      x[14] ^= R(x[10] + x[6], 7);
	      x[2] ^= R(x[14] + x[10], 9);
	      x[6] ^= R(x[2] + x[14], 13);
	      x[10] ^= R(x[6] + x[2], 18);
	      x[3] ^= R(x[15] + x[11], 7);
	      x[7] ^= R(x[3] + x[15], 9);
	      x[11] ^= R(x[7] + x[3], 13);
	      x[15] ^= R(x[11] + x[7], 18);
	      x[1] ^= R(x[0] + x[3], 7);
	      x[2] ^= R(x[1] + x[0], 9);
	      x[3] ^= R(x[2] + x[1], 13);
	      x[0] ^= R(x[3] + x[2], 18);
	      x[6] ^= R(x[5] + x[4], 7);
	      x[7] ^= R(x[6] + x[5], 9);
	      x[4] ^= R(x[7] + x[6], 13);
	      x[5] ^= R(x[4] + x[7], 18);
	      x[11] ^= R(x[10] + x[9], 7);
	      x[8] ^= R(x[11] + x[10], 9);
	      x[9] ^= R(x[8] + x[11], 13);
	      x[10] ^= R(x[9] + x[8], 18);
	      x[12] ^= R(x[15] + x[14], 7);
	      x[13] ^= R(x[12] + x[15], 9);
	      x[14] ^= R(x[13] + x[12], 13);
	      x[15] ^= R(x[14] + x[13], 18);
	    }
	    for (var _i3 = 0; _i3 < 16; ++_i3) {
	      B[_i3] += x[_i3];
	    }
	  }

	  // naive approach... going back to loop unrolling may yield additional performance
	  function blockxor(S, Si, D, len) {
	    for (var i = 0; i < len; i++) {
	      D[i] ^= S[Si + i];
	    }
	  }
	  function arraycopy(src, srcPos, dest, destPos, length) {
	    while (length--) {
	      dest[destPos++] = src[srcPos++];
	    }
	  }
	  function checkBufferish(o) {
	    if (!o || typeof o.length !== 'number') {
	      return false;
	    }
	    for (var i = 0; i < o.length; i++) {
	      var v = o[i];
	      if (typeof v !== 'number' || v % 1 || v < 0 || v >= 256) {
	        return false;
	      }
	    }
	    return true;
	  }
	  function ensureInteger(value, name) {
	    if (typeof value !== "number" || value % 1) {
	      throw new Error('invalid ' + name);
	    }
	    return value;
	  }

	  // N = Cpu cost, r = Memory cost, p = parallelization cost
	  // callback(error, progress, key)
	  function _scrypt(password, salt, N, r, p, dkLen, callback) {
	    N = ensureInteger(N, 'N');
	    r = ensureInteger(r, 'r');
	    p = ensureInteger(p, 'p');
	    dkLen = ensureInteger(dkLen, 'dkLen');
	    if (N === 0 || (N & N - 1) !== 0) {
	      throw new Error('N must be power of 2');
	    }
	    if (N > MAX_VALUE / 128 / r) {
	      throw new Error('N too large');
	    }
	    if (r > MAX_VALUE / 128 / p) {
	      throw new Error('r too large');
	    }
	    if (!checkBufferish(password)) {
	      throw new Error('password must be an array or buffer');
	    }
	    password = Array.prototype.slice.call(password);
	    if (!checkBufferish(salt)) {
	      throw new Error('salt must be an array or buffer');
	    }
	    salt = Array.prototype.slice.call(salt);
	    var b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);
	    var B = new Uint32Array(p * 32 * r);
	    for (var i = 0; i < B.length; i++) {
	      var j = i * 4;
	      B[i] = (b[j + 3] & 0xff) << 24 | (b[j + 2] & 0xff) << 16 | (b[j + 1] & 0xff) << 8 | (b[j + 0] & 0xff) << 0;
	    }
	    var XY = new Uint32Array(64 * r);
	    var V = new Uint32Array(32 * r * N);
	    var Yi = 32 * r;

	    // scratch space
	    var x = new Uint32Array(16); // salsa20_8
	    var _X = new Uint32Array(16); // blockmix_salsa8

	    var totalOps = p * N * 2;
	    var currentOp = 0;
	    var lastPercent10 = null;

	    // Set this to true to abandon the scrypt on the next step
	    var stop = false;

	    // State information
	    var state = 0;
	    var i0 = 0,
	      i1;
	    var Bi;

	    // How many blockmix_salsa8 can we do per step?
	    var limit = callback ? parseInt(1000 / r) : 0xffffffff;

	    // Trick from scrypt-async; if there is a setImmediate shim in place, use it
	    var nextTick = typeof setImmediate !== 'undefined' ? setImmediate : setTimeout;

	    // This is really all I changed; making scryptsy a state machine so we occasionally
	    // stop and give other evnts on the evnt loop a chance to run. ~RicMoo
	    var incrementalSMix = function incrementalSMix() {
	      if (stop) {
	        return callback(new Error('cancelled'), currentOp / totalOps);
	      }
	      var steps;
	      switch (state) {
	        case 0:
	          // for (var i = 0; i < p; i++)...
	          Bi = i0 * 32 * r;
	          arraycopy(B, Bi, XY, 0, Yi); // ROMix - 1

	          state = 1; // Move to ROMix 2
	          i1 = 0;

	        // Fall through

	        case 1:
	          // Run up to 1000 steps of the first inner smix loop
	          steps = N - i1;
	          if (steps > limit) {
	            steps = limit;
	          }
	          for (var _i4 = 0; _i4 < steps; _i4++) {
	            // ROMix - 2
	            arraycopy(XY, 0, V, (i1 + _i4) * Yi, Yi); // ROMix - 3
	            blockmix_salsa8(XY, Yi, r, x, _X); // ROMix - 4
	          }

	          // for (var i = 0; i < N; i++)
	          i1 += steps;
	          currentOp += steps;
	          if (callback) {
	            // Call the callback with the progress (optionally stopping us)
	            var percent10 = parseInt(1000 * currentOp / totalOps);
	            if (percent10 !== lastPercent10) {
	              stop = callback(null, currentOp / totalOps);
	              if (stop) {
	                break;
	              }
	              lastPercent10 = percent10;
	            }
	          }
	          if (i1 < N) {
	            break;
	          }
	          i1 = 0; // Move to ROMix 6
	          state = 2;

	        // Fall through

	        case 2:
	          // Run up to 1000 steps of the second inner smix loop
	          steps = N - i1;
	          if (steps > limit) {
	            steps = limit;
	          }
	          for (var _i5 = 0; _i5 < steps; _i5++) {
	            // ROMix - 6
	            var offset = (2 * r - 1) * 16; // ROMix - 7
	            var _j = XY[offset] & N - 1;
	            blockxor(V, _j * Yi, XY, Yi); // ROMix - 8 (inner)
	            blockmix_salsa8(XY, Yi, r, x, _X); // ROMix - 9 (outer)
	          }

	          // for (var i = 0; i < N; i++)...
	          i1 += steps;
	          currentOp += steps;

	          // Call the callback with the progress (optionally stopping us)
	          if (callback) {
	            var _percent = parseInt(1000 * currentOp / totalOps);
	            if (_percent !== lastPercent10) {
	              stop = callback(null, currentOp / totalOps);
	              if (stop) {
	                break;
	              }
	              lastPercent10 = _percent;
	            }
	          }
	          if (i1 < N) {
	            break;
	          }
	          arraycopy(XY, 0, B, Bi, Yi); // ROMix - 10

	          // for (var i = 0; i < p; i++)...
	          i0++;
	          if (i0 < p) {
	            state = 0;
	            break;
	          }
	          b = [];
	          for (var _i6 = 0; _i6 < B.length; _i6++) {
	            b.push(B[_i6] >> 0 & 0xff);
	            b.push(B[_i6] >> 8 & 0xff);
	            b.push(B[_i6] >> 16 & 0xff);
	            b.push(B[_i6] >> 24 & 0xff);
	          }
	          var derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);

	          // Send the result to the callback
	          if (callback) {
	            callback(null, 1.0, derivedKey);
	          }

	          // Done; don't break (which would reschedule)
	          return derivedKey;
	      }

	      // Schedule the next steps
	      if (callback) {
	        nextTick(incrementalSMix);
	      }
	    };

	    // Run the smix state machine until completion
	    if (!callback) {
	      while (true) {
	        var derivedKey = incrementalSMix();
	        if (derivedKey != undefined) {
	          return derivedKey;
	        }
	      }
	    }

	    // Bootstrap the async incremental smix
	    incrementalSMix();
	  }
	  var lib = {
	    scrypt: function scrypt(password, salt, N, r, p, dkLen, progressCallback) {
	      return new Promise(function (resolve, reject) {
	        var lastProgress = 0;
	        if (progressCallback) {
	          progressCallback(0);
	        }
	        _scrypt(password, salt, N, r, p, dkLen, function (error, progress, key) {
	          if (error) {
	            reject(error);
	          } else if (key) {
	            if (progressCallback && lastProgress !== 1) {
	              progressCallback(1);
	            }
	            resolve(new Uint8Array(key));
	          } else if (progressCallback && progress !== lastProgress) {
	            lastProgress = progress;
	            return progressCallback(progress);
	          }
	        });
	      });
	    },
	    syncScrypt: function syncScrypt(password, salt, N, r, p, dkLen) {
	      return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));
	    }
	  };

	  // node.js
	  {
	    module.exports = lib;

	    // RequireJS/AMD
	    // http://www.requirejs.org/docs/api.html
	    // https://github.com/amdjs/amdjs-api/wiki/AMD
	  }
	})();
} (scrypt$1));

var scrypt = scrypt$1.exports;

function _createSuper$g(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$g(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$g() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __awaiter$e = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger$m = new Logger(version$9);
// Exported Types
function hasMnemonic$1(value) {
  return value != null && value.mnemonic && value.mnemonic.phrase;
}
var KeystoreAccount = /*#__PURE__*/function (_Description) {
  _inherits(KeystoreAccount, _Description);
  var _super = _createSuper$g(KeystoreAccount);
  function KeystoreAccount() {
    _classCallCheck(this, KeystoreAccount);
    return _super.apply(this, arguments);
  }
  _createClass(KeystoreAccount, [{
    key: "isKeystoreAccount",
    value: function isKeystoreAccount(value) {
      return !!(value && value._isKeystoreAccount);
    }
  }]);
  return KeystoreAccount;
}(Description);
function _decrypt(data, key, ciphertext) {
  var cipher = searchPath(data, "crypto/cipher");
  if (cipher === "aes-128-ctr") {
    var iv = looseArrayify(searchPath(data, "crypto/cipherparams/iv"));
    var counter = new aes$1.Counter(iv);
    var aesCtr = new aes$1.ModeOfOperation.ctr(key, counter);
    return arrayify(aesCtr.decrypt(ciphertext));
  }
  return null;
}
function _getAccount(data, key) {
  var ciphertext = looseArrayify(searchPath(data, "crypto/ciphertext"));
  var computedMAC = hexlify(keccak256$1(concat([key.slice(16, 32), ciphertext]))).substring(2);
  if (computedMAC !== searchPath(data, "crypto/mac").toLowerCase()) {
    throw new Error("invalid password");
  }
  var privateKey = _decrypt(data, key.slice(0, 16), ciphertext);
  if (!privateKey) {
    logger$m.throwError("unsupported cipher", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "decrypt"
    });
  }
  var mnemonicKey = key.slice(32, 64);
  var address = computeAddress(privateKey);
  if (data.address) {
    var check = data.address.toLowerCase();
    if (check.substring(0, 2) !== "0x") {
      check = "0x" + check;
    }
    if (getAddress(check) !== address) {
      throw new Error("address mismatch");
    }
  }
  var account = {
    _isKeystoreAccount: true,
    address: address,
    privateKey: hexlify(privateKey)
  };
  // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase
  if (searchPath(data, "x-ethers/version") === "0.1") {
    var mnemonicCiphertext = looseArrayify(searchPath(data, "x-ethers/mnemonicCiphertext"));
    var mnemonicIv = looseArrayify(searchPath(data, "x-ethers/mnemonicCounter"));
    var mnemonicCounter = new aes$1.Counter(mnemonicIv);
    var mnemonicAesCtr = new aes$1.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
    var path = searchPath(data, "x-ethers/path") || defaultPath;
    var locale = searchPath(data, "x-ethers/locale") || "en";
    var entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));
    try {
      var mnemonic = entropyToMnemonic(entropy, locale);
      var node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);
      if (node.privateKey != account.privateKey) {
        throw new Error("mnemonic mismatch");
      }
      account.mnemonic = node.mnemonic;
    } catch (error) {
      // If we don't have the locale wordlist installed to
      // read this mnemonic, just bail and don't set the
      // mnemonic
      if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
        throw error;
      }
    }
  }
  return new KeystoreAccount(account);
}
function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
  return arrayify(pbkdf2$1(passwordBytes, salt, count, dkLen, prfFunc));
}
function pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {
  return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
}
function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
  var passwordBytes = getPassword(password);
  var kdf = searchPath(data, "crypto/kdf");
  if (kdf && typeof kdf === "string") {
    var throwError = function throwError(name, value) {
      return logger$m.throwArgumentError("invalid key-derivation function parameters", name, value);
    };
    if (kdf.toLowerCase() === "scrypt") {
      var salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
      var N = parseInt(searchPath(data, "crypto/kdfparams/n"));
      var r = parseInt(searchPath(data, "crypto/kdfparams/r"));
      var p = parseInt(searchPath(data, "crypto/kdfparams/p"));
      // Check for all required parameters
      if (!N || !r || !p) {
        throwError("kdf", kdf);
      }
      // Make sure N is a power of 2
      if ((N & N - 1) !== 0) {
        throwError("N", N);
      }
      var dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
      if (dkLen !== 32) {
        throwError("dklen", dkLen);
      }
      return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);
    } else if (kdf.toLowerCase() === "pbkdf2") {
      var _salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
      var prfFunc = null;
      var prf = searchPath(data, "crypto/kdfparams/prf");
      if (prf === "hmac-sha256") {
        prfFunc = "sha256";
      } else if (prf === "hmac-sha512") {
        prfFunc = "sha512";
      } else {
        throwError("prf", prf);
      }
      var count = parseInt(searchPath(data, "crypto/kdfparams/c"));
      var _dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
      if (_dkLen !== 32) {
        throwError("dklen", _dkLen);
      }
      return pbkdf2Func(passwordBytes, _salt, count, _dkLen, prfFunc);
    }
  }
  return logger$m.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
}
function decryptSync(json, password) {
  var data = JSON.parse(json);
  var key = _computeKdfKey(data, password, pbkdf2Sync, scrypt.syncScrypt);
  return _getAccount(data, key);
}
function decrypt(json, password, progressCallback) {
  return __awaiter$e(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
    var data, key;
    return regenerator.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            data = JSON.parse(json);
            _context.next = 3;
            return _computeKdfKey(data, password, pbkdf2, scrypt.scrypt, progressCallback);
          case 3:
            key = _context.sent;
            return _context.abrupt("return", _getAccount(data, key));
          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
}
function encrypt(account, password, options, progressCallback) {
  try {
    // Check the address matches the private key
    if (getAddress(account.address) !== computeAddress(account.privateKey)) {
      throw new Error("address/privateKey mismatch");
    }
    // Check the mnemonic (if any) matches the private key
    if (hasMnemonic$1(account)) {
      var mnemonic = account.mnemonic;
      var node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);
      if (node.privateKey != account.privateKey) {
        throw new Error("mnemonic mismatch");
      }
    }
  } catch (e) {
    return Promise.reject(e);
  }
  // The options are optional, so adjust the call as needed
  if (typeof options === "function" && !progressCallback) {
    progressCallback = options;
    options = {};
  }
  if (!options) {
    options = {};
  }
  var privateKey = arrayify(account.privateKey);
  var passwordBytes = getPassword(password);
  var entropy = null;
  var path = null;
  var locale = null;
  if (hasMnemonic$1(account)) {
    var srcMnemonic = account.mnemonic;
    entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || "en"));
    path = srcMnemonic.path || defaultPath;
    locale = srcMnemonic.locale || "en";
  }
  var client = options.client;
  if (!client) {
    client = "ethers.js";
  }
  // Check/generate the salt
  var salt = null;
  if (options.salt) {
    salt = arrayify(options.salt);
  } else {
    salt = randomBytes(32);
  }
  // Override initialization vector
  var iv = null;
  if (options.iv) {
    iv = arrayify(options.iv);
    if (iv.length !== 16) {
      throw new Error("invalid iv");
    }
  } else {
    iv = randomBytes(16);
  }
  // Override the uuid
  var uuidRandom = null;
  if (options.uuid) {
    uuidRandom = arrayify(options.uuid);
    if (uuidRandom.length !== 16) {
      throw new Error("invalid uuid");
    }
  } else {
    uuidRandom = randomBytes(16);
  }
  // Override the scrypt password-based key derivation function parameters
  var N = 1 << 17,
    r = 8,
    p = 1;
  if (options.scrypt) {
    if (options.scrypt.N) {
      N = options.scrypt.N;
    }
    if (options.scrypt.r) {
      r = options.scrypt.r;
    }
    if (options.scrypt.p) {
      p = options.scrypt.p;
    }
  }
  // We take 64 bytes:
  //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)
  //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)
  return scrypt.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then(function (key) {
    key = arrayify(key);
    // This will be used to encrypt the wallet (as per Web3 secret storage)
    var derivedKey = key.slice(0, 16);
    var macPrefix = key.slice(16, 32);
    // This will be used to encrypt the mnemonic phrase (if any)
    var mnemonicKey = key.slice(32, 64);
    // Encrypt the private key
    var counter = new aes$1.Counter(iv);
    var aesCtr = new aes$1.ModeOfOperation.ctr(derivedKey, counter);
    var ciphertext = arrayify(aesCtr.encrypt(privateKey));
    // Compute the message authentication code, used to check the password
    var mac = keccak256$1(concat([macPrefix, ciphertext]));
    // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition
    var data = {
      address: account.address.substring(2).toLowerCase(),
      id: uuidV4(uuidRandom),
      version: 3,
      crypto: {
        cipher: "aes-128-ctr",
        cipherparams: {
          iv: hexlify(iv).substring(2)
        },
        ciphertext: hexlify(ciphertext).substring(2),
        kdf: "scrypt",
        kdfparams: {
          salt: hexlify(salt).substring(2),
          n: N,
          dklen: 32,
          p: p,
          r: r
        },
        mac: mac.substring(2)
      }
    };
    // If we have a mnemonic, encrypt it into the JSON wallet
    if (entropy) {
      var mnemonicIv = randomBytes(16);
      var mnemonicCounter = new aes$1.Counter(mnemonicIv);
      var mnemonicAesCtr = new aes$1.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
      var mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));
      var now = new Date();
      var timestamp = now.getUTCFullYear() + "-" + zpad(now.getUTCMonth() + 1, 2) + "-" + zpad(now.getUTCDate(), 2) + "T" + zpad(now.getUTCHours(), 2) + "-" + zpad(now.getUTCMinutes(), 2) + "-" + zpad(now.getUTCSeconds(), 2) + ".0Z";
      data["x-ethers"] = {
        client: client,
        gethFilename: "UTC--" + timestamp + "--" + data.address,
        mnemonicCounter: hexlify(mnemonicIv).substring(2),
        mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),
        path: path,
        locale: locale,
        version: "0.1"
      };
    }
    return JSON.stringify(data);
  });
}

function decryptJsonWallet(json, password, progressCallback) {
  if (isCrowdsaleWallet(json)) {
    if (progressCallback) {
      progressCallback(0);
    }
    var account = decrypt$1(json, password);
    if (progressCallback) {
      progressCallback(1);
    }
    return Promise.resolve(account);
  }
  if (isKeystoreWallet(json)) {
    return decrypt(json, password, progressCallback);
  }
  return Promise.reject(new Error("invalid JSON wallet"));
}
function decryptJsonWalletSync(json, password) {
  if (isCrowdsaleWallet(json)) {
    return decrypt$1(json, password);
  }
  if (isKeystoreWallet(json)) {
    return decryptSync(json, password);
  }
  throw new Error("invalid JSON wallet");
}

var lib_esm$4 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  decryptCrowdsale: decrypt$1,
  decryptKeystore: decrypt,
  decryptKeystoreSync: decryptSync,
  encryptKeystore: encrypt,
  isCrowdsaleWallet: isCrowdsaleWallet,
  isKeystoreWallet: isKeystoreWallet,
  getJsonWalletAddress: getJsonWalletAddress,
  decryptJsonWallet: decryptJsonWallet,
  decryptJsonWalletSync: decryptJsonWalletSync
});

var version$8 = "wallet/5.7.0";

function _createSuper$f(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$f(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$f() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __awaiter$d = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger$l = new Logger(version$8);
function isAccount(value) {
  return value != null && isHexString$1(value.privateKey, 32) && value.address != null;
}
function hasMnemonic(value) {
  var mnemonic = value.mnemonic;
  return mnemonic && mnemonic.phrase;
}
var Wallet = /*#__PURE__*/function (_Signer) {
  _inherits(Wallet, _Signer);
  var _super = _createSuper$f(Wallet);
  function Wallet(privateKey, provider) {
    var _this;
    _classCallCheck(this, Wallet);
    _this = _super.call(this);
    if (isAccount(privateKey)) {
      var signingKey = new SigningKey(privateKey.privateKey);
      defineReadOnly(_assertThisInitialized(_this), "_signingKey", function () {
        return signingKey;
      });
      defineReadOnly(_assertThisInitialized(_this), "address", computeAddress(_this.publicKey));
      if (_this.address !== getAddress(privateKey.address)) {
        logger$l.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
      }
      if (hasMnemonic(privateKey)) {
        var srcMnemonic = privateKey.mnemonic;
        defineReadOnly(_assertThisInitialized(_this), "_mnemonic", function () {
          return {
            phrase: srcMnemonic.phrase,
            path: srcMnemonic.path || defaultPath,
            locale: srcMnemonic.locale || "en"
          };
        });
        var mnemonic = _this.mnemonic;
        var node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
        if (computeAddress(node.privateKey) !== _this.address) {
          logger$l.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
        }
      } else {
        defineReadOnly(_assertThisInitialized(_this), "_mnemonic", function () {
          return null;
        });
      }
    } else {
      if (SigningKey.isSigningKey(privateKey)) {
        /* istanbul ignore if */
        if (privateKey.curve !== "secp256k1") {
          logger$l.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
        }
        defineReadOnly(_assertThisInitialized(_this), "_signingKey", function () {
          return privateKey;
        });
      } else {
        // A lot of common tools do not prefix private keys with a 0x (see: #1166)
        if (typeof privateKey === "string") {
          if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
            privateKey = "0x" + privateKey;
          }
        }
        var _signingKey = new SigningKey(privateKey);
        defineReadOnly(_assertThisInitialized(_this), "_signingKey", function () {
          return _signingKey;
        });
      }
      defineReadOnly(_assertThisInitialized(_this), "_mnemonic", function () {
        return null;
      });
      defineReadOnly(_assertThisInitialized(_this), "address", computeAddress(_this.publicKey));
    }
    /* istanbul ignore if */
    if (provider && !Provider.isProvider(provider)) {
      logger$l.throwArgumentError("invalid provider", "provider", provider);
    }
    defineReadOnly(_assertThisInitialized(_this), "provider", provider || null);
    return _this;
  }
  _createClass(Wallet, [{
    key: "mnemonic",
    get: function get() {
      return this._mnemonic();
    }
  }, {
    key: "privateKey",
    get: function get() {
      return this._signingKey().privateKey;
    }
  }, {
    key: "publicKey",
    get: function get() {
      return this._signingKey().publicKey;
    }
  }, {
    key: "getAddress",
    value: function getAddress() {
      return Promise.resolve(this.address);
    }
  }, {
    key: "connect",
    value: function connect(provider) {
      return new Wallet(this, provider);
    }
  }, {
    key: "signTransaction",
    value: function signTransaction(transaction) {
      var _this2 = this;
      return resolveProperties(transaction).then(function (tx) {
        if (tx.from != null) {
          if (getAddress(tx.from) !== _this2.address) {
            logger$l.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
          }
          delete tx.from;
        }
        var signature = _this2._signingKey().signDigest(keccak256$1(serialize$1(tx)));
        return serialize$1(tx, signature);
      });
    }
  }, {
    key: "signMessage",
    value: function signMessage(message) {
      return __awaiter$d(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", joinSignature(this._signingKey().signDigest(hashMessage(message))));
              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
    }
  }, {
    key: "_signTypedData",
    value: function _signTypedData(domain, types, value) {
      return __awaiter$d(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee2() {
        var _this3 = this;
        var populated;
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return TypedDataEncoder.resolveNames(domain, types, value, function (name) {
                  if (_this3.provider == null) {
                    logger$l.throwError("cannot resolve ENS names without a provider", Logger.errors.UNSUPPORTED_OPERATION, {
                      operation: "resolveName",
                      value: name
                    });
                  }
                  return _this3.provider.resolveName(name);
                });
              case 2:
                populated = _context2.sent;
                return _context2.abrupt("return", joinSignature(this._signingKey().signDigest(TypedDataEncoder.hash(populated.domain, types, populated.value))));
              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
    }
  }, {
    key: "encrypt",
    value: function encrypt$1(password, options, progressCallback) {
      if (typeof options === "function" && !progressCallback) {
        progressCallback = options;
        options = {};
      }
      if (progressCallback && typeof progressCallback !== "function") {
        throw new Error("invalid callback");
      }
      if (!options) {
        options = {};
      }
      return encrypt(this, password, options, progressCallback);
    }
    /**
     *  Static methods to create Wallet instances.
     */
  }], [{
    key: "createRandom",
    value: function createRandom(options) {
      var entropy = randomBytes(16);
      if (!options) {
        options = {};
      }
      if (options.extraEntropy) {
        entropy = arrayify(hexDataSlice(keccak256$1(concat([entropy, options.extraEntropy])), 0, 16));
      }
      var mnemonic = entropyToMnemonic(entropy, options.locale);
      return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
    }
  }, {
    key: "fromEncryptedJson",
    value: function fromEncryptedJson(json, password, progressCallback) {
      return decryptJsonWallet(json, password, progressCallback).then(function (account) {
        return new Wallet(account);
      });
    }
  }, {
    key: "fromEncryptedJsonSync",
    value: function fromEncryptedJsonSync(json, password) {
      return new Wallet(decryptJsonWalletSync(json, password));
    }
  }, {
    key: "fromMnemonic",
    value: function fromMnemonic(mnemonic, path, wordlist) {
      if (!path) {
        path = defaultPath;
      }
      return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));
    }
  }]);
  return Wallet;
}(Signer);
function verifyMessage(message, signature) {
  return recoverAddress(hashMessage(message), signature);
}
function verifyTypedData(domain, types, value, signature) {
  return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);
}

var lib_esm$3 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Wallet: Wallet,
  verifyMessage: verifyMessage,
  verifyTypedData: verifyTypedData
});

var version$7 = "networks/5.7.1";

var logger$k = new Logger(version$7);
function isRenetworkable(value) {
  return value && typeof value.renetwork === "function";
}
function ethDefaultProvider(network) {
  var func = function func(providers, options) {
    if (options == null) {
      options = {};
    }
    var providerList = [];
    if (providers.InfuraProvider && options.infura !== "-") {
      try {
        providerList.push(new providers.InfuraProvider(network, options.infura));
      } catch (error) {}
    }
    if (providers.EtherscanProvider && options.etherscan !== "-") {
      try {
        providerList.push(new providers.EtherscanProvider(network, options.etherscan));
      } catch (error) {}
    }
    if (providers.AlchemyProvider && options.alchemy !== "-") {
      try {
        providerList.push(new providers.AlchemyProvider(network, options.alchemy));
      } catch (error) {}
    }
    if (providers.PocketProvider && options.pocket !== "-") {
      // These networks are currently faulty on Pocket as their
      // network does not handle the Berlin hardfork, which is
      // live on these ones.
      // @TODO: This goes away once Pocket has upgraded their nodes
      var skip = ["goerli", "ropsten", "rinkeby", "sepolia"];
      try {
        var provider = new providers.PocketProvider(network, options.pocket);
        if (provider.network && skip.indexOf(provider.network.name) === -1) {
          providerList.push(provider);
        }
      } catch (error) {}
    }
    if (providers.CloudflareProvider && options.cloudflare !== "-") {
      try {
        providerList.push(new providers.CloudflareProvider(network));
      } catch (error) {}
    }
    if (providers.AnkrProvider && options.ankr !== "-") {
      try {
        var _skip = ["ropsten"];
        var _provider = new providers.AnkrProvider(network, options.ankr);
        if (_provider.network && _skip.indexOf(_provider.network.name) === -1) {
          providerList.push(_provider);
        }
      } catch (error) {}
    }
    if (providerList.length === 0) {
      return null;
    }
    if (providers.FallbackProvider) {
      var quorum = 1;
      if (options.quorum != null) {
        quorum = options.quorum;
      } else if (network === "homestead") {
        quorum = 2;
      }
      return new providers.FallbackProvider(providerList, quorum);
    }
    return providerList[0];
  };
  func.renetwork = function (network) {
    return ethDefaultProvider(network);
  };
  return func;
}
function etcDefaultProvider(url, network) {
  var func = function func(providers, options) {
    if (providers.JsonRpcProvider) {
      return new providers.JsonRpcProvider(url, network);
    }
    return null;
  };
  func.renetwork = function (network) {
    return etcDefaultProvider(url, network);
  };
  return func;
}
var homestead = {
  chainId: 1,
  ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
  name: "homestead",
  _defaultProvider: ethDefaultProvider("homestead")
};
var ropsten = {
  chainId: 3,
  ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
  name: "ropsten",
  _defaultProvider: ethDefaultProvider("ropsten")
};
var classicMordor = {
  chainId: 63,
  name: "classicMordor",
  _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
};
// See: https://chainlist.org
var networks = {
  unspecified: {
    chainId: 0,
    name: "unspecified"
  },
  homestead: homestead,
  mainnet: homestead,
  morden: {
    chainId: 2,
    name: "morden"
  },
  ropsten: ropsten,
  testnet: ropsten,
  rinkeby: {
    chainId: 4,
    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    name: "rinkeby",
    _defaultProvider: ethDefaultProvider("rinkeby")
  },
  kovan: {
    chainId: 42,
    name: "kovan",
    _defaultProvider: ethDefaultProvider("kovan")
  },
  goerli: {
    chainId: 5,
    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    name: "goerli",
    _defaultProvider: ethDefaultProvider("goerli")
  },
  kintsugi: {
    chainId: 1337702,
    name: "kintsugi"
  },
  sepolia: {
    chainId: 11155111,
    name: "sepolia",
    _defaultProvider: ethDefaultProvider("sepolia")
  },
  // ETC (See: #351)
  classic: {
    chainId: 61,
    name: "classic",
    _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/etc", "classic")
  },
  classicMorden: {
    chainId: 62,
    name: "classicMorden"
  },
  classicMordor: classicMordor,
  classicTestnet: classicMordor,
  classicKotti: {
    chainId: 6,
    name: "classicKotti",
    _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/kotti", "classicKotti")
  },
  xdai: {
    chainId: 100,
    name: "xdai"
  },
  matic: {
    chainId: 137,
    name: "matic",
    _defaultProvider: ethDefaultProvider("matic")
  },
  maticmum: {
    chainId: 80001,
    name: "maticmum"
  },
  optimism: {
    chainId: 10,
    name: "optimism",
    _defaultProvider: ethDefaultProvider("optimism")
  },
  "optimism-kovan": {
    chainId: 69,
    name: "optimism-kovan"
  },
  "optimism-goerli": {
    chainId: 420,
    name: "optimism-goerli"
  },
  arbitrum: {
    chainId: 42161,
    name: "arbitrum"
  },
  "arbitrum-rinkeby": {
    chainId: 421611,
    name: "arbitrum-rinkeby"
  },
  "arbitrum-goerli": {
    chainId: 421613,
    name: "arbitrum-goerli"
  },
  bnb: {
    chainId: 56,
    name: "bnb"
  },
  bnbt: {
    chainId: 97,
    name: "bnbt"
  }
};
/**
 *  getNetwork
 *
 *  Converts a named common networks or chain ID (network ID) to a Network
 *  and verifies a network is a valid Network..
 */
function getNetwork(network) {
  // No network (null)
  if (network == null) {
    return null;
  }
  if (typeof network === "number") {
    for (var name in networks) {
      var _standard = networks[name];
      if (_standard.chainId === network) {
        return {
          name: _standard.name,
          chainId: _standard.chainId,
          ensAddress: _standard.ensAddress || null,
          _defaultProvider: _standard._defaultProvider || null
        };
      }
    }
    return {
      chainId: network,
      name: "unknown"
    };
  }
  if (typeof network === "string") {
    var _standard2 = networks[network];
    if (_standard2 == null) {
      return null;
    }
    return {
      name: _standard2.name,
      chainId: _standard2.chainId,
      ensAddress: _standard2.ensAddress,
      _defaultProvider: _standard2._defaultProvider || null
    };
  }
  var standard = networks[network.name];
  // Not a standard network; check that it is a valid network in general
  if (!standard) {
    if (typeof network.chainId !== "number") {
      logger$k.throwArgumentError("invalid network chainId", "network", network);
    }
    return network;
  }
  // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)
  if (network.chainId !== 0 && network.chainId !== standard.chainId) {
    logger$k.throwArgumentError("network chainId mismatch", "network", network);
  }
  // @TODO: In the next major version add an attach function to a defaultProvider
  // class and move the _defaultProvider internal to this file (extend Network)
  var defaultProvider = network._defaultProvider || null;
  if (defaultProvider == null && standard._defaultProvider) {
    if (isRenetworkable(standard._defaultProvider)) {
      defaultProvider = standard._defaultProvider.renetwork(network);
    } else {
      defaultProvider = standard._defaultProvider;
    }
  }
  // Standard Network (allow overriding the ENS address)
  return {
    name: network.name,
    chainId: standard.chainId,
    ensAddress: network.ensAddress || standard.ensAddress || null,
    _defaultProvider: defaultProvider
  };
}

var version$6 = "web/5.7.1";

var __awaiter$c = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
function getUrl(href, options) {
  return __awaiter$c(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
    var request, opts, response, body, headers;
    return regenerator.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (options == null) {
              options = {};
            }
            request = {
              method: options.method || "GET",
              headers: options.headers || {},
              body: options.body || undefined
            };
            if (options.skipFetchSetup !== true) {
              request.mode = "cors"; // no-cors, cors, *same-origin
              request.cache = "no-cache"; // *default, no-cache, reload, force-cache, only-if-cached
              request.credentials = "same-origin"; // include, *same-origin, omit
              request.redirect = "follow"; // manual, *follow, error
              request.referrer = "client"; // no-referrer, *client
            }
            if (options.fetchOptions != null) {
              opts = options.fetchOptions;
              if (opts.mode) {
                request.mode = opts.mode;
              }
              if (opts.cache) {
                request.cache = opts.cache;
              }
              if (opts.credentials) {
                request.credentials = opts.credentials;
              }
              if (opts.redirect) {
                request.redirect = opts.redirect;
              }
              if (opts.referrer) {
                request.referrer = opts.referrer;
              }
            }
            _context.next = 7;
            return fetch(href, request);
          case 7:
            response = _context.sent;
            _context.next = 10;
            return response.arrayBuffer();
          case 10:
            body = _context.sent;
            headers = {};
            if (response.headers.forEach) {
              response.headers.forEach(function (value, key) {
                headers[key.toLowerCase()] = value;
              });
            } else {
              response.headers.keys().forEach(function (key) {
                headers[key.toLowerCase()] = response.headers.get(key);
              });
            }
            return _context.abrupt("return", {
              headers: headers,
              statusCode: response.status,
              statusMessage: response.statusText,
              body: arrayify(new Uint8Array(body))
            });
          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
}

var __awaiter$b = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger$j = new Logger(version$6);
function staller(duration) {
  return new Promise(function (resolve) {
    setTimeout(resolve, duration);
  });
}
function bodyify(value, type) {
  if (value == null) {
    return null;
  }
  if (typeof value === "string") {
    return value;
  }
  if (isBytesLike(value)) {
    if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
      try {
        return toUtf8String(value);
      } catch (error) {}
    }
    return hexlify(value);
  }
  return value;
}
function unpercent(value) {
  return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, function (all, code) {
    return String.fromCharCode(parseInt(code, 16));
  }));
}
// This API is still a work in progress; the future changes will likely be:
// - ConnectionInfo => FetchDataRequest<T = any>
// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }
//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)
// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T
// For this reason, it should be considered internal until the API is finalized
function _fetchData(connection, body, processFunc) {
  // How many times to retry in the event of a throttle
  var attemptLimit = typeof connection === "object" && connection.throttleLimit != null ? connection.throttleLimit : 12;
  logger$j.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
  var throttleCallback = typeof connection === "object" ? connection.throttleCallback : null;
  var throttleSlotInterval = typeof connection === "object" && typeof connection.throttleSlotInterval === "number" ? connection.throttleSlotInterval : 100;
  logger$j.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
  var errorPassThrough = typeof connection === "object" ? !!connection.errorPassThrough : false;
  var headers = {};
  var url = null;
  // @TODO: Allow ConnectionInfo to override some of these values
  var options = {
    method: "GET"
  };
  var allow304 = false;
  var timeout = 2 * 60 * 1000;
  if (typeof connection === "string") {
    url = connection;
  } else if (typeof connection === "object") {
    if (connection == null || connection.url == null) {
      logger$j.throwArgumentError("missing URL", "connection.url", connection);
    }
    url = connection.url;
    if (typeof connection.timeout === "number" && connection.timeout > 0) {
      timeout = connection.timeout;
    }
    if (connection.headers) {
      for (var key in connection.headers) {
        headers[key.toLowerCase()] = {
          key: key,
          value: String(connection.headers[key])
        };
        if (["if-none-match", "if-modified-since"].indexOf(key.toLowerCase()) >= 0) {
          allow304 = true;
        }
      }
    }
    options.allowGzip = !!connection.allowGzip;
    if (connection.user != null && connection.password != null) {
      if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
        logger$j.throwError("basic authentication requires a secure https url", Logger.errors.INVALID_ARGUMENT, {
          argument: "url",
          url: url,
          user: connection.user,
          password: "[REDACTED]"
        });
      }
      var authorization = connection.user + ":" + connection.password;
      headers["authorization"] = {
        key: "Authorization",
        value: "Basic " + encode$1(toUtf8Bytes(authorization))
      };
    }
    if (connection.skipFetchSetup != null) {
      options.skipFetchSetup = !!connection.skipFetchSetup;
    }
    if (connection.fetchOptions != null) {
      options.fetchOptions = shallowCopy(connection.fetchOptions);
    }
  }
  var reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
  var dataMatch = url ? url.match(reData) : null;
  if (dataMatch) {
    try {
      var response = {
        statusCode: 200,
        statusMessage: "OK",
        headers: {
          "content-type": dataMatch[1] || "text/plain"
        },
        body: dataMatch[2] ? decode$1(dataMatch[3]) : unpercent(dataMatch[3])
      };
      var result = response.body;
      if (processFunc) {
        result = processFunc(response.body, response);
      }
      return Promise.resolve(result);
    } catch (error) {
      logger$j.throwError("processing response error", Logger.errors.SERVER_ERROR, {
        body: bodyify(dataMatch[1], dataMatch[2]),
        error: error,
        requestBody: null,
        requestMethod: "GET",
        url: url
      });
    }
  }
  if (body) {
    options.method = "POST";
    options.body = body;
    if (headers["content-type"] == null) {
      headers["content-type"] = {
        key: "Content-Type",
        value: "application/octet-stream"
      };
    }
    if (headers["content-length"] == null) {
      headers["content-length"] = {
        key: "Content-Length",
        value: String(body.length)
      };
    }
  }
  var flatHeaders = {};
  Object.keys(headers).forEach(function (key) {
    var header = headers[key];
    flatHeaders[header.key] = header.value;
  });
  options.headers = flatHeaders;
  var runningTimeout = function () {
    var timer = null;
    var promise = new Promise(function (resolve, reject) {
      if (timeout) {
        timer = setTimeout(function () {
          if (timer == null) {
            return;
          }
          timer = null;
          reject(logger$j.makeError("timeout", Logger.errors.TIMEOUT, {
            requestBody: bodyify(options.body, flatHeaders["content-type"]),
            requestMethod: options.method,
            timeout: timeout,
            url: url
          }));
        }, timeout);
      }
    });
    var cancel = function cancel() {
      if (timer == null) {
        return;
      }
      clearTimeout(timer);
      timer = null;
    };
    return {
      promise: promise,
      cancel: cancel
    };
  }();
  var runningFetch = function () {
    return __awaiter$b(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
      var attempt, _response, location, tryAgain, stall, retryAfter, _body, _result, _tryAgain, _timeout;
      return regenerator.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              attempt = 0;
            case 1:
              if (!(attempt < attemptLimit)) {
                _context.next = 65;
                break;
              }
              _response = null;
              _context.prev = 3;
              _context.next = 6;
              return getUrl(url, options);
            case 6:
              _response = _context.sent;
              if (!(attempt < attemptLimit)) {
                _context.next = 28;
                break;
              }
              if (!(_response.statusCode === 301 || _response.statusCode === 302)) {
                _context.next = 15;
                break;
              }
              // Redirection; for now we only support absolute locataions
              location = _response.headers.location || "";
              if (!(options.method === "GET" && location.match(/^https:/))) {
                _context.next = 13;
                break;
              }
              url = _response.headers.location;
              return _context.abrupt("continue", 62);
            case 13:
              _context.next = 28;
              break;
            case 15:
              if (!(_response.statusCode === 429)) {
                _context.next = 28;
                break;
              }
              // Exponential back-off throttling
              tryAgain = true;
              if (!throttleCallback) {
                _context.next = 21;
                break;
              }
              _context.next = 20;
              return throttleCallback(attempt, url);
            case 20:
              tryAgain = _context.sent;
            case 21:
              if (!tryAgain) {
                _context.next = 28;
                break;
              }
              stall = 0;
              retryAfter = _response.headers["retry-after"];
              if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                stall = parseInt(retryAfter) * 1000;
              } else {
                stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
              }
              //console.log("Stalling 429");
              _context.next = 27;
              return staller(stall);
            case 27:
              return _context.abrupt("continue", 62);
            case 28:
              _context.next = 34;
              break;
            case 30:
              _context.prev = 30;
              _context.t0 = _context["catch"](3);
              _response = _context.t0.response;
              if (_response == null) {
                runningTimeout.cancel();
                logger$j.throwError("missing response", Logger.errors.SERVER_ERROR, {
                  requestBody: bodyify(options.body, flatHeaders["content-type"]),
                  requestMethod: options.method,
                  serverError: _context.t0,
                  url: url
                });
              }
            case 34:
              _body = _response.body;
              if (allow304 && _response.statusCode === 304) {
                _body = null;
              } else if (!errorPassThrough && (_response.statusCode < 200 || _response.statusCode >= 300)) {
                runningTimeout.cancel();
                logger$j.throwError("bad response", Logger.errors.SERVER_ERROR, {
                  status: _response.statusCode,
                  headers: _response.headers,
                  body: bodyify(_body, _response.headers ? _response.headers["content-type"] : null),
                  requestBody: bodyify(options.body, flatHeaders["content-type"]),
                  requestMethod: options.method,
                  url: url
                });
              }
              if (!processFunc) {
                _context.next = 60;
                break;
              }
              _context.prev = 37;
              _context.next = 40;
              return processFunc(_body, _response);
            case 40:
              _result = _context.sent;
              runningTimeout.cancel();
              return _context.abrupt("return", _result);
            case 45:
              _context.prev = 45;
              _context.t1 = _context["catch"](37);
              if (!(_context.t1.throttleRetry && attempt < attemptLimit)) {
                _context.next = 58;
                break;
              }
              _tryAgain = true;
              if (!throttleCallback) {
                _context.next = 53;
                break;
              }
              _context.next = 52;
              return throttleCallback(attempt, url);
            case 52:
              _tryAgain = _context.sent;
            case 53:
              if (!_tryAgain) {
                _context.next = 58;
                break;
              }
              _timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt))); //console.log("Stalling callback");
              _context.next = 57;
              return staller(_timeout);
            case 57:
              return _context.abrupt("continue", 62);
            case 58:
              runningTimeout.cancel();
              logger$j.throwError("processing response error", Logger.errors.SERVER_ERROR, {
                body: bodyify(_body, _response.headers ? _response.headers["content-type"] : null),
                error: _context.t1,
                requestBody: bodyify(options.body, flatHeaders["content-type"]),
                requestMethod: options.method,
                url: url
              });
            case 60:
              runningTimeout.cancel();
              // If we had a processFunc, it either returned a T or threw above.
              // The "body" is now a Uint8Array.
              return _context.abrupt("return", _body);
            case 62:
              attempt++;
              _context.next = 1;
              break;
            case 65:
              return _context.abrupt("return", logger$j.throwError("failed response", Logger.errors.SERVER_ERROR, {
                requestBody: bodyify(options.body, flatHeaders["content-type"]),
                requestMethod: options.method,
                url: url
              }));
            case 66:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[3, 30], [37, 45]]);
    }));
  }();
  return Promise.race([runningTimeout.promise, runningFetch]);
}
function fetchJson(connection, json, processFunc) {
  var processJsonFunc = function processJsonFunc(value, response) {
    var result = null;
    if (value != null) {
      try {
        result = JSON.parse(toUtf8String(value));
      } catch (error) {
        logger$j.throwError("invalid JSON", Logger.errors.SERVER_ERROR, {
          body: value,
          error: error
        });
      }
    }
    if (processFunc) {
      result = processFunc(result, response);
    }
    return result;
  };
  // If we have json to send, we must
  // - add content-type of application/json (unless already overridden)
  // - convert the json to bytes
  var body = null;
  if (json != null) {
    body = toUtf8Bytes(json);
    // Create a connection with the content-type set for JSON
    var updated = typeof connection === "string" ? {
      url: connection
    } : shallowCopy(connection);
    if (updated.headers) {
      var hasContentType = Object.keys(updated.headers).filter(function (k) {
        return k.toLowerCase() === "content-type";
      }).length !== 0;
      if (!hasContentType) {
        updated.headers = shallowCopy(updated.headers);
        updated.headers["content-type"] = "application/json";
      }
    } else {
      updated.headers = {
        "content-type": "application/json"
      };
    }
    connection = updated;
  }
  return _fetchData(connection, body, processJsonFunc);
}
function poll(func, options) {
  if (!options) {
    options = {};
  }
  options = shallowCopy(options);
  if (options.floor == null) {
    options.floor = 0;
  }
  if (options.ceiling == null) {
    options.ceiling = 10000;
  }
  if (options.interval == null) {
    options.interval = 250;
  }
  return new Promise(function (resolve, reject) {
    var timer = null;
    var done = false;
    // Returns true if cancel was successful. Unsuccessful cancel means we're already done.
    var cancel = function cancel() {
      if (done) {
        return false;
      }
      done = true;
      if (timer) {
        clearTimeout(timer);
      }
      return true;
    };
    if (options.timeout) {
      timer = setTimeout(function () {
        if (cancel()) {
          reject(new Error("timeout"));
        }
      }, options.timeout);
    }
    var retryLimit = options.retryLimit;
    var attempt = 0;
    function check() {
      return func().then(function (result) {
        // If we have a result, or are allowed null then we're done
        if (result !== undefined) {
          if (cancel()) {
            resolve(result);
          }
        } else if (options.oncePoll) {
          options.oncePoll.once("poll", check);
        } else if (options.onceBlock) {
          options.onceBlock.once("block", check);
          // Otherwise, exponential back-off (up to 10s) our next request
        } else if (!done) {
          attempt++;
          if (attempt > retryLimit) {
            if (cancel()) {
              reject(new Error("retry limit reached"));
            }
            return;
          }
          var timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
          if (timeout < options.floor) {
            timeout = options.floor;
          }
          if (timeout > options.ceiling) {
            timeout = options.ceiling;
          }
          setTimeout(check, timeout);
        }
        return null;
      }, function (error) {
        if (cancel()) {
          reject(error);
        }
      });
    }
    check();
  });
}

var lib_esm$2 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  _fetchData: _fetchData,
  fetchJson: fetchJson,
  poll: poll
});

var ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';

// pre-compute lookup table
var ALPHABET_MAP = {};
for (var z$1 = 0; z$1 < ALPHABET.length; z$1++) {
  var x$1 = ALPHABET.charAt(z$1);
  if (ALPHABET_MAP[x$1] !== undefined) throw new TypeError(x$1 + ' is ambiguous');
  ALPHABET_MAP[x$1] = z$1;
}
function polymodStep(pre) {
  var b = pre >> 25;
  return (pre & 0x1FFFFFF) << 5 ^ -(b >> 0 & 1) & 0x3b6a57b2 ^ -(b >> 1 & 1) & 0x26508e6d ^ -(b >> 2 & 1) & 0x1ea119fa ^ -(b >> 3 & 1) & 0x3d4233dd ^ -(b >> 4 & 1) & 0x2a1462b3;
}
function prefixChk(prefix) {
  var chk = 1;
  for (var i = 0; i < prefix.length; ++i) {
    var c = prefix.charCodeAt(i);
    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')';
    chk = polymodStep(chk) ^ c >> 5;
  }
  chk = polymodStep(chk);
  for (i = 0; i < prefix.length; ++i) {
    var v = prefix.charCodeAt(i);
    chk = polymodStep(chk) ^ v & 0x1f;
  }
  return chk;
}
function encode(prefix, words, LIMIT) {
  LIMIT = LIMIT || 90;
  if (prefix.length + 7 + words.length > LIMIT) throw new TypeError('Exceeds length limit');
  prefix = prefix.toLowerCase();

  // determine chk mod
  var chk = prefixChk(prefix);
  if (typeof chk === 'string') throw new Error(chk);
  var result = prefix + '1';
  for (var i = 0; i < words.length; ++i) {
    var x = words[i];
    if (x >> 5 !== 0) throw new Error('Non 5-bit word');
    chk = polymodStep(chk) ^ x;
    result += ALPHABET.charAt(x);
  }
  for (i = 0; i < 6; ++i) {
    chk = polymodStep(chk);
  }
  chk ^= 1;
  for (i = 0; i < 6; ++i) {
    var v = chk >> (5 - i) * 5 & 0x1f;
    result += ALPHABET.charAt(v);
  }
  return result;
}
function __decode(str, LIMIT) {
  LIMIT = LIMIT || 90;
  if (str.length < 8) return str + ' too short';
  if (str.length > LIMIT) return 'Exceeds length limit';

  // don't allow mixed case
  var lowered = str.toLowerCase();
  var uppered = str.toUpperCase();
  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str;
  str = lowered;
  var split = str.lastIndexOf('1');
  if (split === -1) return 'No separator character for ' + str;
  if (split === 0) return 'Missing prefix for ' + str;
  var prefix = str.slice(0, split);
  var wordChars = str.slice(split + 1);
  if (wordChars.length < 6) return 'Data too short';
  var chk = prefixChk(prefix);
  if (typeof chk === 'string') return chk;
  var words = [];
  for (var i = 0; i < wordChars.length; ++i) {
    var c = wordChars.charAt(i);
    var v = ALPHABET_MAP[c];
    if (v === undefined) return 'Unknown character ' + c;
    chk = polymodStep(chk) ^ v;

    // not in the checksum?
    if (i + 6 >= wordChars.length) continue;
    words.push(v);
  }
  if (chk !== 1) return 'Invalid checksum for ' + str;
  return {
    prefix: prefix,
    words: words
  };
}
function decodeUnsafe() {
  var res = __decode.apply(null, arguments);
  if (typeof res === 'object') return res;
}
function decode(str) {
  var res = __decode.apply(null, arguments);
  if (typeof res === 'object') return res;
  throw new Error(res);
}
function convert$3(data, inBits, outBits, pad) {
  var value = 0;
  var bits = 0;
  var maxV = (1 << outBits) - 1;
  var result = [];
  for (var i = 0; i < data.length; ++i) {
    value = value << inBits | data[i];
    bits += inBits;
    while (bits >= outBits) {
      bits -= outBits;
      result.push(value >> bits & maxV);
    }
  }
  if (pad) {
    if (bits > 0) {
      result.push(value << outBits - bits & maxV);
    }
  } else {
    if (bits >= inBits) return 'Excess padding';
    if (value << outBits - bits & maxV) return 'Non-zero padding';
  }
  return result;
}
function toWordsUnsafe(bytes) {
  var res = convert$3(bytes, 8, 5, true);
  if (Array.isArray(res)) return res;
}
function toWords(bytes) {
  var res = convert$3(bytes, 8, 5, true);
  if (Array.isArray(res)) return res;
  throw new Error(res);
}
function fromWordsUnsafe(words) {
  var res = convert$3(words, 5, 8, false);
  if (Array.isArray(res)) return res;
}
function fromWords(words) {
  var res = convert$3(words, 5, 8, false);
  if (Array.isArray(res)) return res;
  throw new Error(res);
}
var bech32 = {
  decodeUnsafe: decodeUnsafe,
  decode: decode,
  encode: encode,
  toWordsUnsafe: toWordsUnsafe,
  toWords: toWords,
  fromWordsUnsafe: fromWordsUnsafe,
  fromWords: fromWords
};

var version$5 = "providers/5.7.2";

var logger$i = new Logger(version$5);
var Formatter = /*#__PURE__*/function () {
  function Formatter() {
    _classCallCheck(this, Formatter);
    this.formats = this.getDefaultFormats();
  }
  _createClass(Formatter, [{
    key: "getDefaultFormats",
    value: function getDefaultFormats() {
      var _this = this;
      var formats = {};
      var address = this.address.bind(this);
      var bigNumber = this.bigNumber.bind(this);
      var blockTag = this.blockTag.bind(this);
      var data = this.data.bind(this);
      var hash = this.hash.bind(this);
      var hex = this.hex.bind(this);
      var number = this.number.bind(this);
      var type = this.type.bind(this);
      var strictData = function strictData(v) {
        return _this.data(v, true);
      };
      formats.transaction = {
        hash: hash,
        type: type,
        accessList: Formatter.allowNull(this.accessList.bind(this), null),
        blockHash: Formatter.allowNull(hash, null),
        blockNumber: Formatter.allowNull(number, null),
        transactionIndex: Formatter.allowNull(number, null),
        confirmations: Formatter.allowNull(number, null),
        from: address,
        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)
        // must be set
        gasPrice: Formatter.allowNull(bigNumber),
        maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
        maxFeePerGas: Formatter.allowNull(bigNumber),
        gasLimit: bigNumber,
        to: Formatter.allowNull(address, null),
        value: bigNumber,
        nonce: number,
        data: data,
        r: Formatter.allowNull(this.uint256),
        s: Formatter.allowNull(this.uint256),
        v: Formatter.allowNull(number),
        creates: Formatter.allowNull(address, null),
        raw: Formatter.allowNull(data)
      };
      formats.transactionRequest = {
        from: Formatter.allowNull(address),
        nonce: Formatter.allowNull(number),
        gasLimit: Formatter.allowNull(bigNumber),
        gasPrice: Formatter.allowNull(bigNumber),
        maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
        maxFeePerGas: Formatter.allowNull(bigNumber),
        to: Formatter.allowNull(address),
        value: Formatter.allowNull(bigNumber),
        data: Formatter.allowNull(strictData),
        type: Formatter.allowNull(number),
        accessList: Formatter.allowNull(this.accessList.bind(this), null)
      };
      formats.receiptLog = {
        transactionIndex: number,
        blockNumber: number,
        transactionHash: hash,
        address: address,
        topics: Formatter.arrayOf(hash),
        data: data,
        logIndex: number,
        blockHash: hash
      };
      formats.receipt = {
        to: Formatter.allowNull(this.address, null),
        from: Formatter.allowNull(this.address, null),
        contractAddress: Formatter.allowNull(address, null),
        transactionIndex: number,
        // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
        root: Formatter.allowNull(hex),
        gasUsed: bigNumber,
        logsBloom: Formatter.allowNull(data),
        blockHash: hash,
        transactionHash: hash,
        logs: Formatter.arrayOf(this.receiptLog.bind(this)),
        blockNumber: number,
        confirmations: Formatter.allowNull(number, null),
        cumulativeGasUsed: bigNumber,
        effectiveGasPrice: Formatter.allowNull(bigNumber),
        status: Formatter.allowNull(number),
        type: type
      };
      formats.block = {
        hash: Formatter.allowNull(hash),
        parentHash: hash,
        number: number,
        timestamp: number,
        nonce: Formatter.allowNull(hex),
        difficulty: this.difficulty.bind(this),
        gasLimit: bigNumber,
        gasUsed: bigNumber,
        miner: Formatter.allowNull(address),
        extraData: data,
        transactions: Formatter.allowNull(Formatter.arrayOf(hash)),
        baseFeePerGas: Formatter.allowNull(bigNumber)
      };
      formats.blockWithTransactions = shallowCopy(formats.block);
      formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));
      formats.filter = {
        fromBlock: Formatter.allowNull(blockTag, undefined),
        toBlock: Formatter.allowNull(blockTag, undefined),
        blockHash: Formatter.allowNull(hash, undefined),
        address: Formatter.allowNull(address, undefined),
        topics: Formatter.allowNull(this.topics.bind(this), undefined)
      };
      formats.filterLog = {
        blockNumber: Formatter.allowNull(number),
        blockHash: Formatter.allowNull(hash),
        transactionIndex: number,
        removed: Formatter.allowNull(this["boolean"].bind(this)),
        address: address,
        data: Formatter.allowFalsish(data, "0x"),
        topics: Formatter.arrayOf(hash),
        transactionHash: hash,
        logIndex: number
      };
      return formats;
    }
  }, {
    key: "accessList",
    value: function accessList(_accessList) {
      return accessListify(_accessList || []);
    }
    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number
    // Strict! Used on input.
  }, {
    key: "number",
    value: function number(_number) {
      if (_number === "0x") {
        return 0;
      }
      return BigNumber.from(_number).toNumber();
    }
  }, {
    key: "type",
    value: function type(number) {
      if (number === "0x" || number == null) {
        return 0;
      }
      return BigNumber.from(number).toNumber();
    }
    // Strict! Used on input.
  }, {
    key: "bigNumber",
    value: function bigNumber(value) {
      return BigNumber.from(value);
    }
    // Requires a boolean, "true" or  "false"; returns a boolean
  }, {
    key: "boolean",
    value: function boolean(value) {
      if (typeof value === "boolean") {
        return value;
      }
      if (typeof value === "string") {
        value = value.toLowerCase();
        if (value === "true") {
          return true;
        }
        if (value === "false") {
          return false;
        }
      }
      throw new Error("invalid boolean - " + value);
    }
  }, {
    key: "hex",
    value: function hex(value, strict) {
      if (typeof value === "string") {
        if (!strict && value.substring(0, 2) !== "0x") {
          value = "0x" + value;
        }
        if (isHexString$1(value)) {
          return value.toLowerCase();
        }
      }
      return logger$i.throwArgumentError("invalid hash", "value", value);
    }
  }, {
    key: "data",
    value: function data(value, strict) {
      var result = this.hex(value, strict);
      if (result.length % 2 !== 0) {
        throw new Error("invalid data; odd-length - " + value);
      }
      return result;
    }
    // Requires an address
    // Strict! Used on input.
  }, {
    key: "address",
    value: function address(value) {
      return getAddress(value);
    }
  }, {
    key: "callAddress",
    value: function callAddress(value) {
      if (!isHexString$1(value, 32)) {
        return null;
      }
      var address = getAddress(hexDataSlice(value, 12));
      return address === AddressZero ? null : address;
    }
  }, {
    key: "contractAddress",
    value: function contractAddress(value) {
      return getContractAddress(value);
    }
    // Strict! Used on input.
  }, {
    key: "blockTag",
    value: function blockTag(_blockTag) {
      if (_blockTag == null) {
        return "latest";
      }
      if (_blockTag === "earliest") {
        return "0x0";
      }
      switch (_blockTag) {
        case "earliest":
          return "0x0";
        case "latest":
        case "pending":
        case "safe":
        case "finalized":
          return _blockTag;
      }
      if (typeof _blockTag === "number" || isHexString$1(_blockTag)) {
        return hexValue(_blockTag);
      }
      throw new Error("invalid blockTag");
    }
    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.
  }, {
    key: "hash",
    value: function hash(value, strict) {
      var result = this.hex(value, strict);
      if (hexDataLength(result) !== 32) {
        return logger$i.throwArgumentError("invalid hash", "value", value);
      }
      return result;
    }
    // Returns the difficulty as a number, or if too large (i.e. PoA network) null
  }, {
    key: "difficulty",
    value: function difficulty(value) {
      if (value == null) {
        return null;
      }
      var v = BigNumber.from(value);
      try {
        return v.toNumber();
      } catch (error) {}
      return null;
    }
  }, {
    key: "uint256",
    value: function uint256(value) {
      if (!isHexString$1(value)) {
        throw new Error("invalid uint256");
      }
      return hexZeroPad(value, 32);
    }
  }, {
    key: "_block",
    value: function _block(value, format) {
      if (value.author != null && value.miner == null) {
        value.miner = value.author;
      }
      // The difficulty may need to come from _difficulty in recursed blocks
      var difficulty = value._difficulty != null ? value._difficulty : value.difficulty;
      var result = Formatter.check(format, value);
      result._difficulty = difficulty == null ? null : BigNumber.from(difficulty);
      return result;
    }
  }, {
    key: "block",
    value: function block(value) {
      return this._block(value, this.formats.block);
    }
  }, {
    key: "blockWithTransactions",
    value: function blockWithTransactions(value) {
      return this._block(value, this.formats.blockWithTransactions);
    }
    // Strict! Used on input.
  }, {
    key: "transactionRequest",
    value: function transactionRequest(value) {
      return Formatter.check(this.formats.transactionRequest, value);
    }
  }, {
    key: "transactionResponse",
    value: function transactionResponse(transaction) {
      // Rename gas to gasLimit
      if (transaction.gas != null && transaction.gasLimit == null) {
        transaction.gasLimit = transaction.gas;
      }
      // Some clients (TestRPC) do strange things like return 0x0 for the
      // 0 address; correct this to be a real address
      if (transaction.to && BigNumber.from(transaction.to).isZero()) {
        transaction.to = "0x0000000000000000000000000000000000000000";
      }
      // Rename input to data
      if (transaction.input != null && transaction.data == null) {
        transaction.data = transaction.input;
      }
      // If to and creates are empty, populate the creates from the transaction
      if (transaction.to == null && transaction.creates == null) {
        transaction.creates = this.contractAddress(transaction);
      }
      if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {
        transaction.accessList = [];
      }
      var result = Formatter.check(this.formats.transaction, transaction);
      if (transaction.chainId != null) {
        var chainId = transaction.chainId;
        if (isHexString$1(chainId)) {
          chainId = BigNumber.from(chainId).toNumber();
        }
        result.chainId = chainId;
      } else {
        var _chainId = transaction.networkId;
        // geth-etc returns chainId
        if (_chainId == null && result.v == null) {
          _chainId = transaction.chainId;
        }
        if (isHexString$1(_chainId)) {
          _chainId = BigNumber.from(_chainId).toNumber();
        }
        if (typeof _chainId !== "number" && result.v != null) {
          _chainId = (result.v - 35) / 2;
          if (_chainId < 0) {
            _chainId = 0;
          }
          _chainId = parseInt(_chainId);
        }
        if (typeof _chainId !== "number") {
          _chainId = 0;
        }
        result.chainId = _chainId;
      }
      // 0x0000... should actually be null
      if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
        result.blockHash = null;
      }
      return result;
    }
  }, {
    key: "transaction",
    value: function transaction(value) {
      return parse$1(value);
    }
  }, {
    key: "receiptLog",
    value: function receiptLog(value) {
      return Formatter.check(this.formats.receiptLog, value);
    }
  }, {
    key: "receipt",
    value: function receipt(value) {
      var result = Formatter.check(this.formats.receipt, value);
      // RSK incorrectly implemented EIP-658, so we munge things a bit here for it
      if (result.root != null) {
        if (result.root.length <= 4) {
          // Could be 0x00, 0x0, 0x01 or 0x1
          var _value = BigNumber.from(result.root).toNumber();
          if (_value === 0 || _value === 1) {
            // Make sure if both are specified, they match
            if (result.status != null && result.status !== _value) {
              logger$i.throwArgumentError("alt-root-status/status mismatch", "value", {
                root: result.root,
                status: result.status
              });
            }
            result.status = _value;
            delete result.root;
          } else {
            logger$i.throwArgumentError("invalid alt-root-status", "value.root", result.root);
          }
        } else if (result.root.length !== 66) {
          // Must be a valid bytes32
          logger$i.throwArgumentError("invalid root hash", "value.root", result.root);
        }
      }
      if (result.status != null) {
        result.byzantium = true;
      }
      return result;
    }
  }, {
    key: "topics",
    value: function topics(value) {
      var _this2 = this;
      if (Array.isArray(value)) {
        return value.map(function (v) {
          return _this2.topics(v);
        });
      } else if (value != null) {
        return this.hash(value, true);
      }
      return null;
    }
  }, {
    key: "filter",
    value: function filter(value) {
      return Formatter.check(this.formats.filter, value);
    }
  }, {
    key: "filterLog",
    value: function filterLog(value) {
      return Formatter.check(this.formats.filterLog, value);
    }
  }], [{
    key: "check",
    value: function check(format, object) {
      var result = {};
      for (var key in format) {
        try {
          var value = format[key](object[key]);
          if (value !== undefined) {
            result[key] = value;
          }
        } catch (error) {
          error.checkKey = key;
          error.checkValue = object[key];
          throw error;
        }
      }
      return result;
    }
    // if value is null-ish, nullValue is returned
  }, {
    key: "allowNull",
    value: function allowNull(format, nullValue) {
      return function (value) {
        if (value == null) {
          return nullValue;
        }
        return format(value);
      };
    }
    // If value is false-ish, replaceValue is returned
  }, {
    key: "allowFalsish",
    value: function allowFalsish(format, replaceValue) {
      return function (value) {
        if (!value) {
          return replaceValue;
        }
        return format(value);
      };
    }
    // Requires an Array satisfying check
  }, {
    key: "arrayOf",
    value: function arrayOf(format) {
      return function (array) {
        if (!Array.isArray(array)) {
          throw new Error("not an array");
        }
        var result = [];
        array.forEach(function (value) {
          result.push(format(value));
        });
        return result;
      };
    }
  }]);
  return Formatter;
}();
function isCommunityResourcable(value) {
  return value && typeof value.isCommunityResource === "function";
}
function isCommunityResource(value) {
  return isCommunityResourcable(value) && value.isCommunityResource();
}
// Show the throttle message only once
var throttleMessage = false;
function showThrottleMessage() {
  if (throttleMessage) {
    return;
  }
  throttleMessage = true;
  console.log("========= NOTICE =========");
  console.log("Request-Rate Exceeded  (this message will not be repeated)");
  console.log("");
  console.log("The default API keys for each service are provided as a highly-throttled,");
  console.log("community resource for low-traffic projects and early prototyping.");
  console.log("");
  console.log("While your application will continue to function, we highly recommended");
  console.log("signing up for your own API keys to improve performance, increase your");
  console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
  console.log("");
  console.log("For more details: https:/\/docs.ethers.io/api-keys/");
  console.log("==========================");
}

function _createSuper$e(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$e(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$e() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __awaiter$a = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger$h = new Logger(version$5);
var MAX_CCIP_REDIRECTS = 10;
//////////////////////////////
// Event Serializeing
function checkTopic(topic) {
  if (topic == null) {
    return "null";
  }
  if (hexDataLength(topic) !== 32) {
    logger$h.throwArgumentError("invalid topic", "topic", topic);
  }
  return topic.toLowerCase();
}
function serializeTopics(topics) {
  // Remove trailing null AND-topics; they are redundant
  topics = topics.slice();
  while (topics.length > 0 && topics[topics.length - 1] == null) {
    topics.pop();
  }
  return topics.map(function (topic) {
    if (Array.isArray(topic)) {
      // Only track unique OR-topics
      var unique = {};
      topic.forEach(function (topic) {
        unique[checkTopic(topic)] = true;
      });
      // The order of OR-topics does not matter
      var sorted = Object.keys(unique);
      sorted.sort();
      return sorted.join("|");
    } else {
      return checkTopic(topic);
    }
  }).join("&");
}
function deserializeTopics(data) {
  if (data === "") {
    return [];
  }
  return data.split(/&/g).map(function (topic) {
    if (topic === "") {
      return [];
    }
    var comps = topic.split("|").map(function (topic) {
      return topic === "null" ? null : topic;
    });
    return comps.length === 1 ? comps[0] : comps;
  });
}
function getEventTag(eventName) {
  if (typeof eventName === "string") {
    eventName = eventName.toLowerCase();
    if (hexDataLength(eventName) === 32) {
      return "tx:" + eventName;
    }
    if (eventName.indexOf(":") === -1) {
      return eventName;
    }
  } else if (Array.isArray(eventName)) {
    return "filter:*:" + serializeTopics(eventName);
  } else if (ForkEvent.isForkEvent(eventName)) {
    logger$h.warn("not implemented");
    throw new Error("not implemented");
  } else if (eventName && typeof eventName === "object") {
    return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
  }
  throw new Error("invalid event - " + eventName);
}
//////////////////////////////
// Helper Object
function getTime() {
  return new Date().getTime();
}
function stall$1(duration) {
  return new Promise(function (resolve) {
    setTimeout(resolve, duration);
  });
}
//////////////////////////////
// Provider Object
/**
 *  EventType
 *   - "block"
 *   - "poll"
 *   - "didPoll"
 *   - "pending"
 *   - "error"
 *   - "network"
 *   - filter
 *   - topics array
 *   - transaction hash
 */
var PollableEvents = ["block", "network", "pending", "poll"];
var Event = /*#__PURE__*/function () {
  function Event(tag, listener, once) {
    _classCallCheck(this, Event);
    defineReadOnly(this, "tag", tag);
    defineReadOnly(this, "listener", listener);
    defineReadOnly(this, "once", once);
    this._lastBlockNumber = -2;
    this._inflight = false;
  }
  _createClass(Event, [{
    key: "event",
    get: function get() {
      switch (this.type) {
        case "tx":
          return this.hash;
        case "filter":
          return this.filter;
      }
      return this.tag;
    }
  }, {
    key: "type",
    get: function get() {
      return this.tag.split(":")[0];
    }
  }, {
    key: "hash",
    get: function get() {
      var comps = this.tag.split(":");
      if (comps[0] !== "tx") {
        return null;
      }
      return comps[1];
    }
  }, {
    key: "filter",
    get: function get() {
      var comps = this.tag.split(":");
      if (comps[0] !== "filter") {
        return null;
      }
      var address = comps[1];
      var topics = deserializeTopics(comps[2]);
      var filter = {};
      if (topics.length > 0) {
        filter.topics = topics;
      }
      if (address && address !== "*") {
        filter.address = address;
      }
      return filter;
    }
  }, {
    key: "pollable",
    value: function pollable() {
      return this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0;
    }
  }]);
  return Event;
}();
// https://github.com/satoshilabs/slips/blob/master/slip-0044.md
var coinInfos = {
  "0": {
    symbol: "btc",
    p2pkh: 0x00,
    p2sh: 0x05,
    prefix: "bc"
  },
  "2": {
    symbol: "ltc",
    p2pkh: 0x30,
    p2sh: 0x32,
    prefix: "ltc"
  },
  "3": {
    symbol: "doge",
    p2pkh: 0x1e,
    p2sh: 0x16
  },
  "60": {
    symbol: "eth",
    ilk: "eth"
  },
  "61": {
    symbol: "etc",
    ilk: "eth"
  },
  "700": {
    symbol: "xdai",
    ilk: "eth"
  }
};
function bytes32ify(value) {
  return hexZeroPad(BigNumber.from(value).toHexString(), 32);
}
// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)
function base58Encode(data) {
  return Base58.encode(concat([data, hexDataSlice(sha256$1(sha256$1(data)), 0, 4)]));
}
var matcherIpfs = new RegExp("^(ipfs):/\/(.*)$", "i");
var matchers = [new RegExp("^(https):/\/(.*)$", "i"), new RegExp("^(data):(.*)$", "i"), matcherIpfs, new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")];
function _parseString(result, start) {
  try {
    return toUtf8String(_parseBytes(result, start));
  } catch (error) {}
  return null;
}
function _parseBytes(result, start) {
  if (result === "0x") {
    return null;
  }
  var offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();
  var length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();
  return hexDataSlice(result, offset + 32, offset + 32 + length);
}
// Trim off the ipfs:// prefix and return the default gateway URL
function getIpfsLink(link) {
  if (link.match(/^ipfs:\/\/ipfs\//i)) {
    link = link.substring(12);
  } else if (link.match(/^ipfs:\/\//i)) {
    link = link.substring(7);
  } else {
    logger$h.throwArgumentError("unsupported IPFS format", "link", link);
  }
  return "https://gateway.ipfs.io/ipfs/".concat(link);
}
function numPad(value) {
  var result = arrayify(value);
  if (result.length > 32) {
    throw new Error("internal; should not happen");
  }
  var padded = new Uint8Array(32);
  padded.set(result, 32 - result.length);
  return padded;
}
function bytesPad(value) {
  if (value.length % 32 === 0) {
    return value;
  }
  var result = new Uint8Array(Math.ceil(value.length / 32) * 32);
  result.set(value);
  return result;
}
// ABI Encodes a series of (bytes, bytes, ...)
function encodeBytes(datas) {
  var result = [];
  var byteCount = 0;
  // Add place-holders for pointers as we add items
  for (var i = 0; i < datas.length; i++) {
    result.push(null);
    byteCount += 32;
  }
  for (var _i = 0; _i < datas.length; _i++) {
    var data = arrayify(datas[_i]);
    // Update the bytes offset
    result[_i] = numPad(byteCount);
    // The length and padded value of data
    result.push(numPad(data.length));
    result.push(bytesPad(data));
    byteCount += 32 + Math.ceil(data.length / 32) * 32;
  }
  return hexConcat(result);
}
var Resolver = /*#__PURE__*/function () {
  // The resolvedAddress is only for creating a ReverseLookup resolver
  function Resolver(provider, address, name, resolvedAddress) {
    _classCallCheck(this, Resolver);
    defineReadOnly(this, "provider", provider);
    defineReadOnly(this, "name", name);
    defineReadOnly(this, "address", provider.formatter.address(address));
    defineReadOnly(this, "_resolvedAddress", resolvedAddress);
  }
  _createClass(Resolver, [{
    key: "supportsWildcard",
    value: function supportsWildcard() {
      var _this = this;
      if (!this._supportsEip2544) {
        // supportsInterface(bytes4 = selector("resolve(bytes,bytes)"))
        this._supportsEip2544 = this.provider.call({
          to: this.address,
          data: "0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"
        }).then(function (result) {
          return BigNumber.from(result).eq(1);
        })["catch"](function (error) {
          if (error.code === Logger.errors.CALL_EXCEPTION) {
            return false;
          }
          // Rethrow the error: link is down, etc. Let future attempts retry.
          _this._supportsEip2544 = null;
          throw error;
        });
      }
      return this._supportsEip2544;
    }
  }, {
    key: "_fetch",
    value: function _fetch(selector, parameters) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
        var tx, parseBytes, result;
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // e.g. keccak256("addr(bytes32,uint256)")
                tx = {
                  to: this.address,
                  ccipReadEnabled: true,
                  data: hexConcat([selector, namehash(this.name), parameters || "0x"])
                }; // Wildcard support; use EIP-2544 to resolve the request
                parseBytes = false;
                _context.next = 4;
                return this.supportsWildcard();
              case 4:
                if (!_context.sent) {
                  _context.next = 7;
                  break;
                }
                parseBytes = true;
                // selector("resolve(bytes,bytes)")
                tx.data = hexConcat(["0x9061b923", encodeBytes([dnsEncode(this.name), tx.data])]);
              case 7:
                _context.prev = 7;
                _context.next = 10;
                return this.provider.call(tx);
              case 10:
                result = _context.sent;
                if (arrayify(result).length % 32 === 4) {
                  logger$h.throwError("resolver threw error", Logger.errors.CALL_EXCEPTION, {
                    transaction: tx,
                    data: result
                  });
                }
                if (parseBytes) {
                  result = _parseBytes(result, 0);
                }
                return _context.abrupt("return", result);
              case 16:
                _context.prev = 16;
                _context.t0 = _context["catch"](7);
                if (!(_context.t0.code === Logger.errors.CALL_EXCEPTION)) {
                  _context.next = 20;
                  break;
                }
                return _context.abrupt("return", null);
              case 20:
                throw _context.t0;
              case 21:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[7, 16]]);
      }));
    }
  }, {
    key: "_fetchBytes",
    value: function _fetchBytes(selector, parameters) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee2() {
        var result;
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this._fetch(selector, parameters);
              case 2:
                result = _context2.sent;
                if (!(result != null)) {
                  _context2.next = 5;
                  break;
                }
                return _context2.abrupt("return", _parseBytes(result, 0));
              case 5:
                return _context2.abrupt("return", null);
              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
    }
  }, {
    key: "_getAddress",
    value: function _getAddress(coinType, hexBytes) {
      var coinInfo = coinInfos[String(coinType)];
      if (coinInfo == null) {
        logger$h.throwError("unsupported coin type: ".concat(coinType), Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "getAddress(".concat(coinType, ")")
        });
      }
      if (coinInfo.ilk === "eth") {
        return this.provider.formatter.address(hexBytes);
      }
      var bytes = arrayify(hexBytes);
      // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG
      if (coinInfo.p2pkh != null) {
        var p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
        if (p2pkh) {
          var length = parseInt(p2pkh[1], 16);
          if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {
            return base58Encode(concat([[coinInfo.p2pkh], "0x" + p2pkh[2]]));
          }
        }
      }
      // P2SH: OP_HASH160 <scriptHash> OP_EQUAL
      if (coinInfo.p2sh != null) {
        var p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
        if (p2sh) {
          var _length = parseInt(p2sh[1], 16);
          if (p2sh[2].length === _length * 2 && _length >= 1 && _length <= 75) {
            return base58Encode(concat([[coinInfo.p2sh], "0x" + p2sh[2]]));
          }
        }
      }
      // Bech32
      if (coinInfo.prefix != null) {
        var _length2 = bytes[1];
        // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program
        var _version = bytes[0];
        if (_version === 0x00) {
          if (_length2 !== 20 && _length2 !== 32) {
            _version = -1;
          }
        } else {
          _version = -1;
        }
        if (_version >= 0 && bytes.length === 2 + _length2 && _length2 >= 1 && _length2 <= 75) {
          var words = bech32.toWords(bytes.slice(2));
          words.unshift(_version);
          return bech32.encode(coinInfo.prefix, words);
        }
      }
      return null;
    }
  }, {
    key: "getAddress",
    value: function getAddress(coinType) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee3() {
        var result, hexBytes, address;
        return regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (coinType == null) {
                  coinType = 60;
                }
                // If Ethereum, use the standard `addr(bytes32)`
                if (!(coinType === 60)) {
                  _context3.next = 16;
                  break;
                }
                _context3.prev = 2;
                _context3.next = 5;
                return this._fetch("0x3b3b57de");
              case 5:
                result = _context3.sent;
                if (!(result === "0x" || result === HashZero)) {
                  _context3.next = 8;
                  break;
                }
                return _context3.abrupt("return", null);
              case 8:
                return _context3.abrupt("return", this.provider.formatter.callAddress(result));
              case 11:
                _context3.prev = 11;
                _context3.t0 = _context3["catch"](2);
                if (!(_context3.t0.code === Logger.errors.CALL_EXCEPTION)) {
                  _context3.next = 15;
                  break;
                }
                return _context3.abrupt("return", null);
              case 15:
                throw _context3.t0;
              case 16:
                _context3.next = 18;
                return this._fetchBytes("0xf1cb7e06", bytes32ify(coinType));
              case 18:
                hexBytes = _context3.sent;
                if (!(hexBytes == null || hexBytes === "0x")) {
                  _context3.next = 21;
                  break;
                }
                return _context3.abrupt("return", null);
              case 21:
                // Compute the address
                address = this._getAddress(coinType, hexBytes);
                if (address == null) {
                  logger$h.throwError("invalid or unsupported coin data", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "getAddress(".concat(coinType, ")"),
                    coinType: coinType,
                    data: hexBytes
                  });
                }
                return _context3.abrupt("return", address);
              case 24:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[2, 11]]);
      }));
    }
  }, {
    key: "getAvatar",
    value: function getAvatar() {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee4() {
        var linkage, avatar, i, match, scheme, selector, owner, comps, addr, tokenId, tokenOwner, balance, tx, metadataUrl, metadata, imageUrl, ipfs;
        return regenerator.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                linkage = [{
                  type: "name",
                  content: this.name
                }];
                _context4.prev = 1;
                _context4.next = 4;
                return this.getText("avatar");
              case 4:
                avatar = _context4.sent;
                if (!(avatar == null)) {
                  _context4.next = 7;
                  break;
                }
                return _context4.abrupt("return", null);
              case 7:
                i = 0;
              case 8:
                if (!(i < matchers.length)) {
                  _context4.next = 91;
                  break;
                }
                match = avatar.match(matchers[i]);
                if (!(match == null)) {
                  _context4.next = 12;
                  break;
                }
                return _context4.abrupt("continue", 88);
              case 12:
                scheme = match[1].toLowerCase();
                _context4.t0 = scheme;
                _context4.next = _context4.t0 === "https" ? 16 : _context4.t0 === "data" ? 18 : _context4.t0 === "ipfs" ? 20 : _context4.t0 === "erc721" ? 22 : _context4.t0 === "erc1155" ? 22 : 88;
                break;
              case 16:
                linkage.push({
                  type: "url",
                  content: avatar
                });
                return _context4.abrupt("return", {
                  linkage: linkage,
                  url: avatar
                });
              case 18:
                linkage.push({
                  type: "data",
                  content: avatar
                });
                return _context4.abrupt("return", {
                  linkage: linkage,
                  url: avatar
                });
              case 20:
                linkage.push({
                  type: "ipfs",
                  content: avatar
                });
                return _context4.abrupt("return", {
                  linkage: linkage,
                  url: getIpfsLink(avatar)
                });
              case 22:
                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)
                selector = scheme === "erc721" ? "0xc87b56dd" : "0x0e89341c";
                linkage.push({
                  type: scheme,
                  content: avatar
                });
                // The owner of this name
                _context4.t1 = this._resolvedAddress;
                if (_context4.t1) {
                  _context4.next = 29;
                  break;
                }
                _context4.next = 28;
                return this.getAddress();
              case 28:
                _context4.t1 = _context4.sent;
              case 29:
                owner = _context4.t1;
                comps = (match[2] || "").split("/");
                if (!(comps.length !== 2)) {
                  _context4.next = 33;
                  break;
                }
                return _context4.abrupt("return", null);
              case 33:
                _context4.next = 35;
                return this.provider.formatter.address(comps[0]);
              case 35:
                addr = _context4.sent;
                tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32); // Check that this account owns the token
                if (!(scheme === "erc721")) {
                  _context4.next = 48;
                  break;
                }
                _context4.t2 = this.provider.formatter;
                _context4.next = 41;
                return this.provider.call({
                  to: addr,
                  data: hexConcat(["0x6352211e", tokenId])
                });
              case 41:
                _context4.t3 = _context4.sent;
                tokenOwner = _context4.t2.callAddress.call(_context4.t2, _context4.t3);
                if (!(owner !== tokenOwner)) {
                  _context4.next = 45;
                  break;
                }
                return _context4.abrupt("return", null);
              case 45:
                linkage.push({
                  type: "owner",
                  content: tokenOwner
                });
                _context4.next = 57;
                break;
              case 48:
                if (!(scheme === "erc1155")) {
                  _context4.next = 57;
                  break;
                }
                _context4.t4 = BigNumber;
                _context4.next = 52;
                return this.provider.call({
                  to: addr,
                  data: hexConcat(["0x00fdd58e", hexZeroPad(owner, 32), tokenId])
                });
              case 52:
                _context4.t5 = _context4.sent;
                balance = _context4.t4.from.call(_context4.t4, _context4.t5);
                if (!balance.isZero()) {
                  _context4.next = 56;
                  break;
                }
                return _context4.abrupt("return", null);
              case 56:
                linkage.push({
                  type: "balance",
                  content: balance.toString()
                });
              case 57:
                // Call the token contract for the metadata URL
                tx = {
                  to: this.provider.formatter.address(comps[0]),
                  data: hexConcat([selector, tokenId])
                };
                _context4.t6 = _parseString;
                _context4.next = 61;
                return this.provider.call(tx);
              case 61:
                _context4.t7 = _context4.sent;
                metadataUrl = (0, _context4.t6)(_context4.t7, 0);
                if (!(metadataUrl == null)) {
                  _context4.next = 65;
                  break;
                }
                return _context4.abrupt("return", null);
              case 65:
                linkage.push({
                  type: "metadata-url-base",
                  content: metadataUrl
                });
                // ERC-1155 allows a generic {id} in the URL
                if (scheme === "erc1155") {
                  metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
                  linkage.push({
                    type: "metadata-url-expanded",
                    content: metadataUrl
                  });
                }
                // Transform IPFS metadata links
                if (metadataUrl.match(/^ipfs:/i)) {
                  metadataUrl = getIpfsLink(metadataUrl);
                }
                linkage.push({
                  type: "metadata-url",
                  content: metadataUrl
                });
                // Get the token metadata
                _context4.next = 71;
                return fetchJson(metadataUrl);
              case 71:
                metadata = _context4.sent;
                if (metadata) {
                  _context4.next = 74;
                  break;
                }
                return _context4.abrupt("return", null);
              case 74:
                linkage.push({
                  type: "metadata",
                  content: JSON.stringify(metadata)
                });
                // Pull the image URL out
                imageUrl = metadata.image;
                if (!(typeof imageUrl !== "string")) {
                  _context4.next = 78;
                  break;
                }
                return _context4.abrupt("return", null);
              case 78:
                if (!imageUrl.match(/^(https:\/\/|data:)/i)) {
                  _context4.next = 81;
                  break;
                }
                _context4.next = 86;
                break;
              case 81:
                // Transform IPFS link to gateway
                ipfs = imageUrl.match(matcherIpfs);
                if (!(ipfs == null)) {
                  _context4.next = 84;
                  break;
                }
                return _context4.abrupt("return", null);
              case 84:
                linkage.push({
                  type: "url-ipfs",
                  content: imageUrl
                });
                imageUrl = getIpfsLink(imageUrl);
              case 86:
                linkage.push({
                  type: "url",
                  content: imageUrl
                });
                return _context4.abrupt("return", {
                  linkage: linkage,
                  url: imageUrl
                });
              case 88:
                i++;
                _context4.next = 8;
                break;
              case 91:
                _context4.next = 95;
                break;
              case 93:
                _context4.prev = 93;
                _context4.t8 = _context4["catch"](1);
              case 95:
                return _context4.abrupt("return", null);
              case 96:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[1, 93]]);
      }));
    }
  }, {
    key: "getContentHash",
    value: function getContentHash() {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee5() {
        var hexBytes, ipfs, length, ipns, _length3, swarm, skynet, urlSafe, hash;
        return regenerator.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this._fetchBytes("0xbc1c58d1");
              case 2:
                hexBytes = _context5.sent;
                if (!(hexBytes == null || hexBytes === "0x")) {
                  _context5.next = 5;
                  break;
                }
                return _context5.abrupt("return", null);
              case 5:
                // IPFS (CID: 1, Type: DAG-PB)
                ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                if (!ipfs) {
                  _context5.next = 10;
                  break;
                }
                length = parseInt(ipfs[3], 16);
                if (!(ipfs[4].length === length * 2)) {
                  _context5.next = 10;
                  break;
                }
                return _context5.abrupt("return", "ipfs:/\/" + Base58.encode("0x" + ipfs[1]));
              case 10:
                // IPNS (CID: 1, Type: libp2p-key)
                ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                if (!ipns) {
                  _context5.next = 15;
                  break;
                }
                _length3 = parseInt(ipns[3], 16);
                if (!(ipns[4].length === _length3 * 2)) {
                  _context5.next = 15;
                  break;
                }
                return _context5.abrupt("return", "ipns:/\/" + Base58.encode("0x" + ipns[1]));
              case 15:
                // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)
                swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
                if (!swarm) {
                  _context5.next = 19;
                  break;
                }
                if (!(swarm[1].length === 32 * 2)) {
                  _context5.next = 19;
                  break;
                }
                return _context5.abrupt("return", "bzz:/\/" + swarm[1]);
              case 19:
                skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);
                if (!skynet) {
                  _context5.next = 25;
                  break;
                }
                if (!(skynet[1].length === 34 * 2)) {
                  _context5.next = 25;
                  break;
                }
                // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5
                urlSafe = {
                  "=": "",
                  "+": "-",
                  "/": "_"
                };
                hash = encode$1("0x" + skynet[1]).replace(/[=+\/]/g, function (a) {
                  return urlSafe[a];
                });
                return _context5.abrupt("return", "sia:/\/" + hash);
              case 25:
                return _context5.abrupt("return", logger$h.throwError("invalid or unsupported content hash data", Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "getContentHash()",
                  data: hexBytes
                }));
              case 26:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));
    }
  }, {
    key: "getText",
    value: function getText(key) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee6() {
        var keyBytes, hexBytes;
        return regenerator.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                // The key encoded as parameter to fetchBytes
                keyBytes = toUtf8Bytes(key); // The nodehash consumes the first slot, so the string pointer targets
                // offset 64, with the length at offset 64 and data starting at offset 96
                keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);
                // Pad to word-size (32 bytes)
                if (keyBytes.length % 32 !== 0) {
                  keyBytes = concat([keyBytes, hexZeroPad("0x", 32 - key.length % 32)]);
                }
                _context6.next = 5;
                return this._fetchBytes("0x59d1d43c", hexlify(keyBytes));
              case 5:
                hexBytes = _context6.sent;
                if (!(hexBytes == null || hexBytes === "0x")) {
                  _context6.next = 8;
                  break;
                }
                return _context6.abrupt("return", null);
              case 8:
                return _context6.abrupt("return", toUtf8String(hexBytes));
              case 9:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));
    }
  }]);
  return Resolver;
}();
var defaultFormatter = null;
var nextPollId = 1;
var BaseProvider = /*#__PURE__*/function (_Provider) {
  _inherits(BaseProvider, _Provider);
  var _super = _createSuper$e(BaseProvider);
  /**
   *  ready
   *
   *  A Promise<Network> that resolves only once the provider is ready.
   *
   *  Sub-classes that call the super with a network without a chainId
   *  MUST set this. Standard named networks have a known chainId.
   *
   */
  function BaseProvider(network) {
    var _this2;
    _classCallCheck(this, BaseProvider);
    _this2 = _super.call(this);
    // Events being listened to
    _this2._events = [];
    _this2._emitted = {
      block: -2
    };
    _this2.disableCcipRead = false;
    _this2.formatter = (this instanceof BaseProvider ? this.constructor : void 0).getFormatter();
    // If network is any, this Provider allows the underlying
    // network to change dynamically, and we auto-detect the
    // current network
    defineReadOnly(_assertThisInitialized(_this2), "anyNetwork", network === "any");
    if (_this2.anyNetwork) {
      network = _this2.detectNetwork();
    }
    if (network instanceof Promise) {
      _this2._networkPromise = network;
      // Squash any "unhandled promise" errors; that do not need to be handled
      network["catch"](function (error) {});
      // Trigger initial network setting (async)
      _this2._ready()["catch"](function (error) {});
    } else {
      var knownNetwork = getStatic(this instanceof BaseProvider ? this.constructor : void 0, "getNetwork")(network);
      if (knownNetwork) {
        defineReadOnly(_assertThisInitialized(_this2), "_network", knownNetwork);
        _this2.emit("network", knownNetwork, null);
      } else {
        logger$h.throwArgumentError("invalid network", "network", network);
      }
    }
    _this2._maxInternalBlockNumber = -1024;
    _this2._lastBlockNumber = -2;
    _this2._maxFilterBlockRange = 10;
    _this2._pollingInterval = 4000;
    _this2._fastQueryDate = 0;
    return _this2;
  }
  _createClass(BaseProvider, [{
    key: "_ready",
    value: function _ready() {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee7() {
        var network;
        return regenerator.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                if (!(this._network == null)) {
                  _context7.next = 17;
                  break;
                }
                network = null;
                if (!this._networkPromise) {
                  _context7.next = 11;
                  break;
                }
                _context7.prev = 3;
                _context7.next = 6;
                return this._networkPromise;
              case 6:
                network = _context7.sent;
                _context7.next = 11;
                break;
              case 9:
                _context7.prev = 9;
                _context7.t0 = _context7["catch"](3);
              case 11:
                if (!(network == null)) {
                  _context7.next = 15;
                  break;
                }
                _context7.next = 14;
                return this.detectNetwork();
              case 14:
                network = _context7.sent;
              case 15:
                // This should never happen; every Provider sub-class should have
                // suggested a network by here (or have thrown).
                if (!network) {
                  logger$h.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
                }
                // Possible this call stacked so do not call defineReadOnly again
                if (this._network == null) {
                  if (this.anyNetwork) {
                    this._network = network;
                  } else {
                    defineReadOnly(this, "_network", network);
                  }
                  this.emit("network", network, null);
                }
              case 17:
                return _context7.abrupt("return", this._network);
              case 18:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this, [[3, 9]]);
      }));
    }
    // This will always return the most recently established network.
    // For "any", this can change (a "network" event is emitted before
    // any change is reflected); otherwise this cannot change
  }, {
    key: "ready",
    get: function get() {
      var _this3 = this;
      return poll(function () {
        return _this3._ready().then(function (network) {
          return network;
        }, function (error) {
          // If the network isn't running yet, we will wait
          if (error.code === Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
            return undefined;
          }
          throw error;
        });
      });
    }
    // @TODO: Remove this and just create a singleton formatter
  }, {
    key: "ccipReadFetch",
    value: function ccipReadFetch(tx, calldata, urls) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee8() {
        var sender, data, errorMessages, i, url, href, json, result, errorMessage;
        return regenerator.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                if (!(this.disableCcipRead || urls.length === 0)) {
                  _context8.next = 2;
                  break;
                }
                return _context8.abrupt("return", null);
              case 2:
                sender = tx.to.toLowerCase();
                data = calldata.toLowerCase();
                errorMessages = [];
                i = 0;
              case 6:
                if (!(i < urls.length)) {
                  _context8.next = 22;
                  break;
                }
                url = urls[i]; // URL expansion
                href = url.replace("{sender}", sender).replace("{data}", data); // If no {data} is present, use POST; otherwise GET
                json = url.indexOf("{data}") >= 0 ? null : JSON.stringify({
                  data: data,
                  sender: sender
                });
                _context8.next = 12;
                return fetchJson({
                  url: href,
                  errorPassThrough: true
                }, json, function (value, response) {
                  value.status = response.statusCode;
                  return value;
                });
              case 12:
                result = _context8.sent;
                if (!result.data) {
                  _context8.next = 15;
                  break;
                }
                return _context8.abrupt("return", result.data);
              case 15:
                errorMessage = result.message || "unknown error"; // 4xx indicates the result is not present; stop
                if (!(result.status >= 400 && result.status < 500)) {
                  _context8.next = 18;
                  break;
                }
                return _context8.abrupt("return", logger$h.throwError("response not found during CCIP fetch: ".concat(errorMessage), Logger.errors.SERVER_ERROR, {
                  url: url,
                  errorMessage: errorMessage
                }));
              case 18:
                // 5xx indicates server issue; try the next url
                errorMessages.push(errorMessage);
              case 19:
                i++;
                _context8.next = 6;
                break;
              case 22:
                return _context8.abrupt("return", logger$h.throwError("error encountered during CCIP fetch: ".concat(errorMessages.map(function (m) {
                  return JSON.stringify(m);
                }).join(", ")), Logger.errors.SERVER_ERROR, {
                  urls: urls,
                  errorMessages: errorMessages
                }));
              case 23:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));
    }
    // Fetches the blockNumber, but will reuse any result that is less
    // than maxAge old or has been requested since the last request
  }, {
    key: "_getInternalBlockNumber",
    value: function _getInternalBlockNumber(maxAge) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee9() {
        var _this4 = this;
        var internalBlockNumber, result, reqTime, checkInternalBlockNumber;
        return regenerator.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this._ready();
              case 2:
                if (!(maxAge > 0)) {
                  _context9.next = 20;
                  break;
                }
              case 3:
                if (!this._internalBlockNumber) {
                  _context9.next = 20;
                  break;
                }
                // ..."remember" which fetch we started with
                internalBlockNumber = this._internalBlockNumber;
                _context9.prev = 5;
                _context9.next = 8;
                return internalBlockNumber;
              case 8:
                result = _context9.sent;
                if (!(getTime() - result.respTime <= maxAge)) {
                  _context9.next = 11;
                  break;
                }
                return _context9.abrupt("return", result.blockNumber);
              case 11:
                return _context9.abrupt("break", 20);
              case 14:
                _context9.prev = 14;
                _context9.t0 = _context9["catch"](5);
                if (!(this._internalBlockNumber === internalBlockNumber)) {
                  _context9.next = 18;
                  break;
                }
                return _context9.abrupt("break", 20);
              case 18:
                _context9.next = 3;
                break;
              case 20:
                reqTime = getTime();
                checkInternalBlockNumber = resolveProperties({
                  blockNumber: this.perform("getBlockNumber", {}),
                  networkError: this.getNetwork().then(function (network) {
                    return null;
                  }, function (error) {
                    return error;
                  })
                }).then(function (_ref) {
                  var blockNumber = _ref.blockNumber,
                    networkError = _ref.networkError;
                  if (networkError) {
                    // Unremember this bad internal block number
                    if (_this4._internalBlockNumber === checkInternalBlockNumber) {
                      _this4._internalBlockNumber = null;
                    }
                    throw networkError;
                  }
                  var respTime = getTime();
                  blockNumber = BigNumber.from(blockNumber).toNumber();
                  if (blockNumber < _this4._maxInternalBlockNumber) {
                    blockNumber = _this4._maxInternalBlockNumber;
                  }
                  _this4._maxInternalBlockNumber = blockNumber;
                  _this4._setFastBlockNumber(blockNumber); // @TODO: Still need this?
                  return {
                    blockNumber: blockNumber,
                    reqTime: reqTime,
                    respTime: respTime
                  };
                });
                this._internalBlockNumber = checkInternalBlockNumber;
                // Swallow unhandled exceptions; if needed they are handled else where
                checkInternalBlockNumber["catch"](function (error) {
                  // Don't null the dead (rejected) fetch, if it has already been updated
                  if (_this4._internalBlockNumber === checkInternalBlockNumber) {
                    _this4._internalBlockNumber = null;
                  }
                });
                _context9.next = 26;
                return checkInternalBlockNumber;
              case 26:
                return _context9.abrupt("return", _context9.sent.blockNumber);
              case 27:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this, [[5, 14]]);
      }));
    }
  }, {
    key: "poll",
    value: function poll() {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee10() {
        var _this5 = this;
        var pollId, runners, blockNumber, i;
        return regenerator.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                pollId = nextPollId++; // Track all running promises, so we can trigger a post-poll once they are complete
                runners = [];
                blockNumber = null;
                _context10.prev = 3;
                _context10.next = 6;
                return this._getInternalBlockNumber(100 + this.pollingInterval / 2);
              case 6:
                blockNumber = _context10.sent;
                _context10.next = 13;
                break;
              case 9:
                _context10.prev = 9;
                _context10.t0 = _context10["catch"](3);
                this.emit("error", _context10.t0);
                return _context10.abrupt("return");
              case 13:
                this._setFastBlockNumber(blockNumber);
                // Emit a poll event after we have the latest (fast) block number
                this.emit("poll", pollId, blockNumber);
                // If the block has not changed, meh.
                if (!(blockNumber === this._lastBlockNumber)) {
                  _context10.next = 18;
                  break;
                }
                this.emit("didPoll", pollId);
                return _context10.abrupt("return");
              case 18:
                // First polling cycle, trigger a "block" events
                if (this._emitted.block === -2) {
                  this._emitted.block = blockNumber - 1;
                }
                if (Math.abs(this._emitted.block - blockNumber) > 1000) {
                  logger$h.warn("network block skew detected; skipping block events (emitted=".concat(this._emitted.block, " blockNumber").concat(blockNumber, ")"));
                  this.emit("error", logger$h.makeError("network block skew detected", Logger.errors.NETWORK_ERROR, {
                    blockNumber: blockNumber,
                    event: "blockSkew",
                    previousBlockNumber: this._emitted.block
                  }));
                  this.emit("block", blockNumber);
                } else {
                  // Notify all listener for each block that has passed
                  for (i = this._emitted.block + 1; i <= blockNumber; i++) {
                    this.emit("block", i);
                  }
                }
                // The emitted block was updated, check for obsolete events
                if (this._emitted.block !== blockNumber) {
                  this._emitted.block = blockNumber;
                  Object.keys(this._emitted).forEach(function (key) {
                    // The block event does not expire
                    if (key === "block") {
                      return;
                    }
                    // The block we were at when we emitted this event
                    var eventBlockNumber = _this5._emitted[key];
                    // We cannot garbage collect pending transactions or blocks here
                    // They should be garbage collected by the Provider when setting
                    // "pending" events
                    if (eventBlockNumber === "pending") {
                      return;
                    }
                    // Evict any transaction hashes or block hashes over 12 blocks
                    // old, since they should not return null anyways
                    if (blockNumber - eventBlockNumber > 12) {
                      delete _this5._emitted[key];
                    }
                  });
                }
                // First polling cycle
                if (this._lastBlockNumber === -2) {
                  this._lastBlockNumber = blockNumber - 1;
                }
                // Find all transaction hashes we are waiting on
                this._events.forEach(function (event) {
                  switch (event.type) {
                    case "tx":
                      {
                        var hash = event.hash;
                        var runner = _this5.getTransactionReceipt(hash).then(function (receipt) {
                          if (!receipt || receipt.blockNumber == null) {
                            return null;
                          }
                          _this5._emitted["t:" + hash] = receipt.blockNumber;
                          _this5.emit(hash, receipt);
                          return null;
                        })["catch"](function (error) {
                          _this5.emit("error", error);
                        });
                        runners.push(runner);
                        break;
                      }
                    case "filter":
                      {
                        // We only allow a single getLogs to be in-flight at a time
                        if (!event._inflight) {
                          event._inflight = true;
                          // This is the first filter for this event, so we want to
                          // restrict events to events that happened no earlier than now
                          if (event._lastBlockNumber === -2) {
                            event._lastBlockNumber = blockNumber - 1;
                          }
                          // Filter from the last *known* event; due to load-balancing
                          // and some nodes returning updated block numbers before
                          // indexing events, a logs result with 0 entries cannot be
                          // trusted and we must retry a range which includes it again
                          var filter = event.filter;
                          filter.fromBlock = event._lastBlockNumber + 1;
                          filter.toBlock = blockNumber;
                          // Prevent fitler ranges from growing too wild, since it is quite
                          // likely there just haven't been any events to move the lastBlockNumber.
                          var minFromBlock = filter.toBlock - _this5._maxFilterBlockRange;
                          if (minFromBlock > filter.fromBlock) {
                            filter.fromBlock = minFromBlock;
                          }
                          if (filter.fromBlock < 0) {
                            filter.fromBlock = 0;
                          }
                          var _runner = _this5.getLogs(filter).then(function (logs) {
                            // Allow the next getLogs
                            event._inflight = false;
                            if (logs.length === 0) {
                              return;
                            }
                            logs.forEach(function (log) {
                              // Only when we get an event for a given block number
                              // can we trust the events are indexed
                              if (log.blockNumber > event._lastBlockNumber) {
                                event._lastBlockNumber = log.blockNumber;
                              }
                              // Make sure we stall requests to fetch blocks and txs
                              _this5._emitted["b:" + log.blockHash] = log.blockNumber;
                              _this5._emitted["t:" + log.transactionHash] = log.blockNumber;
                              _this5.emit(filter, log);
                            });
                          })["catch"](function (error) {
                            _this5.emit("error", error);
                            // Allow another getLogs (the range was not updated)
                            event._inflight = false;
                          });
                          runners.push(_runner);
                        }
                        break;
                      }
                  }
                });
                this._lastBlockNumber = blockNumber;
                // Once all events for this loop have been processed, emit "didPoll"
                Promise.all(runners).then(function () {
                  _this5.emit("didPoll", pollId);
                })["catch"](function (error) {
                  _this5.emit("error", error);
                });
                return _context10.abrupt("return");
              case 26:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this, [[3, 9]]);
      }));
    }
    // Deprecated; do not use this
  }, {
    key: "resetEventsBlock",
    value: function resetEventsBlock(blockNumber) {
      this._lastBlockNumber = blockNumber - 1;
      if (this.polling) {
        this.poll();
      }
    }
  }, {
    key: "network",
    get: function get() {
      return this._network;
    }
    // This method should query the network if the underlying network
    // can change, such as when connected to a JSON-RPC backend
  }, {
    key: "detectNetwork",
    value: function detectNetwork() {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee11() {
        return regenerator.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                return _context11.abrupt("return", logger$h.throwError("provider does not support network detection", Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "provider.detectNetwork"
                }));
              case 1:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));
    }
  }, {
    key: "getNetwork",
    value: function getNetwork() {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee12() {
        var network, currentNetwork, error;
        return regenerator.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return this._ready();
              case 2:
                network = _context12.sent;
                _context12.next = 5;
                return this.detectNetwork();
              case 5:
                currentNetwork = _context12.sent;
                if (!(network.chainId !== currentNetwork.chainId)) {
                  _context12.next = 23;
                  break;
                }
                if (!this.anyNetwork) {
                  _context12.next = 20;
                  break;
                }
                this._network = currentNetwork;
                // Reset all internal block number guards and caches
                this._lastBlockNumber = -2;
                this._fastBlockNumber = null;
                this._fastBlockNumberPromise = null;
                this._fastQueryDate = 0;
                this._emitted.block = -2;
                this._maxInternalBlockNumber = -1024;
                this._internalBlockNumber = null;
                // The "network" event MUST happen before this method resolves
                // so any events have a chance to unregister, so we stall an
                // additional event loop before returning from /this/ call
                this.emit("network", currentNetwork, network);
                _context12.next = 19;
                return stall$1(0);
              case 19:
                return _context12.abrupt("return", this._network);
              case 20:
                error = logger$h.makeError("underlying network changed", Logger.errors.NETWORK_ERROR, {
                  event: "changed",
                  network: network,
                  detectedNetwork: currentNetwork
                });
                this.emit("error", error);
                throw error;
              case 23:
                return _context12.abrupt("return", network);
              case 24:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));
    }
  }, {
    key: "blockNumber",
    get: function get() {
      var _this6 = this;
      this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(function (blockNumber) {
        _this6._setFastBlockNumber(blockNumber);
      }, function (error) {});
      return this._fastBlockNumber != null ? this._fastBlockNumber : -1;
    }
  }, {
    key: "polling",
    get: function get() {
      return this._poller != null;
    },
    set: function set(value) {
      var _this7 = this;
      if (value && !this._poller) {
        this._poller = setInterval(function () {
          _this7.poll();
        }, this.pollingInterval);
        if (!this._bootstrapPoll) {
          this._bootstrapPoll = setTimeout(function () {
            _this7.poll();
            // We block additional polls until the polling interval
            // is done, to prevent overwhelming the poll function
            _this7._bootstrapPoll = setTimeout(function () {
              // If polling was disabled, something may require a poke
              // since starting the bootstrap poll and it was disabled
              if (!_this7._poller) {
                _this7.poll();
              }
              // Clear out the bootstrap so we can do another
              _this7._bootstrapPoll = null;
            }, _this7.pollingInterval);
          }, 0);
        }
      } else if (!value && this._poller) {
        clearInterval(this._poller);
        this._poller = null;
      }
    }
  }, {
    key: "pollingInterval",
    get: function get() {
      return this._pollingInterval;
    },
    set: function set(value) {
      var _this8 = this;
      if (typeof value !== "number" || value <= 0 || parseInt(String(value)) != value) {
        throw new Error("invalid polling interval");
      }
      this._pollingInterval = value;
      if (this._poller) {
        clearInterval(this._poller);
        this._poller = setInterval(function () {
          _this8.poll();
        }, this._pollingInterval);
      }
    }
  }, {
    key: "_getFastBlockNumber",
    value: function _getFastBlockNumber() {
      var _this9 = this;
      var now = getTime();
      // Stale block number, request a newer value
      if (now - this._fastQueryDate > 2 * this._pollingInterval) {
        this._fastQueryDate = now;
        this._fastBlockNumberPromise = this.getBlockNumber().then(function (blockNumber) {
          if (_this9._fastBlockNumber == null || blockNumber > _this9._fastBlockNumber) {
            _this9._fastBlockNumber = blockNumber;
          }
          return _this9._fastBlockNumber;
        });
      }
      return this._fastBlockNumberPromise;
    }
  }, {
    key: "_setFastBlockNumber",
    value: function _setFastBlockNumber(blockNumber) {
      // Older block, maybe a stale request
      if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
        return;
      }
      // Update the time we updated the blocknumber
      this._fastQueryDate = getTime();
      // Newer block number, use  it
      if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
        this._fastBlockNumber = blockNumber;
        this._fastBlockNumberPromise = Promise.resolve(blockNumber);
      }
    }
  }, {
    key: "waitForTransaction",
    value: function waitForTransaction(transactionHash, confirmations, timeout) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee13() {
        return regenerator.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                return _context13.abrupt("return", this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null));
              case 1:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));
    }
  }, {
    key: "_waitForTransaction",
    value: function _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee16() {
        var _this10 = this;
        var receipt;
        return regenerator.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return this.getTransactionReceipt(transactionHash);
              case 2:
                receipt = _context16.sent;
                if (!((receipt ? receipt.confirmations : 0) >= confirmations)) {
                  _context16.next = 5;
                  break;
                }
                return _context16.abrupt("return", receipt);
              case 5:
                return _context16.abrupt("return", new Promise(function (resolve, reject) {
                  var cancelFuncs = [];
                  var done = false;
                  var alreadyDone = function alreadyDone() {
                    if (done) {
                      return true;
                    }
                    done = true;
                    cancelFuncs.forEach(function (func) {
                      func();
                    });
                    return false;
                  };
                  var minedHandler = function minedHandler(receipt) {
                    if (receipt.confirmations < confirmations) {
                      return;
                    }
                    if (alreadyDone()) {
                      return;
                    }
                    resolve(receipt);
                  };
                  _this10.on(transactionHash, minedHandler);
                  cancelFuncs.push(function () {
                    _this10.removeListener(transactionHash, minedHandler);
                  });
                  if (replaceable) {
                    var lastBlockNumber = replaceable.startBlock;
                    var scannedBlock = null;
                    var replaceHandler = function replaceHandler(blockNumber) {
                      return __awaiter$a(_this10, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee15() {
                        var _this11 = this;
                        return regenerator.wrap(function _callee15$(_context15) {
                          while (1) {
                            switch (_context15.prev = _context15.next) {
                              case 0:
                                if (!done) {
                                  _context15.next = 2;
                                  break;
                                }
                                return _context15.abrupt("return");
                              case 2:
                                _context15.next = 4;
                                return stall$1(1000);
                              case 4:
                                this.getTransactionCount(replaceable.from).then(function (nonce) {
                                  return __awaiter$a(_this11, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee14() {
                                    var mined, block, ti, tx, _receipt, reason;
                                    return regenerator.wrap(function _callee14$(_context14) {
                                      while (1) {
                                        switch (_context14.prev = _context14.next) {
                                          case 0:
                                            if (!done) {
                                              _context14.next = 2;
                                              break;
                                            }
                                            return _context14.abrupt("return");
                                          case 2:
                                            if (!(nonce <= replaceable.nonce)) {
                                              _context14.next = 6;
                                              break;
                                            }
                                            lastBlockNumber = blockNumber;
                                            _context14.next = 41;
                                            break;
                                          case 6:
                                            _context14.next = 8;
                                            return this.getTransaction(transactionHash);
                                          case 8:
                                            mined = _context14.sent;
                                            if (!(mined && mined.blockNumber != null)) {
                                              _context14.next = 11;
                                              break;
                                            }
                                            return _context14.abrupt("return");
                                          case 11:
                                            // First time scanning. We start a little earlier for some
                                            // wiggle room here to handle the eventually consistent nature
                                            // of blockchain (e.g. the getTransactionCount was for a
                                            // different block)
                                            if (scannedBlock == null) {
                                              scannedBlock = lastBlockNumber - 3;
                                              if (scannedBlock < replaceable.startBlock) {
                                                scannedBlock = replaceable.startBlock;
                                              }
                                            }
                                          case 12:
                                            if (!(scannedBlock <= blockNumber)) {
                                              _context14.next = 41;
                                              break;
                                            }
                                            if (!done) {
                                              _context14.next = 15;
                                              break;
                                            }
                                            return _context14.abrupt("return");
                                          case 15:
                                            _context14.next = 17;
                                            return this.getBlockWithTransactions(scannedBlock);
                                          case 17:
                                            block = _context14.sent;
                                            ti = 0;
                                          case 19:
                                            if (!(ti < block.transactions.length)) {
                                              _context14.next = 38;
                                              break;
                                            }
                                            tx = block.transactions[ti]; // Successfully mined!
                                            if (!(tx.hash === transactionHash)) {
                                              _context14.next = 23;
                                              break;
                                            }
                                            return _context14.abrupt("return");
                                          case 23:
                                            if (!(tx.from === replaceable.from && tx.nonce === replaceable.nonce)) {
                                              _context14.next = 35;
                                              break;
                                            }
                                            if (!done) {
                                              _context14.next = 26;
                                              break;
                                            }
                                            return _context14.abrupt("return");
                                          case 26:
                                            _context14.next = 28;
                                            return this.waitForTransaction(tx.hash, confirmations);
                                          case 28:
                                            _receipt = _context14.sent;
                                            if (!alreadyDone()) {
                                              _context14.next = 31;
                                              break;
                                            }
                                            return _context14.abrupt("return");
                                          case 31:
                                            // The reason we were replaced
                                            reason = "replaced";
                                            if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {
                                              reason = "repriced";
                                            } else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) {
                                              reason = "cancelled";
                                            }
                                            // Explain why we were replaced
                                            reject(logger$h.makeError("transaction was replaced", Logger.errors.TRANSACTION_REPLACED, {
                                              cancelled: reason === "replaced" || reason === "cancelled",
                                              reason: reason,
                                              replacement: this._wrapTransaction(tx),
                                              hash: transactionHash,
                                              receipt: _receipt
                                            }));
                                            return _context14.abrupt("return");
                                          case 35:
                                            ti++;
                                            _context14.next = 19;
                                            break;
                                          case 38:
                                            scannedBlock++;
                                            _context14.next = 12;
                                            break;
                                          case 41:
                                            if (!done) {
                                              _context14.next = 43;
                                              break;
                                            }
                                            return _context14.abrupt("return");
                                          case 43:
                                            this.once("block", replaceHandler);
                                          case 44:
                                          case "end":
                                            return _context14.stop();
                                        }
                                      }
                                    }, _callee14, this);
                                  }));
                                }, function (error) {
                                  if (done) {
                                    return;
                                  }
                                  _this11.once("block", replaceHandler);
                                });
                              case 5:
                              case "end":
                                return _context15.stop();
                            }
                          }
                        }, _callee15, this);
                      }));
                    };
                    if (done) {
                      return;
                    }
                    _this10.once("block", replaceHandler);
                    cancelFuncs.push(function () {
                      _this10.removeListener("block", replaceHandler);
                    });
                  }
                  if (typeof timeout === "number" && timeout > 0) {
                    var timer = setTimeout(function () {
                      if (alreadyDone()) {
                        return;
                      }
                      reject(logger$h.makeError("timeout exceeded", Logger.errors.TIMEOUT, {
                        timeout: timeout
                      }));
                    }, timeout);
                    if (timer.unref) {
                      timer.unref();
                    }
                    cancelFuncs.push(function () {
                      clearTimeout(timer);
                    });
                  }
                }));
              case 6:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));
    }
  }, {
    key: "getBlockNumber",
    value: function getBlockNumber() {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee17() {
        return regenerator.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                return _context17.abrupt("return", this._getInternalBlockNumber(0));
              case 1:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));
    }
  }, {
    key: "getGasPrice",
    value: function getGasPrice() {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee18() {
        var result;
        return regenerator.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                _context18.next = 2;
                return this.getNetwork();
              case 2:
                _context18.next = 4;
                return this.perform("getGasPrice", {});
              case 4:
                result = _context18.sent;
                _context18.prev = 5;
                return _context18.abrupt("return", BigNumber.from(result));
              case 9:
                _context18.prev = 9;
                _context18.t0 = _context18["catch"](5);
                return _context18.abrupt("return", logger$h.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                  method: "getGasPrice",
                  result: result,
                  error: _context18.t0
                }));
              case 12:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this, [[5, 9]]);
      }));
    }
  }, {
    key: "getBalance",
    value: function getBalance(addressOrName, blockTag) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee19() {
        var params, result;
        return regenerator.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                _context19.next = 2;
                return this.getNetwork();
              case 2:
                _context19.next = 4;
                return resolveProperties({
                  address: this._getAddress(addressOrName),
                  blockTag: this._getBlockTag(blockTag)
                });
              case 4:
                params = _context19.sent;
                _context19.next = 7;
                return this.perform("getBalance", params);
              case 7:
                result = _context19.sent;
                _context19.prev = 8;
                return _context19.abrupt("return", BigNumber.from(result));
              case 12:
                _context19.prev = 12;
                _context19.t0 = _context19["catch"](8);
                return _context19.abrupt("return", logger$h.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                  method: "getBalance",
                  params: params,
                  result: result,
                  error: _context19.t0
                }));
              case 15:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this, [[8, 12]]);
      }));
    }
  }, {
    key: "getTransactionCount",
    value: function getTransactionCount(addressOrName, blockTag) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee20() {
        var params, result;
        return regenerator.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                _context20.next = 2;
                return this.getNetwork();
              case 2:
                _context20.next = 4;
                return resolveProperties({
                  address: this._getAddress(addressOrName),
                  blockTag: this._getBlockTag(blockTag)
                });
              case 4:
                params = _context20.sent;
                _context20.next = 7;
                return this.perform("getTransactionCount", params);
              case 7:
                result = _context20.sent;
                _context20.prev = 8;
                return _context20.abrupt("return", BigNumber.from(result).toNumber());
              case 12:
                _context20.prev = 12;
                _context20.t0 = _context20["catch"](8);
                return _context20.abrupt("return", logger$h.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                  method: "getTransactionCount",
                  params: params,
                  result: result,
                  error: _context20.t0
                }));
              case 15:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this, [[8, 12]]);
      }));
    }
  }, {
    key: "getCode",
    value: function getCode(addressOrName, blockTag) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee21() {
        var params, result;
        return regenerator.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                _context21.next = 2;
                return this.getNetwork();
              case 2:
                _context21.next = 4;
                return resolveProperties({
                  address: this._getAddress(addressOrName),
                  blockTag: this._getBlockTag(blockTag)
                });
              case 4:
                params = _context21.sent;
                _context21.next = 7;
                return this.perform("getCode", params);
              case 7:
                result = _context21.sent;
                _context21.prev = 8;
                return _context21.abrupt("return", hexlify(result));
              case 12:
                _context21.prev = 12;
                _context21.t0 = _context21["catch"](8);
                return _context21.abrupt("return", logger$h.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                  method: "getCode",
                  params: params,
                  result: result,
                  error: _context21.t0
                }));
              case 15:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this, [[8, 12]]);
      }));
    }
  }, {
    key: "getStorageAt",
    value: function getStorageAt(addressOrName, position, blockTag) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee22() {
        var params, result;
        return regenerator.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                _context22.next = 2;
                return this.getNetwork();
              case 2:
                _context22.next = 4;
                return resolveProperties({
                  address: this._getAddress(addressOrName),
                  blockTag: this._getBlockTag(blockTag),
                  position: Promise.resolve(position).then(function (p) {
                    return hexValue(p);
                  })
                });
              case 4:
                params = _context22.sent;
                _context22.next = 7;
                return this.perform("getStorageAt", params);
              case 7:
                result = _context22.sent;
                _context22.prev = 8;
                return _context22.abrupt("return", hexlify(result));
              case 12:
                _context22.prev = 12;
                _context22.t0 = _context22["catch"](8);
                return _context22.abrupt("return", logger$h.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                  method: "getStorageAt",
                  params: params,
                  result: result,
                  error: _context22.t0
                }));
              case 15:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this, [[8, 12]]);
      }));
    }
    // This should be called by any subclass wrapping a TransactionResponse
  }, {
    key: "_wrapTransaction",
    value: function _wrapTransaction(tx, hash, startBlock) {
      var _this12 = this;
      if (hash != null && hexDataLength(hash) !== 32) {
        throw new Error("invalid response - sendTransaction");
      }
      var result = tx;
      // Check the hash we expect is the same as the hash the server reported
      if (hash != null && tx.hash !== hash) {
        logger$h.throwError("Transaction hash mismatch from Provider.sendTransaction.", Logger.errors.UNKNOWN_ERROR, {
          expectedHash: tx.hash,
          returnedHash: hash
        });
      }
      result.wait = function (confirms, timeout) {
        return __awaiter$a(_this12, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee23() {
          var replacement, receipt;
          return regenerator.wrap(function _callee23$(_context23) {
            while (1) {
              switch (_context23.prev = _context23.next) {
                case 0:
                  if (confirms == null) {
                    confirms = 1;
                  }
                  if (timeout == null) {
                    timeout = 0;
                  }
                  // Get the details to detect replacement
                  replacement = undefined;
                  if (confirms !== 0 && startBlock != null) {
                    replacement = {
                      data: tx.data,
                      from: tx.from,
                      nonce: tx.nonce,
                      to: tx.to,
                      value: tx.value,
                      startBlock: startBlock
                    };
                  }
                  _context23.next = 6;
                  return this._waitForTransaction(tx.hash, confirms, timeout, replacement);
                case 6:
                  receipt = _context23.sent;
                  if (!(receipt == null && confirms === 0)) {
                    _context23.next = 9;
                    break;
                  }
                  return _context23.abrupt("return", null);
                case 9:
                  // No longer pending, allow the polling loop to garbage collect this
                  this._emitted["t:" + tx.hash] = receipt.blockNumber;
                  if (receipt.status === 0) {
                    logger$h.throwError("transaction failed", Logger.errors.CALL_EXCEPTION, {
                      transactionHash: tx.hash,
                      transaction: tx,
                      receipt: receipt
                    });
                  }
                  return _context23.abrupt("return", receipt);
                case 12:
                case "end":
                  return _context23.stop();
              }
            }
          }, _callee23, this);
        }));
      };
      return result;
    }
  }, {
    key: "sendTransaction",
    value: function sendTransaction(signedTransaction) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee24() {
        var hexTx, tx, blockNumber, hash;
        return regenerator.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                _context24.next = 2;
                return this.getNetwork();
              case 2:
                _context24.next = 4;
                return Promise.resolve(signedTransaction).then(function (t) {
                  return hexlify(t);
                });
              case 4:
                hexTx = _context24.sent;
                tx = this.formatter.transaction(signedTransaction);
                if (tx.confirmations == null) {
                  tx.confirmations = 0;
                }
                _context24.next = 9;
                return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
              case 9:
                blockNumber = _context24.sent;
                _context24.prev = 10;
                _context24.next = 13;
                return this.perform("sendTransaction", {
                  signedTransaction: hexTx
                });
              case 13:
                hash = _context24.sent;
                return _context24.abrupt("return", this._wrapTransaction(tx, hash, blockNumber));
              case 17:
                _context24.prev = 17;
                _context24.t0 = _context24["catch"](10);
                _context24.t0.transaction = tx;
                _context24.t0.transactionHash = tx.hash;
                throw _context24.t0;
              case 22:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this, [[10, 17]]);
      }));
    }
  }, {
    key: "_getTransactionRequest",
    value: function _getTransactionRequest(transaction) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee25() {
        var _this13 = this;
        var values, tx;
        return regenerator.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                _context25.next = 2;
                return transaction;
              case 2:
                values = _context25.sent;
                tx = {};
                ["from", "to"].forEach(function (key) {
                  if (values[key] == null) {
                    return;
                  }
                  tx[key] = Promise.resolve(values[key]).then(function (v) {
                    return v ? _this13._getAddress(v) : null;
                  });
                });
                ["gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "value"].forEach(function (key) {
                  if (values[key] == null) {
                    return;
                  }
                  tx[key] = Promise.resolve(values[key]).then(function (v) {
                    return v ? BigNumber.from(v) : null;
                  });
                });
                ["type"].forEach(function (key) {
                  if (values[key] == null) {
                    return;
                  }
                  tx[key] = Promise.resolve(values[key]).then(function (v) {
                    return v != null ? v : null;
                  });
                });
                if (values.accessList) {
                  tx.accessList = this.formatter.accessList(values.accessList);
                }
                ["data"].forEach(function (key) {
                  if (values[key] == null) {
                    return;
                  }
                  tx[key] = Promise.resolve(values[key]).then(function (v) {
                    return v ? hexlify(v) : null;
                  });
                });
                _context25.t0 = this.formatter;
                _context25.next = 12;
                return resolveProperties(tx);
              case 12:
                _context25.t1 = _context25.sent;
                return _context25.abrupt("return", _context25.t0.transactionRequest.call(_context25.t0, _context25.t1));
              case 14:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));
    }
  }, {
    key: "_getFilter",
    value: function _getFilter(filter) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee26() {
        var _this14 = this;
        var result;
        return regenerator.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                _context26.next = 2;
                return filter;
              case 2:
                filter = _context26.sent;
                result = {};
                if (filter.address != null) {
                  result.address = this._getAddress(filter.address);
                }
                ["blockHash", "topics"].forEach(function (key) {
                  if (filter[key] == null) {
                    return;
                  }
                  result[key] = filter[key];
                });
                ["fromBlock", "toBlock"].forEach(function (key) {
                  if (filter[key] == null) {
                    return;
                  }
                  result[key] = _this14._getBlockTag(filter[key]);
                });
                _context26.t0 = this.formatter;
                _context26.next = 10;
                return resolveProperties(result);
              case 10:
                _context26.t1 = _context26.sent;
                return _context26.abrupt("return", _context26.t0.filter.call(_context26.t0, _context26.t1));
              case 12:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26, this);
      }));
    }
  }, {
    key: "_call",
    value: function _call(transaction, blockTag, attempt) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee27() {
        var txSender, result, data, sender, urls, urlsOffset, urlsLength, urlsData, u, url, calldata, callbackSelector, extraData, ccipResult, tx;
        return regenerator.wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                if (attempt >= MAX_CCIP_REDIRECTS) {
                  logger$h.throwError("CCIP read exceeded maximum redirections", Logger.errors.SERVER_ERROR, {
                    redirects: attempt,
                    transaction: transaction
                  });
                }
                txSender = transaction.to;
                _context27.next = 4;
                return this.perform("call", {
                  transaction: transaction,
                  blockTag: blockTag
                });
              case 4:
                result = _context27.sent;
                if (!(attempt >= 0 && blockTag === "latest" && txSender != null && result.substring(0, 10) === "0x556f1830" && hexDataLength(result) % 32 === 4)) {
                  _context27.next = 31;
                  break;
                }
                _context27.prev = 6;
                data = hexDataSlice(result, 4); // Check the sender of the OffchainLookup matches the transaction
                sender = hexDataSlice(data, 0, 32);
                if (!BigNumber.from(sender).eq(txSender)) {
                  logger$h.throwError("CCIP Read sender did not match", Logger.errors.CALL_EXCEPTION, {
                    name: "OffchainLookup",
                    signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                    transaction: transaction,
                    data: result
                  });
                }
                // Read the URLs from the response
                urls = [];
                urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();
                urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();
                urlsData = hexDataSlice(data, urlsOffset + 32);
                for (u = 0; u < urlsLength; u++) {
                  url = _parseString(urlsData, u * 32);
                  if (url == null) {
                    logger$h.throwError("CCIP Read contained corrupt URL string", Logger.errors.CALL_EXCEPTION, {
                      name: "OffchainLookup",
                      signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                      transaction: transaction,
                      data: result
                    });
                  }
                  urls.push(url);
                }
                // Get the CCIP calldata to forward
                calldata = _parseBytes(data, 64); // Get the callbackSelector (bytes4)
                if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {
                  logger$h.throwError("CCIP Read callback selector included junk", Logger.errors.CALL_EXCEPTION, {
                    name: "OffchainLookup",
                    signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                    transaction: transaction,
                    data: result
                  });
                }
                callbackSelector = hexDataSlice(data, 96, 100); // Get the extra data to send back to the contract as context
                extraData = _parseBytes(data, 128);
                _context27.next = 21;
                return this.ccipReadFetch(transaction, calldata, urls);
              case 21:
                ccipResult = _context27.sent;
                if (ccipResult == null) {
                  logger$h.throwError("CCIP Read disabled or provided no URLs", Logger.errors.CALL_EXCEPTION, {
                    name: "OffchainLookup",
                    signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                    transaction: transaction,
                    data: result
                  });
                }
                tx = {
                  to: txSender,
                  data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])
                };
                return _context27.abrupt("return", this._call(tx, blockTag, attempt + 1));
              case 27:
                _context27.prev = 27;
                _context27.t0 = _context27["catch"](6);
                if (!(_context27.t0.code === Logger.errors.SERVER_ERROR)) {
                  _context27.next = 31;
                  break;
                }
                throw _context27.t0;
              case 31:
                _context27.prev = 31;
                return _context27.abrupt("return", hexlify(result));
              case 35:
                _context27.prev = 35;
                _context27.t1 = _context27["catch"](31);
                return _context27.abrupt("return", logger$h.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                  method: "call",
                  params: {
                    transaction: transaction,
                    blockTag: blockTag
                  },
                  result: result,
                  error: _context27.t1
                }));
              case 38:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27, this, [[6, 27], [31, 35]]);
      }));
    }
  }, {
    key: "call",
    value: function call(transaction, blockTag) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee28() {
        var resolved;
        return regenerator.wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                _context28.next = 2;
                return this.getNetwork();
              case 2:
                _context28.next = 4;
                return resolveProperties({
                  transaction: this._getTransactionRequest(transaction),
                  blockTag: this._getBlockTag(blockTag),
                  ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)
                });
              case 4:
                resolved = _context28.sent;
                return _context28.abrupt("return", this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1));
              case 6:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28, this);
      }));
    }
  }, {
    key: "estimateGas",
    value: function estimateGas(transaction) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee29() {
        var params, result;
        return regenerator.wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                _context29.next = 2;
                return this.getNetwork();
              case 2:
                _context29.next = 4;
                return resolveProperties({
                  transaction: this._getTransactionRequest(transaction)
                });
              case 4:
                params = _context29.sent;
                _context29.next = 7;
                return this.perform("estimateGas", params);
              case 7:
                result = _context29.sent;
                _context29.prev = 8;
                return _context29.abrupt("return", BigNumber.from(result));
              case 12:
                _context29.prev = 12;
                _context29.t0 = _context29["catch"](8);
                return _context29.abrupt("return", logger$h.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                  method: "estimateGas",
                  params: params,
                  result: result,
                  error: _context29.t0
                }));
              case 15:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this, [[8, 12]]);
      }));
    }
  }, {
    key: "_getAddress",
    value: function _getAddress(addressOrName) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee30() {
        var address;
        return regenerator.wrap(function _callee30$(_context30) {
          while (1) {
            switch (_context30.prev = _context30.next) {
              case 0:
                _context30.next = 2;
                return addressOrName;
              case 2:
                addressOrName = _context30.sent;
                if (typeof addressOrName !== "string") {
                  logger$h.throwArgumentError("invalid address or ENS name", "name", addressOrName);
                }
                _context30.next = 6;
                return this.resolveName(addressOrName);
              case 6:
                address = _context30.sent;
                if (address == null) {
                  logger$h.throwError("ENS name not configured", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "resolveName(".concat(JSON.stringify(addressOrName), ")")
                  });
                }
                return _context30.abrupt("return", address);
              case 9:
              case "end":
                return _context30.stop();
            }
          }
        }, _callee30, this);
      }));
    }
  }, {
    key: "_getBlock",
    value: function _getBlock(blockHashOrBlockTag, includeTransactions) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee32() {
        var _this15 = this;
        var blockNumber, params;
        return regenerator.wrap(function _callee32$(_context32) {
          while (1) {
            switch (_context32.prev = _context32.next) {
              case 0:
                _context32.next = 2;
                return this.getNetwork();
              case 2:
                _context32.next = 4;
                return blockHashOrBlockTag;
              case 4:
                blockHashOrBlockTag = _context32.sent;
                // If blockTag is a number (not "latest", etc), this is the block number
                blockNumber = -128;
                params = {
                  includeTransactions: !!includeTransactions
                };
                if (!isHexString$1(blockHashOrBlockTag, 32)) {
                  _context32.next = 11;
                  break;
                }
                params.blockHash = blockHashOrBlockTag;
                _context32.next = 21;
                break;
              case 11:
                _context32.prev = 11;
                _context32.next = 14;
                return this._getBlockTag(blockHashOrBlockTag);
              case 14:
                params.blockTag = _context32.sent;
                if (isHexString$1(params.blockTag)) {
                  blockNumber = parseInt(params.blockTag.substring(2), 16);
                }
                _context32.next = 21;
                break;
              case 18:
                _context32.prev = 18;
                _context32.t0 = _context32["catch"](11);
                logger$h.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
              case 21:
                return _context32.abrupt("return", poll(function () {
                  return __awaiter$a(_this15, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee31() {
                    var _this16 = this;
                    var block, _blockNumber, i, tx, confirmations, blockWithTxs;
                    return regenerator.wrap(function _callee31$(_context31) {
                      while (1) {
                        switch (_context31.prev = _context31.next) {
                          case 0:
                            _context31.next = 2;
                            return this.perform("getBlock", params);
                          case 2:
                            block = _context31.sent;
                            if (!(block == null)) {
                              _context31.next = 11;
                              break;
                            }
                            if (!(params.blockHash != null)) {
                              _context31.next = 7;
                              break;
                            }
                            if (!(this._emitted["b:" + params.blockHash] == null)) {
                              _context31.next = 7;
                              break;
                            }
                            return _context31.abrupt("return", null);
                          case 7:
                            if (!(params.blockTag != null)) {
                              _context31.next = 10;
                              break;
                            }
                            if (!(blockNumber > this._emitted.block)) {
                              _context31.next = 10;
                              break;
                            }
                            return _context31.abrupt("return", null);
                          case 10:
                            return _context31.abrupt("return", undefined);
                          case 11:
                            if (!includeTransactions) {
                              _context31.next = 34;
                              break;
                            }
                            _blockNumber = null;
                            i = 0;
                          case 14:
                            if (!(i < block.transactions.length)) {
                              _context31.next = 31;
                              break;
                            }
                            tx = block.transactions[i];
                            if (!(tx.blockNumber == null)) {
                              _context31.next = 20;
                              break;
                            }
                            tx.confirmations = 0;
                            _context31.next = 28;
                            break;
                          case 20:
                            if (!(tx.confirmations == null)) {
                              _context31.next = 28;
                              break;
                            }
                            if (!(_blockNumber == null)) {
                              _context31.next = 25;
                              break;
                            }
                            _context31.next = 24;
                            return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                          case 24:
                            _blockNumber = _context31.sent;
                          case 25:
                            // Add the confirmations using the fast block number (pessimistic)
                            confirmations = _blockNumber - tx.blockNumber + 1;
                            if (confirmations <= 0) {
                              confirmations = 1;
                            }
                            tx.confirmations = confirmations;
                          case 28:
                            i++;
                            _context31.next = 14;
                            break;
                          case 31:
                            blockWithTxs = this.formatter.blockWithTransactions(block);
                            blockWithTxs.transactions = blockWithTxs.transactions.map(function (tx) {
                              return _this16._wrapTransaction(tx);
                            });
                            return _context31.abrupt("return", blockWithTxs);
                          case 34:
                            return _context31.abrupt("return", this.formatter.block(block));
                          case 35:
                          case "end":
                            return _context31.stop();
                        }
                      }
                    }, _callee31, this);
                  }));
                }, {
                  oncePoll: this
                }));
              case 22:
              case "end":
                return _context32.stop();
            }
          }
        }, _callee32, this, [[11, 18]]);
      }));
    }
  }, {
    key: "getBlock",
    value: function getBlock(blockHashOrBlockTag) {
      return this._getBlock(blockHashOrBlockTag, false);
    }
  }, {
    key: "getBlockWithTransactions",
    value: function getBlockWithTransactions(blockHashOrBlockTag) {
      return this._getBlock(blockHashOrBlockTag, true);
    }
  }, {
    key: "getTransaction",
    value: function getTransaction(transactionHash) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee34() {
        var _this17 = this;
        var params;
        return regenerator.wrap(function _callee34$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                _context34.next = 2;
                return this.getNetwork();
              case 2:
                _context34.next = 4;
                return transactionHash;
              case 4:
                transactionHash = _context34.sent;
                params = {
                  transactionHash: this.formatter.hash(transactionHash, true)
                };
                return _context34.abrupt("return", poll(function () {
                  return __awaiter$a(_this17, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee33() {
                    var result, tx, blockNumber, confirmations;
                    return regenerator.wrap(function _callee33$(_context33) {
                      while (1) {
                        switch (_context33.prev = _context33.next) {
                          case 0:
                            _context33.next = 2;
                            return this.perform("getTransaction", params);
                          case 2:
                            result = _context33.sent;
                            if (!(result == null)) {
                              _context33.next = 7;
                              break;
                            }
                            if (!(this._emitted["t:" + transactionHash] == null)) {
                              _context33.next = 6;
                              break;
                            }
                            return _context33.abrupt("return", null);
                          case 6:
                            return _context33.abrupt("return", undefined);
                          case 7:
                            tx = this.formatter.transactionResponse(result);
                            if (!(tx.blockNumber == null)) {
                              _context33.next = 12;
                              break;
                            }
                            tx.confirmations = 0;
                            _context33.next = 19;
                            break;
                          case 12:
                            if (!(tx.confirmations == null)) {
                              _context33.next = 19;
                              break;
                            }
                            _context33.next = 15;
                            return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                          case 15:
                            blockNumber = _context33.sent;
                            // Add the confirmations using the fast block number (pessimistic)
                            confirmations = blockNumber - tx.blockNumber + 1;
                            if (confirmations <= 0) {
                              confirmations = 1;
                            }
                            tx.confirmations = confirmations;
                          case 19:
                            return _context33.abrupt("return", this._wrapTransaction(tx));
                          case 20:
                          case "end":
                            return _context33.stop();
                        }
                      }
                    }, _callee33, this);
                  }));
                }, {
                  oncePoll: this
                }));
              case 7:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee34, this);
      }));
    }
  }, {
    key: "getTransactionReceipt",
    value: function getTransactionReceipt(transactionHash) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee36() {
        var _this18 = this;
        var params;
        return regenerator.wrap(function _callee36$(_context36) {
          while (1) {
            switch (_context36.prev = _context36.next) {
              case 0:
                _context36.next = 2;
                return this.getNetwork();
              case 2:
                _context36.next = 4;
                return transactionHash;
              case 4:
                transactionHash = _context36.sent;
                params = {
                  transactionHash: this.formatter.hash(transactionHash, true)
                };
                return _context36.abrupt("return", poll(function () {
                  return __awaiter$a(_this18, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee35() {
                    var result, receipt, blockNumber, confirmations;
                    return regenerator.wrap(function _callee35$(_context35) {
                      while (1) {
                        switch (_context35.prev = _context35.next) {
                          case 0:
                            _context35.next = 2;
                            return this.perform("getTransactionReceipt", params);
                          case 2:
                            result = _context35.sent;
                            if (!(result == null)) {
                              _context35.next = 7;
                              break;
                            }
                            if (!(this._emitted["t:" + transactionHash] == null)) {
                              _context35.next = 6;
                              break;
                            }
                            return _context35.abrupt("return", null);
                          case 6:
                            return _context35.abrupt("return", undefined);
                          case 7:
                            if (!(result.blockHash == null)) {
                              _context35.next = 9;
                              break;
                            }
                            return _context35.abrupt("return", undefined);
                          case 9:
                            receipt = this.formatter.receipt(result);
                            if (!(receipt.blockNumber == null)) {
                              _context35.next = 14;
                              break;
                            }
                            receipt.confirmations = 0;
                            _context35.next = 21;
                            break;
                          case 14:
                            if (!(receipt.confirmations == null)) {
                              _context35.next = 21;
                              break;
                            }
                            _context35.next = 17;
                            return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                          case 17:
                            blockNumber = _context35.sent;
                            // Add the confirmations using the fast block number (pessimistic)
                            confirmations = blockNumber - receipt.blockNumber + 1;
                            if (confirmations <= 0) {
                              confirmations = 1;
                            }
                            receipt.confirmations = confirmations;
                          case 21:
                            return _context35.abrupt("return", receipt);
                          case 22:
                          case "end":
                            return _context35.stop();
                        }
                      }
                    }, _callee35, this);
                  }));
                }, {
                  oncePoll: this
                }));
              case 7:
              case "end":
                return _context36.stop();
            }
          }
        }, _callee36, this);
      }));
    }
  }, {
    key: "getLogs",
    value: function getLogs(filter) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee37() {
        var params, logs;
        return regenerator.wrap(function _callee37$(_context37) {
          while (1) {
            switch (_context37.prev = _context37.next) {
              case 0:
                _context37.next = 2;
                return this.getNetwork();
              case 2:
                _context37.next = 4;
                return resolveProperties({
                  filter: this._getFilter(filter)
                });
              case 4:
                params = _context37.sent;
                _context37.next = 7;
                return this.perform("getLogs", params);
              case 7:
                logs = _context37.sent;
                logs.forEach(function (log) {
                  if (log.removed == null) {
                    log.removed = false;
                  }
                });
                return _context37.abrupt("return", Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs));
              case 10:
              case "end":
                return _context37.stop();
            }
          }
        }, _callee37, this);
      }));
    }
  }, {
    key: "getEtherPrice",
    value: function getEtherPrice() {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee38() {
        return regenerator.wrap(function _callee38$(_context38) {
          while (1) {
            switch (_context38.prev = _context38.next) {
              case 0:
                _context38.next = 2;
                return this.getNetwork();
              case 2:
                return _context38.abrupt("return", this.perform("getEtherPrice", {}));
              case 3:
              case "end":
                return _context38.stop();
            }
          }
        }, _callee38, this);
      }));
    }
  }, {
    key: "_getBlockTag",
    value: function _getBlockTag(blockTag) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee39() {
        var blockNumber;
        return regenerator.wrap(function _callee39$(_context39) {
          while (1) {
            switch (_context39.prev = _context39.next) {
              case 0:
                _context39.next = 2;
                return blockTag;
              case 2:
                blockTag = _context39.sent;
                if (!(typeof blockTag === "number" && blockTag < 0)) {
                  _context39.next = 11;
                  break;
                }
                if (blockTag % 1) {
                  logger$h.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
                }
                _context39.next = 7;
                return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
              case 7:
                blockNumber = _context39.sent;
                blockNumber += blockTag;
                if (blockNumber < 0) {
                  blockNumber = 0;
                }
                return _context39.abrupt("return", this.formatter.blockTag(blockNumber));
              case 11:
                return _context39.abrupt("return", this.formatter.blockTag(blockTag));
              case 12:
              case "end":
                return _context39.stop();
            }
          }
        }, _callee39, this);
      }));
    }
  }, {
    key: "getResolver",
    value: function getResolver(name) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee40() {
        var currentName, addr, resolver;
        return regenerator.wrap(function _callee40$(_context40) {
          while (1) {
            switch (_context40.prev = _context40.next) {
              case 0:
                currentName = name;
              case 1:
                if (!(currentName === "" || currentName === ".")) {
                  _context40.next = 4;
                  break;
                }
                return _context40.abrupt("return", null);
              case 4:
                if (!(name !== "eth" && currentName === "eth")) {
                  _context40.next = 6;
                  break;
                }
                return _context40.abrupt("return", null);
              case 6:
                _context40.next = 8;
                return this._getResolver(currentName, "getResolver");
              case 8:
                addr = _context40.sent;
                if (!(addr != null)) {
                  _context40.next = 19;
                  break;
                }
                resolver = new Resolver(this, addr, name); // Legacy resolver found, using EIP-2544 so it isn't safe to use
                _context40.t0 = currentName !== name;
                if (!_context40.t0) {
                  _context40.next = 16;
                  break;
                }
                _context40.next = 15;
                return resolver.supportsWildcard();
              case 15:
                _context40.t0 = !_context40.sent;
              case 16:
                if (!_context40.t0) {
                  _context40.next = 18;
                  break;
                }
                return _context40.abrupt("return", null);
              case 18:
                return _context40.abrupt("return", resolver);
              case 19:
                // Get the parent node
                currentName = currentName.split(".").slice(1).join(".");
                _context40.next = 1;
                break;
              case 22:
              case "end":
                return _context40.stop();
            }
          }
        }, _callee40, this);
      }));
    }
  }, {
    key: "_getResolver",
    value: function _getResolver(name, operation) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee41() {
        var network, addrData;
        return regenerator.wrap(function _callee41$(_context41) {
          while (1) {
            switch (_context41.prev = _context41.next) {
              case 0:
                if (operation == null) {
                  operation = "ENS";
                }
                _context41.next = 3;
                return this.getNetwork();
              case 3:
                network = _context41.sent;
                // No ENS...
                if (!network.ensAddress) {
                  logger$h.throwError("network does not support ENS", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: operation,
                    network: network.name
                  });
                }
                _context41.prev = 5;
                _context41.next = 8;
                return this.call({
                  to: network.ensAddress,
                  data: "0x0178b8bf" + namehash(name).substring(2)
                });
              case 8:
                addrData = _context41.sent;
                return _context41.abrupt("return", this.formatter.callAddress(addrData));
              case 12:
                _context41.prev = 12;
                _context41.t0 = _context41["catch"](5);
              case 14:
                return _context41.abrupt("return", null);
              case 15:
              case "end":
                return _context41.stop();
            }
          }
        }, _callee41, this, [[5, 12]]);
      }));
    }
  }, {
    key: "resolveName",
    value: function resolveName(name) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee42() {
        var resolver;
        return regenerator.wrap(function _callee42$(_context42) {
          while (1) {
            switch (_context42.prev = _context42.next) {
              case 0:
                _context42.next = 2;
                return name;
              case 2:
                name = _context42.sent;
                _context42.prev = 3;
                return _context42.abrupt("return", Promise.resolve(this.formatter.address(name)));
              case 7:
                _context42.prev = 7;
                _context42.t0 = _context42["catch"](3);
                if (!isHexString$1(name)) {
                  _context42.next = 11;
                  break;
                }
                throw _context42.t0;
              case 11:
                if (typeof name !== "string") {
                  logger$h.throwArgumentError("invalid ENS name", "name", name);
                }
                // Get the addr from the resolver
                _context42.next = 14;
                return this.getResolver(name);
              case 14:
                resolver = _context42.sent;
                if (resolver) {
                  _context42.next = 17;
                  break;
                }
                return _context42.abrupt("return", null);
              case 17:
                _context42.next = 19;
                return resolver.getAddress();
              case 19:
                return _context42.abrupt("return", _context42.sent);
              case 20:
              case "end":
                return _context42.stop();
            }
          }
        }, _callee42, this, [[3, 7]]);
      }));
    }
  }, {
    key: "lookupAddress",
    value: function lookupAddress(address) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee43() {
        var node, resolverAddr, name, addr;
        return regenerator.wrap(function _callee43$(_context43) {
          while (1) {
            switch (_context43.prev = _context43.next) {
              case 0:
                _context43.next = 2;
                return address;
              case 2:
                address = _context43.sent;
                address = this.formatter.address(address);
                node = address.substring(2).toLowerCase() + ".addr.reverse";
                _context43.next = 7;
                return this._getResolver(node, "lookupAddress");
              case 7:
                resolverAddr = _context43.sent;
                if (!(resolverAddr == null)) {
                  _context43.next = 10;
                  break;
                }
                return _context43.abrupt("return", null);
              case 10:
                _context43.t0 = _parseString;
                _context43.next = 13;
                return this.call({
                  to: resolverAddr,
                  data: "0x691f3431" + namehash(node).substring(2)
                });
              case 13:
                _context43.t1 = _context43.sent;
                name = (0, _context43.t0)(_context43.t1, 0);
                _context43.next = 17;
                return this.resolveName(name);
              case 17:
                addr = _context43.sent;
                if (!(addr != address)) {
                  _context43.next = 20;
                  break;
                }
                return _context43.abrupt("return", null);
              case 20:
                return _context43.abrupt("return", name);
              case 21:
              case "end":
                return _context43.stop();
            }
          }
        }, _callee43, this);
      }));
    }
  }, {
    key: "getAvatar",
    value: function getAvatar(nameOrAddress) {
      return __awaiter$a(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee44() {
        var resolver, address, node, resolverAddress, _avatar, name, avatar;
        return regenerator.wrap(function _callee44$(_context44) {
          while (1) {
            switch (_context44.prev = _context44.next) {
              case 0:
                resolver = null;
                if (!isHexString$1(nameOrAddress)) {
                  _context44.next = 40;
                  break;
                }
                // Address; reverse lookup
                address = this.formatter.address(nameOrAddress);
                node = address.substring(2).toLowerCase() + ".addr.reverse";
                _context44.next = 6;
                return this._getResolver(node, "getAvatar");
              case 6:
                resolverAddress = _context44.sent;
                if (resolverAddress) {
                  _context44.next = 9;
                  break;
                }
                return _context44.abrupt("return", null);
              case 9:
                // Try resolving the avatar against the addr.reverse resolver
                resolver = new Resolver(this, resolverAddress, node);
                _context44.prev = 10;
                _context44.next = 13;
                return resolver.getAvatar();
              case 13:
                _avatar = _context44.sent;
                if (!_avatar) {
                  _context44.next = 16;
                  break;
                }
                return _context44.abrupt("return", _avatar.url);
              case 16:
                _context44.next = 22;
                break;
              case 18:
                _context44.prev = 18;
                _context44.t0 = _context44["catch"](10);
                if (!(_context44.t0.code !== Logger.errors.CALL_EXCEPTION)) {
                  _context44.next = 22;
                  break;
                }
                throw _context44.t0;
              case 22:
                _context44.prev = 22;
                _context44.t1 = _parseString;
                _context44.next = 26;
                return this.call({
                  to: resolverAddress,
                  data: "0x691f3431" + namehash(node).substring(2)
                });
              case 26:
                _context44.t2 = _context44.sent;
                name = (0, _context44.t1)(_context44.t2, 0);
                _context44.next = 30;
                return this.getResolver(name);
              case 30:
                resolver = _context44.sent;
                _context44.next = 38;
                break;
              case 33:
                _context44.prev = 33;
                _context44.t3 = _context44["catch"](22);
                if (!(_context44.t3.code !== Logger.errors.CALL_EXCEPTION)) {
                  _context44.next = 37;
                  break;
                }
                throw _context44.t3;
              case 37:
                return _context44.abrupt("return", null);
              case 38:
                _context44.next = 45;
                break;
              case 40:
                _context44.next = 42;
                return this.getResolver(nameOrAddress);
              case 42:
                resolver = _context44.sent;
                if (resolver) {
                  _context44.next = 45;
                  break;
                }
                return _context44.abrupt("return", null);
              case 45:
                _context44.next = 47;
                return resolver.getAvatar();
              case 47:
                avatar = _context44.sent;
                if (!(avatar == null)) {
                  _context44.next = 50;
                  break;
                }
                return _context44.abrupt("return", null);
              case 50:
                return _context44.abrupt("return", avatar.url);
              case 51:
              case "end":
                return _context44.stop();
            }
          }
        }, _callee44, this, [[10, 18], [22, 33]]);
      }));
    }
  }, {
    key: "perform",
    value: function perform(method, params) {
      return logger$h.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, {
        operation: method
      });
    }
  }, {
    key: "_startEvent",
    value: function _startEvent(event) {
      this.polling = this._events.filter(function (e) {
        return e.pollable();
      }).length > 0;
    }
  }, {
    key: "_stopEvent",
    value: function _stopEvent(event) {
      this.polling = this._events.filter(function (e) {
        return e.pollable();
      }).length > 0;
    }
  }, {
    key: "_addEventListener",
    value: function _addEventListener(eventName, listener, once) {
      var event = new Event(getEventTag(eventName), listener, once);
      this._events.push(event);
      this._startEvent(event);
      return this;
    }
  }, {
    key: "on",
    value: function on(eventName, listener) {
      return this._addEventListener(eventName, listener, false);
    }
  }, {
    key: "once",
    value: function once(eventName, listener) {
      return this._addEventListener(eventName, listener, true);
    }
  }, {
    key: "emit",
    value: function emit(eventName) {
      var _this19 = this;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      var result = false;
      var stopped = [];
      var eventTag = getEventTag(eventName);
      this._events = this._events.filter(function (event) {
        if (event.tag !== eventTag) {
          return true;
        }
        setTimeout(function () {
          event.listener.apply(_this19, args);
        }, 0);
        result = true;
        if (event.once) {
          stopped.push(event);
          return false;
        }
        return true;
      });
      stopped.forEach(function (event) {
        _this19._stopEvent(event);
      });
      return result;
    }
  }, {
    key: "listenerCount",
    value: function listenerCount(eventName) {
      if (!eventName) {
        return this._events.length;
      }
      var eventTag = getEventTag(eventName);
      return this._events.filter(function (event) {
        return event.tag === eventTag;
      }).length;
    }
  }, {
    key: "listeners",
    value: function listeners(eventName) {
      if (eventName == null) {
        return this._events.map(function (event) {
          return event.listener;
        });
      }
      var eventTag = getEventTag(eventName);
      return this._events.filter(function (event) {
        return event.tag === eventTag;
      }).map(function (event) {
        return event.listener;
      });
    }
  }, {
    key: "off",
    value: function off(eventName, listener) {
      var _this20 = this;
      if (listener == null) {
        return this.removeAllListeners(eventName);
      }
      var stopped = [];
      var found = false;
      var eventTag = getEventTag(eventName);
      this._events = this._events.filter(function (event) {
        if (event.tag !== eventTag || event.listener != listener) {
          return true;
        }
        if (found) {
          return true;
        }
        found = true;
        stopped.push(event);
        return false;
      });
      stopped.forEach(function (event) {
        _this20._stopEvent(event);
      });
      return this;
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners(eventName) {
      var _this21 = this;
      var stopped = [];
      if (eventName == null) {
        stopped = this._events;
        this._events = [];
      } else {
        var eventTag = getEventTag(eventName);
        this._events = this._events.filter(function (event) {
          if (event.tag !== eventTag) {
            return true;
          }
          stopped.push(event);
          return false;
        });
      }
      stopped.forEach(function (event) {
        _this21._stopEvent(event);
      });
      return this;
    }
  }], [{
    key: "getFormatter",
    value: function getFormatter() {
      if (defaultFormatter == null) {
        defaultFormatter = new Formatter();
      }
      return defaultFormatter;
    }
    // @TODO: Remove this and just use getNetwork
  }, {
    key: "getNetwork",
    value: function getNetwork$1(network) {
      return getNetwork(network == null ? "homestead" : network);
    }
  }]);
  return BaseProvider;
}(Provider);

function _createSuper$d(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$d(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$d() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __awaiter$9 = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger$g = new Logger(version$5);
var errorGas = ["call", "estimateGas"];
function spelunk(value, requireData) {
  if (value == null) {
    return null;
  }
  // These *are* the droids we're looking for.
  if (typeof value.message === "string" && value.message.match("reverted")) {
    var data = isHexString$1(value.data) ? value.data : null;
    if (!requireData || data) {
      return {
        message: value.message,
        data: data
      };
    }
  }
  // Spelunk further...
  if (typeof value === "object") {
    for (var key in value) {
      var result = spelunk(value[key], requireData);
      if (result) {
        return result;
      }
    }
    return null;
  }
  // Might be a JSON string we can further descend...
  if (typeof value === "string") {
    try {
      return spelunk(JSON.parse(value), requireData);
    } catch (error) {}
  }
  return null;
}
function checkError$1(method, error, params) {
  var transaction = params.transaction || params.signedTransaction;
  // Undo the "convenience" some nodes are attempting to prevent backwards
  // incompatibility; maybe for v6 consider forwarding reverts as errors
  if (method === "call") {
    var result = spelunk(error, true);
    if (result) {
      return result.data;
    }
    // Nothing descriptive..
    logger$g.throwError("missing revert data in call exception; Transaction reverted without a reason string", Logger.errors.CALL_EXCEPTION, {
      data: "0x",
      transaction: transaction,
      error: error
    });
  }
  if (method === "estimateGas") {
    // Try to find something, with a preference on SERVER_ERROR body
    var _result = spelunk(error.body, false);
    if (_result == null) {
      _result = spelunk(error, false);
    }
    // Found "reverted", this is a CALL_EXCEPTION
    if (_result) {
      logger$g.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
        reason: _result.message,
        method: method,
        transaction: transaction,
        error: error
      });
    }
  }
  // @TODO: Should we spelunk for message too?
  var message = error.message;
  if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === "string") {
    message = error.error.message;
  } else if (typeof error.body === "string") {
    message = error.body;
  } else if (typeof error.responseText === "string") {
    message = error.responseText;
  }
  message = (message || "").toLowerCase();
  // "insufficient funds for gas * price + value + cost(data)"
  if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {
    logger$g.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
      error: error,
      method: method,
      transaction: transaction
    });
  }
  // "nonce too low"
  if (message.match(/nonce (is )?too low/i)) {
    logger$g.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
      error: error,
      method: method,
      transaction: transaction
    });
  }
  // "replacement transaction underpriced"
  if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {
    logger$g.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
      error: error,
      method: method,
      transaction: transaction
    });
  }
  // "replacement transaction underpriced"
  if (message.match(/only replay-protected/i)) {
    logger$g.throwError("legacy pre-eip-155 transactions not supported", Logger.errors.UNSUPPORTED_OPERATION, {
      error: error,
      method: method,
      transaction: transaction
    });
  }
  if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {
    logger$g.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
      error: error,
      method: method,
      transaction: transaction
    });
  }
  throw error;
}
function timer(timeout) {
  return new Promise(function (resolve) {
    setTimeout(resolve, timeout);
  });
}
function getResult$1(payload) {
  if (payload.error) {
    // @TODO: not any
    var error = new Error(payload.error.message);
    error.code = payload.error.code;
    error.data = payload.error.data;
    throw error;
  }
  return payload.result;
}
function getLowerCase(value) {
  if (value) {
    return value.toLowerCase();
  }
  return value;
}
var _constructorGuard = {};
var JsonRpcSigner = /*#__PURE__*/function (_Signer) {
  _inherits(JsonRpcSigner, _Signer);
  var _super = _createSuper$d(JsonRpcSigner);
  function JsonRpcSigner(constructorGuard, provider, addressOrIndex) {
    var _this;
    _classCallCheck(this, JsonRpcSigner);
    _this = _super.call(this);
    if (constructorGuard !== _constructorGuard) {
      throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
    }
    defineReadOnly(_assertThisInitialized(_this), "provider", provider);
    if (addressOrIndex == null) {
      addressOrIndex = 0;
    }
    if (typeof addressOrIndex === "string") {
      defineReadOnly(_assertThisInitialized(_this), "_address", _this.provider.formatter.address(addressOrIndex));
      defineReadOnly(_assertThisInitialized(_this), "_index", null);
    } else if (typeof addressOrIndex === "number") {
      defineReadOnly(_assertThisInitialized(_this), "_index", addressOrIndex);
      defineReadOnly(_assertThisInitialized(_this), "_address", null);
    } else {
      logger$g.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
    }
    return _this;
  }
  _createClass(JsonRpcSigner, [{
    key: "connect",
    value: function connect(provider) {
      return logger$g.throwError("cannot alter JSON-RPC Signer connection", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "connect"
      });
    }
  }, {
    key: "connectUnchecked",
    value: function connectUnchecked() {
      return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);
    }
  }, {
    key: "getAddress",
    value: function getAddress() {
      var _this2 = this;
      if (this._address) {
        return Promise.resolve(this._address);
      }
      return this.provider.send("eth_accounts", []).then(function (accounts) {
        if (accounts.length <= _this2._index) {
          logger$g.throwError("unknown account #" + _this2._index, Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "getAddress"
          });
        }
        return _this2.provider.formatter.address(accounts[_this2._index]);
      });
    }
  }, {
    key: "sendUncheckedTransaction",
    value: function sendUncheckedTransaction(transaction) {
      var _this3 = this;
      transaction = shallowCopy(transaction);
      var fromAddress = this.getAddress().then(function (address) {
        if (address) {
          address = address.toLowerCase();
        }
        return address;
      });
      // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user
      // wishes to use this, it is easy to specify explicitly, otherwise
      // we look it up for them.
      if (transaction.gasLimit == null) {
        var estimate = shallowCopy(transaction);
        estimate.from = fromAddress;
        transaction.gasLimit = this.provider.estimateGas(estimate);
      }
      if (transaction.to != null) {
        transaction.to = Promise.resolve(transaction.to).then(function (to) {
          return __awaiter$9(_this3, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
            var address;
            return regenerator.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!(to == null)) {
                      _context.next = 2;
                      break;
                    }
                    return _context.abrupt("return", null);
                  case 2:
                    _context.next = 4;
                    return this.provider.resolveName(to);
                  case 4:
                    address = _context.sent;
                    if (address == null) {
                      logger$g.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                    }
                    return _context.abrupt("return", address);
                  case 7:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));
        });
      }
      return resolveProperties({
        tx: resolveProperties(transaction),
        sender: fromAddress
      }).then(function (_ref) {
        var tx = _ref.tx,
          sender = _ref.sender;
        if (tx.from != null) {
          if (tx.from.toLowerCase() !== sender) {
            logger$g.throwArgumentError("from address mismatch", "transaction", transaction);
          }
        } else {
          tx.from = sender;
        }
        var hexTx = _this3.provider.constructor.hexlifyTransaction(tx, {
          from: true
        });
        return _this3.provider.send("eth_sendTransaction", [hexTx]).then(function (hash) {
          return hash;
        }, function (error) {
          if (typeof error.message === "string" && error.message.match(/user denied/i)) {
            logger$g.throwError("user rejected transaction", Logger.errors.ACTION_REJECTED, {
              action: "sendTransaction",
              transaction: tx
            });
          }
          return checkError$1("sendTransaction", error, hexTx);
        });
      });
    }
  }, {
    key: "signTransaction",
    value: function signTransaction(transaction) {
      return logger$g.throwError("signing transactions is unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "signTransaction"
      });
    }
  }, {
    key: "sendTransaction",
    value: function sendTransaction(transaction) {
      return __awaiter$9(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee3() {
        var _this4 = this;
        var blockNumber, hash;
        return regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);
              case 2:
                blockNumber = _context3.sent;
                _context3.next = 5;
                return this.sendUncheckedTransaction(transaction);
              case 5:
                hash = _context3.sent;
                _context3.prev = 6;
                _context3.next = 9;
                return poll(function () {
                  return __awaiter$9(_this4, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee2() {
                    var tx;
                    return regenerator.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            _context2.next = 2;
                            return this.provider.getTransaction(hash);
                          case 2:
                            tx = _context2.sent;
                            if (!(tx === null)) {
                              _context2.next = 5;
                              break;
                            }
                            return _context2.abrupt("return", undefined);
                          case 5:
                            return _context2.abrupt("return", this.provider._wrapTransaction(tx, hash, blockNumber));
                          case 6:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2, this);
                  }));
                }, {
                  oncePoll: this.provider
                });
              case 9:
                return _context3.abrupt("return", _context3.sent);
              case 12:
                _context3.prev = 12;
                _context3.t0 = _context3["catch"](6);
                _context3.t0.transactionHash = hash;
                throw _context3.t0;
              case 16:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[6, 12]]);
      }));
    }
  }, {
    key: "signMessage",
    value: function signMessage(message) {
      return __awaiter$9(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee4() {
        var data, address;
        return regenerator.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                data = typeof message === "string" ? toUtf8Bytes(message) : message;
                _context4.next = 3;
                return this.getAddress();
              case 3:
                address = _context4.sent;
                _context4.prev = 4;
                _context4.next = 7;
                return this.provider.send("personal_sign", [hexlify(data), address.toLowerCase()]);
              case 7:
                return _context4.abrupt("return", _context4.sent);
              case 10:
                _context4.prev = 10;
                _context4.t0 = _context4["catch"](4);
                if (typeof _context4.t0.message === "string" && _context4.t0.message.match(/user denied/i)) {
                  logger$g.throwError("user rejected signing", Logger.errors.ACTION_REJECTED, {
                    action: "signMessage",
                    from: address,
                    messageData: message
                  });
                }
                throw _context4.t0;
              case 14:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[4, 10]]);
      }));
    }
  }, {
    key: "_legacySignMessage",
    value: function _legacySignMessage(message) {
      return __awaiter$9(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee5() {
        var data, address;
        return regenerator.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                data = typeof message === "string" ? toUtf8Bytes(message) : message;
                _context5.next = 3;
                return this.getAddress();
              case 3:
                address = _context5.sent;
                _context5.prev = 4;
                _context5.next = 7;
                return this.provider.send("eth_sign", [address.toLowerCase(), hexlify(data)]);
              case 7:
                return _context5.abrupt("return", _context5.sent);
              case 10:
                _context5.prev = 10;
                _context5.t0 = _context5["catch"](4);
                if (typeof _context5.t0.message === "string" && _context5.t0.message.match(/user denied/i)) {
                  logger$g.throwError("user rejected signing", Logger.errors.ACTION_REJECTED, {
                    action: "_legacySignMessage",
                    from: address,
                    messageData: message
                  });
                }
                throw _context5.t0;
              case 14:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this, [[4, 10]]);
      }));
    }
  }, {
    key: "_signTypedData",
    value: function _signTypedData(domain, types, value) {
      return __awaiter$9(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee6() {
        var _this5 = this;
        var populated, address;
        return regenerator.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return TypedDataEncoder.resolveNames(domain, types, value, function (name) {
                  return _this5.provider.resolveName(name);
                });
              case 2:
                populated = _context6.sent;
                _context6.next = 5;
                return this.getAddress();
              case 5:
                address = _context6.sent;
                _context6.prev = 6;
                _context6.next = 9;
                return this.provider.send("eth_signTypedData_v4", [address.toLowerCase(), JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);
              case 9:
                return _context6.abrupt("return", _context6.sent);
              case 12:
                _context6.prev = 12;
                _context6.t0 = _context6["catch"](6);
                if (typeof _context6.t0.message === "string" && _context6.t0.message.match(/user denied/i)) {
                  logger$g.throwError("user rejected signing", Logger.errors.ACTION_REJECTED, {
                    action: "_signTypedData",
                    from: address,
                    messageData: {
                      domain: populated.domain,
                      types: types,
                      value: populated.value
                    }
                  });
                }
                throw _context6.t0;
              case 16:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this, [[6, 12]]);
      }));
    }
  }, {
    key: "unlock",
    value: function unlock(password) {
      return __awaiter$9(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee7() {
        var provider, address;
        return regenerator.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                provider = this.provider;
                _context7.next = 3;
                return this.getAddress();
              case 3:
                address = _context7.sent;
                return _context7.abrupt("return", provider.send("personal_unlockAccount", [address.toLowerCase(), password, null]));
              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));
    }
  }]);
  return JsonRpcSigner;
}(Signer);
var UncheckedJsonRpcSigner = /*#__PURE__*/function (_JsonRpcSigner) {
  _inherits(UncheckedJsonRpcSigner, _JsonRpcSigner);
  var _super2 = _createSuper$d(UncheckedJsonRpcSigner);
  function UncheckedJsonRpcSigner() {
    _classCallCheck(this, UncheckedJsonRpcSigner);
    return _super2.apply(this, arguments);
  }
  _createClass(UncheckedJsonRpcSigner, [{
    key: "sendTransaction",
    value: function sendTransaction(transaction) {
      var _this6 = this;
      return this.sendUncheckedTransaction(transaction).then(function (hash) {
        return {
          hash: hash,
          nonce: null,
          gasLimit: null,
          gasPrice: null,
          data: null,
          value: null,
          chainId: null,
          confirmations: 0,
          from: null,
          wait: function wait(confirmations) {
            return _this6.provider.waitForTransaction(hash, confirmations);
          }
        };
      });
    }
  }]);
  return UncheckedJsonRpcSigner;
}(JsonRpcSigner);
var allowedTransactionKeys = {
  chainId: true,
  data: true,
  gasLimit: true,
  gasPrice: true,
  nonce: true,
  to: true,
  value: true,
  type: true,
  accessList: true,
  maxFeePerGas: true,
  maxPriorityFeePerGas: true
};
var JsonRpcProvider = /*#__PURE__*/function (_BaseProvider) {
  _inherits(JsonRpcProvider, _BaseProvider);
  var _super3 = _createSuper$d(JsonRpcProvider);
  function JsonRpcProvider(url, network) {
    var _this7;
    _classCallCheck(this, JsonRpcProvider);
    var networkOrReady = network;
    // The network is unknown, query the JSON-RPC for it
    if (networkOrReady == null) {
      networkOrReady = new Promise(function (resolve, reject) {
        setTimeout(function () {
          _this7.detectNetwork().then(function (network) {
            resolve(network);
          }, function (error) {
            reject(error);
          });
        }, 0);
      });
    }
    _this7 = _super3.call(this, networkOrReady);
    // Default URL
    if (!url) {
      url = getStatic(_this7.constructor, "defaultUrl")();
    }
    if (typeof url === "string") {
      defineReadOnly(_assertThisInitialized(_this7), "connection", Object.freeze({
        url: url
      }));
    } else {
      defineReadOnly(_assertThisInitialized(_this7), "connection", Object.freeze(shallowCopy(url)));
    }
    _this7._nextId = 42;
    return _this7;
  }
  _createClass(JsonRpcProvider, [{
    key: "_cache",
    get: function get() {
      if (this._eventLoopCache == null) {
        this._eventLoopCache = {};
      }
      return this._eventLoopCache;
    }
  }, {
    key: "detectNetwork",
    value: function detectNetwork() {
      var _this8 = this;
      if (!this._cache["detectNetwork"]) {
        this._cache["detectNetwork"] = this._uncachedDetectNetwork();
        // Clear this cache at the beginning of the next event loop
        setTimeout(function () {
          _this8._cache["detectNetwork"] = null;
        }, 0);
      }
      return this._cache["detectNetwork"];
    }
  }, {
    key: "_uncachedDetectNetwork",
    value: function _uncachedDetectNetwork() {
      return __awaiter$9(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee8() {
        var chainId, getNetwork;
        return regenerator.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return timer(0);
              case 2:
                chainId = null;
                _context8.prev = 3;
                _context8.next = 6;
                return this.send("eth_chainId", []);
              case 6:
                chainId = _context8.sent;
                _context8.next = 19;
                break;
              case 9:
                _context8.prev = 9;
                _context8.t0 = _context8["catch"](3);
                _context8.prev = 11;
                _context8.next = 14;
                return this.send("net_version", []);
              case 14:
                chainId = _context8.sent;
                _context8.next = 19;
                break;
              case 17:
                _context8.prev = 17;
                _context8.t1 = _context8["catch"](11);
              case 19:
                if (!(chainId != null)) {
                  _context8.next = 28;
                  break;
                }
                getNetwork = getStatic(this.constructor, "getNetwork");
                _context8.prev = 21;
                return _context8.abrupt("return", getNetwork(BigNumber.from(chainId).toNumber()));
              case 25:
                _context8.prev = 25;
                _context8.t2 = _context8["catch"](21);
                return _context8.abrupt("return", logger$g.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
                  chainId: chainId,
                  event: "invalidNetwork",
                  serverError: _context8.t2
                }));
              case 28:
                return _context8.abrupt("return", logger$g.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
                  event: "noNetwork"
                }));
              case 29:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this, [[3, 9], [11, 17], [21, 25]]);
      }));
    }
  }, {
    key: "getSigner",
    value: function getSigner(addressOrIndex) {
      return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);
    }
  }, {
    key: "getUncheckedSigner",
    value: function getUncheckedSigner(addressOrIndex) {
      return this.getSigner(addressOrIndex).connectUnchecked();
    }
  }, {
    key: "listAccounts",
    value: function listAccounts() {
      var _this9 = this;
      return this.send("eth_accounts", []).then(function (accounts) {
        return accounts.map(function (a) {
          return _this9.formatter.address(a);
        });
      });
    }
  }, {
    key: "send",
    value: function send(method, params) {
      var _this10 = this;
      var request = {
        method: method,
        params: params,
        id: this._nextId++,
        jsonrpc: "2.0"
      };
      this.emit("debug", {
        action: "request",
        request: deepCopy(request),
        provider: this
      });
      // We can expand this in the future to any call, but for now these
      // are the biggest wins and do not require any serializing parameters.
      var cache = ["eth_chainId", "eth_blockNumber"].indexOf(method) >= 0;
      if (cache && this._cache[method]) {
        return this._cache[method];
      }
      var result = fetchJson(this.connection, JSON.stringify(request), getResult$1).then(function (result) {
        _this10.emit("debug", {
          action: "response",
          request: request,
          response: result,
          provider: _this10
        });
        return result;
      }, function (error) {
        _this10.emit("debug", {
          action: "response",
          error: error,
          request: request,
          provider: _this10
        });
        throw error;
      });
      // Cache the fetch, but clear it on the next event loop
      if (cache) {
        this._cache[method] = result;
        setTimeout(function () {
          _this10._cache[method] = null;
        }, 0);
      }
      return result;
    }
  }, {
    key: "prepareRequest",
    value: function prepareRequest(method, params) {
      switch (method) {
        case "getBlockNumber":
          return ["eth_blockNumber", []];
        case "getGasPrice":
          return ["eth_gasPrice", []];
        case "getBalance":
          return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];
        case "getTransactionCount":
          return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];
        case "getCode":
          return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];
        case "getStorageAt":
          return ["eth_getStorageAt", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];
        case "sendTransaction":
          return ["eth_sendRawTransaction", [params.signedTransaction]];
        case "getBlock":
          if (params.blockTag) {
            return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
          } else if (params.blockHash) {
            return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
          }
          return null;
        case "getTransaction":
          return ["eth_getTransactionByHash", [params.transactionHash]];
        case "getTransactionReceipt":
          return ["eth_getTransactionReceipt", [params.transactionHash]];
        case "call":
          {
            var hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
            return ["eth_call", [hexlifyTransaction(params.transaction, {
              from: true
            }), params.blockTag]];
          }
        case "estimateGas":
          {
            var _hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
            return ["eth_estimateGas", [_hexlifyTransaction(params.transaction, {
              from: true
            })]];
          }
        case "getLogs":
          if (params.filter && params.filter.address != null) {
            params.filter.address = getLowerCase(params.filter.address);
          }
          return ["eth_getLogs", [params.filter]];
      }
      return null;
    }
  }, {
    key: "perform",
    value: function perform(method, params) {
      return __awaiter$9(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee9() {
        var tx, feeData, args;
        return regenerator.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                if (!(method === "call" || method === "estimateGas")) {
                  _context9.next = 8;
                  break;
                }
                tx = params.transaction;
                if (!(tx && tx.type != null && BigNumber.from(tx.type).isZero())) {
                  _context9.next = 8;
                  break;
                }
                if (!(tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null)) {
                  _context9.next = 8;
                  break;
                }
                _context9.next = 6;
                return this.getFeeData();
              case 6:
                feeData = _context9.sent;
                if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                  // Network doesn't know about EIP-1559 (and hence type)
                  params = shallowCopy(params);
                  params.transaction = shallowCopy(tx);
                  delete params.transaction.type;
                }
              case 8:
                args = this.prepareRequest(method, params);
                if (args == null) {
                  logger$g.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, {
                    operation: method
                  });
                }
                _context9.prev = 10;
                _context9.next = 13;
                return this.send(args[0], args[1]);
              case 13:
                return _context9.abrupt("return", _context9.sent);
              case 16:
                _context9.prev = 16;
                _context9.t0 = _context9["catch"](10);
                return _context9.abrupt("return", checkError$1(method, _context9.t0, params));
              case 19:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this, [[10, 16]]);
      }));
    }
  }, {
    key: "_startEvent",
    value: function _startEvent(event) {
      if (event.tag === "pending") {
        this._startPending();
      }
      _get(_getPrototypeOf(JsonRpcProvider.prototype), "_startEvent", this).call(this, event);
    }
  }, {
    key: "_startPending",
    value: function _startPending() {
      if (this._pendingFilter != null) {
        return;
      }
      var self = this;
      var pendingFilter = this.send("eth_newPendingTransactionFilter", []);
      this._pendingFilter = pendingFilter;
      pendingFilter.then(function (filterId) {
        function poll() {
          self.send("eth_getFilterChanges", [filterId]).then(function (hashes) {
            if (self._pendingFilter != pendingFilter) {
              return null;
            }
            var seq = Promise.resolve();
            hashes.forEach(function (hash) {
              // @TODO: This should be garbage collected at some point... How? When?
              self._emitted["t:" + hash.toLowerCase()] = "pending";
              seq = seq.then(function () {
                return self.getTransaction(hash).then(function (tx) {
                  self.emit("pending", tx);
                  return null;
                });
              });
            });
            return seq.then(function () {
              return timer(1000);
            });
          }).then(function () {
            if (self._pendingFilter != pendingFilter) {
              self.send("eth_uninstallFilter", [filterId]);
              return;
            }
            setTimeout(function () {
              poll();
            }, 0);
            return null;
          })["catch"](function (error) {});
        }
        poll();
        return filterId;
      })["catch"](function (error) {});
    }
  }, {
    key: "_stopEvent",
    value: function _stopEvent(event) {
      if (event.tag === "pending" && this.listenerCount("pending") === 0) {
        this._pendingFilter = null;
      }
      _get(_getPrototypeOf(JsonRpcProvider.prototype), "_stopEvent", this).call(this, event);
    }
    // Convert an ethers.js transaction into a JSON-RPC transaction
    //  - gasLimit => gas
    //  - All values hexlified
    //  - All numeric values zero-striped
    //  - All addresses are lowercased
    // NOTE: This allows a TransactionRequest, but all values should be resolved
    //       before this is called
    // @TODO: This will likely be removed in future versions and prepareRequest
    //        will be the preferred method for this.
  }], [{
    key: "defaultUrl",
    value: function defaultUrl() {
      return "http:/\/localhost:8545";
    }
  }, {
    key: "hexlifyTransaction",
    value: function hexlifyTransaction(transaction, allowExtra) {
      // Check only allowed properties are given
      var allowed = shallowCopy(allowedTransactionKeys);
      if (allowExtra) {
        for (var key in allowExtra) {
          if (allowExtra[key]) {
            allowed[key] = true;
          }
        }
      }
      checkProperties(transaction, allowed);
      var result = {};
      // JSON-RPC now requires numeric values to be "quantity" values
      ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach(function (key) {
        if (transaction[key] == null) {
          return;
        }
        var value = hexValue(BigNumber.from(transaction[key]));
        if (key === "gasLimit") {
          key = "gas";
        }
        result[key] = value;
      });
      ["from", "to", "data"].forEach(function (key) {
        if (transaction[key] == null) {
          return;
        }
        result[key] = hexlify(transaction[key]);
      });
      if (transaction.accessList) {
        result["accessList"] = accessListify(transaction.accessList);
      }
      return result;
    }
  }]);
  return JsonRpcProvider;
}(BaseProvider);

var WS = null;
try {
  WS = WebSocket;
  if (WS == null) {
    throw new Error("inject please");
  }
} catch (error) {
  var logger$f = new Logger(version$5);
  WS = function WS() {
    logger$f.throwError("WebSockets not supported in this environment", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "new WebSocket()"
    });
  };
}

function _createSuper$c(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$c(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$c() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __awaiter$8 = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger$e = new Logger(version$5);
/**
 *  Notes:
 *
 *  This provider differs a bit from the polling providers. One main
 *  difference is how it handles consistency. The polling providers
 *  will stall responses to ensure a consistent state, while this
 *  WebSocket provider assumes the connected backend will manage this.
 *
 *  For example, if a polling provider emits an event which indicates
 *  the event occurred in blockhash XXX, a call to fetch that block by
 *  its hash XXX, if not present will retry until it is present. This
 *  can occur when querying a pool of nodes that are mildly out of sync
 *  with each other.
 */
var NextId = 1;
// For more info about the Real-time Event API see:
//   https://geth.ethereum.org/docs/rpc/pubsub
var WebSocketProvider = /*#__PURE__*/function (_JsonRpcProvider) {
  _inherits(WebSocketProvider, _JsonRpcProvider);
  var _super = _createSuper$c(WebSocketProvider);
  function WebSocketProvider(url, network) {
    var _thisSuper, _this;
    _classCallCheck(this, WebSocketProvider);
    // This will be added in the future; please open an issue to expedite
    if (network === "any") {
      logger$e.throwError("WebSocketProvider does not support 'any' network yet", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "network:any"
      });
    }
    if (typeof url === "string") {
      _this = _super.call(this, url, network);
    } else {
      _this = _super.call(this, "_websocket", network);
    }
    _this._pollingInterval = -1;
    _this._wsReady = false;
    if (typeof url === "string") {
      defineReadOnly(_assertThisInitialized(_this), "_websocket", new WS(_this.connection.url));
    } else {
      defineReadOnly(_assertThisInitialized(_this), "_websocket", url);
    }
    defineReadOnly(_assertThisInitialized(_this), "_requests", {});
    defineReadOnly(_assertThisInitialized(_this), "_subs", {});
    defineReadOnly(_assertThisInitialized(_this), "_subIds", {});
    defineReadOnly(_assertThisInitialized(_this), "_detectNetwork", _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(WebSocketProvider.prototype)), "detectNetwork", _thisSuper).call(_thisSuper));
    // Stall sending requests until the socket is open...
    _this.websocket.onopen = function () {
      _this._wsReady = true;
      Object.keys(_this._requests).forEach(function (id) {
        _this.websocket.send(_this._requests[id].payload);
      });
    };
    _this.websocket.onmessage = function (messageEvent) {
      var data = messageEvent.data;
      var result = JSON.parse(data);
      if (result.id != null) {
        var id = String(result.id);
        var request = _this._requests[id];
        delete _this._requests[id];
        if (result.result !== undefined) {
          request.callback(null, result.result);
          _this.emit("debug", {
            action: "response",
            request: JSON.parse(request.payload),
            response: result.result,
            provider: _assertThisInitialized(_this)
          });
        } else {
          var error = null;
          if (result.error) {
            error = new Error(result.error.message || "unknown error");
            defineReadOnly(error, "code", result.error.code || null);
            defineReadOnly(error, "response", data);
          } else {
            error = new Error("unknown error");
          }
          request.callback(error, undefined);
          _this.emit("debug", {
            action: "response",
            error: error,
            request: JSON.parse(request.payload),
            provider: _assertThisInitialized(_this)
          });
        }
      } else if (result.method === "eth_subscription") {
        // Subscription...
        var sub = _this._subs[result.params.subscription];
        if (sub) {
          //this.emit.apply(this,                  );
          sub.processFunc(result.params.result);
        }
      } else {
        console.warn("this should not happen");
      }
    };
    // This Provider does not actually poll, but we want to trigger
    // poll events for things that depend on them (like stalling for
    // block and transaction lookups)
    var fauxPoll = setInterval(function () {
      _this.emit("poll");
    }, 1000);
    if (fauxPoll.unref) {
      fauxPoll.unref();
    }
    return _possibleConstructorReturn(_this);
  }
  // Cannot narrow the type of _websocket, as that is not backwards compatible
  // so we add a getter and let the WebSocket be a public API.
  _createClass(WebSocketProvider, [{
    key: "websocket",
    get: function get() {
      return this._websocket;
    }
  }, {
    key: "detectNetwork",
    value: function detectNetwork() {
      return this._detectNetwork;
    }
  }, {
    key: "pollingInterval",
    get: function get() {
      return 0;
    },
    set: function set(value) {
      logger$e.throwError("cannot set polling interval on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "setPollingInterval"
      });
    }
  }, {
    key: "resetEventsBlock",
    value: function resetEventsBlock(blockNumber) {
      logger$e.throwError("cannot reset events block on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "resetEventBlock"
      });
    }
  }, {
    key: "poll",
    value: function poll() {
      return __awaiter$8(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", null);
              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
    }
  }, {
    key: "polling",
    set: function set(value) {
      if (!value) {
        return;
      }
      logger$e.throwError("cannot set polling on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "setPolling"
      });
    }
  }, {
    key: "send",
    value: function send(method, params) {
      var _this2 = this;
      var rid = NextId++;
      return new Promise(function (resolve, reject) {
        function callback(error, result) {
          if (error) {
            return reject(error);
          }
          return resolve(result);
        }
        var payload = JSON.stringify({
          method: method,
          params: params,
          id: rid,
          jsonrpc: "2.0"
        });
        _this2.emit("debug", {
          action: "request",
          request: JSON.parse(payload),
          provider: _this2
        });
        _this2._requests[String(rid)] = {
          callback: callback,
          payload: payload
        };
        if (_this2._wsReady) {
          _this2.websocket.send(payload);
        }
      });
    }
  }, {
    key: "_subscribe",
    value: function _subscribe(tag, param, processFunc) {
      return __awaiter$8(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee2() {
        var _this3 = this;
        var subIdPromise, subId;
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                subIdPromise = this._subIds[tag];
                if (subIdPromise == null) {
                  subIdPromise = Promise.all(param).then(function (param) {
                    return _this3.send("eth_subscribe", param);
                  });
                  this._subIds[tag] = subIdPromise;
                }
                _context2.next = 4;
                return subIdPromise;
              case 4:
                subId = _context2.sent;
                this._subs[subId] = {
                  tag: tag,
                  processFunc: processFunc
                };
              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
    }
  }, {
    key: "_startEvent",
    value: function _startEvent(event) {
      var _this4 = this;
      switch (event.type) {
        case "block":
          this._subscribe("block", ["newHeads"], function (result) {
            var blockNumber = BigNumber.from(result.number).toNumber();
            _this4._emitted.block = blockNumber;
            _this4.emit("block", blockNumber);
          });
          break;
        case "pending":
          this._subscribe("pending", ["newPendingTransactions"], function (result) {
            _this4.emit("pending", result);
          });
          break;
        case "filter":
          this._subscribe(event.tag, ["logs", this._getFilter(event.filter)], function (result) {
            if (result.removed == null) {
              result.removed = false;
            }
            _this4.emit(event.filter, _this4.formatter.filterLog(result));
          });
          break;
        case "tx":
          {
            var emitReceipt = function emitReceipt(event) {
              var hash = event.hash;
              _this4.getTransactionReceipt(hash).then(function (receipt) {
                if (!receipt) {
                  return;
                }
                _this4.emit(hash, receipt);
              });
            };
            // In case it is already mined
            emitReceipt(event);
            // To keep things simple, we start up a single newHeads subscription
            // to keep an eye out for transactions we are watching for.
            // Starting a subscription for an event (i.e. "tx") that is already
            // running is (basically) a nop.
            this._subscribe("tx", ["newHeads"], function (result) {
              _this4._events.filter(function (e) {
                return e.type === "tx";
              }).forEach(emitReceipt);
            });
            break;
          }
        // Nothing is needed
        case "debug":
        case "poll":
        case "willPoll":
        case "didPoll":
        case "error":
          break;
        default:
          console.log("unhandled:", event);
          break;
      }
    }
  }, {
    key: "_stopEvent",
    value: function _stopEvent(event) {
      var _this5 = this;
      var tag = event.tag;
      if (event.type === "tx") {
        // There are remaining transaction event listeners
        if (this._events.filter(function (e) {
          return e.type === "tx";
        }).length) {
          return;
        }
        tag = "tx";
      } else if (this.listenerCount(event.event)) {
        // There are remaining event listeners
        return;
      }
      var subId = this._subIds[tag];
      if (!subId) {
        return;
      }
      delete this._subIds[tag];
      subId.then(function (subId) {
        if (!_this5._subs[subId]) {
          return;
        }
        delete _this5._subs[subId];
        _this5.send("eth_unsubscribe", [subId]);
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      return __awaiter$8(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee3() {
        var _this6 = this;
        return regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(this.websocket.readyState === WS.CONNECTING)) {
                  _context3.next = 3;
                  break;
                }
                _context3.next = 3;
                return new Promise(function (resolve) {
                  _this6.websocket.onopen = function () {
                    resolve(true);
                  };
                  _this6.websocket.onerror = function () {
                    resolve(false);
                  };
                });
              case 3:
                // Hangup
                // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes
                this.websocket.close(1000);
              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
    }
  }], [{
    key: "defaultUrl",
    value: function defaultUrl() {
      return "ws:/\/localhost:8546";
    }
  }]);
  return WebSocketProvider;
}(JsonRpcProvider);

function _createSuper$b(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$b(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$b() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __awaiter$7 = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger$d = new Logger(version$5);
// A StaticJsonRpcProvider is useful when you *know* for certain that
// the backend will never change, as it never calls eth_chainId to
// verify its backend. However, if the backend does change, the effects
// are undefined and may include:
// - inconsistent results
// - locking up the UI
// - block skew warnings
// - wrong results
// If the network is not explicit (i.e. auto-detection is expected), the
// node MUST be running and available to respond to requests BEFORE this
// is instantiated.
var StaticJsonRpcProvider = /*#__PURE__*/function (_JsonRpcProvider) {
  _inherits(StaticJsonRpcProvider, _JsonRpcProvider);
  var _super2 = _createSuper$b(StaticJsonRpcProvider);
  function StaticJsonRpcProvider() {
    _classCallCheck(this, StaticJsonRpcProvider);
    return _super2.apply(this, arguments);
  }
  _createClass(StaticJsonRpcProvider, [{
    key: "detectNetwork",
    value: function detectNetwork() {
      var _this = this;
      var _super = Object.create(null, {
        detectNetwork: {
          get: function get() {
            return _get(_getPrototypeOf(StaticJsonRpcProvider.prototype), "detectNetwork", _this);
          }
        }
      });
      return __awaiter$7(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
        var network;
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                network = this.network;
                if (!(network == null)) {
                  _context.next = 7;
                  break;
                }
                _context.next = 4;
                return _super.detectNetwork.call(this);
              case 4:
                network = _context.sent;
                if (!network) {
                  logger$d.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
                }
                // If still not set, set it
                if (this._network == null) {
                  // A static network does not support "any"
                  defineReadOnly(this, "_network", network);
                  this.emit("network", network, null);
                }
              case 7:
                return _context.abrupt("return", network);
              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
    }
  }]);
  return StaticJsonRpcProvider;
}(JsonRpcProvider);
var UrlJsonRpcProvider = /*#__PURE__*/function (_StaticJsonRpcProvide) {
  _inherits(UrlJsonRpcProvider, _StaticJsonRpcProvide);
  var _super3 = _createSuper$b(UrlJsonRpcProvider);
  function UrlJsonRpcProvider(network, apiKey) {
    var _this2;
    _classCallCheck(this, UrlJsonRpcProvider);
    logger$d.checkAbstract(this instanceof UrlJsonRpcProvider ? this.constructor : void 0, UrlJsonRpcProvider);
    // Normalize the Network and API Key
    network = getStatic(this instanceof UrlJsonRpcProvider ? this.constructor : void 0, "getNetwork")(network);
    apiKey = getStatic(this instanceof UrlJsonRpcProvider ? this.constructor : void 0, "getApiKey")(apiKey);
    var connection = getStatic(this instanceof UrlJsonRpcProvider ? this.constructor : void 0, "getUrl")(network, apiKey);
    _this2 = _super3.call(this, connection, network);
    if (typeof apiKey === "string") {
      defineReadOnly(_assertThisInitialized(_this2), "apiKey", apiKey);
    } else if (apiKey != null) {
      Object.keys(apiKey).forEach(function (key) {
        defineReadOnly(_assertThisInitialized(_this2), key, apiKey[key]);
      });
    }
    return _this2;
  }
  _createClass(UrlJsonRpcProvider, [{
    key: "_startPending",
    value: function _startPending() {
      logger$d.warn("WARNING: API provider does not support pending filters");
    }
  }, {
    key: "isCommunityResource",
    value: function isCommunityResource() {
      return false;
    }
  }, {
    key: "getSigner",
    value: function getSigner(address) {
      return logger$d.throwError("API provider does not support signing", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "getSigner"
      });
    }
  }, {
    key: "listAccounts",
    value: function listAccounts() {
      return Promise.resolve([]);
    }
    // Return a defaultApiKey if null, otherwise validate the API key
  }], [{
    key: "getApiKey",
    value: function getApiKey(apiKey) {
      return apiKey;
    }
    // Returns the url or connection for the given network and API key. The
    // API key will have been sanitized by the getApiKey first, so any validation
    // or transformations can be done there.
  }, {
    key: "getUrl",
    value: function getUrl(network, apiKey) {
      return logger$d.throwError("not implemented; sub-classes must override getUrl", Logger.errors.NOT_IMPLEMENTED, {
        operation: "getUrl"
      });
    }
  }]);
  return UrlJsonRpcProvider;
}(StaticJsonRpcProvider);

function _createSuper$a(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$a(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$a() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var logger$c = new Logger(version$5);
// This key was provided to ethers.js by Alchemy to be used by the
// default provider, but it is recommended that for your own
// production environments, that you acquire your own API key at:
//   https://dashboard.alchemyapi.io
var defaultApiKey$2 = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
var AlchemyWebSocketProvider = /*#__PURE__*/function (_WebSocketProvider) {
  _inherits(AlchemyWebSocketProvider, _WebSocketProvider);
  var _super = _createSuper$a(AlchemyWebSocketProvider);
  function AlchemyWebSocketProvider(network, apiKey) {
    var _this;
    _classCallCheck(this, AlchemyWebSocketProvider);
    var provider = new AlchemyProvider(network, apiKey);
    var url = provider.connection.url.replace(/^http/i, "ws").replace(".alchemyapi.", ".ws.alchemyapi.");
    _this = _super.call(this, url, provider.network);
    defineReadOnly(_assertThisInitialized(_this), "apiKey", provider.apiKey);
    return _this;
  }
  _createClass(AlchemyWebSocketProvider, [{
    key: "isCommunityResource",
    value: function isCommunityResource() {
      return this.apiKey === defaultApiKey$2;
    }
  }]);
  return AlchemyWebSocketProvider;
}(WebSocketProvider);
var AlchemyProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {
  _inherits(AlchemyProvider, _UrlJsonRpcProvider);
  var _super2 = _createSuper$a(AlchemyProvider);
  function AlchemyProvider() {
    _classCallCheck(this, AlchemyProvider);
    return _super2.apply(this, arguments);
  }
  _createClass(AlchemyProvider, [{
    key: "isCommunityResource",
    value: function isCommunityResource() {
      return this.apiKey === defaultApiKey$2;
    }
  }], [{
    key: "getWebSocketProvider",
    value: function getWebSocketProvider(network, apiKey) {
      return new AlchemyWebSocketProvider(network, apiKey);
    }
  }, {
    key: "getApiKey",
    value: function getApiKey(apiKey) {
      if (apiKey == null) {
        return defaultApiKey$2;
      }
      if (apiKey && typeof apiKey !== "string") {
        logger$c.throwArgumentError("invalid apiKey", "apiKey", apiKey);
      }
      return apiKey;
    }
  }, {
    key: "getUrl",
    value: function getUrl(network, apiKey) {
      var host = null;
      switch (network.name) {
        case "homestead":
          host = "eth-mainnet.alchemyapi.io/v2/";
          break;
        case "goerli":
          host = "eth-goerli.g.alchemy.com/v2/";
          break;
        case "matic":
          host = "polygon-mainnet.g.alchemy.com/v2/";
          break;
        case "maticmum":
          host = "polygon-mumbai.g.alchemy.com/v2/";
          break;
        case "arbitrum":
          host = "arb-mainnet.g.alchemy.com/v2/";
          break;
        case "arbitrum-goerli":
          host = "arb-goerli.g.alchemy.com/v2/";
          break;
        case "optimism":
          host = "opt-mainnet.g.alchemy.com/v2/";
          break;
        case "optimism-goerli":
          host = "opt-goerli.g.alchemy.com/v2/";
          break;
        default:
          logger$c.throwArgumentError("unsupported network", "network", arguments[0]);
      }
      return {
        allowGzip: true,
        url: "https:/" + "/" + host + apiKey,
        throttleCallback: function throttleCallback(attempt, url) {
          if (apiKey === defaultApiKey$2) {
            showThrottleMessage();
          }
          return Promise.resolve(true);
        }
      };
    }
  }]);
  return AlchemyProvider;
}(UrlJsonRpcProvider);

function _createSuper$9(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$9(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$9() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var logger$b = new Logger(version$5);
var defaultApiKey$1 = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
function getHost(name) {
  switch (name) {
    case "homestead":
      return "rpc.ankr.com/eth/";
    case "ropsten":
      return "rpc.ankr.com/eth_ropsten/";
    case "rinkeby":
      return "rpc.ankr.com/eth_rinkeby/";
    case "goerli":
      return "rpc.ankr.com/eth_goerli/";
    case "matic":
      return "rpc.ankr.com/polygon/";
    case "arbitrum":
      return "rpc.ankr.com/arbitrum/";
  }
  return logger$b.throwArgumentError("unsupported network", "name", name);
}
var AnkrProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {
  _inherits(AnkrProvider, _UrlJsonRpcProvider);
  var _super = _createSuper$9(AnkrProvider);
  function AnkrProvider() {
    _classCallCheck(this, AnkrProvider);
    return _super.apply(this, arguments);
  }
  _createClass(AnkrProvider, [{
    key: "isCommunityResource",
    value: function isCommunityResource() {
      return this.apiKey === defaultApiKey$1;
    }
  }], [{
    key: "getApiKey",
    value: function getApiKey(apiKey) {
      if (apiKey == null) {
        return defaultApiKey$1;
      }
      return apiKey;
    }
  }, {
    key: "getUrl",
    value: function getUrl(network, apiKey) {
      if (apiKey == null) {
        apiKey = defaultApiKey$1;
      }
      var connection = {
        allowGzip: true,
        url: "https:/\/" + getHost(network.name) + apiKey,
        throttleCallback: function throttleCallback(attempt, url) {
          if (apiKey.apiKey === defaultApiKey$1) {
            showThrottleMessage();
          }
          return Promise.resolve(true);
        }
      };
      if (apiKey.projectSecret != null) {
        connection.user = "";
        connection.password = apiKey.projectSecret;
      }
      return connection;
    }
  }]);
  return AnkrProvider;
}(UrlJsonRpcProvider);

function _createSuper$8(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$8(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$8() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __awaiter$6 = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger$a = new Logger(version$5);
var CloudflareProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {
  _inherits(CloudflareProvider, _UrlJsonRpcProvider);
  var _super2 = _createSuper$8(CloudflareProvider);
  function CloudflareProvider() {
    _classCallCheck(this, CloudflareProvider);
    return _super2.apply(this, arguments);
  }
  _createClass(CloudflareProvider, [{
    key: "perform",
    value: function perform(method, params) {
      var _this = this;
      var _super = Object.create(null, {
        perform: {
          get: function get() {
            return _get(_getPrototypeOf(CloudflareProvider.prototype), "perform", _this);
          }
        }
      });
      return __awaiter$6(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
        var block;
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(method === "getBlockNumber")) {
                  _context.next = 5;
                  break;
                }
                _context.next = 3;
                return _super.perform.call(this, "getBlock", {
                  blockTag: "latest"
                });
              case 3:
                block = _context.sent;
                return _context.abrupt("return", block.number);
              case 5:
                return _context.abrupt("return", _super.perform.call(this, method, params));
              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
    }
  }], [{
    key: "getApiKey",
    value: function getApiKey(apiKey) {
      if (apiKey != null) {
        logger$a.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
      }
      return null;
    }
  }, {
    key: "getUrl",
    value: function getUrl(network, apiKey) {
      var host = null;
      switch (network.name) {
        case "homestead":
          host = "https://cloudflare-eth.com/";
          break;
        default:
          logger$a.throwArgumentError("unsupported network", "network", arguments[0]);
      }
      return host;
    }
  }]);
  return CloudflareProvider;
}(UrlJsonRpcProvider);

function _createSuper$7(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$7(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$7() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __awaiter$5 = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger$9 = new Logger(version$5);
// The transaction has already been sanitized by the calls in Provider
function getTransactionPostData(transaction) {
  var result = {};
  for (var key in transaction) {
    if (transaction[key] == null) {
      continue;
    }
    var value = transaction[key];
    if (key === "type" && value === 0) {
      continue;
    }
    // Quantity-types require no leading zero, unless 0
    if ({
      type: true,
      gasLimit: true,
      gasPrice: true,
      maxFeePerGs: true,
      maxPriorityFeePerGas: true,
      nonce: true,
      value: true
    }[key]) {
      value = hexValue(hexlify(value));
    } else if (key === "accessList") {
      value = "[" + accessListify(value).map(function (set) {
        return "{address:\"".concat(set.address, "\",storageKeys:[\"").concat(set.storageKeys.join('","'), "\"]}");
      }).join(",") + "]";
    } else {
      value = hexlify(value);
    }
    result[key] = value;
  }
  return result;
}
function getResult(result) {
  // getLogs, getHistory have weird success responses
  if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
    return result.result;
  }
  if (result.status != 1 || typeof result.message !== "string" || !result.message.match(/^OK/)) {
    var error = new Error("invalid response");
    error.result = JSON.stringify(result);
    if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
      error.throttleRetry = true;
    }
    throw error;
  }
  return result.result;
}
function getJsonResult(result) {
  // This response indicates we are being throttled
  if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
    var error = new Error("throttled response");
    error.result = JSON.stringify(result);
    error.throttleRetry = true;
    throw error;
  }
  if (result.jsonrpc != "2.0") {
    // @TODO: not any
    var _error = new Error("invalid response");
    _error.result = JSON.stringify(result);
    throw _error;
  }
  if (result.error) {
    // @TODO: not any
    var _error2 = new Error(result.error.message || "unknown error");
    if (result.error.code) {
      _error2.code = result.error.code;
    }
    if (result.error.data) {
      _error2.data = result.error.data;
    }
    throw _error2;
  }
  return result.result;
}
// The blockTag was normalized as a string by the Provider pre-perform operations
function checkLogTag(blockTag) {
  if (blockTag === "pending") {
    throw new Error("pending not supported");
  }
  if (blockTag === "latest") {
    return blockTag;
  }
  return parseInt(blockTag.substring(2), 16);
}
function checkError(method, error, transaction) {
  // Undo the "convenience" some nodes are attempting to prevent backwards
  // incompatibility; maybe for v6 consider forwarding reverts as errors
  if (method === "call" && error.code === Logger.errors.SERVER_ERROR) {
    var e = error.error;
    // Etherscan keeps changing their string
    if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {
      // Etherscan prefixes the data like "Reverted 0x1234"
      var data = e.data;
      if (data) {
        data = "0x" + data.replace(/^.*0x/i, "");
      }
      if (isHexString$1(data)) {
        return data;
      }
      logger$9.throwError("missing revert data in call exception", Logger.errors.CALL_EXCEPTION, {
        error: error,
        data: "0x"
      });
    }
  }
  // Get the message from any nested error structure
  var message = error.message;
  if (error.code === Logger.errors.SERVER_ERROR) {
    if (error.error && typeof error.error.message === "string") {
      message = error.error.message;
    } else if (typeof error.body === "string") {
      message = error.body;
    } else if (typeof error.responseText === "string") {
      message = error.responseText;
    }
  }
  message = (message || "").toLowerCase();
  // "Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0"
  if (message.match(/insufficient funds/)) {
    logger$9.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
      error: error,
      method: method,
      transaction: transaction
    });
  }
  // "Transaction with the same hash was already imported."
  if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
    logger$9.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
      error: error,
      method: method,
      transaction: transaction
    });
  }
  // "Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce."
  if (message.match(/another transaction with same nonce/)) {
    logger$9.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
      error: error,
      method: method,
      transaction: transaction
    });
  }
  if (message.match(/execution failed due to an exception|execution reverted/)) {
    logger$9.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
      error: error,
      method: method,
      transaction: transaction
    });
  }
  throw error;
}
var EtherscanProvider = /*#__PURE__*/function (_BaseProvider) {
  _inherits(EtherscanProvider, _BaseProvider);
  var _super2 = _createSuper$7(EtherscanProvider);
  function EtherscanProvider(network, apiKey) {
    var _this;
    _classCallCheck(this, EtherscanProvider);
    _this = _super2.call(this, network);
    defineReadOnly(_assertThisInitialized(_this), "baseUrl", _this.getBaseUrl());
    defineReadOnly(_assertThisInitialized(_this), "apiKey", apiKey || null);
    return _this;
  }
  _createClass(EtherscanProvider, [{
    key: "getBaseUrl",
    value: function getBaseUrl() {
      switch (this.network ? this.network.name : "invalid") {
        case "homestead":
          return "https:/\/api.etherscan.io";
        case "goerli":
          return "https:/\/api-goerli.etherscan.io";
        case "sepolia":
          return "https:/\/api-sepolia.etherscan.io";
        case "matic":
          return "https:/\/api.polygonscan.com";
        case "maticmum":
          return "https:/\/api-testnet.polygonscan.com";
        case "arbitrum":
          return "https:/\/api.arbiscan.io";
        case "arbitrum-goerli":
          return "https:/\/api-goerli.arbiscan.io";
        case "optimism":
          return "https:/\/api-optimistic.etherscan.io";
        case "optimism-goerli":
          return "https:/\/api-goerli-optimistic.etherscan.io";
      }
      return logger$9.throwArgumentError("unsupported network", "network", this.network.name);
    }
  }, {
    key: "getUrl",
    value: function getUrl(module, params) {
      var query = Object.keys(params).reduce(function (accum, key) {
        var value = params[key];
        if (value != null) {
          accum += "&".concat(key, "=").concat(value);
        }
        return accum;
      }, "");
      var apiKey = this.apiKey ? "&apikey=".concat(this.apiKey) : "";
      return "".concat(this.baseUrl, "/api?module=").concat(module).concat(query).concat(apiKey);
    }
  }, {
    key: "getPostUrl",
    value: function getPostUrl() {
      return "".concat(this.baseUrl, "/api");
    }
  }, {
    key: "getPostData",
    value: function getPostData(module, params) {
      params.module = module;
      params.apikey = this.apiKey;
      return params;
    }
  }, {
    key: "fetch",
    value: function fetch(module, params, post) {
      return __awaiter$5(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
        var _this2 = this;
        var url, payload, procFunc, connection, payloadStr, result;
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                url = post ? this.getPostUrl() : this.getUrl(module, params);
                payload = post ? this.getPostData(module, params) : null;
                procFunc = module === "proxy" ? getJsonResult : getResult;
                this.emit("debug", {
                  action: "request",
                  request: url,
                  provider: this
                });
                connection = {
                  url: url,
                  throttleSlotInterval: 1000,
                  throttleCallback: function throttleCallback(attempt, url) {
                    if (_this2.isCommunityResource()) {
                      showThrottleMessage();
                    }
                    return Promise.resolve(true);
                  }
                };
                payloadStr = null;
                if (payload) {
                  connection.headers = {
                    "content-type": "application/x-www-form-urlencoded; charset=UTF-8"
                  };
                  payloadStr = Object.keys(payload).map(function (key) {
                    return "".concat(key, "=").concat(payload[key]);
                  }).join("&");
                }
                _context.next = 9;
                return fetchJson(connection, payloadStr, procFunc || getJsonResult);
              case 9:
                result = _context.sent;
                this.emit("debug", {
                  action: "response",
                  request: url,
                  response: deepCopy(result),
                  provider: this
                });
                return _context.abrupt("return", result);
              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
    }
  }, {
    key: "detectNetwork",
    value: function detectNetwork() {
      return __awaiter$5(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee2() {
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this.network);
              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
    }
  }, {
    key: "perform",
    value: function perform(method, params) {
      var _this3 = this;
      var _super = Object.create(null, {
        perform: {
          get: function get() {
            return _get(_getPrototypeOf(EtherscanProvider.prototype), "perform", _this3);
          }
        }
      });
      return __awaiter$5(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee3() {
        var postData, _postData, args, topic0, logs, blocks, i, log, block;
        return regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.t0 = method;
                _context3.next = _context3.t0 === "getBlockNumber" ? 3 : _context3.t0 === "getGasPrice" ? 4 : _context3.t0 === "getBalance" ? 5 : _context3.t0 === "getTransactionCount" ? 6 : _context3.t0 === "getCode" ? 7 : _context3.t0 === "getStorageAt" ? 8 : _context3.t0 === "sendTransaction" ? 9 : _context3.t0 === "getBlock" ? 10 : _context3.t0 === "getTransaction" ? 13 : _context3.t0 === "getTransactionReceipt" ? 14 : _context3.t0 === "call" ? 15 : _context3.t0 === "estimateGas" ? 29 : _context3.t0 === "getLogs" ? 41 : _context3.t0 === "getEtherPrice" ? 65 : 72;
                break;
              case 3:
                return _context3.abrupt("return", this.fetch("proxy", {
                  action: "eth_blockNumber"
                }));
              case 4:
                return _context3.abrupt("return", this.fetch("proxy", {
                  action: "eth_gasPrice"
                }));
              case 5:
                return _context3.abrupt("return", this.fetch("account", {
                  action: "balance",
                  address: params.address,
                  tag: params.blockTag
                }));
              case 6:
                return _context3.abrupt("return", this.fetch("proxy", {
                  action: "eth_getTransactionCount",
                  address: params.address,
                  tag: params.blockTag
                }));
              case 7:
                return _context3.abrupt("return", this.fetch("proxy", {
                  action: "eth_getCode",
                  address: params.address,
                  tag: params.blockTag
                }));
              case 8:
                return _context3.abrupt("return", this.fetch("proxy", {
                  action: "eth_getStorageAt",
                  address: params.address,
                  position: params.position,
                  tag: params.blockTag
                }));
              case 9:
                return _context3.abrupt("return", this.fetch("proxy", {
                  action: "eth_sendRawTransaction",
                  hex: params.signedTransaction
                }, true)["catch"](function (error) {
                  return checkError("sendTransaction", error, params.signedTransaction);
                }));
              case 10:
                if (!params.blockTag) {
                  _context3.next = 12;
                  break;
                }
                return _context3.abrupt("return", this.fetch("proxy", {
                  action: "eth_getBlockByNumber",
                  tag: params.blockTag,
                  "boolean": params.includeTransactions ? "true" : "false"
                }));
              case 12:
                throw new Error("getBlock by blockHash not implemented");
              case 13:
                return _context3.abrupt("return", this.fetch("proxy", {
                  action: "eth_getTransactionByHash",
                  txhash: params.transactionHash
                }));
              case 14:
                return _context3.abrupt("return", this.fetch("proxy", {
                  action: "eth_getTransactionReceipt",
                  txhash: params.transactionHash
                }));
              case 15:
                if (!(params.blockTag !== "latest")) {
                  _context3.next = 17;
                  break;
                }
                throw new Error("EtherscanProvider does not support blockTag for call");
              case 17:
                postData = getTransactionPostData(params.transaction);
                postData.module = "proxy";
                postData.action = "eth_call";
                _context3.prev = 20;
                _context3.next = 23;
                return this.fetch("proxy", postData, true);
              case 23:
                return _context3.abrupt("return", _context3.sent);
              case 26:
                _context3.prev = 26;
                _context3.t1 = _context3["catch"](20);
                return _context3.abrupt("return", checkError("call", _context3.t1, params.transaction));
              case 29:
                _postData = getTransactionPostData(params.transaction);
                _postData.module = "proxy";
                _postData.action = "eth_estimateGas";
                _context3.prev = 32;
                _context3.next = 35;
                return this.fetch("proxy", _postData, true);
              case 35:
                return _context3.abrupt("return", _context3.sent);
              case 38:
                _context3.prev = 38;
                _context3.t2 = _context3["catch"](32);
                return _context3.abrupt("return", checkError("estimateGas", _context3.t2, params.transaction));
              case 41:
                args = {
                  action: "getLogs"
                };
                if (params.filter.fromBlock) {
                  args.fromBlock = checkLogTag(params.filter.fromBlock);
                }
                if (params.filter.toBlock) {
                  args.toBlock = checkLogTag(params.filter.toBlock);
                }
                if (params.filter.address) {
                  args.address = params.filter.address;
                }
                // @TODO: We can handle slightly more complicated logs using the logs API
                if (params.filter.topics && params.filter.topics.length > 0) {
                  if (params.filter.topics.length > 1) {
                    logger$9.throwError("unsupported topic count", Logger.errors.UNSUPPORTED_OPERATION, {
                      topics: params.filter.topics
                    });
                  }
                  if (params.filter.topics.length === 1) {
                    topic0 = params.filter.topics[0];
                    if (typeof topic0 !== "string" || topic0.length !== 66) {
                      logger$9.throwError("unsupported topic format", Logger.errors.UNSUPPORTED_OPERATION, {
                        topic0: topic0
                      });
                    }
                    args.topic0 = topic0;
                  }
                }
                _context3.next = 48;
                return this.fetch("logs", args);
              case 48:
                logs = _context3.sent;
                // Cache txHash => blockHash
                blocks = {}; // Add any missing blockHash to the logs
                i = 0;
              case 51:
                if (!(i < logs.length)) {
                  _context3.next = 64;
                  break;
                }
                log = logs[i];
                if (!(log.blockHash != null)) {
                  _context3.next = 55;
                  break;
                }
                return _context3.abrupt("continue", 61);
              case 55:
                if (!(blocks[log.blockNumber] == null)) {
                  _context3.next = 60;
                  break;
                }
                _context3.next = 58;
                return this.getBlock(log.blockNumber);
              case 58:
                block = _context3.sent;
                if (block) {
                  blocks[log.blockNumber] = block.hash;
                }
              case 60:
                log.blockHash = blocks[log.blockNumber];
              case 61:
                i++;
                _context3.next = 51;
                break;
              case 64:
                return _context3.abrupt("return", logs);
              case 65:
                if (!(this.network.name !== "homestead")) {
                  _context3.next = 67;
                  break;
                }
                return _context3.abrupt("return", 0.0);
              case 67:
                _context3.t3 = parseFloat;
                _context3.next = 70;
                return this.fetch("stats", {
                  action: "ethprice"
                });
              case 70:
                _context3.t4 = _context3.sent.ethusd;
                return _context3.abrupt("return", (0, _context3.t3)(_context3.t4));
              case 72:
                return _context3.abrupt("break", 73);
              case 73:
                return _context3.abrupt("return", _super.perform.call(this, method, params));
              case 74:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[20, 26], [32, 38]]);
      }));
    }
    // Note: The `page` page parameter only allows pagination within the
    //       10,000 window available without a page and offset parameter
    //       Error: Result window is too large, PageNo x Offset size must
    //              be less than or equal to 10000
  }, {
    key: "getHistory",
    value: function getHistory(addressOrName, startBlock, endBlock) {
      return __awaiter$5(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee4() {
        var _this4 = this;
        var params, result;
        return regenerator.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.resolveName(addressOrName);
              case 2:
                _context4.t0 = _context4.sent;
                _context4.t1 = startBlock == null ? 0 : startBlock;
                _context4.t2 = endBlock == null ? 99999999 : endBlock;
                params = {
                  action: "txlist",
                  address: _context4.t0,
                  startblock: _context4.t1,
                  endblock: _context4.t2,
                  sort: "asc"
                };
                _context4.next = 8;
                return this.fetch("account", params);
              case 8:
                result = _context4.sent;
                return _context4.abrupt("return", result.map(function (tx) {
                  ["contractAddress", "to"].forEach(function (key) {
                    if (tx[key] == "") {
                      delete tx[key];
                    }
                  });
                  if (tx.creates == null && tx.contractAddress != null) {
                    tx.creates = tx.contractAddress;
                  }
                  var item = _this4.formatter.transactionResponse(tx);
                  if (tx.timeStamp) {
                    item.timestamp = parseInt(tx.timeStamp);
                  }
                  return item;
                }));
              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
    }
  }, {
    key: "isCommunityResource",
    value: function isCommunityResource() {
      return this.apiKey == null;
    }
  }]);
  return EtherscanProvider;
}(BaseProvider);

function _createSuper$6(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$6(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$6() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __awaiter$4 = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger$8 = new Logger(version$5);
function now() {
  return new Date().getTime();
}
// Returns to network as long as all agree, or null if any is null.
// Throws an error if any two networks do not match.
function checkNetworks(networks) {
  var result = null;
  for (var i = 0; i < networks.length; i++) {
    var network = networks[i];
    // Null! We do not know our network; bail.
    if (network == null) {
      return null;
    }
    if (result) {
      // Make sure the network matches the previous networks
      if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {
        logger$8.throwArgumentError("provider mismatch", "networks", networks);
      }
    } else {
      result = network;
    }
  }
  return result;
}
function median(values, maxDelta) {
  values = values.slice().sort();
  var middle = Math.floor(values.length / 2);
  // Odd length; take the middle
  if (values.length % 2) {
    return values[middle];
  }
  // Even length; take the average of the two middle
  var a = values[middle - 1],
    b = values[middle];
  if (maxDelta != null && Math.abs(a - b) > maxDelta) {
    return null;
  }
  return (a + b) / 2;
}
function serialize(value) {
  if (value === null) {
    return "null";
  } else if (typeof value === "number" || typeof value === "boolean") {
    return JSON.stringify(value);
  } else if (typeof value === "string") {
    return value;
  } else if (BigNumber.isBigNumber(value)) {
    return value.toString();
  } else if (Array.isArray(value)) {
    return JSON.stringify(value.map(function (i) {
      return serialize(i);
    }));
  } else if (typeof value === "object") {
    var keys = Object.keys(value);
    keys.sort();
    return "{" + keys.map(function (key) {
      var v = value[key];
      if (typeof v === "function") {
        v = "[function]";
      } else {
        v = serialize(v);
      }
      return JSON.stringify(key) + ":" + v;
    }).join(",") + "}";
  }
  throw new Error("unknown value type: " + typeof value);
}
// Next request ID to use for emitting debug info
var nextRid = 1;
function stall(duration) {
  var cancel = null;
  var timer = null;
  var promise = new Promise(function (resolve) {
    cancel = function cancel() {
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
      resolve();
    };
    timer = setTimeout(cancel, duration);
  });
  var wait = function wait(func) {
    promise = promise.then(func);
    return promise;
  };
  function getPromise() {
    return promise;
  }
  return {
    cancel: cancel,
    getPromise: getPromise,
    wait: wait
  };
}
var ForwardErrors = [Logger.errors.CALL_EXCEPTION, Logger.errors.INSUFFICIENT_FUNDS, Logger.errors.NONCE_EXPIRED, Logger.errors.REPLACEMENT_UNDERPRICED, Logger.errors.UNPREDICTABLE_GAS_LIMIT];
var ForwardProperties = ["address", "args", "errorArgs", "errorSignature", "method", "transaction"];
function exposeDebugConfig(config, now) {
  var result = {
    weight: config.weight
  };
  Object.defineProperty(result, "provider", {
    get: function get() {
      return config.provider;
    }
  });
  if (config.start) {
    result.start = config.start;
  }
  if (now) {
    result.duration = now - config.start;
  }
  if (config.done) {
    if (config.error) {
      result.error = config.error;
    } else {
      result.result = config.result || null;
    }
  }
  return result;
}
function normalizedTally(normalize, quorum) {
  return function (configs) {
    // Count the votes for each result
    var tally = {};
    configs.forEach(function (c) {
      var value = normalize(c.result);
      if (!tally[value]) {
        tally[value] = {
          count: 0,
          result: c.result
        };
      }
      tally[value].count++;
    });
    // Check for a quorum on any given result
    var keys = Object.keys(tally);
    for (var i = 0; i < keys.length; i++) {
      var check = tally[keys[i]];
      if (check.count >= quorum) {
        return check.result;
      }
    }
    // No quroum
    return undefined;
  };
}
function getProcessFunc(provider, method, params) {
  var normalize = serialize;
  switch (method) {
    case "getBlockNumber":
      // Return the median value, unless there is (median + 1) is also
      // present, in which case that is probably true and the median
      // is going to be stale soon. In the event of a malicious node,
      // the lie will be true soon enough.
      return function (configs) {
        var values = configs.map(function (c) {
          return c.result;
        });
        // Get the median block number
        var blockNumber = median(configs.map(function (c) {
          return c.result;
        }), 2);
        if (blockNumber == null) {
          return undefined;
        }
        blockNumber = Math.ceil(blockNumber);
        // If the next block height is present, its prolly safe to use
        if (values.indexOf(blockNumber + 1) >= 0) {
          blockNumber++;
        }
        // Don't ever roll back the blockNumber
        if (blockNumber >= provider._highestBlockNumber) {
          provider._highestBlockNumber = blockNumber;
        }
        return provider._highestBlockNumber;
      };
    case "getGasPrice":
      // Return the middle (round index up) value, similar to median
      // but do not average even entries and choose the higher.
      // Malicious actors must compromise 50% of the nodes to lie.
      return function (configs) {
        var values = configs.map(function (c) {
          return c.result;
        });
        values.sort();
        return values[Math.floor(values.length / 2)];
      };
    case "getEtherPrice":
      // Returns the median price. Malicious actors must compromise at
      // least 50% of the nodes to lie (in a meaningful way).
      return function (configs) {
        return median(configs.map(function (c) {
          return c.result;
        }));
      };
    // No additional normalizing required; serialize is enough
    case "getBalance":
    case "getTransactionCount":
    case "getCode":
    case "getStorageAt":
    case "call":
    case "estimateGas":
    case "getLogs":
      break;
    // We drop the confirmations from transactions as it is approximate
    case "getTransaction":
    case "getTransactionReceipt":
      normalize = function normalize(tx) {
        if (tx == null) {
          return null;
        }
        tx = shallowCopy(tx);
        tx.confirmations = -1;
        return serialize(tx);
      };
      break;
    // We drop the confirmations from transactions as it is approximate
    case "getBlock":
      // We drop the confirmations from transactions as it is approximate
      if (params.includeTransactions) {
        normalize = function normalize(block) {
          if (block == null) {
            return null;
          }
          block = shallowCopy(block);
          block.transactions = block.transactions.map(function (tx) {
            tx = shallowCopy(tx);
            tx.confirmations = -1;
            return tx;
          });
          return serialize(block);
        };
      } else {
        normalize = function normalize(block) {
          if (block == null) {
            return null;
          }
          return serialize(block);
        };
      }
      break;
    default:
      throw new Error("unknown method: " + method);
  }
  // Return the result if and only if the expected quorum is
  // satisfied and agreed upon for the final result.
  return normalizedTally(normalize, provider.quorum);
}
// If we are doing a blockTag query, we need to make sure the backend is
// caught up to the FallbackProvider, before sending a request to it.
function waitForSync(config, blockNumber) {
  return __awaiter$4(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
    var provider;
    return regenerator.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            provider = config.provider;
            if (!(provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1)) {
              _context.next = 3;
              break;
            }
            return _context.abrupt("return", provider);
          case 3:
            return _context.abrupt("return", poll(function () {
              return new Promise(function (resolve, reject) {
                setTimeout(function () {
                  // We are synced
                  if (provider.blockNumber >= blockNumber) {
                    return resolve(provider);
                  }
                  // We're done; just quit
                  if (config.cancelled) {
                    return resolve(null);
                  }
                  // Try again, next block
                  return resolve(undefined);
                }, 0);
              });
            }, {
              oncePoll: provider
            }));
          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
}
function getRunner(config, currentBlockNumber, method, params) {
  return __awaiter$4(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee2() {
    var provider, filter;
    return regenerator.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            provider = config.provider;
            _context2.t0 = method;
            _context2.next = _context2.t0 === "getBlockNumber" ? 4 : _context2.t0 === "getGasPrice" ? 4 : _context2.t0 === "getEtherPrice" ? 5 : _context2.t0 === "getBalance" ? 8 : _context2.t0 === "getTransactionCount" ? 8 : _context2.t0 === "getCode" ? 8 : _context2.t0 === "getStorageAt" ? 13 : _context2.t0 === "getBlock" ? 18 : _context2.t0 === "call" ? 23 : _context2.t0 === "estimateGas" ? 23 : _context2.t0 === "getTransaction" ? 30 : _context2.t0 === "getTransactionReceipt" ? 30 : _context2.t0 === "getLogs" ? 31 : 37;
            break;
          case 4:
            return _context2.abrupt("return", provider[method]());
          case 5:
            if (!provider.getEtherPrice) {
              _context2.next = 7;
              break;
            }
            return _context2.abrupt("return", provider.getEtherPrice());
          case 7:
            return _context2.abrupt("break", 37);
          case 8:
            if (!(params.blockTag && isHexString$1(params.blockTag))) {
              _context2.next = 12;
              break;
            }
            _context2.next = 11;
            return waitForSync(config, currentBlockNumber);
          case 11:
            provider = _context2.sent;
          case 12:
            return _context2.abrupt("return", provider[method](params.address, params.blockTag || "latest"));
          case 13:
            if (!(params.blockTag && isHexString$1(params.blockTag))) {
              _context2.next = 17;
              break;
            }
            _context2.next = 16;
            return waitForSync(config, currentBlockNumber);
          case 16:
            provider = _context2.sent;
          case 17:
            return _context2.abrupt("return", provider.getStorageAt(params.address, params.position, params.blockTag || "latest"));
          case 18:
            if (!(params.blockTag && isHexString$1(params.blockTag))) {
              _context2.next = 22;
              break;
            }
            _context2.next = 21;
            return waitForSync(config, currentBlockNumber);
          case 21:
            provider = _context2.sent;
          case 22:
            return _context2.abrupt("return", provider[params.includeTransactions ? "getBlockWithTransactions" : "getBlock"](params.blockTag || params.blockHash));
          case 23:
            if (!(params.blockTag && isHexString$1(params.blockTag))) {
              _context2.next = 27;
              break;
            }
            _context2.next = 26;
            return waitForSync(config, currentBlockNumber);
          case 26:
            provider = _context2.sent;
          case 27:
            if (!(method === "call" && params.blockTag)) {
              _context2.next = 29;
              break;
            }
            return _context2.abrupt("return", provider[method](params.transaction, params.blockTag));
          case 29:
            return _context2.abrupt("return", provider[method](params.transaction));
          case 30:
            return _context2.abrupt("return", provider[method](params.transactionHash));
          case 31:
            filter = params.filter;
            if (!(filter.fromBlock && isHexString$1(filter.fromBlock) || filter.toBlock && isHexString$1(filter.toBlock))) {
              _context2.next = 36;
              break;
            }
            _context2.next = 35;
            return waitForSync(config, currentBlockNumber);
          case 35:
            provider = _context2.sent;
          case 36:
            return _context2.abrupt("return", provider.getLogs(filter));
          case 37:
            return _context2.abrupt("return", logger$8.throwError("unknown method error", Logger.errors.UNKNOWN_ERROR, {
              method: method,
              params: params
            }));
          case 38:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
}
var FallbackProvider = /*#__PURE__*/function (_BaseProvider) {
  _inherits(FallbackProvider, _BaseProvider);
  var _super = _createSuper$6(FallbackProvider);
  function FallbackProvider(providers, quorum) {
    var _this;
    _classCallCheck(this, FallbackProvider);
    if (providers.length === 0) {
      logger$8.throwArgumentError("missing providers", "providers", providers);
    }
    var providerConfigs = providers.map(function (configOrProvider, index) {
      if (Provider.isProvider(configOrProvider)) {
        var stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;
        var priority = 1;
        return Object.freeze({
          provider: configOrProvider,
          weight: 1,
          stallTimeout: stallTimeout,
          priority: priority
        });
      }
      var config = shallowCopy(configOrProvider);
      if (config.priority == null) {
        config.priority = 1;
      }
      if (config.stallTimeout == null) {
        config.stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;
      }
      if (config.weight == null) {
        config.weight = 1;
      }
      var weight = config.weight;
      if (weight % 1 || weight > 512 || weight < 1) {
        logger$8.throwArgumentError("invalid weight; must be integer in [1, 512]", "providers[".concat(index, "].weight"), weight);
      }
      return Object.freeze(config);
    });
    var total = providerConfigs.reduce(function (accum, c) {
      return accum + c.weight;
    }, 0);
    if (quorum == null) {
      quorum = total / 2;
    } else if (quorum > total) {
      logger$8.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
    }
    // Are all providers' networks are known
    var networkOrReady = checkNetworks(providerConfigs.map(function (c) {
      return c.provider.network;
    }));
    // Not all networks are known; we must stall
    if (networkOrReady == null) {
      networkOrReady = new Promise(function (resolve, reject) {
        setTimeout(function () {
          _this.detectNetwork().then(resolve, reject);
        }, 0);
      });
    }
    _this = _super.call(this, networkOrReady);
    // Preserve a copy, so we do not get mutated
    defineReadOnly(_assertThisInitialized(_this), "providerConfigs", Object.freeze(providerConfigs));
    defineReadOnly(_assertThisInitialized(_this), "quorum", quorum);
    _this._highestBlockNumber = -1;
    return _this;
  }
  _createClass(FallbackProvider, [{
    key: "detectNetwork",
    value: function detectNetwork() {
      return __awaiter$4(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee3() {
        var networks;
        return regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return Promise.all(this.providerConfigs.map(function (c) {
                  return c.provider.getNetwork();
                }));
              case 2:
                networks = _context3.sent;
                return _context3.abrupt("return", checkNetworks(networks));
              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
    }
  }, {
    key: "perform",
    value: function perform(method, params) {
      return __awaiter$4(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee4() {
        var _this2 = this;
        var results, _i, result, processFunc, configs, currentBlockNumber, i, first, _loop, _ret;
        return regenerator.wrap(function _callee4$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (!(method === "sendTransaction")) {
                  _context5.next = 13;
                  break;
                }
                _context5.next = 3;
                return Promise.all(this.providerConfigs.map(function (c) {
                  return c.provider.sendTransaction(params.signedTransaction).then(function (result) {
                    return result.hash;
                  }, function (error) {
                    return error;
                  });
                }));
              case 3:
                results = _context5.sent;
                _i = 0;
              case 5:
                if (!(_i < results.length)) {
                  _context5.next = 12;
                  break;
                }
                result = results[_i];
                if (!(typeof result === "string")) {
                  _context5.next = 9;
                  break;
                }
                return _context5.abrupt("return", result);
              case 9:
                _i++;
                _context5.next = 5;
                break;
              case 12:
                throw results[0];
              case 13:
                if (!(this._highestBlockNumber === -1 && method !== "getBlockNumber")) {
                  _context5.next = 16;
                  break;
                }
                _context5.next = 16;
                return this.getBlockNumber();
              case 16:
                processFunc = getProcessFunc(this, method, params); // Shuffle the providers and then sort them by their priority; we
                // shallowCopy them since we will store the result in them too
                configs = shuffled(this.providerConfigs.map(shallowCopy));
                configs.sort(function (a, b) {
                  return a.priority - b.priority;
                });
                currentBlockNumber = this._highestBlockNumber;
                i = 0;
                first = true;
                _loop = /*#__PURE__*/regenerator.mark(function _loop() {
                  var t0, inflightWeight, _loop2, waiting, results, _result, errors;
                  return regenerator.wrap(function _loop$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          t0 = now(); // Compute the inflight weight (exclude anything past)
                          inflightWeight = configs.filter(function (c) {
                            return c.runner && t0 - c.start < c.stallTimeout;
                          }).reduce(function (accum, c) {
                            return accum + c.weight;
                          }, 0); // Start running enough to meet quorum
                          _loop2 = function _loop2() {
                            var config = configs[i++];
                            var rid = nextRid++;
                            config.start = now();
                            config.staller = stall(config.stallTimeout);
                            config.staller.wait(function () {
                              config.staller = null;
                            });
                            config.runner = getRunner(config, currentBlockNumber, method, params).then(function (result) {
                              config.done = true;
                              config.result = result;
                              if (_this2.listenerCount("debug")) {
                                _this2.emit("debug", {
                                  action: "request",
                                  rid: rid,
                                  backend: exposeDebugConfig(config, now()),
                                  request: {
                                    method: method,
                                    params: deepCopy(params)
                                  },
                                  provider: _this2
                                });
                              }
                            }, function (error) {
                              config.done = true;
                              config.error = error;
                              if (_this2.listenerCount("debug")) {
                                _this2.emit("debug", {
                                  action: "request",
                                  rid: rid,
                                  backend: exposeDebugConfig(config, now()),
                                  request: {
                                    method: method,
                                    params: deepCopy(params)
                                  },
                                  provider: _this2
                                });
                              }
                            });
                            if (_this2.listenerCount("debug")) {
                              _this2.emit("debug", {
                                action: "request",
                                rid: rid,
                                backend: exposeDebugConfig(config, null),
                                request: {
                                  method: method,
                                  params: deepCopy(params)
                                },
                                provider: _this2
                              });
                            }
                            inflightWeight += config.weight;
                          };
                          while (inflightWeight < _this2.quorum && i < configs.length) {
                            _loop2();
                          }
                          // Wait for anything meaningful to finish or stall out
                          waiting = [];
                          configs.forEach(function (c) {
                            if (c.done || !c.runner) {
                              return;
                            }
                            waiting.push(c.runner);
                            if (c.staller) {
                              waiting.push(c.staller.getPromise());
                            }
                          });
                          if (!waiting.length) {
                            _context4.next = 9;
                            break;
                          }
                          _context4.next = 9;
                          return Promise.race(waiting);
                        case 9:
                          // Check the quorum and process the results; the process function
                          // may additionally decide the quorum is not met
                          results = configs.filter(function (c) {
                            return c.done && c.error == null;
                          });
                          if (!(results.length >= _this2.quorum)) {
                            _context4.next = 19;
                            break;
                          }
                          _result = processFunc(results);
                          if (!(_result !== undefined)) {
                            _context4.next = 15;
                            break;
                          }
                          // Shut down any stallers
                          configs.forEach(function (c) {
                            if (c.staller) {
                              c.staller.cancel();
                            }
                            c.cancelled = true;
                          });
                          return _context4.abrupt("return", {
                            v: _result
                          });
                        case 15:
                          if (first) {
                            _context4.next = 18;
                            break;
                          }
                          _context4.next = 18;
                          return stall(100).getPromise();
                        case 18:
                          first = false;
                        case 19:
                          // No result, check for errors that should be forwarded
                          errors = configs.reduce(function (accum, c) {
                            if (!c.done || c.error == null) {
                              return accum;
                            }
                            var code = c.error.code;
                            if (ForwardErrors.indexOf(code) >= 0) {
                              if (!accum[code]) {
                                accum[code] = {
                                  error: c.error,
                                  weight: 0
                                };
                              }
                              accum[code].weight += c.weight;
                            }
                            return accum;
                          }, {});
                          Object.keys(errors).forEach(function (errorCode) {
                            var tally = errors[errorCode];
                            if (tally.weight < _this2.quorum) {
                              return;
                            }
                            // Shut down any stallers
                            configs.forEach(function (c) {
                              if (c.staller) {
                                c.staller.cancel();
                              }
                              c.cancelled = true;
                            });
                            var e = tally.error;
                            var props = {};
                            ForwardProperties.forEach(function (name) {
                              if (e[name] == null) {
                                return;
                              }
                              props[name] = e[name];
                            });
                            logger$8.throwError(e.reason || e.message, errorCode, props);
                          });
                          // All configs have run to completion; we will never get more data
                          if (!(configs.filter(function (c) {
                            return !c.done;
                          }).length === 0)) {
                            _context4.next = 23;
                            break;
                          }
                          return _context4.abrupt("return", "break");
                        case 23:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _loop);
                });
              case 23:
                return _context5.delegateYield(_loop(), "t0", 25);
              case 25:
                _ret = _context5.t0;
                if (!(_ret === "break")) {
                  _context5.next = 28;
                  break;
                }
                return _context5.abrupt("break", 32);
              case 28:
                if (!(typeof _ret === "object")) {
                  _context5.next = 30;
                  break;
                }
                return _context5.abrupt("return", _ret.v);
              case 30:
                _context5.next = 23;
                break;
              case 32:
                // Shut down any stallers; shouldn't be any
                configs.forEach(function (c) {
                  if (c.staller) {
                    c.staller.cancel();
                  }
                  c.cancelled = true;
                });
                return _context5.abrupt("return", logger$8.throwError("failed to meet quorum", Logger.errors.SERVER_ERROR, {
                  method: method,
                  params: params,
                  //results: configs.map((c) => c.result),
                  //errors: configs.map((c) => c.error),
                  results: configs.map(function (c) {
                    return exposeDebugConfig(c);
                  }),
                  provider: this
                }));
              case 34:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee4, this);
      }));
    }
  }]);
  return FallbackProvider;
}(BaseProvider);

var IpcProvider = null;

function _createSuper$5(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$5(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$5() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var logger$7 = new Logger(version$5);
var defaultProjectId = "84842078b09946638c03157f83405213";
var InfuraWebSocketProvider = /*#__PURE__*/function (_WebSocketProvider) {
  _inherits(InfuraWebSocketProvider, _WebSocketProvider);
  var _super = _createSuper$5(InfuraWebSocketProvider);
  function InfuraWebSocketProvider(network, apiKey) {
    var _this;
    _classCallCheck(this, InfuraWebSocketProvider);
    var provider = new InfuraProvider(network, apiKey);
    var connection = provider.connection;
    if (connection.password) {
      logger$7.throwError("INFURA WebSocket project secrets unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "InfuraProvider.getWebSocketProvider()"
      });
    }
    var url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
    _this = _super.call(this, url, network);
    defineReadOnly(_assertThisInitialized(_this), "apiKey", provider.projectId);
    defineReadOnly(_assertThisInitialized(_this), "projectId", provider.projectId);
    defineReadOnly(_assertThisInitialized(_this), "projectSecret", provider.projectSecret);
    return _this;
  }
  _createClass(InfuraWebSocketProvider, [{
    key: "isCommunityResource",
    value: function isCommunityResource() {
      return this.projectId === defaultProjectId;
    }
  }]);
  return InfuraWebSocketProvider;
}(WebSocketProvider);
var InfuraProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {
  _inherits(InfuraProvider, _UrlJsonRpcProvider);
  var _super2 = _createSuper$5(InfuraProvider);
  function InfuraProvider() {
    _classCallCheck(this, InfuraProvider);
    return _super2.apply(this, arguments);
  }
  _createClass(InfuraProvider, [{
    key: "isCommunityResource",
    value: function isCommunityResource() {
      return this.projectId === defaultProjectId;
    }
  }], [{
    key: "getWebSocketProvider",
    value: function getWebSocketProvider(network, apiKey) {
      return new InfuraWebSocketProvider(network, apiKey);
    }
  }, {
    key: "getApiKey",
    value: function getApiKey(apiKey) {
      var apiKeyObj = {
        apiKey: defaultProjectId,
        projectId: defaultProjectId,
        projectSecret: null
      };
      if (apiKey == null) {
        return apiKeyObj;
      }
      if (typeof apiKey === "string") {
        apiKeyObj.projectId = apiKey;
      } else if (apiKey.projectSecret != null) {
        logger$7.assertArgument(typeof apiKey.projectId === "string", "projectSecret requires a projectId", "projectId", apiKey.projectId);
        logger$7.assertArgument(typeof apiKey.projectSecret === "string", "invalid projectSecret", "projectSecret", "[REDACTED]");
        apiKeyObj.projectId = apiKey.projectId;
        apiKeyObj.projectSecret = apiKey.projectSecret;
      } else if (apiKey.projectId) {
        apiKeyObj.projectId = apiKey.projectId;
      }
      apiKeyObj.apiKey = apiKeyObj.projectId;
      return apiKeyObj;
    }
  }, {
    key: "getUrl",
    value: function getUrl(network, apiKey) {
      var host = null;
      switch (network ? network.name : "unknown") {
        case "homestead":
          host = "mainnet.infura.io";
          break;
        case "goerli":
          host = "goerli.infura.io";
          break;
        case "sepolia":
          host = "sepolia.infura.io";
          break;
        case "matic":
          host = "polygon-mainnet.infura.io";
          break;
        case "maticmum":
          host = "polygon-mumbai.infura.io";
          break;
        case "optimism":
          host = "optimism-mainnet.infura.io";
          break;
        case "optimism-goerli":
          host = "optimism-goerli.infura.io";
          break;
        case "arbitrum":
          host = "arbitrum-mainnet.infura.io";
          break;
        case "arbitrum-goerli":
          host = "arbitrum-goerli.infura.io";
          break;
        default:
          logger$7.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
            argument: "network",
            value: network
          });
      }
      var connection = {
        allowGzip: true,
        url: "https:/" + "/" + host + "/v3/" + apiKey.projectId,
        throttleCallback: function throttleCallback(attempt, url) {
          if (apiKey.projectId === defaultProjectId) {
            showThrottleMessage();
          }
          return Promise.resolve(true);
        }
      };
      if (apiKey.projectSecret != null) {
        connection.user = "";
        connection.password = apiKey.projectSecret;
      }
      return connection;
    }
  }]);
  return InfuraProvider;
}(UrlJsonRpcProvider);

function _createSuper$4(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$4(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$4() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
// Experimental
var JsonRpcBatchProvider = /*#__PURE__*/function (_JsonRpcProvider) {
  _inherits(JsonRpcBatchProvider, _JsonRpcProvider);
  var _super = _createSuper$4(JsonRpcBatchProvider);
  function JsonRpcBatchProvider() {
    _classCallCheck(this, JsonRpcBatchProvider);
    return _super.apply(this, arguments);
  }
  _createClass(JsonRpcBatchProvider, [{
    key: "send",
    value: function send(method, params) {
      var _this = this;
      var request = {
        method: method,
        params: params,
        id: this._nextId++,
        jsonrpc: "2.0"
      };
      if (this._pendingBatch == null) {
        this._pendingBatch = [];
      }
      var inflightRequest = {
        request: request,
        resolve: null,
        reject: null
      };
      var promise = new Promise(function (resolve, reject) {
        inflightRequest.resolve = resolve;
        inflightRequest.reject = reject;
      });
      this._pendingBatch.push(inflightRequest);
      if (!this._pendingBatchAggregator) {
        // Schedule batch for next event loop + short duration
        this._pendingBatchAggregator = setTimeout(function () {
          // Get teh current batch and clear it, so new requests
          // go into the next batch
          var batch = _this._pendingBatch;
          _this._pendingBatch = null;
          _this._pendingBatchAggregator = null;
          // Get the request as an array of requests
          var request = batch.map(function (inflight) {
            return inflight.request;
          });
          _this.emit("debug", {
            action: "requestBatch",
            request: deepCopy(request),
            provider: _this
          });
          return fetchJson(_this.connection, JSON.stringify(request)).then(function (result) {
            _this.emit("debug", {
              action: "response",
              request: request,
              response: result,
              provider: _this
            });
            // For each result, feed it to the correct Promise, depending
            // on whether it was a success or error
            batch.forEach(function (inflightRequest, index) {
              var payload = result[index];
              if (payload.error) {
                var error = new Error(payload.error.message);
                error.code = payload.error.code;
                error.data = payload.error.data;
                inflightRequest.reject(error);
              } else {
                inflightRequest.resolve(payload.result);
              }
            });
          }, function (error) {
            _this.emit("debug", {
              action: "response",
              error: error,
              request: request,
              provider: _this
            });
            batch.forEach(function (inflightRequest) {
              inflightRequest.reject(error);
            });
          });
        }, 10);
      }
      return promise;
    }
  }]);
  return JsonRpcBatchProvider;
}(JsonRpcProvider);

/* istanbul ignore file */
function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$3() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var logger$6 = new Logger(version$5);
// Special API key provided by Nodesmith for ethers.js
var defaultApiKey = "ETHERS_JS_SHARED";
var NodesmithProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {
  _inherits(NodesmithProvider, _UrlJsonRpcProvider);
  var _super = _createSuper$3(NodesmithProvider);
  function NodesmithProvider() {
    _classCallCheck(this, NodesmithProvider);
    return _super.apply(this, arguments);
  }
  _createClass(NodesmithProvider, null, [{
    key: "getApiKey",
    value: function getApiKey(apiKey) {
      if (apiKey && typeof apiKey !== "string") {
        logger$6.throwArgumentError("invalid apiKey", "apiKey", apiKey);
      }
      return apiKey || defaultApiKey;
    }
  }, {
    key: "getUrl",
    value: function getUrl(network, apiKey) {
      logger$6.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
      var host = null;
      switch (network.name) {
        case "homestead":
          host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
          break;
        case "ropsten":
          host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
          break;
        case "rinkeby":
          host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
          break;
        case "goerli":
          host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
          break;
        case "kovan":
          host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
          break;
        default:
          logger$6.throwArgumentError("unsupported network", "network", arguments[0]);
      }
      return host + "?apiKey=" + apiKey;
    }
  }]);
  return NodesmithProvider;
}(UrlJsonRpcProvider);

function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var logger$5 = new Logger(version$5);
var defaultApplicationId = "62e1ad51b37b8e00394bda3b";
var PocketProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {
  _inherits(PocketProvider, _UrlJsonRpcProvider);
  var _super = _createSuper$2(PocketProvider);
  function PocketProvider() {
    _classCallCheck(this, PocketProvider);
    return _super.apply(this, arguments);
  }
  _createClass(PocketProvider, [{
    key: "isCommunityResource",
    value: function isCommunityResource() {
      return this.applicationId === defaultApplicationId;
    }
  }], [{
    key: "getApiKey",
    value: function getApiKey(apiKey) {
      var apiKeyObj = {
        applicationId: null,
        loadBalancer: true,
        applicationSecretKey: null
      };
      // Parse applicationId and applicationSecretKey
      if (apiKey == null) {
        apiKeyObj.applicationId = defaultApplicationId;
      } else if (typeof apiKey === "string") {
        apiKeyObj.applicationId = apiKey;
      } else if (apiKey.applicationSecretKey != null) {
        apiKeyObj.applicationId = apiKey.applicationId;
        apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
      } else if (apiKey.applicationId) {
        apiKeyObj.applicationId = apiKey.applicationId;
      } else {
        logger$5.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
      }
      return apiKeyObj;
    }
  }, {
    key: "getUrl",
    value: function getUrl(network, apiKey) {
      var host = null;
      switch (network ? network.name : "unknown") {
        case "goerli":
          host = "eth-goerli.gateway.pokt.network";
          break;
        case "homestead":
          host = "eth-mainnet.gateway.pokt.network";
          break;
        case "kovan":
          host = "poa-kovan.gateway.pokt.network";
          break;
        case "matic":
          host = "poly-mainnet.gateway.pokt.network";
          break;
        case "maticmum":
          host = "polygon-mumbai-rpc.gateway.pokt.network";
          break;
        case "rinkeby":
          host = "eth-rinkeby.gateway.pokt.network";
          break;
        case "ropsten":
          host = "eth-ropsten.gateway.pokt.network";
          break;
        default:
          logger$5.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
            argument: "network",
            value: network
          });
      }
      var url = "https://".concat(host, "/v1/lb/").concat(apiKey.applicationId);
      var connection = {
        headers: {},
        url: url
      };
      if (apiKey.applicationSecretKey != null) {
        connection.user = "";
        connection.password = apiKey.applicationSecretKey;
      }
      return connection;
    }
  }]);
  return PocketProvider;
}(UrlJsonRpcProvider);

function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var logger$4 = new Logger(version$5);
var _nextId = 1;
function buildWeb3LegacyFetcher(provider, sendFunc) {
  var fetcher = "Web3LegacyFetcher";
  return function (method, params) {
    var _this = this;
    var request = {
      method: method,
      params: params,
      id: _nextId++,
      jsonrpc: "2.0"
    };
    return new Promise(function (resolve, reject) {
      _this.emit("debug", {
        action: "request",
        fetcher: fetcher,
        request: deepCopy(request),
        provider: _this
      });
      sendFunc(request, function (error, response) {
        if (error) {
          _this.emit("debug", {
            action: "response",
            fetcher: fetcher,
            error: error,
            request: request,
            provider: _this
          });
          return reject(error);
        }
        _this.emit("debug", {
          action: "response",
          fetcher: fetcher,
          request: request,
          response: response,
          provider: _this
        });
        if (response.error) {
          var _error = new Error(response.error.message);
          _error.code = response.error.code;
          _error.data = response.error.data;
          return reject(_error);
        }
        resolve(response.result);
      });
    });
  };
}
function buildEip1193Fetcher(provider) {
  return function (method, params) {
    var _this2 = this;
    if (params == null) {
      params = [];
    }
    var request = {
      method: method,
      params: params
    };
    this.emit("debug", {
      action: "request",
      fetcher: "Eip1193Fetcher",
      request: deepCopy(request),
      provider: this
    });
    return provider.request(request).then(function (response) {
      _this2.emit("debug", {
        action: "response",
        fetcher: "Eip1193Fetcher",
        request: request,
        response: response,
        provider: _this2
      });
      return response;
    }, function (error) {
      _this2.emit("debug", {
        action: "response",
        fetcher: "Eip1193Fetcher",
        request: request,
        error: error,
        provider: _this2
      });
      throw error;
    });
  };
}
var Web3Provider = /*#__PURE__*/function (_JsonRpcProvider) {
  _inherits(Web3Provider, _JsonRpcProvider);
  var _super = _createSuper$1(Web3Provider);
  function Web3Provider(provider, network) {
    var _this3;
    _classCallCheck(this, Web3Provider);
    if (provider == null) {
      logger$4.throwArgumentError("missing provider", "provider", provider);
    }
    var path = null;
    var jsonRpcFetchFunc = null;
    var subprovider = null;
    if (typeof provider === "function") {
      path = "unknown:";
      jsonRpcFetchFunc = provider;
    } else {
      path = provider.host || provider.path || "";
      if (!path && provider.isMetaMask) {
        path = "metamask";
      }
      subprovider = provider;
      if (provider.request) {
        if (path === "") {
          path = "eip-1193:";
        }
        jsonRpcFetchFunc = buildEip1193Fetcher(provider);
      } else if (provider.sendAsync) {
        jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
      } else if (provider.send) {
        jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
      } else {
        logger$4.throwArgumentError("unsupported provider", "provider", provider);
      }
      if (!path) {
        path = "unknown:";
      }
    }
    _this3 = _super.call(this, path, network);
    defineReadOnly(_assertThisInitialized(_this3), "jsonRpcFetchFunc", jsonRpcFetchFunc);
    defineReadOnly(_assertThisInitialized(_this3), "provider", subprovider);
    return _this3;
  }
  _createClass(Web3Provider, [{
    key: "send",
    value: function send(method, params) {
      return this.jsonRpcFetchFunc(method, params);
    }
  }]);
  return Web3Provider;
}(JsonRpcProvider);

var logger$3 = new Logger(version$5);
////////////////////////
// Helper Functions
function getDefaultProvider(network, options) {
  if (network == null) {
    network = "homestead";
  }
  // If passed a URL, figure out the right type of provider based on the scheme
  if (typeof network === "string") {
    // @TODO: Add support for IpcProvider; maybe if it ends in ".ipc"?
    // Handle http and ws (and their secure variants)
    var match = network.match(/^(ws|http)s?:/i);
    if (match) {
      switch (match[1].toLowerCase()) {
        case "http":
        case "https":
          return new JsonRpcProvider(network);
        case "ws":
        case "wss":
          return new WebSocketProvider(network);
        default:
          logger$3.throwArgumentError("unsupported URL scheme", "network", network);
      }
    }
  }
  var n = getNetwork(network);
  if (!n || !n._defaultProvider) {
    logger$3.throwError("unsupported getDefaultProvider network", Logger.errors.NETWORK_ERROR, {
      operation: "getDefaultProvider",
      network: network
    });
  }
  return n._defaultProvider({
    FallbackProvider: FallbackProvider,
    AlchemyProvider: AlchemyProvider,
    AnkrProvider: AnkrProvider,
    CloudflareProvider: CloudflareProvider,
    EtherscanProvider: EtherscanProvider,
    InfuraProvider: InfuraProvider,
    JsonRpcProvider: JsonRpcProvider,
    NodesmithProvider: NodesmithProvider,
    PocketProvider: PocketProvider,
    Web3Provider: Web3Provider,
    IpcProvider: IpcProvider
  }, options);
}

var index$2 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Provider: Provider,
  BaseProvider: BaseProvider,
  Resolver: Resolver,
  UrlJsonRpcProvider: UrlJsonRpcProvider,
  FallbackProvider: FallbackProvider,
  AlchemyProvider: AlchemyProvider,
  AlchemyWebSocketProvider: AlchemyWebSocketProvider,
  AnkrProvider: AnkrProvider,
  CloudflareProvider: CloudflareProvider,
  EtherscanProvider: EtherscanProvider,
  InfuraProvider: InfuraProvider,
  InfuraWebSocketProvider: InfuraWebSocketProvider,
  JsonRpcProvider: JsonRpcProvider,
  JsonRpcBatchProvider: JsonRpcBatchProvider,
  NodesmithProvider: NodesmithProvider,
  PocketProvider: PocketProvider,
  StaticJsonRpcProvider: StaticJsonRpcProvider,
  Web3Provider: Web3Provider,
  WebSocketProvider: WebSocketProvider,
  IpcProvider: IpcProvider,
  JsonRpcSigner: JsonRpcSigner,
  getDefaultProvider: getDefaultProvider,
  getNetwork: getNetwork,
  isCommunityResource: isCommunityResource,
  isCommunityResourcable: isCommunityResourcable,
  showThrottleMessage: showThrottleMessage,
  Formatter: Formatter
});

var version$4 = "solidity/5.7.0";

var regexBytes = new RegExp("^bytes([0-9]+)$");
var regexNumber = new RegExp("^(u?int)([0-9]*)$");
var regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
var Zeros = "0000000000000000000000000000000000000000000000000000000000000000";
var logger$2 = new Logger(version$4);
function _pack(type, value, isArray) {
  switch (type) {
    case "address":
      if (isArray) {
        return zeroPad(value, 32);
      }
      return arrayify(value);
    case "string":
      return toUtf8Bytes(value);
    case "bytes":
      return arrayify(value);
    case "bool":
      value = value ? "0x01" : "0x00";
      if (isArray) {
        return zeroPad(value, 32);
      }
      return arrayify(value);
  }
  var match = type.match(regexNumber);
  if (match) {
    //let signed = (match[1] === "int")
    var size = parseInt(match[2] || "256");
    if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {
      logger$2.throwArgumentError("invalid number type", "type", type);
    }
    if (isArray) {
      size = 256;
    }
    value = BigNumber.from(value).toTwos(size);
    return zeroPad(value, size / 8);
  }
  match = type.match(regexBytes);
  if (match) {
    var _size = parseInt(match[1]);
    if (String(_size) !== match[1] || _size === 0 || _size > 32) {
      logger$2.throwArgumentError("invalid bytes type", "type", type);
    }
    if (arrayify(value).byteLength !== _size) {
      logger$2.throwArgumentError("invalid value for ".concat(type), "value", value);
    }
    if (isArray) {
      return arrayify((value + Zeros).substring(0, 66));
    }
    return value;
  }
  match = type.match(regexArray);
  if (match && Array.isArray(value)) {
    var baseType = match[1];
    var count = parseInt(match[2] || String(value.length));
    if (count != value.length) {
      logger$2.throwArgumentError("invalid array length for ".concat(type), "value", value);
    }
    var result = [];
    value.forEach(function (value) {
      result.push(_pack(baseType, value, true));
    });
    return concat(result);
  }
  return logger$2.throwArgumentError("invalid type", "type", type);
}
// @TODO: Array Enum
function pack(types, values) {
  if (types.length != values.length) {
    logger$2.throwArgumentError("wrong number of values; expected ${ types.length }", "values", values);
  }
  var tight = [];
  types.forEach(function (type, index) {
    tight.push(_pack(type, values[index]));
  });
  return hexlify(concat(tight));
}
function keccak256(types, values) {
  return keccak256$1(pack(types, values));
}
function sha256(types, values) {
  return sha256$1(pack(types, values));
}

var lib_esm$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pack: pack,
  keccak256: keccak256,
  sha256: sha256
});

var version$3 = "units/5.7.0";

var logger$1 = new Logger(version$3);
var names$1 = ["wei", "kwei", "mwei", "gwei", "szabo", "finney", "ether"];
// Some environments have issues with RegEx that contain back-tracking, so we cannot
// use them.
function commify(value) {
  var comps = String(value).split(".");
  if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || comps[1] && !comps[1].match(/^[0-9]*$/) || value === "." || value === "-.") {
    logger$1.throwArgumentError("invalid value", "value", value);
  }
  // Make sure we have at least one whole digit (0 if none)
  var whole = comps[0];
  var negative = "";
  if (whole.substring(0, 1) === "-") {
    negative = "-";
    whole = whole.substring(1);
  }
  // Make sure we have at least 1 whole digit with no leading zeros
  while (whole.substring(0, 1) === "0") {
    whole = whole.substring(1);
  }
  if (whole === "") {
    whole = "0";
  }
  var suffix = "";
  if (comps.length === 2) {
    suffix = "." + (comps[1] || "0");
  }
  while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
    suffix = suffix.substring(0, suffix.length - 1);
  }
  var formatted = [];
  while (whole.length) {
    if (whole.length <= 3) {
      formatted.unshift(whole);
      break;
    } else {
      var index = whole.length - 3;
      formatted.unshift(whole.substring(index));
      whole = whole.substring(0, index);
    }
  }
  return negative + formatted.join(",") + suffix;
}
function formatUnits(value, unitName) {
  if (typeof unitName === "string") {
    var index = names$1.indexOf(unitName);
    if (index !== -1) {
      unitName = 3 * index;
    }
  }
  return formatFixed(value, unitName != null ? unitName : 18);
}
function parseUnits(value, unitName) {
  if (typeof value !== "string") {
    logger$1.throwArgumentError("value must be a string", "value", value);
  }
  if (typeof unitName === "string") {
    var index = names$1.indexOf(unitName);
    if (index !== -1) {
      unitName = 3 * index;
    }
  }
  return parseFixed(value, unitName != null ? unitName : 18);
}
function formatEther(wei) {
  return formatUnits(wei, 18);
}
function parseEther(ether) {
  return parseUnits(ether, 18);
}

var lib_esm = /*#__PURE__*/Object.freeze({
  __proto__: null,
  commify: commify,
  formatUnits: formatUnits,
  parseUnits: parseUnits,
  formatEther: formatEther,
  parseEther: parseEther
});

var utils$6 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  AbiCoder: AbiCoder,
  defaultAbiCoder: defaultAbiCoder,
  Fragment: Fragment,
  ConstructorFragment: ConstructorFragment,
  ErrorFragment: ErrorFragment,
  EventFragment: EventFragment,
  FunctionFragment: FunctionFragment,
  ParamType: ParamType,
  FormatTypes: FormatTypes,
  checkResultErrors: checkResultErrors,
  Logger: Logger,
  RLP: lib_esm$g,
  _fetchData: _fetchData,
  fetchJson: fetchJson,
  poll: poll,
  checkProperties: checkProperties,
  deepCopy: deepCopy,
  defineReadOnly: defineReadOnly,
  getStatic: getStatic,
  resolveProperties: resolveProperties,
  shallowCopy: shallowCopy,
  arrayify: arrayify,
  concat: concat,
  stripZeros: stripZeros,
  zeroPad: zeroPad,
  isBytes: isBytes,
  isBytesLike: isBytesLike,
  defaultPath: defaultPath,
  HDNode: HDNode,
  SigningKey: SigningKey,
  Interface: Interface,
  LogDescription: LogDescription,
  TransactionDescription: TransactionDescription,
  base58: Base58,
  base64: lib_esm$d,
  hexlify: hexlify,
  isHexString: isHexString$1,
  hexConcat: hexConcat,
  hexStripZeros: hexStripZeros,
  hexValue: hexValue,
  hexZeroPad: hexZeroPad,
  hexDataLength: hexDataLength,
  hexDataSlice: hexDataSlice,
  nameprep: nameprep,
  _toEscapedUtf8String: _toEscapedUtf8String,
  toUtf8Bytes: toUtf8Bytes,
  toUtf8CodePoints: toUtf8CodePoints,
  toUtf8String: toUtf8String,
  Utf8ErrorFuncs: Utf8ErrorFuncs,
  formatBytes32String: formatBytes32String,
  parseBytes32String: parseBytes32String,
  dnsEncode: dnsEncode,
  hashMessage: hashMessage,
  namehash: namehash,
  isValidName: isValidName,
  id: id,
  _TypedDataEncoder: TypedDataEncoder,
  getAddress: getAddress,
  getIcapAddress: getIcapAddress,
  getContractAddress: getContractAddress,
  getCreate2Address: getCreate2Address,
  isAddress: isAddress,
  formatEther: formatEther,
  parseEther: parseEther,
  formatUnits: formatUnits,
  parseUnits: parseUnits,
  commify: commify,
  computeHmac: computeHmac,
  keccak256: keccak256$1,
  ripemd160: ripemd160,
  sha256: sha256$1,
  sha512: sha512,
  randomBytes: randomBytes,
  shuffled: shuffled,
  solidityPack: pack,
  solidityKeccak256: keccak256,
  soliditySha256: sha256,
  splitSignature: splitSignature,
  joinSignature: joinSignature,
  accessListify: accessListify,
  parseTransaction: parse$1,
  serializeTransaction: serialize$1,
  get TransactionTypes () { return TransactionTypes; },
  getJsonWalletAddress: getJsonWalletAddress,
  computeAddress: computeAddress,
  recoverAddress: recoverAddress,
  computePublicKey: computePublicKey,
  recoverPublicKey: recoverPublicKey,
  verifyMessage: verifyMessage,
  verifyTypedData: verifyTypedData,
  getAccountPath: getAccountPath,
  mnemonicToEntropy: mnemonicToEntropy,
  entropyToMnemonic: entropyToMnemonic,
  isValidMnemonic: isValidMnemonic,
  mnemonicToSeed: mnemonicToSeed,
  get SupportedAlgorithm () { return SupportedAlgorithm; },
  get UnicodeNormalizationForm () { return UnicodeNormalizationForm; },
  get Utf8ErrorReason () { return Utf8ErrorReason; },
  Indexed: Indexed
});

var version$2 = "ethers/5.7.2";

var logger = new Logger(version$2);

var ethers = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Signer: Signer,
  Wallet: Wallet,
  VoidSigner: VoidSigner,
  getDefaultProvider: getDefaultProvider,
  providers: index$2,
  BaseContract: BaseContract,
  Contract: Contract,
  ContractFactory: ContractFactory,
  BigNumber: BigNumber,
  FixedNumber: FixedNumber,
  constants: index$3,
  get errors () { return ErrorCode; },
  logger: logger,
  utils: utils$6,
  wordlists: wordlists,
  version: version$2,
  Wordlist: Wordlist
});

try {
  var anyGlobal = window;
  if (anyGlobal._ethers == null) {
    anyGlobal._ethers = ethers;
  }
} catch (error) {}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) {
        ;
      }
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest();
}

function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

var utils$5 = {};

var require$$0$4 = /*@__PURE__*/getAugmentedNamespace(lib_esm$b);

var require$$1$2 = /*@__PURE__*/getAugmentedNamespace(lib_esm$f);

var require$$2$1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$d);

var require$$3$2 = /*@__PURE__*/getAugmentedNamespace(lib_esm$8);

var require$$4 = /*@__PURE__*/getAugmentedNamespace(lib_esm$j);

var require$$5 = /*@__PURE__*/getAugmentedNamespace(lib_esm$c);

var require$$6 = /*@__PURE__*/getAugmentedNamespace(lib_esm$6);

var require$$7$1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$4);

var require$$8 = /*@__PURE__*/getAugmentedNamespace(lib_esm$h);

var require$$9 = /*@__PURE__*/getAugmentedNamespace(lib_esm$k);

var require$$10 = /*@__PURE__*/getAugmentedNamespace(lib_esm$7);

var require$$11 = /*@__PURE__*/getAugmentedNamespace(lib_esm$1);

var require$$12 = /*@__PURE__*/getAugmentedNamespace(lib_esm$5);

var require$$13 = /*@__PURE__*/getAugmentedNamespace(lib_esm$i);

var require$$14 = /*@__PURE__*/getAugmentedNamespace(lib_esm$g);

var require$$15 = /*@__PURE__*/getAugmentedNamespace(lib_esm$a);

var require$$16 = /*@__PURE__*/getAugmentedNamespace(lib_esm$e);

var require$$17 = /*@__PURE__*/getAugmentedNamespace(lib_esm$9);

var require$$18 = /*@__PURE__*/getAugmentedNamespace(lib_esm);

var require$$19 = /*@__PURE__*/getAugmentedNamespace(lib_esm$3);

var require$$20 = /*@__PURE__*/getAugmentedNamespace(lib_esm$2);

(function (exports) {

	var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  Object.defineProperty(o, k2, {
	    enumerable: true,
	    get: function get() {
	      return m[k];
	    }
	  });
	} : function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  o[k2] = m[k];
	});
	var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	  Object.defineProperty(o, "default", {
	    enumerable: true,
	    value: v
	  });
	} : function (o, v) {
	  o["default"] = v;
	});
	var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	  if (mod && mod.__esModule) return mod;
	  var result = {};
	  if (mod != null) for (var k in mod) {
	    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	  }
	  __setModuleDefault(result, mod);
	  return result;
	};
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.formatBytes32String = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports._toEscapedUtf8String = exports.nameprep = exports.hexDataSlice = exports.hexDataLength = exports.hexZeroPad = exports.hexValue = exports.hexStripZeros = exports.hexConcat = exports.isHexString = exports.hexlify = exports.base64 = exports.base58 = exports.TransactionDescription = exports.LogDescription = exports.Interface = exports.SigningKey = exports.HDNode = exports.defaultPath = exports.isBytesLike = exports.isBytes = exports.zeroPad = exports.stripZeros = exports.concat = exports.arrayify = exports.shallowCopy = exports.resolveProperties = exports.getStatic = exports.defineReadOnly = exports.deepCopy = exports.checkProperties = exports.poll = exports.fetchJson = exports._fetchData = exports.RLP = exports.Logger = exports.checkResultErrors = exports.FormatTypes = exports.ParamType = exports.FunctionFragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.Fragment = exports.defaultAbiCoder = exports.AbiCoder = void 0;
	exports.Indexed = exports.Utf8ErrorReason = exports.UnicodeNormalizationForm = exports.SupportedAlgorithm = exports.mnemonicToSeed = exports.isValidMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.getAccountPath = exports.verifyTypedData = exports.verifyMessage = exports.recoverPublicKey = exports.computePublicKey = exports.recoverAddress = exports.computeAddress = exports.getJsonWalletAddress = exports.TransactionTypes = exports.serializeTransaction = exports.parseTransaction = exports.accessListify = exports.joinSignature = exports.splitSignature = exports.soliditySha256 = exports.solidityKeccak256 = exports.solidityPack = exports.shuffled = exports.randomBytes = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.keccak256 = exports.computeHmac = exports.commify = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.isAddress = exports.getCreate2Address = exports.getContractAddress = exports.getIcapAddress = exports.getAddress = exports._TypedDataEncoder = exports.id = exports.isValidName = exports.namehash = exports.hashMessage = exports.dnsEncode = exports.parseBytes32String = void 0;
	var abi_1 = require$$0$4;
	Object.defineProperty(exports, "AbiCoder", {
	  enumerable: true,
	  get: function get() {
	    return abi_1.AbiCoder;
	  }
	});
	Object.defineProperty(exports, "checkResultErrors", {
	  enumerable: true,
	  get: function get() {
	    return abi_1.checkResultErrors;
	  }
	});
	Object.defineProperty(exports, "ConstructorFragment", {
	  enumerable: true,
	  get: function get() {
	    return abi_1.ConstructorFragment;
	  }
	});
	Object.defineProperty(exports, "defaultAbiCoder", {
	  enumerable: true,
	  get: function get() {
	    return abi_1.defaultAbiCoder;
	  }
	});
	Object.defineProperty(exports, "ErrorFragment", {
	  enumerable: true,
	  get: function get() {
	    return abi_1.ErrorFragment;
	  }
	});
	Object.defineProperty(exports, "EventFragment", {
	  enumerable: true,
	  get: function get() {
	    return abi_1.EventFragment;
	  }
	});
	Object.defineProperty(exports, "FormatTypes", {
	  enumerable: true,
	  get: function get() {
	    return abi_1.FormatTypes;
	  }
	});
	Object.defineProperty(exports, "Fragment", {
	  enumerable: true,
	  get: function get() {
	    return abi_1.Fragment;
	  }
	});
	Object.defineProperty(exports, "FunctionFragment", {
	  enumerable: true,
	  get: function get() {
	    return abi_1.FunctionFragment;
	  }
	});
	Object.defineProperty(exports, "Indexed", {
	  enumerable: true,
	  get: function get() {
	    return abi_1.Indexed;
	  }
	});
	Object.defineProperty(exports, "Interface", {
	  enumerable: true,
	  get: function get() {
	    return abi_1.Interface;
	  }
	});
	Object.defineProperty(exports, "LogDescription", {
	  enumerable: true,
	  get: function get() {
	    return abi_1.LogDescription;
	  }
	});
	Object.defineProperty(exports, "ParamType", {
	  enumerable: true,
	  get: function get() {
	    return abi_1.ParamType;
	  }
	});
	Object.defineProperty(exports, "TransactionDescription", {
	  enumerable: true,
	  get: function get() {
	    return abi_1.TransactionDescription;
	  }
	});
	var address_1 = require$$1$2;
	Object.defineProperty(exports, "getAddress", {
	  enumerable: true,
	  get: function get() {
	    return address_1.getAddress;
	  }
	});
	Object.defineProperty(exports, "getCreate2Address", {
	  enumerable: true,
	  get: function get() {
	    return address_1.getCreate2Address;
	  }
	});
	Object.defineProperty(exports, "getContractAddress", {
	  enumerable: true,
	  get: function get() {
	    return address_1.getContractAddress;
	  }
	});
	Object.defineProperty(exports, "getIcapAddress", {
	  enumerable: true,
	  get: function get() {
	    return address_1.getIcapAddress;
	  }
	});
	Object.defineProperty(exports, "isAddress", {
	  enumerable: true,
	  get: function get() {
	    return address_1.isAddress;
	  }
	});
	var base64 = __importStar(require$$2$1);
	exports.base64 = base64;
	var basex_1 = require$$3$2;
	Object.defineProperty(exports, "base58", {
	  enumerable: true,
	  get: function get() {
	    return basex_1.Base58;
	  }
	});
	var bytes_1 = require$$4;
	Object.defineProperty(exports, "arrayify", {
	  enumerable: true,
	  get: function get() {
	    return bytes_1.arrayify;
	  }
	});
	Object.defineProperty(exports, "concat", {
	  enumerable: true,
	  get: function get() {
	    return bytes_1.concat;
	  }
	});
	Object.defineProperty(exports, "hexConcat", {
	  enumerable: true,
	  get: function get() {
	    return bytes_1.hexConcat;
	  }
	});
	Object.defineProperty(exports, "hexDataSlice", {
	  enumerable: true,
	  get: function get() {
	    return bytes_1.hexDataSlice;
	  }
	});
	Object.defineProperty(exports, "hexDataLength", {
	  enumerable: true,
	  get: function get() {
	    return bytes_1.hexDataLength;
	  }
	});
	Object.defineProperty(exports, "hexlify", {
	  enumerable: true,
	  get: function get() {
	    return bytes_1.hexlify;
	  }
	});
	Object.defineProperty(exports, "hexStripZeros", {
	  enumerable: true,
	  get: function get() {
	    return bytes_1.hexStripZeros;
	  }
	});
	Object.defineProperty(exports, "hexValue", {
	  enumerable: true,
	  get: function get() {
	    return bytes_1.hexValue;
	  }
	});
	Object.defineProperty(exports, "hexZeroPad", {
	  enumerable: true,
	  get: function get() {
	    return bytes_1.hexZeroPad;
	  }
	});
	Object.defineProperty(exports, "isBytes", {
	  enumerable: true,
	  get: function get() {
	    return bytes_1.isBytes;
	  }
	});
	Object.defineProperty(exports, "isBytesLike", {
	  enumerable: true,
	  get: function get() {
	    return bytes_1.isBytesLike;
	  }
	});
	Object.defineProperty(exports, "isHexString", {
	  enumerable: true,
	  get: function get() {
	    return bytes_1.isHexString;
	  }
	});
	Object.defineProperty(exports, "joinSignature", {
	  enumerable: true,
	  get: function get() {
	    return bytes_1.joinSignature;
	  }
	});
	Object.defineProperty(exports, "zeroPad", {
	  enumerable: true,
	  get: function get() {
	    return bytes_1.zeroPad;
	  }
	});
	Object.defineProperty(exports, "splitSignature", {
	  enumerable: true,
	  get: function get() {
	    return bytes_1.splitSignature;
	  }
	});
	Object.defineProperty(exports, "stripZeros", {
	  enumerable: true,
	  get: function get() {
	    return bytes_1.stripZeros;
	  }
	});
	var hash_1 = require$$5;
	Object.defineProperty(exports, "_TypedDataEncoder", {
	  enumerable: true,
	  get: function get() {
	    return hash_1._TypedDataEncoder;
	  }
	});
	Object.defineProperty(exports, "dnsEncode", {
	  enumerable: true,
	  get: function get() {
	    return hash_1.dnsEncode;
	  }
	});
	Object.defineProperty(exports, "hashMessage", {
	  enumerable: true,
	  get: function get() {
	    return hash_1.hashMessage;
	  }
	});
	Object.defineProperty(exports, "id", {
	  enumerable: true,
	  get: function get() {
	    return hash_1.id;
	  }
	});
	Object.defineProperty(exports, "isValidName", {
	  enumerable: true,
	  get: function get() {
	    return hash_1.isValidName;
	  }
	});
	Object.defineProperty(exports, "namehash", {
	  enumerable: true,
	  get: function get() {
	    return hash_1.namehash;
	  }
	});
	var hdnode_1 = require$$6;
	Object.defineProperty(exports, "defaultPath", {
	  enumerable: true,
	  get: function get() {
	    return hdnode_1.defaultPath;
	  }
	});
	Object.defineProperty(exports, "entropyToMnemonic", {
	  enumerable: true,
	  get: function get() {
	    return hdnode_1.entropyToMnemonic;
	  }
	});
	Object.defineProperty(exports, "getAccountPath", {
	  enumerable: true,
	  get: function get() {
	    return hdnode_1.getAccountPath;
	  }
	});
	Object.defineProperty(exports, "HDNode", {
	  enumerable: true,
	  get: function get() {
	    return hdnode_1.HDNode;
	  }
	});
	Object.defineProperty(exports, "isValidMnemonic", {
	  enumerable: true,
	  get: function get() {
	    return hdnode_1.isValidMnemonic;
	  }
	});
	Object.defineProperty(exports, "mnemonicToEntropy", {
	  enumerable: true,
	  get: function get() {
	    return hdnode_1.mnemonicToEntropy;
	  }
	});
	Object.defineProperty(exports, "mnemonicToSeed", {
	  enumerable: true,
	  get: function get() {
	    return hdnode_1.mnemonicToSeed;
	  }
	});
	var json_wallets_1 = require$$7$1;
	Object.defineProperty(exports, "getJsonWalletAddress", {
	  enumerable: true,
	  get: function get() {
	    return json_wallets_1.getJsonWalletAddress;
	  }
	});
	var keccak256_1 = require$$8;
	Object.defineProperty(exports, "keccak256", {
	  enumerable: true,
	  get: function get() {
	    return keccak256_1.keccak256;
	  }
	});
	var logger_1 = require$$9;
	Object.defineProperty(exports, "Logger", {
	  enumerable: true,
	  get: function get() {
	    return logger_1.Logger;
	  }
	});
	var sha2_1 = require$$10;
	Object.defineProperty(exports, "computeHmac", {
	  enumerable: true,
	  get: function get() {
	    return sha2_1.computeHmac;
	  }
	});
	Object.defineProperty(exports, "ripemd160", {
	  enumerable: true,
	  get: function get() {
	    return sha2_1.ripemd160;
	  }
	});
	Object.defineProperty(exports, "sha256", {
	  enumerable: true,
	  get: function get() {
	    return sha2_1.sha256;
	  }
	});
	Object.defineProperty(exports, "sha512", {
	  enumerable: true,
	  get: function get() {
	    return sha2_1.sha512;
	  }
	});
	var solidity_1 = require$$11;
	Object.defineProperty(exports, "solidityKeccak256", {
	  enumerable: true,
	  get: function get() {
	    return solidity_1.keccak256;
	  }
	});
	Object.defineProperty(exports, "solidityPack", {
	  enumerable: true,
	  get: function get() {
	    return solidity_1.pack;
	  }
	});
	Object.defineProperty(exports, "soliditySha256", {
	  enumerable: true,
	  get: function get() {
	    return solidity_1.sha256;
	  }
	});
	var random_1 = require$$12;
	Object.defineProperty(exports, "randomBytes", {
	  enumerable: true,
	  get: function get() {
	    return random_1.randomBytes;
	  }
	});
	Object.defineProperty(exports, "shuffled", {
	  enumerable: true,
	  get: function get() {
	    return random_1.shuffled;
	  }
	});
	var properties_1 = require$$13;
	Object.defineProperty(exports, "checkProperties", {
	  enumerable: true,
	  get: function get() {
	    return properties_1.checkProperties;
	  }
	});
	Object.defineProperty(exports, "deepCopy", {
	  enumerable: true,
	  get: function get() {
	    return properties_1.deepCopy;
	  }
	});
	Object.defineProperty(exports, "defineReadOnly", {
	  enumerable: true,
	  get: function get() {
	    return properties_1.defineReadOnly;
	  }
	});
	Object.defineProperty(exports, "getStatic", {
	  enumerable: true,
	  get: function get() {
	    return properties_1.getStatic;
	  }
	});
	Object.defineProperty(exports, "resolveProperties", {
	  enumerable: true,
	  get: function get() {
	    return properties_1.resolveProperties;
	  }
	});
	Object.defineProperty(exports, "shallowCopy", {
	  enumerable: true,
	  get: function get() {
	    return properties_1.shallowCopy;
	  }
	});
	var RLP = __importStar(require$$14);
	exports.RLP = RLP;
	var signing_key_1 = require$$15;
	Object.defineProperty(exports, "computePublicKey", {
	  enumerable: true,
	  get: function get() {
	    return signing_key_1.computePublicKey;
	  }
	});
	Object.defineProperty(exports, "recoverPublicKey", {
	  enumerable: true,
	  get: function get() {
	    return signing_key_1.recoverPublicKey;
	  }
	});
	Object.defineProperty(exports, "SigningKey", {
	  enumerable: true,
	  get: function get() {
	    return signing_key_1.SigningKey;
	  }
	});
	var strings_1 = require$$16;
	Object.defineProperty(exports, "formatBytes32String", {
	  enumerable: true,
	  get: function get() {
	    return strings_1.formatBytes32String;
	  }
	});
	Object.defineProperty(exports, "nameprep", {
	  enumerable: true,
	  get: function get() {
	    return strings_1.nameprep;
	  }
	});
	Object.defineProperty(exports, "parseBytes32String", {
	  enumerable: true,
	  get: function get() {
	    return strings_1.parseBytes32String;
	  }
	});
	Object.defineProperty(exports, "_toEscapedUtf8String", {
	  enumerable: true,
	  get: function get() {
	    return strings_1._toEscapedUtf8String;
	  }
	});
	Object.defineProperty(exports, "toUtf8Bytes", {
	  enumerable: true,
	  get: function get() {
	    return strings_1.toUtf8Bytes;
	  }
	});
	Object.defineProperty(exports, "toUtf8CodePoints", {
	  enumerable: true,
	  get: function get() {
	    return strings_1.toUtf8CodePoints;
	  }
	});
	Object.defineProperty(exports, "toUtf8String", {
	  enumerable: true,
	  get: function get() {
	    return strings_1.toUtf8String;
	  }
	});
	Object.defineProperty(exports, "Utf8ErrorFuncs", {
	  enumerable: true,
	  get: function get() {
	    return strings_1.Utf8ErrorFuncs;
	  }
	});
	var transactions_1 = require$$17;
	Object.defineProperty(exports, "accessListify", {
	  enumerable: true,
	  get: function get() {
	    return transactions_1.accessListify;
	  }
	});
	Object.defineProperty(exports, "computeAddress", {
	  enumerable: true,
	  get: function get() {
	    return transactions_1.computeAddress;
	  }
	});
	Object.defineProperty(exports, "parseTransaction", {
	  enumerable: true,
	  get: function get() {
	    return transactions_1.parse;
	  }
	});
	Object.defineProperty(exports, "recoverAddress", {
	  enumerable: true,
	  get: function get() {
	    return transactions_1.recoverAddress;
	  }
	});
	Object.defineProperty(exports, "serializeTransaction", {
	  enumerable: true,
	  get: function get() {
	    return transactions_1.serialize;
	  }
	});
	Object.defineProperty(exports, "TransactionTypes", {
	  enumerable: true,
	  get: function get() {
	    return transactions_1.TransactionTypes;
	  }
	});
	var units_1 = require$$18;
	Object.defineProperty(exports, "commify", {
	  enumerable: true,
	  get: function get() {
	    return units_1.commify;
	  }
	});
	Object.defineProperty(exports, "formatEther", {
	  enumerable: true,
	  get: function get() {
	    return units_1.formatEther;
	  }
	});
	Object.defineProperty(exports, "parseEther", {
	  enumerable: true,
	  get: function get() {
	    return units_1.parseEther;
	  }
	});
	Object.defineProperty(exports, "formatUnits", {
	  enumerable: true,
	  get: function get() {
	    return units_1.formatUnits;
	  }
	});
	Object.defineProperty(exports, "parseUnits", {
	  enumerable: true,
	  get: function get() {
	    return units_1.parseUnits;
	  }
	});
	var wallet_1 = require$$19;
	Object.defineProperty(exports, "verifyMessage", {
	  enumerable: true,
	  get: function get() {
	    return wallet_1.verifyMessage;
	  }
	});
	Object.defineProperty(exports, "verifyTypedData", {
	  enumerable: true,
	  get: function get() {
	    return wallet_1.verifyTypedData;
	  }
	});
	var web_1 = require$$20;
	Object.defineProperty(exports, "_fetchData", {
	  enumerable: true,
	  get: function get() {
	    return web_1._fetchData;
	  }
	});
	Object.defineProperty(exports, "fetchJson", {
	  enumerable: true,
	  get: function get() {
	    return web_1.fetchJson;
	  }
	});
	Object.defineProperty(exports, "poll", {
	  enumerable: true,
	  get: function get() {
	    return web_1.poll;
	  }
	});
	////////////////////////
	// Enums
	var sha2_2 = require$$10;
	Object.defineProperty(exports, "SupportedAlgorithm", {
	  enumerable: true,
	  get: function get() {
	    return sha2_2.SupportedAlgorithm;
	  }
	});
	var strings_2 = require$$16;
	Object.defineProperty(exports, "UnicodeNormalizationForm", {
	  enumerable: true,
	  get: function get() {
	    return strings_2.UnicodeNormalizationForm;
	  }
	});
	Object.defineProperty(exports, "Utf8ErrorReason", {
	  enumerable: true,
	  get: function get() {
	    return strings_2.Utf8ErrorReason;
	  }
	});
} (utils$5));

var _networkConfigs;
function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var ChainIds = {
  LOCAL: 31337,
  ETH: 1,
  ROPSTEN: 3,
  GOERLI: 5,
  OPTIMISM: 10,
  BSC: 56,
  BSC_T: 97,
  MUMBAI: 80001,
  MATIC: 137
};
var networkConfigs = (_networkConfigs = {}, _defineProperty(_networkConfigs, ChainIds.ETH, {
  chainId: utils$5.hexValue(ChainIds.ETH),
  chainName: "Ethereum Mainnet",
  nativeCurrency: {
    name: "ETH",
    symbol: "eth",
    decimals: 18
  },
  rpcUrls: ["https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161"],
  blockExplorerUrls: ["https://etherscan.io"],
  trustWalletUid: "ethereum",
  displayName: "Ethereum"
}), _defineProperty(_networkConfigs, ChainIds.ROPSTEN, {
  chainId: utils$5.hexValue(ChainIds.ROPSTEN),
  chainName: "Ropsten",
  nativeCurrency: {
    name: "ETH",
    symbol: "eth",
    decimals: 18
  },
  rpcUrls: ["https://ropsten.infura.io/v3/9aa3d95b3bc440fa88raea12eaa4456161"],
  blockExplorerUrls: ["https://ropsten.etherscan.io"],
  trustWalletUid: "ethereum",
  displayName: "Ropsten"
}), _defineProperty(_networkConfigs, ChainIds.GOERLI, {
  chainId: utils$5.hexValue(ChainIds.GOERLI),
  chainName: "Goerli Test Network",
  nativeCurrency: {
    name: "gETH",
    symbol: "geth",
    decimals: 18
  },
  rpcUrls: ["https://goerli.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161"],
  blockExplorerUrls: ["https://goerli.etherscan.io"],
  trustWalletUid: "ethereum",
  displayName: "Goerli"
}), _defineProperty(_networkConfigs, ChainIds.OPTIMISM, {
  chainId: utils$5.hexValue(ChainIds.OPTIMISM),
  chainName: "Optimism",
  nativeCurrency: {
    name: "OETH",
    symbol: "oeth",
    decimals: 18
  },
  rpcUrls: ["https://mainnet.optimism.io/"],
  blockExplorerUrls: ["https://optimistic.etherscan.io"],
  trustWalletUid: "optimism",
  displayName: "Optimism"
}), _defineProperty(_networkConfigs, ChainIds.MATIC, {
  chainId: utils$5.hexValue(ChainIds.MATIC),
  chainName: "Polygon Mainnet",
  nativeCurrency: {
    name: "MATIC",
    symbol: "matic",
    decimals: 18
  },
  rpcUrls: ["https://matic-mainnet.chainstacklabs.com"],
  blockExplorerUrls: ["https://polygonscan.com"],
  trustWalletUid: "polygon",
  displayName: "Polygon"
}), _defineProperty(_networkConfigs, ChainIds.MUMBAI, {
  chainId: utils$5.hexValue(ChainIds.MUMBAI),
  chainName: "Polygon Mumbai Testnet",
  nativeCurrency: {
    name: "tMATIC",
    symbol: "tmatic",
    decimals: 18
  },
  rpcUrls: ["https://rpc-mumbai.maticvigil.com/"],
  blockExplorerUrls: ["https://mumbai.polygonscan.com"],
  trustWalletUid: "polygon",
  displayName: "Polygon Mumbai"
}), _defineProperty(_networkConfigs, ChainIds.BSC, {
  chainId: utils$5.hexValue(ChainIds.BSC),
  chainName: "Binance Smart Chain",
  nativeCurrency: {
    name: "BNB",
    symbol: "bnb",
    decimals: 18
  },
  rpcUrls: ["https://bsc-dataseed1.ninicoin.io"],
  blockExplorerUrls: ["https://bscscan.com"],
  trustWalletUid: "smartchain",
  displayName: "BNB Chain"
}), _defineProperty(_networkConfigs, ChainIds.BSC_T, {
  chainId: utils$5.hexValue(ChainIds.BSC_T),
  chainName: "Binance Smart Chain Testnet",
  nativeCurrency: {
    name: "tBNB",
    symbol: "tbnb",
    decimals: 18
  },
  rpcUrls: ["https://data-seed-prebsc-1-s1.binance.org:8545/"],
  blockExplorerUrls: ["https://testnet.bscscan.com"],
  trustWalletUid: "smartchain",
  displayName: "BNB Chain Test"
}), _defineProperty(_networkConfigs, ChainIds.LOCAL, {
  chainId: utils$5.hexValue(ChainIds.LOCAL),
  chainName: "Hardhat Network",
  nativeCurrency: {
    name: "hETH",
    symbol: "heth",
    decimals: 18
  },
  rpcUrls: ["http://127.0.0.1:8545"],
  blockExplorerUrls: ["http://127.0.0.1:8545"],
  trustWalletUid: "ethereum",
  displayName: "Hardhat"
}), _networkConfigs);
var pureConfigs = Object.keys(networkConfigs).reduce(function (acc, key) {
  var c = networkConfigs[key];
  return _objectSpread$1(_objectSpread$1({}, acc), {}, _defineProperty({}, key, {
    chainId: c.chainId,
    chainName: c.chainName,
    nativeCurrency: {
      name: c.nativeCurrency.name,
      symbol: c.nativeCurrency.symbol,
      decimals: c.nativeCurrency.decimals
    },
    rpcUrls: c.rpcUrls,
    blockExplorerUrls: c.blockExplorerUrls
  }));
}, {});
var supportedChainsEnv = process.env.NEXT_PUBLIC_CHAIN_IDS;
var supportedChains = supportedChainsEnv !== undefined ? JSON.parse(supportedChainsEnv) : [];
var rpcUrlByChains = Object.keys(networkConfigs).map(function (chainId) {
  return Number(chainId);
}).filter(function (chainId) {
  return supportedChains.includes(chainId);
}).reduce(function (acc, chainId) {
  return _objectSpread$1(_objectSpread$1({}, acc), {}, _defineProperty({}, chainId, networkConfigs[chainId].rpcUrls[0]));
}, {});
var providerByChains = Object.fromEntries(Object.entries(rpcUrlByChains).map(function (_ref) {
  var _ref2 = _slicedToArray(_ref, 2),
    chainId = _ref2[0],
    rpcUrl = _ref2[1];
  return [chainId, new JsonRpcProvider(rpcUrl)];
}));

var injected = new InjectedConnector({
  supportedChainIds: supportedChains
});
var POLLING_INTERVAL = 12000;
var walletConnect = new WalletConnectConnector({
  rpc: rpcUrlByChains,
  qrcode: true,
  pollingInterval: POLLING_INTERVAL
});
var connectorsByName = {
  injected: injected,
  walletConnect: walletConnect
};
var getLibrary = function getLibrary(provider) {
  var library = new Web3Provider(provider);
  library.pollingInterval = POLLING_INTERVAL;
  return library;
};
var connectorLocalStorageKey = "connectorId";

/*
  https://github.com/banksean wrapped Makoto Matsumoto and Takuji Nishimura's code in a namespace
  so it's better encapsulated. Now you can have multiple random number generators
  and they won't stomp all over eachother's state.

  If you want to use this as a substitute for Math.random(), use the random()
  method like so:

  var m = new MersenneTwister();
  var randomNumber = m.random();

  You can also call the other genrand_{foo}() methods on the instance.

  If you want to use a specific seed in order to get a repeatable random
  sequence, pass an integer into the constructor:

  var m = new MersenneTwister(123);

  and that will always produce the same random sequence.

  Sean McCullough (banksean@gmail.com)
*/

/*
   A C-program for MT19937, with initialization improved 2002/1/26.
   Coded by Takuji Nishimura and Makoto Matsumoto.

   Before using, initialize the state by using init_seed(seed)
   or init_by_array(init_key, key_length).

   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     3. The names of its contributors may not be used to endorse or promote
        products derived from this software without specific prior written
        permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


   Any feedback is very welcome.
   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
*/

var MersenneTwister$1 = function MersenneTwister(seed) {
  if (seed == undefined) {
    seed = new Date().getTime();
  }

  /* Period parameters */
  this.N = 624;
  this.M = 397;
  this.MATRIX_A = 0x9908b0df; /* constant vector a */
  this.UPPER_MASK = 0x80000000; /* most significant w-r bits */
  this.LOWER_MASK = 0x7fffffff; /* least significant r bits */

  this.mt = new Array(this.N); /* the array for the state vector */
  this.mti = this.N + 1; /* mti==N+1 means mt[N] is not initialized */

  if (seed.constructor == Array) {
    this.init_by_array(seed, seed.length);
  } else {
    this.init_seed(seed);
  }
};

/* initializes mt[N] with a seed */
/* origin name init_genrand */
MersenneTwister$1.prototype.init_seed = function (s) {
  this.mt[0] = s >>> 0;
  for (this.mti = 1; this.mti < this.N; this.mti++) {
    var s = this.mt[this.mti - 1] ^ this.mt[this.mti - 1] >>> 30;
    this.mt[this.mti] = (((s & 0xffff0000) >>> 16) * 1812433253 << 16) + (s & 0x0000ffff) * 1812433253 + this.mti;
    /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
    /* In the previous versions, MSBs of the seed affect   */
    /* only MSBs of the array mt[].                        */
    /* 2002/01/09 modified by Makoto Matsumoto             */
    this.mt[this.mti] >>>= 0;
    /* for >32 bit machines */
  }
};

/* initialize by an array with array-length */
/* init_key is the array for initializing keys */
/* key_length is its length */
/* slight change for C++, 2004/2/26 */
MersenneTwister$1.prototype.init_by_array = function (init_key, key_length) {
  var i, j, k;
  this.init_seed(19650218);
  i = 1;
  j = 0;
  k = this.N > key_length ? this.N : key_length;
  for (; k; k--) {
    var s = this.mt[i - 1] ^ this.mt[i - 1] >>> 30;
    this.mt[i] = (this.mt[i] ^ (((s & 0xffff0000) >>> 16) * 1664525 << 16) + (s & 0x0000ffff) * 1664525) + init_key[j] + j; /* non linear */
    this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
    i++;
    j++;
    if (i >= this.N) {
      this.mt[0] = this.mt[this.N - 1];
      i = 1;
    }
    if (j >= key_length) j = 0;
  }
  for (k = this.N - 1; k; k--) {
    var s = this.mt[i - 1] ^ this.mt[i - 1] >>> 30;
    this.mt[i] = (this.mt[i] ^ (((s & 0xffff0000) >>> 16) * 1566083941 << 16) + (s & 0x0000ffff) * 1566083941) - i; /* non linear */
    this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
    i++;
    if (i >= this.N) {
      this.mt[0] = this.mt[this.N - 1];
      i = 1;
    }
  }
  this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
};

/* generates a random number on [0,0xffffffff]-interval */
/* origin name genrand_int32 */
MersenneTwister$1.prototype.random_int = function () {
  var y;
  var mag01 = new Array(0x0, this.MATRIX_A);
  /* mag01[x] = x * MATRIX_A  for x=0,1 */

  if (this.mti >= this.N) {
    /* generate N words at one time */
    var kk;
    if (this.mti == this.N + 1) /* if init_seed() has not been called, */
      this.init_seed(5489); /* a default initial seed is used */

    for (kk = 0; kk < this.N - this.M; kk++) {
      y = this.mt[kk] & this.UPPER_MASK | this.mt[kk + 1] & this.LOWER_MASK;
      this.mt[kk] = this.mt[kk + this.M] ^ y >>> 1 ^ mag01[y & 0x1];
    }
    for (; kk < this.N - 1; kk++) {
      y = this.mt[kk] & this.UPPER_MASK | this.mt[kk + 1] & this.LOWER_MASK;
      this.mt[kk] = this.mt[kk + (this.M - this.N)] ^ y >>> 1 ^ mag01[y & 0x1];
    }
    y = this.mt[this.N - 1] & this.UPPER_MASK | this.mt[0] & this.LOWER_MASK;
    this.mt[this.N - 1] = this.mt[this.M - 1] ^ y >>> 1 ^ mag01[y & 0x1];
    this.mti = 0;
  }
  y = this.mt[this.mti++];

  /* Tempering */
  y ^= y >>> 11;
  y ^= y << 7 & 0x9d2c5680;
  y ^= y << 15 & 0xefc60000;
  y ^= y >>> 18;
  return y >>> 0;
};

/* generates a random number on [0,0x7fffffff]-interval */
/* origin name genrand_int31 */
MersenneTwister$1.prototype.random_int31 = function () {
  return this.random_int() >>> 1;
};

/* generates a random number on [0,1]-real-interval */
/* origin name genrand_real1 */
MersenneTwister$1.prototype.random_incl = function () {
  return this.random_int() * (1.0 / 4294967295.0);
  /* divided by 2^32-1 */
};

/* generates a random number on [0,1)-real-interval */
MersenneTwister$1.prototype.random = function () {
  return this.random_int() * (1.0 / 4294967296.0);
  /* divided by 2^32 */
};

/* generates a random number on (0,1)-real-interval */
/* origin name genrand_real3 */
MersenneTwister$1.prototype.random_excl = function () {
  return (this.random_int() + 0.5) * (1.0 / 4294967296.0);
  /* divided by 2^32 */
};

/* generates a random number on [0,1) with 53-bit resolution*/
/* origin name genrand_res53 */
MersenneTwister$1.prototype.random_long = function () {
  var a = this.random_int() >>> 5,
    b = this.random_int() >>> 6;
  return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0);
};

/* These real versions are due to Isaku Wada, 2002/01/09 added */

var mersenneTwister = MersenneTwister$1;

function newPaper(diameter, color) {
  var container = document.createElement('div');
  container.style.borderRadius = '50px';
  container.style.overflow = 'hidden';
  container.style.padding = '0px';
  container.style.margin = '0px';
  container.style.width = '' + diameter + 'px';
  container.style.height = '' + diameter + 'px';
  container.style.display = 'inline-block';
  container.style.background = color;
  return {
    container: container
  };
}
var paper = newPaper;

var clone = {exports: {}};

(function (module) {
	var clone = function () {

	  /**
	   * Clones (copies) an Object using deep copying.
	   *
	   * This function supports circular references by default, but if you are certain
	   * there are no circular references in your object, you can save some CPU time
	   * by calling clone(obj, false).
	   *
	   * Caution: if `circular` is false and `parent` contains circular references,
	   * your program may enter an infinite loop and crash.
	   *
	   * @param `parent` - the object to be cloned
	   * @param `circular` - set to true if the object to be cloned may contain
	   *    circular references. (optional - true by default)
	   * @param `depth` - set to a number if the object is only to be cloned to
	   *    a particular depth. (optional - defaults to Infinity)
	   * @param `prototype` - sets the prototype to be used when cloning an object.
	   *    (optional - defaults to parent prototype).
	  */
	  function clone(parent, circular, depth, prototype) {
	    if (typeof circular === 'object') {
	      depth = circular.depth;
	      prototype = circular.prototype;
	      circular.filter;
	      circular = circular.circular;
	    }
	    // maintain two arrays for circular references, where corresponding parents
	    // and children have the same index
	    var allParents = [];
	    var allChildren = [];
	    var useBuffer = typeof Buffer != 'undefined';
	    if (typeof circular == 'undefined') circular = true;
	    if (typeof depth == 'undefined') depth = Infinity;

	    // recurse this function so we don't reset allParents and allChildren
	    function _clone(parent, depth) {
	      // cloning null always returns null
	      if (parent === null) return null;
	      if (depth == 0) return parent;
	      var child;
	      var proto;
	      if (typeof parent != 'object') {
	        return parent;
	      }
	      if (clone.__isArray(parent)) {
	        child = [];
	      } else if (clone.__isRegExp(parent)) {
	        child = new RegExp(parent.source, __getRegExpFlags(parent));
	        if (parent.lastIndex) child.lastIndex = parent.lastIndex;
	      } else if (clone.__isDate(parent)) {
	        child = new Date(parent.getTime());
	      } else if (useBuffer && Buffer.isBuffer(parent)) {
	        if (Buffer.allocUnsafe) {
	          // Node.js >= 4.5.0
	          child = Buffer.allocUnsafe(parent.length);
	        } else {
	          // Older Node.js versions
	          child = new Buffer(parent.length);
	        }
	        parent.copy(child);
	        return child;
	      } else {
	        if (typeof prototype == 'undefined') {
	          proto = Object.getPrototypeOf(parent);
	          child = Object.create(proto);
	        } else {
	          child = Object.create(prototype);
	          proto = prototype;
	        }
	      }
	      if (circular) {
	        var index = allParents.indexOf(parent);
	        if (index != -1) {
	          return allChildren[index];
	        }
	        allParents.push(parent);
	        allChildren.push(child);
	      }
	      for (var i in parent) {
	        var attrs;
	        if (proto) {
	          attrs = Object.getOwnPropertyDescriptor(proto, i);
	        }
	        if (attrs && attrs.set == null) {
	          continue;
	        }
	        child[i] = _clone(parent[i], depth - 1);
	      }
	      return child;
	    }
	    return _clone(parent, depth);
	  }

	  /**
	   * Simple flat clone using prototype, accepts only objects, usefull for property
	   * override on FLAT configuration object (no nested props).
	   *
	   * USE WITH CAUTION! This may not behave as you wish if you do not know how this
	   * works.
	   */
	  clone.clonePrototype = function clonePrototype(parent) {
	    if (parent === null) return null;
	    var c = function c() {};
	    c.prototype = parent;
	    return new c();
	  };

	  // private utility functions

	  function __objToStr(o) {
	    return Object.prototype.toString.call(o);
	  }
	  clone.__objToStr = __objToStr;
	  function __isDate(o) {
	    return typeof o === 'object' && __objToStr(o) === '[object Date]';
	  }
	  clone.__isDate = __isDate;
	  function __isArray(o) {
	    return typeof o === 'object' && __objToStr(o) === '[object Array]';
	  }
	  clone.__isArray = __isArray;
	  function __isRegExp(o) {
	    return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
	  }
	  clone.__isRegExp = __isRegExp;
	  function __getRegExpFlags(re) {
	    var flags = '';
	    if (re.global) flags += 'g';
	    if (re.ignoreCase) flags += 'i';
	    if (re.multiline) flags += 'm';
	    return flags;
	  }
	  clone.__getRegExpFlags = __getRegExpFlags;
	  return clone;
	}();
	if (module.exports) {
	  module.exports = clone;
	}
} (clone));

var conversions$2 = {exports: {}};

var colorName = {
  "aliceblue": [240, 248, 255],
  "antiquewhite": [250, 235, 215],
  "aqua": [0, 255, 255],
  "aquamarine": [127, 255, 212],
  "azure": [240, 255, 255],
  "beige": [245, 245, 220],
  "bisque": [255, 228, 196],
  "black": [0, 0, 0],
  "blanchedalmond": [255, 235, 205],
  "blue": [0, 0, 255],
  "blueviolet": [138, 43, 226],
  "brown": [165, 42, 42],
  "burlywood": [222, 184, 135],
  "cadetblue": [95, 158, 160],
  "chartreuse": [127, 255, 0],
  "chocolate": [210, 105, 30],
  "coral": [255, 127, 80],
  "cornflowerblue": [100, 149, 237],
  "cornsilk": [255, 248, 220],
  "crimson": [220, 20, 60],
  "cyan": [0, 255, 255],
  "darkblue": [0, 0, 139],
  "darkcyan": [0, 139, 139],
  "darkgoldenrod": [184, 134, 11],
  "darkgray": [169, 169, 169],
  "darkgreen": [0, 100, 0],
  "darkgrey": [169, 169, 169],
  "darkkhaki": [189, 183, 107],
  "darkmagenta": [139, 0, 139],
  "darkolivegreen": [85, 107, 47],
  "darkorange": [255, 140, 0],
  "darkorchid": [153, 50, 204],
  "darkred": [139, 0, 0],
  "darksalmon": [233, 150, 122],
  "darkseagreen": [143, 188, 143],
  "darkslateblue": [72, 61, 139],
  "darkslategray": [47, 79, 79],
  "darkslategrey": [47, 79, 79],
  "darkturquoise": [0, 206, 209],
  "darkviolet": [148, 0, 211],
  "deeppink": [255, 20, 147],
  "deepskyblue": [0, 191, 255],
  "dimgray": [105, 105, 105],
  "dimgrey": [105, 105, 105],
  "dodgerblue": [30, 144, 255],
  "firebrick": [178, 34, 34],
  "floralwhite": [255, 250, 240],
  "forestgreen": [34, 139, 34],
  "fuchsia": [255, 0, 255],
  "gainsboro": [220, 220, 220],
  "ghostwhite": [248, 248, 255],
  "gold": [255, 215, 0],
  "goldenrod": [218, 165, 32],
  "gray": [128, 128, 128],
  "green": [0, 128, 0],
  "greenyellow": [173, 255, 47],
  "grey": [128, 128, 128],
  "honeydew": [240, 255, 240],
  "hotpink": [255, 105, 180],
  "indianred": [205, 92, 92],
  "indigo": [75, 0, 130],
  "ivory": [255, 255, 240],
  "khaki": [240, 230, 140],
  "lavender": [230, 230, 250],
  "lavenderblush": [255, 240, 245],
  "lawngreen": [124, 252, 0],
  "lemonchiffon": [255, 250, 205],
  "lightblue": [173, 216, 230],
  "lightcoral": [240, 128, 128],
  "lightcyan": [224, 255, 255],
  "lightgoldenrodyellow": [250, 250, 210],
  "lightgray": [211, 211, 211],
  "lightgreen": [144, 238, 144],
  "lightgrey": [211, 211, 211],
  "lightpink": [255, 182, 193],
  "lightsalmon": [255, 160, 122],
  "lightseagreen": [32, 178, 170],
  "lightskyblue": [135, 206, 250],
  "lightslategray": [119, 136, 153],
  "lightslategrey": [119, 136, 153],
  "lightsteelblue": [176, 196, 222],
  "lightyellow": [255, 255, 224],
  "lime": [0, 255, 0],
  "limegreen": [50, 205, 50],
  "linen": [250, 240, 230],
  "magenta": [255, 0, 255],
  "maroon": [128, 0, 0],
  "mediumaquamarine": [102, 205, 170],
  "mediumblue": [0, 0, 205],
  "mediumorchid": [186, 85, 211],
  "mediumpurple": [147, 112, 219],
  "mediumseagreen": [60, 179, 113],
  "mediumslateblue": [123, 104, 238],
  "mediumspringgreen": [0, 250, 154],
  "mediumturquoise": [72, 209, 204],
  "mediumvioletred": [199, 21, 133],
  "midnightblue": [25, 25, 112],
  "mintcream": [245, 255, 250],
  "mistyrose": [255, 228, 225],
  "moccasin": [255, 228, 181],
  "navajowhite": [255, 222, 173],
  "navy": [0, 0, 128],
  "oldlace": [253, 245, 230],
  "olive": [128, 128, 0],
  "olivedrab": [107, 142, 35],
  "orange": [255, 165, 0],
  "orangered": [255, 69, 0],
  "orchid": [218, 112, 214],
  "palegoldenrod": [238, 232, 170],
  "palegreen": [152, 251, 152],
  "paleturquoise": [175, 238, 238],
  "palevioletred": [219, 112, 147],
  "papayawhip": [255, 239, 213],
  "peachpuff": [255, 218, 185],
  "peru": [205, 133, 63],
  "pink": [255, 192, 203],
  "plum": [221, 160, 221],
  "powderblue": [176, 224, 230],
  "purple": [128, 0, 128],
  "rebeccapurple": [102, 51, 153],
  "red": [255, 0, 0],
  "rosybrown": [188, 143, 143],
  "royalblue": [65, 105, 225],
  "saddlebrown": [139, 69, 19],
  "salmon": [250, 128, 114],
  "sandybrown": [244, 164, 96],
  "seagreen": [46, 139, 87],
  "seashell": [255, 245, 238],
  "sienna": [160, 82, 45],
  "silver": [192, 192, 192],
  "skyblue": [135, 206, 235],
  "slateblue": [106, 90, 205],
  "slategray": [112, 128, 144],
  "slategrey": [112, 128, 144],
  "snow": [255, 250, 250],
  "springgreen": [0, 255, 127],
  "steelblue": [70, 130, 180],
  "tan": [210, 180, 140],
  "teal": [0, 128, 128],
  "thistle": [216, 191, 216],
  "tomato": [255, 99, 71],
  "turquoise": [64, 224, 208],
  "violet": [238, 130, 238],
  "wheat": [245, 222, 179],
  "white": [255, 255, 255],
  "whitesmoke": [245, 245, 245],
  "yellow": [255, 255, 0],
  "yellowgreen": [154, 205, 50]
};

/* MIT license */

var cssKeywords = colorName;

// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

var reverseKeywords = {};
for (var key$2 in cssKeywords) {
  if (cssKeywords.hasOwnProperty(key$2)) {
    reverseKeywords[cssKeywords[key$2]] = key$2;
  }
}
var convert$2 = conversions$2.exports = {
  rgb: {
    channels: 3,
    labels: 'rgb'
  },
  hsl: {
    channels: 3,
    labels: 'hsl'
  },
  hsv: {
    channels: 3,
    labels: 'hsv'
  },
  hwb: {
    channels: 3,
    labels: 'hwb'
  },
  cmyk: {
    channels: 4,
    labels: 'cmyk'
  },
  xyz: {
    channels: 3,
    labels: 'xyz'
  },
  lab: {
    channels: 3,
    labels: 'lab'
  },
  lch: {
    channels: 3,
    labels: 'lch'
  },
  hex: {
    channels: 1,
    labels: ['hex']
  },
  keyword: {
    channels: 1,
    labels: ['keyword']
  },
  ansi16: {
    channels: 1,
    labels: ['ansi16']
  },
  ansi256: {
    channels: 1,
    labels: ['ansi256']
  },
  hcg: {
    channels: 3,
    labels: ['h', 'c', 'g']
  },
  apple: {
    channels: 3,
    labels: ['r16', 'g16', 'b16']
  },
  gray: {
    channels: 1,
    labels: ['gray']
  }
};

// hide .channels and .labels properties
for (var model in convert$2) {
  if (convert$2.hasOwnProperty(model)) {
    if (!('channels' in convert$2[model])) {
      throw new Error('missing channels property: ' + model);
    }
    if (!('labels' in convert$2[model])) {
      throw new Error('missing channel labels property: ' + model);
    }
    if (convert$2[model].labels.length !== convert$2[model].channels) {
      throw new Error('channel and label counts mismatch: ' + model);
    }
    var channels = convert$2[model].channels;
    var labels = convert$2[model].labels;
    delete convert$2[model].channels;
    delete convert$2[model].labels;
    Object.defineProperty(convert$2[model], 'channels', {
      value: channels
    });
    Object.defineProperty(convert$2[model], 'labels', {
      value: labels
    });
  }
}
convert$2.rgb.hsl = function (rgb) {
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;
  var min = Math.min(r, g, b);
  var max = Math.max(r, g, b);
  var delta = max - min;
  var h;
  var s;
  var l;
  if (max === min) {
    h = 0;
  } else if (r === max) {
    h = (g - b) / delta;
  } else if (g === max) {
    h = 2 + (b - r) / delta;
  } else if (b === max) {
    h = 4 + (r - g) / delta;
  }
  h = Math.min(h * 60, 360);
  if (h < 0) {
    h += 360;
  }
  l = (min + max) / 2;
  if (max === min) {
    s = 0;
  } else if (l <= 0.5) {
    s = delta / (max + min);
  } else {
    s = delta / (2 - max - min);
  }
  return [h, s * 100, l * 100];
};
convert$2.rgb.hsv = function (rgb) {
  var rdif;
  var gdif;
  var bdif;
  var h;
  var s;
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;
  var v = Math.max(r, g, b);
  var diff = v - Math.min(r, g, b);
  var diffc = function diffc(c) {
    return (v - c) / 6 / diff + 1 / 2;
  };
  if (diff === 0) {
    h = s = 0;
  } else {
    s = diff / v;
    rdif = diffc(r);
    gdif = diffc(g);
    bdif = diffc(b);
    if (r === v) {
      h = bdif - gdif;
    } else if (g === v) {
      h = 1 / 3 + rdif - bdif;
    } else if (b === v) {
      h = 2 / 3 + gdif - rdif;
    }
    if (h < 0) {
      h += 1;
    } else if (h > 1) {
      h -= 1;
    }
  }
  return [h * 360, s * 100, v * 100];
};
convert$2.rgb.hwb = function (rgb) {
  var r = rgb[0];
  var g = rgb[1];
  var b = rgb[2];
  var h = convert$2.rgb.hsl(rgb)[0];
  var w = 1 / 255 * Math.min(r, Math.min(g, b));
  b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
  return [h, w * 100, b * 100];
};
convert$2.rgb.cmyk = function (rgb) {
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;
  var c;
  var m;
  var y;
  var k;
  k = Math.min(1 - r, 1 - g, 1 - b);
  c = (1 - r - k) / (1 - k) || 0;
  m = (1 - g - k) / (1 - k) || 0;
  y = (1 - b - k) / (1 - k) || 0;
  return [c * 100, m * 100, y * 100, k * 100];
};

/**
 * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
 * */
function comparativeDistance(x, y) {
  return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
}
convert$2.rgb.keyword = function (rgb) {
  var reversed = reverseKeywords[rgb];
  if (reversed) {
    return reversed;
  }
  var currentClosestDistance = Infinity;
  var currentClosestKeyword;
  for (var keyword in cssKeywords) {
    if (cssKeywords.hasOwnProperty(keyword)) {
      var value = cssKeywords[keyword];

      // Compute comparative distance
      var distance = comparativeDistance(rgb, value);

      // Check if its less, if so set as closest
      if (distance < currentClosestDistance) {
        currentClosestDistance = distance;
        currentClosestKeyword = keyword;
      }
    }
  }
  return currentClosestKeyword;
};
convert$2.keyword.rgb = function (keyword) {
  return cssKeywords[keyword];
};
convert$2.rgb.xyz = function (rgb) {
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;

  // assume sRGB
  r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
  g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
  b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
  var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
  var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
  var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
  return [x * 100, y * 100, z * 100];
};
convert$2.rgb.lab = function (rgb) {
  var xyz = convert$2.rgb.xyz(rgb);
  var x = xyz[0];
  var y = xyz[1];
  var z = xyz[2];
  var l;
  var a;
  var b;
  x /= 95.047;
  y /= 100;
  z /= 108.883;
  x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
  y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
  z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
  l = 116 * y - 16;
  a = 500 * (x - y);
  b = 200 * (y - z);
  return [l, a, b];
};
convert$2.hsl.rgb = function (hsl) {
  var h = hsl[0] / 360;
  var s = hsl[1] / 100;
  var l = hsl[2] / 100;
  var t1;
  var t2;
  var t3;
  var rgb;
  var val;
  if (s === 0) {
    val = l * 255;
    return [val, val, val];
  }
  if (l < 0.5) {
    t2 = l * (1 + s);
  } else {
    t2 = l + s - l * s;
  }
  t1 = 2 * l - t2;
  rgb = [0, 0, 0];
  for (var i = 0; i < 3; i++) {
    t3 = h + 1 / 3 * -(i - 1);
    if (t3 < 0) {
      t3++;
    }
    if (t3 > 1) {
      t3--;
    }
    if (6 * t3 < 1) {
      val = t1 + (t2 - t1) * 6 * t3;
    } else if (2 * t3 < 1) {
      val = t2;
    } else if (3 * t3 < 2) {
      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    } else {
      val = t1;
    }
    rgb[i] = val * 255;
  }
  return rgb;
};
convert$2.hsl.hsv = function (hsl) {
  var h = hsl[0];
  var s = hsl[1] / 100;
  var l = hsl[2] / 100;
  var smin = s;
  var lmin = Math.max(l, 0.01);
  var sv;
  var v;
  l *= 2;
  s *= l <= 1 ? l : 2 - l;
  smin *= lmin <= 1 ? lmin : 2 - lmin;
  v = (l + s) / 2;
  sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
  return [h, sv * 100, v * 100];
};
convert$2.hsv.rgb = function (hsv) {
  var h = hsv[0] / 60;
  var s = hsv[1] / 100;
  var v = hsv[2] / 100;
  var hi = Math.floor(h) % 6;
  var f = h - Math.floor(h);
  var p = 255 * v * (1 - s);
  var q = 255 * v * (1 - s * f);
  var t = 255 * v * (1 - s * (1 - f));
  v *= 255;
  switch (hi) {
    case 0:
      return [v, t, p];
    case 1:
      return [q, v, p];
    case 2:
      return [p, v, t];
    case 3:
      return [p, q, v];
    case 4:
      return [t, p, v];
    case 5:
      return [v, p, q];
  }
};
convert$2.hsv.hsl = function (hsv) {
  var h = hsv[0];
  var s = hsv[1] / 100;
  var v = hsv[2] / 100;
  var vmin = Math.max(v, 0.01);
  var lmin;
  var sl;
  var l;
  l = (2 - s) * v;
  lmin = (2 - s) * vmin;
  sl = s * vmin;
  sl /= lmin <= 1 ? lmin : 2 - lmin;
  sl = sl || 0;
  l /= 2;
  return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert$2.hwb.rgb = function (hwb) {
  var h = hwb[0] / 360;
  var wh = hwb[1] / 100;
  var bl = hwb[2] / 100;
  var ratio = wh + bl;
  var i;
  var v;
  var f;
  var n;

  // wh + bl cant be > 1
  if (ratio > 1) {
    wh /= ratio;
    bl /= ratio;
  }
  i = Math.floor(6 * h);
  v = 1 - bl;
  f = 6 * h - i;
  if ((i & 0x01) !== 0) {
    f = 1 - f;
  }
  n = wh + f * (v - wh); // linear interpolation

  var r;
  var g;
  var b;
  switch (i) {
    default:
    case 6:
    case 0:
      r = v;
      g = n;
      b = wh;
      break;
    case 1:
      r = n;
      g = v;
      b = wh;
      break;
    case 2:
      r = wh;
      g = v;
      b = n;
      break;
    case 3:
      r = wh;
      g = n;
      b = v;
      break;
    case 4:
      r = n;
      g = wh;
      b = v;
      break;
    case 5:
      r = v;
      g = wh;
      b = n;
      break;
  }
  return [r * 255, g * 255, b * 255];
};
convert$2.cmyk.rgb = function (cmyk) {
  var c = cmyk[0] / 100;
  var m = cmyk[1] / 100;
  var y = cmyk[2] / 100;
  var k = cmyk[3] / 100;
  var r;
  var g;
  var b;
  r = 1 - Math.min(1, c * (1 - k) + k);
  g = 1 - Math.min(1, m * (1 - k) + k);
  b = 1 - Math.min(1, y * (1 - k) + k);
  return [r * 255, g * 255, b * 255];
};
convert$2.xyz.rgb = function (xyz) {
  var x = xyz[0] / 100;
  var y = xyz[1] / 100;
  var z = xyz[2] / 100;
  var r;
  var g;
  var b;
  r = x * 3.2406 + y * -1.5372 + z * -0.4986;
  g = x * -0.9689 + y * 1.8758 + z * 0.0415;
  b = x * 0.0557 + y * -0.2040 + z * 1.0570;

  // assume sRGB
  r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;
  g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;
  b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;
  r = Math.min(Math.max(0, r), 1);
  g = Math.min(Math.max(0, g), 1);
  b = Math.min(Math.max(0, b), 1);
  return [r * 255, g * 255, b * 255];
};
convert$2.xyz.lab = function (xyz) {
  var x = xyz[0];
  var y = xyz[1];
  var z = xyz[2];
  var l;
  var a;
  var b;
  x /= 95.047;
  y /= 100;
  z /= 108.883;
  x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
  y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
  z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
  l = 116 * y - 16;
  a = 500 * (x - y);
  b = 200 * (y - z);
  return [l, a, b];
};
convert$2.lab.xyz = function (lab) {
  var l = lab[0];
  var a = lab[1];
  var b = lab[2];
  var x;
  var y;
  var z;
  y = (l + 16) / 116;
  x = a / 500 + y;
  z = y - b / 200;
  var y2 = Math.pow(y, 3);
  var x2 = Math.pow(x, 3);
  var z2 = Math.pow(z, 3);
  y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
  x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
  z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;
  x *= 95.047;
  y *= 100;
  z *= 108.883;
  return [x, y, z];
};
convert$2.lab.lch = function (lab) {
  var l = lab[0];
  var a = lab[1];
  var b = lab[2];
  var hr;
  var h;
  var c;
  hr = Math.atan2(b, a);
  h = hr * 360 / 2 / Math.PI;
  if (h < 0) {
    h += 360;
  }
  c = Math.sqrt(a * a + b * b);
  return [l, c, h];
};
convert$2.lch.lab = function (lch) {
  var l = lch[0];
  var c = lch[1];
  var h = lch[2];
  var a;
  var b;
  var hr;
  hr = h / 360 * 2 * Math.PI;
  a = c * Math.cos(hr);
  b = c * Math.sin(hr);
  return [l, a, b];
};
convert$2.rgb.ansi16 = function (args) {
  var r = args[0];
  var g = args[1];
  var b = args[2];
  var value = 1 in arguments ? arguments[1] : convert$2.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

  value = Math.round(value / 50);
  if (value === 0) {
    return 30;
  }
  var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
  if (value === 2) {
    ansi += 60;
  }
  return ansi;
};
convert$2.hsv.ansi16 = function (args) {
  // optimization here; we already know the value and don't need to get
  // it converted for us.
  return convert$2.rgb.ansi16(convert$2.hsv.rgb(args), args[2]);
};
convert$2.rgb.ansi256 = function (args) {
  var r = args[0];
  var g = args[1];
  var b = args[2];

  // we use the extended greyscale palette here, with the exception of
  // black and white. normal palette only has 4 greyscale shades.
  if (r === g && g === b) {
    if (r < 8) {
      return 16;
    }
    if (r > 248) {
      return 231;
    }
    return Math.round((r - 8) / 247 * 24) + 232;
  }
  var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
  return ansi;
};
convert$2.ansi16.rgb = function (args) {
  var color = args % 10;

  // handle greyscale
  if (color === 0 || color === 7) {
    if (args > 50) {
      color += 3.5;
    }
    color = color / 10.5 * 255;
    return [color, color, color];
  }
  var mult = (~~(args > 50) + 1) * 0.5;
  var r = (color & 1) * mult * 255;
  var g = (color >> 1 & 1) * mult * 255;
  var b = (color >> 2 & 1) * mult * 255;
  return [r, g, b];
};
convert$2.ansi256.rgb = function (args) {
  // handle greyscale
  if (args >= 232) {
    var c = (args - 232) * 10 + 8;
    return [c, c, c];
  }
  args -= 16;
  var rem;
  var r = Math.floor(args / 36) / 5 * 255;
  var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
  var b = rem % 6 / 5 * 255;
  return [r, g, b];
};
convert$2.rgb.hex = function (args) {
  var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);
  var string = integer.toString(16).toUpperCase();
  return '000000'.substring(string.length) + string;
};
convert$2.hex.rgb = function (args) {
  var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
  if (!match) {
    return [0, 0, 0];
  }
  var colorString = match[0];
  if (match[0].length === 3) {
    colorString = colorString.split('').map(function (_char) {
      return _char + _char;
    }).join('');
  }
  var integer = parseInt(colorString, 16);
  var r = integer >> 16 & 0xFF;
  var g = integer >> 8 & 0xFF;
  var b = integer & 0xFF;
  return [r, g, b];
};
convert$2.rgb.hcg = function (rgb) {
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;
  var max = Math.max(Math.max(r, g), b);
  var min = Math.min(Math.min(r, g), b);
  var chroma = max - min;
  var grayscale;
  var hue;
  if (chroma < 1) {
    grayscale = min / (1 - chroma);
  } else {
    grayscale = 0;
  }
  if (chroma <= 0) {
    hue = 0;
  } else if (max === r) {
    hue = (g - b) / chroma % 6;
  } else if (max === g) {
    hue = 2 + (b - r) / chroma;
  } else {
    hue = 4 + (r - g) / chroma + 4;
  }
  hue /= 6;
  hue %= 1;
  return [hue * 360, chroma * 100, grayscale * 100];
};
convert$2.hsl.hcg = function (hsl) {
  var s = hsl[1] / 100;
  var l = hsl[2] / 100;
  var c = 1;
  var f = 0;
  if (l < 0.5) {
    c = 2.0 * s * l;
  } else {
    c = 2.0 * s * (1.0 - l);
  }
  if (c < 1.0) {
    f = (l - 0.5 * c) / (1.0 - c);
  }
  return [hsl[0], c * 100, f * 100];
};
convert$2.hsv.hcg = function (hsv) {
  var s = hsv[1] / 100;
  var v = hsv[2] / 100;
  var c = s * v;
  var f = 0;
  if (c < 1.0) {
    f = (v - c) / (1 - c);
  }
  return [hsv[0], c * 100, f * 100];
};
convert$2.hcg.rgb = function (hcg) {
  var h = hcg[0] / 360;
  var c = hcg[1] / 100;
  var g = hcg[2] / 100;
  if (c === 0.0) {
    return [g * 255, g * 255, g * 255];
  }
  var pure = [0, 0, 0];
  var hi = h % 1 * 6;
  var v = hi % 1;
  var w = 1 - v;
  var mg = 0;
  switch (Math.floor(hi)) {
    case 0:
      pure[0] = 1;
      pure[1] = v;
      pure[2] = 0;
      break;
    case 1:
      pure[0] = w;
      pure[1] = 1;
      pure[2] = 0;
      break;
    case 2:
      pure[0] = 0;
      pure[1] = 1;
      pure[2] = v;
      break;
    case 3:
      pure[0] = 0;
      pure[1] = w;
      pure[2] = 1;
      break;
    case 4:
      pure[0] = v;
      pure[1] = 0;
      pure[2] = 1;
      break;
    default:
      pure[0] = 1;
      pure[1] = 0;
      pure[2] = w;
  }
  mg = (1.0 - c) * g;
  return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
};
convert$2.hcg.hsv = function (hcg) {
  var c = hcg[1] / 100;
  var g = hcg[2] / 100;
  var v = c + g * (1.0 - c);
  var f = 0;
  if (v > 0.0) {
    f = c / v;
  }
  return [hcg[0], f * 100, v * 100];
};
convert$2.hcg.hsl = function (hcg) {
  var c = hcg[1] / 100;
  var g = hcg[2] / 100;
  var l = g * (1.0 - c) + 0.5 * c;
  var s = 0;
  if (l > 0.0 && l < 0.5) {
    s = c / (2 * l);
  } else if (l >= 0.5 && l < 1.0) {
    s = c / (2 * (1 - l));
  }
  return [hcg[0], s * 100, l * 100];
};
convert$2.hcg.hwb = function (hcg) {
  var c = hcg[1] / 100;
  var g = hcg[2] / 100;
  var v = c + g * (1.0 - c);
  return [hcg[0], (v - c) * 100, (1 - v) * 100];
};
convert$2.hwb.hcg = function (hwb) {
  var w = hwb[1] / 100;
  var b = hwb[2] / 100;
  var v = 1 - b;
  var c = v - w;
  var g = 0;
  if (c < 1) {
    g = (v - c) / (1 - c);
  }
  return [hwb[0], c * 100, g * 100];
};
convert$2.apple.rgb = function (apple) {
  return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
};
convert$2.rgb.apple = function (rgb) {
  return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
};
convert$2.gray.rgb = function (args) {
  return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};
convert$2.gray.hsl = convert$2.gray.hsv = function (args) {
  return [0, 0, args[0]];
};
convert$2.gray.hwb = function (gray) {
  return [0, 100, gray[0]];
};
convert$2.gray.cmyk = function (gray) {
  return [0, 0, 0, gray[0]];
};
convert$2.gray.lab = function (gray) {
  return [gray[0], 0, 0];
};
convert$2.gray.hex = function (gray) {
  var val = Math.round(gray[0] / 100 * 255) & 0xFF;
  var integer = (val << 16) + (val << 8) + val;
  var string = integer.toString(16).toUpperCase();
  return '000000'.substring(string.length) + string;
};
convert$2.rgb.gray = function (rgb) {
  var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
  return [val / 255 * 100];
};

var conversions$1 = conversions$2.exports;

/*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

function buildGraph() {
  var graph = {};
  // https://jsperf.com/object-keys-vs-for-in-with-closure/3
  var models = Object.keys(conversions$1);
  for (var len = models.length, i = 0; i < len; i++) {
    graph[models[i]] = {
      // http://jsperf.com/1-vs-infinity
      // micro-opt, but this is simple.
      distance: -1,
      parent: null
    };
  }
  return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
  var graph = buildGraph();
  var queue = [fromModel]; // unshift -> queue -> pop

  graph[fromModel].distance = 0;
  while (queue.length) {
    var current = queue.pop();
    var adjacents = Object.keys(conversions$1[current]);
    for (var len = adjacents.length, i = 0; i < len; i++) {
      var adjacent = adjacents[i];
      var node = graph[adjacent];
      if (node.distance === -1) {
        node.distance = graph[current].distance + 1;
        node.parent = current;
        queue.unshift(adjacent);
      }
    }
  }
  return graph;
}
function link(from, to) {
  return function (args) {
    return to(from(args));
  };
}
function wrapConversion(toModel, graph) {
  var path = [graph[toModel].parent, toModel];
  var fn = conversions$1[graph[toModel].parent][toModel];
  var cur = graph[toModel].parent;
  while (graph[cur].parent) {
    path.unshift(graph[cur].parent);
    fn = link(conversions$1[graph[cur].parent][cur], fn);
    cur = graph[cur].parent;
  }
  fn.conversion = path;
  return fn;
}
var route$1 = function (fromModel) {
  var graph = deriveBFS(fromModel);
  var conversion = {};
  var models = Object.keys(graph);
  for (var len = models.length, i = 0; i < len; i++) {
    var toModel = models[i];
    var node = graph[toModel];
    if (node.parent === null) {
      // no possible conversion, or this node is the source model.
      continue;
    }
    conversion[toModel] = wrapConversion(toModel, graph);
  }
  return conversion;
};

var conversions = conversions$2.exports;
var route = route$1;
var convert$1 = {};
var models = Object.keys(conversions);
function wrapRaw(fn) {
  var wrappedFn = function wrappedFn(args) {
    if (args === undefined || args === null) {
      return args;
    }
    if (arguments.length > 1) {
      args = Array.prototype.slice.call(arguments);
    }
    return fn(args);
  };

  // preserve .conversion property if there is one
  if ('conversion' in fn) {
    wrappedFn.conversion = fn.conversion;
  }
  return wrappedFn;
}
function wrapRounded(fn) {
  var wrappedFn = function wrappedFn(args) {
    if (args === undefined || args === null) {
      return args;
    }
    if (arguments.length > 1) {
      args = Array.prototype.slice.call(arguments);
    }
    var result = fn(args);

    // we're assuming the result is an array here.
    // see notice in conversions.js; don't use box types
    // in conversion functions.
    if (typeof result === 'object') {
      for (var len = result.length, i = 0; i < len; i++) {
        result[i] = Math.round(result[i]);
      }
    }
    return result;
  };

  // preserve .conversion property if there is one
  if ('conversion' in fn) {
    wrappedFn.conversion = fn.conversion;
  }
  return wrappedFn;
}
models.forEach(function (fromModel) {
  convert$1[fromModel] = {};
  Object.defineProperty(convert$1[fromModel], 'channels', {
    value: conversions[fromModel].channels
  });
  Object.defineProperty(convert$1[fromModel], 'labels', {
    value: conversions[fromModel].labels
  });
  var routes = route(fromModel);
  var routeModels = Object.keys(routes);
  routeModels.forEach(function (toModel) {
    var fn = routes[toModel];
    convert$1[fromModel][toModel] = wrapRounded(fn);
    convert$1[fromModel][toModel].raw = wrapRaw(fn);
  });
});
var colorConvert = convert$1;

/* MIT license */

var colorNames = colorName;
var colorString = {
  getRgba: getRgba,
  getHsla: getHsla,
  getRgb: getRgb,
  getHsl: getHsl,
  getHwb: getHwb,
  getAlpha: getAlpha,
  hexString: hexString,
  rgbString: rgbString,
  rgbaString: rgbaString,
  percentString: percentString,
  percentaString: percentaString,
  hslString: hslString,
  hslaString: hslaString,
  hwbString: hwbString,
  keyword: keyword
};
function getRgba(string) {
  if (!string) {
    return;
  }
  var abbr = /^#([a-fA-F0-9]{3})$/,
    hex = /^#([a-fA-F0-9]{6})$/,
    rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,
    per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,
    keyword = /(\D+)/;
  var rgb = [0, 0, 0],
    a = 1,
    match = string.match(abbr);
  if (match) {
    match = match[1];
    for (var i = 0; i < rgb.length; i++) {
      rgb[i] = parseInt(match[i] + match[i], 16);
    }
  } else if (match = string.match(hex)) {
    match = match[1];
    for (var i = 0; i < rgb.length; i++) {
      rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
    }
  } else if (match = string.match(rgba)) {
    for (var i = 0; i < rgb.length; i++) {
      rgb[i] = parseInt(match[i + 1]);
    }
    a = parseFloat(match[4]);
  } else if (match = string.match(per)) {
    for (var i = 0; i < rgb.length; i++) {
      rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
    }
    a = parseFloat(match[4]);
  } else if (match = string.match(keyword)) {
    if (match[1] == "transparent") {
      return [0, 0, 0, 0];
    }
    rgb = colorNames[match[1]];
    if (!rgb) {
      return;
    }
  }
  for (var i = 0; i < rgb.length; i++) {
    rgb[i] = scale(rgb[i], 0, 255);
  }
  if (!a && a != 0) {
    a = 1;
  } else {
    a = scale(a, 0, 1);
  }
  rgb[3] = a;
  return rgb;
}
function getHsla(string) {
  if (!string) {
    return;
  }
  var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
  var match = string.match(hsl);
  if (match) {
    var alpha = parseFloat(match[4]);
    var h = scale(parseInt(match[1]), 0, 360),
      s = scale(parseFloat(match[2]), 0, 100),
      l = scale(parseFloat(match[3]), 0, 100),
      a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
    return [h, s, l, a];
  }
}
function getHwb(string) {
  if (!string) {
    return;
  }
  var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
  var match = string.match(hwb);
  if (match) {
    var alpha = parseFloat(match[4]);
    var h = scale(parseInt(match[1]), 0, 360),
      w = scale(parseFloat(match[2]), 0, 100),
      b = scale(parseFloat(match[3]), 0, 100),
      a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
    return [h, w, b, a];
  }
}
function getRgb(string) {
  var rgba = getRgba(string);
  return rgba && rgba.slice(0, 3);
}
function getHsl(string) {
  var hsla = getHsla(string);
  return hsla && hsla.slice(0, 3);
}
function getAlpha(string) {
  var vals = getRgba(string);
  if (vals) {
    return vals[3];
  } else if (vals = getHsla(string)) {
    return vals[3];
  } else if (vals = getHwb(string)) {
    return vals[3];
  }
}

// generators
function hexString(rgb) {
  return "#" + hexDouble(rgb[0]) + hexDouble(rgb[1]) + hexDouble(rgb[2]);
}
function rgbString(rgba, alpha) {
  if (alpha < 1 || rgba[3] && rgba[3] < 1) {
    return rgbaString(rgba, alpha);
  }
  return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
}
function rgbaString(rgba, alpha) {
  if (alpha === undefined) {
    alpha = rgba[3] !== undefined ? rgba[3] : 1;
  }
  return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ", " + alpha + ")";
}
function percentString(rgba, alpha) {
  if (alpha < 1 || rgba[3] && rgba[3] < 1) {
    return percentaString(rgba, alpha);
  }
  var r = Math.round(rgba[0] / 255 * 100),
    g = Math.round(rgba[1] / 255 * 100),
    b = Math.round(rgba[2] / 255 * 100);
  return "rgb(" + r + "%, " + g + "%, " + b + "%)";
}
function percentaString(rgba, alpha) {
  var r = Math.round(rgba[0] / 255 * 100),
    g = Math.round(rgba[1] / 255 * 100),
    b = Math.round(rgba[2] / 255 * 100);
  return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
}
function hslString(hsla, alpha) {
  if (alpha < 1 || hsla[3] && hsla[3] < 1) {
    return hslaString(hsla, alpha);
  }
  return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
}
function hslaString(hsla, alpha) {
  if (alpha === undefined) {
    alpha = hsla[3] !== undefined ? hsla[3] : 1;
  }
  return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " + alpha + ")";
}

// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
// (hwb have alpha optional & 1 is default value)
function hwbString(hwb, alpha) {
  if (alpha === undefined) {
    alpha = hwb[3] !== undefined ? hwb[3] : 1;
  }
  return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%" + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
}
function keyword(rgb) {
  return reverseNames[rgb.slice(0, 3)];
}

// helpers
function scale(num, min, max) {
  return Math.min(Math.max(min, num), max);
}
function hexDouble(num) {
  var str = num.toString(16).toUpperCase();
  return str.length < 2 ? "0" + str : str;
}

//create a list of reverse color names
var reverseNames = {};
for (var name$1 in colorNames) {
  reverseNames[colorNames[name$1]] = name$1;
}

/* MIT license */

var _clone = clone.exports;
var convert = colorConvert;
var string = colorString;
var Color$1 = function Color(obj) {
  if (obj instanceof Color) {
    return obj;
  }
  if (!(this instanceof Color)) {
    return new Color(obj);
  }
  this.values = {
    rgb: [0, 0, 0],
    hsl: [0, 0, 0],
    hsv: [0, 0, 0],
    hwb: [0, 0, 0],
    cmyk: [0, 0, 0, 0],
    alpha: 1
  };

  // parse Color() argument
  var vals;
  if (typeof obj === 'string') {
    vals = string.getRgba(obj);
    if (vals) {
      this.setValues('rgb', vals);
    } else if (vals = string.getHsla(obj)) {
      this.setValues('hsl', vals);
    } else if (vals = string.getHwb(obj)) {
      this.setValues('hwb', vals);
    } else {
      throw new Error('Unable to parse color from string "' + obj + '"');
    }
  } else if (typeof obj === 'object') {
    vals = obj;
    if (vals.r !== undefined || vals.red !== undefined) {
      this.setValues('rgb', vals);
    } else if (vals.l !== undefined || vals.lightness !== undefined) {
      this.setValues('hsl', vals);
    } else if (vals.v !== undefined || vals.value !== undefined) {
      this.setValues('hsv', vals);
    } else if (vals.w !== undefined || vals.whiteness !== undefined) {
      this.setValues('hwb', vals);
    } else if (vals.c !== undefined || vals.cyan !== undefined) {
      this.setValues('cmyk', vals);
    } else {
      throw new Error('Unable to parse color from object ' + JSON.stringify(obj));
    }
  }
};
Color$1.prototype = {
  rgb: function rgb() {
    return this.setSpace('rgb', arguments);
  },
  hsl: function hsl() {
    return this.setSpace('hsl', arguments);
  },
  hsv: function hsv() {
    return this.setSpace('hsv', arguments);
  },
  hwb: function hwb() {
    return this.setSpace('hwb', arguments);
  },
  cmyk: function cmyk() {
    return this.setSpace('cmyk', arguments);
  },
  rgbArray: function rgbArray() {
    return this.values.rgb;
  },
  hslArray: function hslArray() {
    return this.values.hsl;
  },
  hsvArray: function hsvArray() {
    return this.values.hsv;
  },
  hwbArray: function hwbArray() {
    if (this.values.alpha !== 1) {
      return this.values.hwb.concat([this.values.alpha]);
    }
    return this.values.hwb;
  },
  cmykArray: function cmykArray() {
    return this.values.cmyk;
  },
  rgbaArray: function rgbaArray() {
    var rgb = this.values.rgb;
    return rgb.concat([this.values.alpha]);
  },
  rgbaArrayNormalized: function rgbaArrayNormalized() {
    var rgb = this.values.rgb;
    var glRgba = [];
    for (var i = 0; i < 3; i++) {
      glRgba[i] = rgb[i] / 255;
    }
    glRgba.push(this.values.alpha);
    return glRgba;
  },
  hslaArray: function hslaArray() {
    var hsl = this.values.hsl;
    return hsl.concat([this.values.alpha]);
  },
  alpha: function alpha(val) {
    if (val === undefined) {
      return this.values.alpha;
    }
    this.setValues('alpha', val);
    return this;
  },
  red: function red(val) {
    return this.setChannel('rgb', 0, val);
  },
  green: function green(val) {
    return this.setChannel('rgb', 1, val);
  },
  blue: function blue(val) {
    return this.setChannel('rgb', 2, val);
  },
  hue: function hue(val) {
    if (val) {
      val %= 360;
      val = val < 0 ? 360 + val : val;
    }
    return this.setChannel('hsl', 0, val);
  },
  saturation: function saturation(val) {
    return this.setChannel('hsl', 1, val);
  },
  lightness: function lightness(val) {
    return this.setChannel('hsl', 2, val);
  },
  saturationv: function saturationv(val) {
    return this.setChannel('hsv', 1, val);
  },
  whiteness: function whiteness(val) {
    return this.setChannel('hwb', 1, val);
  },
  blackness: function blackness(val) {
    return this.setChannel('hwb', 2, val);
  },
  value: function value(val) {
    return this.setChannel('hsv', 2, val);
  },
  cyan: function cyan(val) {
    return this.setChannel('cmyk', 0, val);
  },
  magenta: function magenta(val) {
    return this.setChannel('cmyk', 1, val);
  },
  yellow: function yellow(val) {
    return this.setChannel('cmyk', 2, val);
  },
  black: function black(val) {
    return this.setChannel('cmyk', 3, val);
  },
  hexString: function hexString() {
    return string.hexString(this.values.rgb);
  },
  rgbString: function rgbString() {
    return string.rgbString(this.values.rgb, this.values.alpha);
  },
  rgbaString: function rgbaString() {
    return string.rgbaString(this.values.rgb, this.values.alpha);
  },
  percentString: function percentString() {
    return string.percentString(this.values.rgb, this.values.alpha);
  },
  hslString: function hslString() {
    return string.hslString(this.values.hsl, this.values.alpha);
  },
  hslaString: function hslaString() {
    return string.hslaString(this.values.hsl, this.values.alpha);
  },
  hwbString: function hwbString() {
    return string.hwbString(this.values.hwb, this.values.alpha);
  },
  keyword: function keyword() {
    return string.keyword(this.values.rgb, this.values.alpha);
  },
  rgbNumber: function rgbNumber() {
    return this.values.rgb[0] << 16 | this.values.rgb[1] << 8 | this.values.rgb[2];
  },
  luminosity: function luminosity() {
    // http://www.w3.org/TR/WCAG20/#relativeluminancedef
    var rgb = this.values.rgb;
    var lum = [];
    for (var i = 0; i < rgb.length; i++) {
      var chan = rgb[i] / 255;
      lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
    }
    return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
  },
  contrast: function contrast(color2) {
    // http://www.w3.org/TR/WCAG20/#contrast-ratiodef
    var lum1 = this.luminosity();
    var lum2 = color2.luminosity();
    if (lum1 > lum2) {
      return (lum1 + 0.05) / (lum2 + 0.05);
    }
    return (lum2 + 0.05) / (lum1 + 0.05);
  },
  level: function level(color2) {
    var contrastRatio = this.contrast(color2);
    if (contrastRatio >= 7.1) {
      return 'AAA';
    }
    return contrastRatio >= 4.5 ? 'AA' : '';
  },
  dark: function dark() {
    // YIQ equation from http://24ways.org/2010/calculating-color-contrast
    var rgb = this.values.rgb;
    var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
    return yiq < 128;
  },
  light: function light() {
    return !this.dark();
  },
  negate: function negate() {
    var rgb = [];
    for (var i = 0; i < 3; i++) {
      rgb[i] = 255 - this.values.rgb[i];
    }
    this.setValues('rgb', rgb);
    return this;
  },
  lighten: function lighten(ratio) {
    this.values.hsl[2] += this.values.hsl[2] * ratio;
    this.setValues('hsl', this.values.hsl);
    return this;
  },
  darken: function darken(ratio) {
    this.values.hsl[2] -= this.values.hsl[2] * ratio;
    this.setValues('hsl', this.values.hsl);
    return this;
  },
  saturate: function saturate(ratio) {
    this.values.hsl[1] += this.values.hsl[1] * ratio;
    this.setValues('hsl', this.values.hsl);
    return this;
  },
  desaturate: function desaturate(ratio) {
    this.values.hsl[1] -= this.values.hsl[1] * ratio;
    this.setValues('hsl', this.values.hsl);
    return this;
  },
  whiten: function whiten(ratio) {
    this.values.hwb[1] += this.values.hwb[1] * ratio;
    this.setValues('hwb', this.values.hwb);
    return this;
  },
  blacken: function blacken(ratio) {
    this.values.hwb[2] += this.values.hwb[2] * ratio;
    this.setValues('hwb', this.values.hwb);
    return this;
  },
  greyscale: function greyscale() {
    var rgb = this.values.rgb;
    // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
    var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
    this.setValues('rgb', [val, val, val]);
    return this;
  },
  clearer: function clearer(ratio) {
    this.setValues('alpha', this.values.alpha - this.values.alpha * ratio);
    return this;
  },
  opaquer: function opaquer(ratio) {
    this.setValues('alpha', this.values.alpha + this.values.alpha * ratio);
    return this;
  },
  rotate: function rotate(degrees) {
    var hue = this.values.hsl[0];
    hue = (hue + degrees) % 360;
    hue = hue < 0 ? 360 + hue : hue;
    this.values.hsl[0] = hue;
    this.setValues('hsl', this.values.hsl);
    return this;
  },
  /**
   * Ported from sass implementation in C
   * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
   */
  mix: function mix(mixinColor, weight) {
    var color1 = this;
    var color2 = mixinColor;
    var p = weight === undefined ? 0.5 : weight;
    var w = 2 * p - 1;
    var a = color1.alpha() - color2.alpha();
    var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
    var w2 = 1 - w1;
    return this.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue()).alpha(color1.alpha() * p + color2.alpha() * (1 - p));
  },
  toJSON: function toJSON() {
    return this.rgb();
  },
  clone: function clone() {
    var col = new Color$1();
    col.values = _clone(this.values);
    return col;
  }
};
Color$1.prototype.getValues = function (space) {
  var vals = {};
  for (var i = 0; i < space.length; i++) {
    vals[space.charAt(i)] = this.values[space][i];
  }
  if (this.values.alpha !== 1) {
    vals.a = this.values.alpha;
  }

  // {r: 255, g: 255, b: 255, a: 0.4}
  return vals;
};
Color$1.prototype.setValues = function (space, vals) {
  var spaces = {
    rgb: ['red', 'green', 'blue'],
    hsl: ['hue', 'saturation', 'lightness'],
    hsv: ['hue', 'saturation', 'value'],
    hwb: ['hue', 'whiteness', 'blackness'],
    cmyk: ['cyan', 'magenta', 'yellow', 'black']
  };
  var maxes = {
    rgb: [255, 255, 255],
    hsl: [360, 100, 100],
    hsv: [360, 100, 100],
    hwb: [360, 100, 100],
    cmyk: [100, 100, 100, 100]
  };
  var i;
  var alpha = 1;
  if (space === 'alpha') {
    alpha = vals;
  } else if (vals.length) {
    // [10, 10, 10]
    this.values[space] = vals.slice(0, space.length);
    alpha = vals[space.length];
  } else if (vals[space.charAt(0)] !== undefined) {
    // {r: 10, g: 10, b: 10}
    for (i = 0; i < space.length; i++) {
      this.values[space][i] = vals[space.charAt(i)];
    }
    alpha = vals.a;
  } else if (vals[spaces[space][0]] !== undefined) {
    // {red: 10, green: 10, blue: 10}
    var chans = spaces[space];
    for (i = 0; i < space.length; i++) {
      this.values[space][i] = vals[chans[i]];
    }
    alpha = vals.alpha;
  }
  this.values.alpha = Math.max(0, Math.min(1, alpha === undefined ? this.values.alpha : alpha));
  if (space === 'alpha') {
    return false;
  }
  var capped;

  // cap values of the space prior converting all values
  for (i = 0; i < space.length; i++) {
    capped = Math.max(0, Math.min(maxes[space][i], this.values[space][i]));
    this.values[space][i] = Math.round(capped);
  }

  // convert to all the other color spaces
  for (var sname in spaces) {
    if (sname !== space) {
      this.values[sname] = convert[space][sname](this.values[space]);
    }

    // cap values
    for (i = 0; i < sname.length; i++) {
      capped = Math.max(0, Math.min(maxes[sname][i], this.values[sname][i]));
      this.values[sname][i] = Math.round(capped);
    }
  }
  return true;
};
Color$1.prototype.setSpace = function (space, args) {
  var vals = args[0];
  if (vals === undefined) {
    // color.rgb()
    return this.getValues(space);
  }

  // color.rgb(10, 10, 10)
  if (typeof vals === 'number') {
    vals = Array.prototype.slice.call(args);
  }
  this.setValues(space, vals);
  return this;
};
Color$1.prototype.setChannel = function (space, index, val) {
  if (val === undefined) {
    // color.red()
    return this.values[space][index];
  } else if (val === this.values[space][index]) {
    // color.red(color.red())
    return this;
  }

  // color.red(100)
  this.values[space][index] = val;
  this.setValues(space, this.values[space]);
  return this;
};
var color = Color$1;

var colors$1 = ['#01888C',
// teal
'#FC7500',
// bright orange
'#034F5D',
// dark teal
'#F73F01',
// orangered
'#FC1960',
// magenta
'#C7144C',
// raspberry
'#F3C100',
// goldenrod
'#1598F2',
// lightning blue
'#2465E1',
// sail blue
'#F19E02' // gold
];

var MersenneTwister = mersenneTwister;
var paperGen = paper;
var Color = color;
var colors = colors$1;
var shapeCount = 4;
var svgns = 'http://www.w3.org/2000/svg';
var jazzicon = generateIdenticon;
var generator;
function generateIdenticon(diameter, seed) {
  generator = new MersenneTwister(seed);
  var remainingColors = hueShift(colors.slice(), generator);
  var elements = paperGen(diameter, genColor(remainingColors));
  var container = elements.container;
  var svg = document.createElementNS(svgns, 'svg');
  svg.setAttributeNS(null, 'x', '0');
  svg.setAttributeNS(null, 'y', '0');
  svg.setAttributeNS(null, 'width', diameter);
  svg.setAttributeNS(null, 'height', diameter);
  container.appendChild(svg);
  for (var i = 0; i < shapeCount - 1; i++) {
    genShape(remainingColors, diameter, i, shapeCount - 1, svg);
  }
  return container;
}
function genShape(remainingColors, diameter, i, total, svg) {
  var center = diameter / 2;
  var shape = document.createElementNS(svgns, 'rect');
  shape.setAttributeNS(null, 'x', '0');
  shape.setAttributeNS(null, 'y', '0');
  shape.setAttributeNS(null, 'width', diameter);
  shape.setAttributeNS(null, 'height', diameter);
  var firstRot = generator.random();
  var angle = Math.PI * 2 * firstRot;
  var velocity = diameter / total * generator.random() + i * diameter / total;
  var tx = Math.cos(angle) * velocity;
  var ty = Math.sin(angle) * velocity;
  var translate = 'translate(' + tx + ' ' + ty + ')';

  // Third random is a shape rotation on top of all of that.
  var secondRot = generator.random();
  var rot = firstRot * 360 + secondRot * 180;
  var rotate = 'rotate(' + rot.toFixed(1) + ' ' + center + ' ' + center + ')';
  var transform = translate + ' ' + rotate;
  shape.setAttributeNS(null, 'transform', transform);
  var fill = genColor(remainingColors);
  shape.setAttributeNS(null, 'fill', fill);
  svg.appendChild(shape);
}
function genColor(colors) {
  generator.random();
  var idx = Math.floor(colors.length * generator.random());
  var color = colors.splice(idx, 1)[0];
  return color;
}
var wobble = 30;
function hueShift(colors, generator) {
  var amount = generator.random() * 30 - wobble / 2;
  return colors.map(function (hex) {
    var color = Color(hex);
    color.rotate(amount);
    return color.hexString();
  });
}

/**
 * @param {Object}  params
 * @param {string} params.address - The contract address
 * @param {ethers.ContractInterface} params.abi - The contract ABI
 * @param {ethers.Signer} params.signer - Tx signer
 * @param {number} params.chainId - chainId
 */
var getContract = function getContract(_ref) {
  var address = _ref.address,
    abi = _ref.abi,
    signer = _ref.signer,
    chainId = _ref.chainId;
  var provider = signer || new JsonRpcProvider(rpcUrlByChains[chainId]);
  return new Contract(address, abi, provider);
};

// есть shortenAddress in vanilla/utils
var formatAddress = function formatAddress(address) {
  var slice = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  if (slice) {
    return address.length > slice ? "".concat(address.slice(0, slice), "...") : address;
  }
  if (!utils$5.isAddress(address)) {
    return address;
  }
  return "".concat(address.slice(0, 6), "...").concat(address.slice(-4));
};
var iconFromAddress = function iconFromAddress(address) {
  var diameter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;
  return jazzicon(diameter, parseInt(address.slice(2, 10), 16));
};
var getExplorerUrl = function getExplorerUrl() {
  var chainId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  return networkConfigs[chainId].blockExplorerUrls[0];
};

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}

/**
 * @param {providers.Web3Provider} provider
 * @param {number} chainId
 * @returns
 */
var setupNetwork = function setupNetwork(provider, chainId) {
  var createNotification = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (props) {
    return console.error(props);
  };
  try {
    var hexChainId = utils$5.hexValue(chainId);
    console.log("wallet_switchEthereumChain", hexChainId);
    // check if the chain to connect to is installed
    return provider.request({
      method: "wallet_switchEthereumChain",
      params: [{
        chainId: hexChainId
      }] // chainId must be in hexadecimal numbers
    })["catch"](function (err) {
      console.log("wallet_switchEthereumChain catch 1", err);
      return provider.request({
        method: "wallet_addEthereumChain",
        params: [pureConfigs[chainId]]
      })["catch"](function (addError) {
        console.error("wallet_addEthereumChain catch 1", addError);
      });
    });
  } catch (error) {
    createNotification({
      title: "Failed to setup the network in Metamask:",
      message: error.message,
      event: "error"
    });
    console.error("Failed to setup the network in Metamask:", error);
    return false;
  }
};

/**
 *
 * @param {providers.Web3Provider} provider
 * @param {string} tokenAddress
 * @param {string} tokenSymbol
 * @param {number} tokenDecimals
 */
var registerToken = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(provider, tokenAddress, tokenSymbol, tokenDecimals) {
    var tokenAdded;
    return regenerator.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return provider.request({
              method: "wallet_watchAsset",
              params: {
                type: "ERC20",
                options: {
                  address: tokenAddress,
                  symbol: tokenSymbol,
                  decimals: tokenDecimals
                }
              }
            });
          case 2:
            tokenAdded = _context.sent;
            return _context.abrupt("return", tokenAdded);
          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return function registerToken(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();
var signMessage = function signMessage(_ref2) {
  var account = _ref2.account,
    message = _ref2.message,
    provider = _ref2.provider;
  var signer = provider.getSigner(account);
  utils$5.hexlify(utils$5.toUtf8Bytes(message));
  return signer.signMessage(message);
};
var isMobile = typeof window === "undefined" ? false : window.innerWidth < 470;
var signTypedMessage = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(_ref3) {
    var _provider$provider;
    var provider, account, expires, signatureElements, domain, types, message, _signTypedMessage, signature;
    return regenerator.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            provider = _ref3.provider, account = _ref3.account, expires = _ref3.expires, signatureElements = _ref3.signatureElements;
            domain = signatureElements.domain, types = signatureElements.types, message = signatureElements.message;
            message.expires = expires;
            message.account = account.toLowerCase();

            /**
             * Wallet Connect does not sign the message correctly unless you use their method
             * @see https://github.com/WalletConnect/walletconnect-monorepo/issues/462
             */
            if (!((_provider$provider = provider.provider) !== null && _provider$provider !== void 0 && _provider$provider.wc)) {
              _context2.next = 8;
              break;
            }
            _signTypedMessage = function _signTypedMessage() {
              return provider.send("eth_signTypedData", [account.toLowerCase(), JSON.stringify(signatureElements)]);
            };
            signature = isMobile ? Promise.race([_signTypedMessage(), _signTypedMessage()]) : _signTypedMessage();
            return _context2.abrupt("return", signature);
          case 8:
            delete types.EIP712Domain;
            return _context2.abrupt("return", provider.getSigner(account)._signTypedData(domain, types, message));
          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return function signTypedMessage(_x5) {
    return _ref4.apply(this, arguments);
  };
}();

var walletConfigs = [{
  title: "Metamask",
  icon: "MetaMask",
  connectorId: "injected",
  uid: "metamask",
  background: "linear-gradient(268.56deg, #FFC632 17.64%, #FF9900 91.11%)"
}, {
  title: "WalletConnect",
  icon: "WalletConnect",
  connectorId: "walletConnect",
  uid: "walletConnect",
  background: "linear-gradient(268.56deg, #C070FF 17.64%, #9C4FFF 91.11%)"
}];

function n(n) {
  for (var r = arguments.length, t = Array(r > 1 ? r - 1 : 0), e = 1; e < r; e++) {
    t[e - 1] = arguments[e];
  }
  if ("production" !== process.env.NODE_ENV) {
    var i = Y[n],
      o = i ? "function" == typeof i ? i.apply(null, t) : i : "unknown error nr: " + n;
    throw Error("[Immer] " + o);
  }
  throw Error("[Immer] minified error nr: " + n + (t.length ? " " + t.map(function (n) {
    return "'" + n + "'";
  }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
}
function r(n) {
  return !!n && !!n[Q];
}
function t(n) {
  var r;
  return !!n && (function (n) {
    if (!n || "object" != typeof n) return !1;
    var r = Object.getPrototypeOf(n);
    if (null === r) return !0;
    var t = Object.hasOwnProperty.call(r, "constructor") && r.constructor;
    return t === Object || "function" == typeof t && Function.toString.call(t) === Z;
  }(n) || Array.isArray(n) || !!n[L] || !!(null === (r = n.constructor) || void 0 === r ? void 0 : r[L]) || s(n) || v(n));
}
function i(n, r, t) {
  void 0 === t && (t = !1), 0 === o(n) ? (t ? Object.keys : nn)(n).forEach(function (e) {
    t && "symbol" == typeof e || r(e, n[e], n);
  }) : n.forEach(function (t, e) {
    return r(e, t, n);
  });
}
function o(n) {
  var r = n[Q];
  return r ? r.i > 3 ? r.i - 4 : r.i : Array.isArray(n) ? 1 : s(n) ? 2 : v(n) ? 3 : 0;
}
function u(n, r) {
  return 2 === o(n) ? n.has(r) : Object.prototype.hasOwnProperty.call(n, r);
}
function a(n, r) {
  return 2 === o(n) ? n.get(r) : n[r];
}
function f(n, r, t) {
  var e = o(n);
  2 === e ? n.set(r, t) : 3 === e ? n.add(t) : n[r] = t;
}
function c(n, r) {
  return n === r ? 0 !== n || 1 / n == 1 / r : n != n && r != r;
}
function s(n) {
  return X && n instanceof Map;
}
function v(n) {
  return q && n instanceof Set;
}
function p(n) {
  return n.o || n.t;
}
function l(n) {
  if (Array.isArray(n)) return Array.prototype.slice.call(n);
  var r = rn(n);
  delete r[Q];
  for (var t = nn(r), e = 0; e < t.length; e++) {
    var i = t[e],
      o = r[i];
    !1 === o.writable && (o.writable = !0, o.configurable = !0), (o.get || o.set) && (r[i] = {
      configurable: !0,
      writable: !0,
      enumerable: o.enumerable,
      value: n[i]
    });
  }
  return Object.create(Object.getPrototypeOf(n), r);
}
function d(n, e) {
  return void 0 === e && (e = !1), y(n) || r(n) || !t(n) || (o(n) > 1 && (n.set = n.add = n.clear = n["delete"] = h), Object.freeze(n), e && i(n, function (n, r) {
    return d(r, !0);
  }, !0)), n;
}
function h() {
  n(2);
}
function y(n) {
  return null == n || "object" != typeof n || Object.isFrozen(n);
}
function b(r) {
  var t = tn[r];
  return t || n(18, r), t;
}
function m(n, r) {
  tn[n] || (tn[n] = r);
}
function _() {
  return "production" === process.env.NODE_ENV || U || n(0), U;
}
function j(n, r) {
  r && (b("Patches"), n.u = [], n.s = [], n.v = r);
}
function g(n) {
  O(n), n.p.forEach(S), n.p = null;
}
function O(n) {
  n === U && (U = n.l);
}
function w(n) {
  return U = {
    p: [],
    l: U,
    h: n,
    m: !0,
    _: 0
  };
}
function S(n) {
  var r = n[Q];
  0 === r.i || 1 === r.i ? r.j() : r.g = !0;
}
function P(r, e) {
  e._ = e.p.length;
  var i = e.p[0],
    o = void 0 !== r && r !== i;
  return e.h.O || b("ES5").S(e, r, o), o ? (i[Q].P && (g(e), n(4)), t(r) && (r = M(e, r), e.l || x(e, r)), e.u && b("Patches").M(i[Q].t, r, e.u, e.s)) : r = M(e, i, []), g(e), e.u && e.v(e.u, e.s), r !== H ? r : void 0;
}
function M(n, r, t) {
  if (y(r)) return r;
  var e = r[Q];
  if (!e) return i(r, function (i, o) {
    return A(n, e, r, i, o, t);
  }, !0), r;
  if (e.A !== n) return r;
  if (!e.P) return x(n, e.t, !0), e.t;
  if (!e.I) {
    e.I = !0, e.A._--;
    var o = 4 === e.i || 5 === e.i ? e.o = l(e.k) : e.o,
      u = o,
      a = !1;
    3 === e.i && (u = new Set(o), o.clear(), a = !0), i(u, function (r, i) {
      return A(n, e, o, r, i, t, a);
    }), x(n, o, !1), t && n.u && b("Patches").N(e, t, n.u, n.s);
  }
  return e.o;
}
function A(e, i, o, a, c, s, v) {
  if ("production" !== process.env.NODE_ENV && c === o && n(5), r(c)) {
    var p = M(e, c, s && i && 3 !== i.i && !u(i.R, a) ? s.concat(a) : void 0);
    if (f(o, a, p), !r(p)) return;
    e.m = !1;
  } else v && o.add(c);
  if (t(c) && !y(c)) {
    if (!e.h.D && e._ < 1) return;
    M(e, c), i && i.A.l || x(e, c);
  }
}
function x(n, r, t) {
  void 0 === t && (t = !1), !n.l && n.h.D && n.m && d(r, t);
}
function z(n, r) {
  var t = n[Q];
  return (t ? p(t) : n)[r];
}
function I(n, r) {
  if (r in n) for (var t = Object.getPrototypeOf(n); t;) {
    var e = Object.getOwnPropertyDescriptor(t, r);
    if (e) return e;
    t = Object.getPrototypeOf(t);
  }
}
function k(n) {
  n.P || (n.P = !0, n.l && k(n.l));
}
function E(n) {
  n.o || (n.o = l(n.t));
}
function N(n, r, t) {
  var e = s(r) ? b("MapSet").F(r, t) : v(r) ? b("MapSet").T(r, t) : n.O ? function (n, r) {
    var t = Array.isArray(n),
      e = {
        i: t ? 1 : 0,
        A: r ? r.A : _(),
        P: !1,
        I: !1,
        R: {},
        l: r,
        t: n,
        k: null,
        o: null,
        j: null,
        C: !1
      },
      i = e,
      o = en;
    t && (i = [e], o = on);
    var u = Proxy.revocable(i, o),
      a = u.revoke,
      f = u.proxy;
    return e.k = f, e.j = a, f;
  }(r, t) : b("ES5").J(r, t);
  return (t ? t.A : _()).p.push(e), e;
}
function R(e) {
  return r(e) || n(22, e), function n(r) {
    if (!t(r)) return r;
    var e,
      u = r[Q],
      c = o(r);
    if (u) {
      if (!u.P && (u.i < 4 || !b("ES5").K(u))) return u.t;
      u.I = !0, e = D(r, c), u.I = !1;
    } else e = D(r, c);
    return i(e, function (r, t) {
      u && a(u.t, r) === t || f(e, r, n(t));
    }), 3 === c ? new Set(e) : e;
  }(e);
}
function D(n, r) {
  switch (r) {
    case 2:
      return new Map(n);
    case 3:
      return Array.from(n);
  }
  return l(n);
}
function F() {
  function t(n, r) {
    var t = s[n];
    return t ? t.enumerable = r : s[n] = t = {
      configurable: !0,
      enumerable: r,
      get: function get() {
        var r = this[Q];
        return "production" !== process.env.NODE_ENV && f(r), en.get(r, n);
      },
      set: function set(r) {
        var t = this[Q];
        "production" !== process.env.NODE_ENV && f(t), en.set(t, n, r);
      }
    }, t;
  }
  function e(n) {
    for (var r = n.length - 1; r >= 0; r--) {
      var t = n[r][Q];
      if (!t.P) switch (t.i) {
        case 5:
          a(t) && k(t);
          break;
        case 4:
          o(t) && k(t);
      }
    }
  }
  function o(n) {
    for (var r = n.t, t = n.k, e = nn(t), i = e.length - 1; i >= 0; i--) {
      var o = e[i];
      if (o !== Q) {
        var a = r[o];
        if (void 0 === a && !u(r, o)) return !0;
        var f = t[o],
          s = f && f[Q];
        if (s ? s.t !== a : !c(f, a)) return !0;
      }
    }
    var v = !!r[Q];
    return e.length !== nn(r).length + (v ? 0 : 1);
  }
  function a(n) {
    var r = n.k;
    if (r.length !== n.t.length) return !0;
    var t = Object.getOwnPropertyDescriptor(r, r.length - 1);
    if (t && !t.get) return !0;
    for (var e = 0; e < r.length; e++) {
      if (!r.hasOwnProperty(e)) return !0;
    }
    return !1;
  }
  function f(r) {
    r.g && n(3, JSON.stringify(p(r)));
  }
  var s = {};
  m("ES5", {
    J: function J(n, r) {
      var e = Array.isArray(n),
        i = function (n, r) {
          if (n) {
            for (var e = Array(r.length), i = 0; i < r.length; i++) {
              Object.defineProperty(e, "" + i, t(i, !0));
            }
            return e;
          }
          var o = rn(r);
          delete o[Q];
          for (var u = nn(o), a = 0; a < u.length; a++) {
            var f = u[a];
            o[f] = t(f, n || !!o[f].enumerable);
          }
          return Object.create(Object.getPrototypeOf(r), o);
        }(e, n),
        o = {
          i: e ? 5 : 4,
          A: r ? r.A : _(),
          P: !1,
          I: !1,
          R: {},
          l: r,
          t: n,
          k: i,
          o: null,
          g: !1,
          C: !1
        };
      return Object.defineProperty(i, Q, {
        value: o,
        writable: !0
      }), i;
    },
    S: function S(n, t, o) {
      o ? r(t) && t[Q].A === n && e(n.p) : (n.u && function n(r) {
        if (r && "object" == typeof r) {
          var t = r[Q];
          if (t) {
            var e = t.t,
              o = t.k,
              f = t.R,
              c = t.i;
            if (4 === c) i(o, function (r) {
              r !== Q && (void 0 !== e[r] || u(e, r) ? f[r] || n(o[r]) : (f[r] = !0, k(t)));
            }), i(e, function (n) {
              void 0 !== o[n] || u(o, n) || (f[n] = !1, k(t));
            });else if (5 === c) {
              if (a(t) && (k(t), f.length = !0), o.length < e.length) for (var s = o.length; s < e.length; s++) {
                f[s] = !1;
              } else for (var v = e.length; v < o.length; v++) {
                f[v] = !0;
              }
              for (var p = Math.min(o.length, e.length), l = 0; l < p; l++) {
                o.hasOwnProperty(l) || (f[l] = !0), void 0 === f[l] && n(o[l]);
              }
            }
          }
        }
      }(n.p[0]), e(n.p));
    },
    K: function K(n) {
      return 4 === n.i ? o(n) : a(n);
    }
  });
}
var G,
  U,
  W = "undefined" != typeof Symbol && "symbol" == typeof Symbol("x"),
  X = "undefined" != typeof Map,
  q = "undefined" != typeof Set,
  B = "undefined" != typeof Proxy && void 0 !== Proxy.revocable && "undefined" != typeof Reflect,
  H = W ? Symbol["for"]("immer-nothing") : ((G = {})["immer-nothing"] = !0, G),
  L = W ? Symbol["for"]("immer-draftable") : "__$immer_draftable",
  Q = W ? Symbol["for"]("immer-state") : "__$immer_state",
  Y = {
    0: "Illegal state",
    1: "Immer drafts cannot have computed properties",
    2: "This object has been frozen and should not be mutated",
    3: function _(n) {
      return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + n;
    },
    4: "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",
    5: "Immer forbids circular references",
    6: "The first or second argument to `produce` must be a function",
    7: "The third argument to `produce` must be a function or undefined",
    8: "First argument to `createDraft` must be a plain object, an array, or an immerable object",
    9: "First argument to `finishDraft` must be a draft returned by `createDraft`",
    10: "The given draft is already finalized",
    11: "Object.defineProperty() cannot be used on an Immer draft",
    12: "Object.setPrototypeOf() cannot be used on an Immer draft",
    13: "Immer only supports deleting array indices",
    14: "Immer only supports setting array indices and the 'length' property",
    15: function _(n) {
      return "Cannot apply patch, path doesn't resolve: " + n;
    },
    16: 'Sets cannot have "replace" patches.',
    17: function _(n) {
      return "Unsupported patch operation: " + n;
    },
    18: function _(n) {
      return "The plugin for '" + n + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + n + "()` when initializing your application.";
    },
    20: "Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available",
    21: function _(n) {
      return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '" + n + "'";
    },
    22: function _(n) {
      return "'current' expects a draft, got: " + n;
    },
    23: function _(n) {
      return "'original' expects a draft, got: " + n;
    },
    24: "Patching reserved attributes like __proto__, prototype and constructor is not allowed"
  },
  Z = "" + Object.prototype.constructor,
  nn = "undefined" != typeof Reflect && Reflect.ownKeys ? Reflect.ownKeys : void 0 !== Object.getOwnPropertySymbols ? function (n) {
    return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n));
  } : Object.getOwnPropertyNames,
  rn = Object.getOwnPropertyDescriptors || function (n) {
    var r = {};
    return nn(n).forEach(function (t) {
      r[t] = Object.getOwnPropertyDescriptor(n, t);
    }), r;
  },
  tn = {},
  en = {
    get: function get(n, r) {
      if (r === Q) return n;
      var e = p(n);
      if (!u(e, r)) return function (n, r, t) {
        var e,
          i = I(r, t);
        return i ? "value" in i ? i.value : null === (e = i.get) || void 0 === e ? void 0 : e.call(n.k) : void 0;
      }(n, e, r);
      var i = e[r];
      return n.I || !t(i) ? i : i === z(n.t, r) ? (E(n), n.o[r] = N(n.A.h, i, n)) : i;
    },
    has: function has(n, r) {
      return r in p(n);
    },
    ownKeys: function ownKeys(n) {
      return Reflect.ownKeys(p(n));
    },
    set: function set(n, r, t) {
      var e = I(p(n), r);
      if (null == e ? void 0 : e.set) return e.set.call(n.k, t), !0;
      if (!n.P) {
        var i = z(p(n), r),
          o = null == i ? void 0 : i[Q];
        if (o && o.t === t) return n.o[r] = t, n.R[r] = !1, !0;
        if (c(t, i) && (void 0 !== t || u(n.t, r))) return !0;
        E(n), k(n);
      }
      return n.o[r] === t && (void 0 !== t || r in n.o) || Number.isNaN(t) && Number.isNaN(n.o[r]) || (n.o[r] = t, n.R[r] = !0), !0;
    },
    deleteProperty: function deleteProperty(n, r) {
      return void 0 !== z(n.t, r) || r in n.t ? (n.R[r] = !1, E(n), k(n)) : delete n.R[r], n.o && delete n.o[r], !0;
    },
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(n, r) {
      var t = p(n),
        e = Reflect.getOwnPropertyDescriptor(t, r);
      return e ? {
        writable: !0,
        configurable: 1 !== n.i || "length" !== r,
        enumerable: e.enumerable,
        value: t[r]
      } : e;
    },
    defineProperty: function defineProperty() {
      n(11);
    },
    getPrototypeOf: function getPrototypeOf(n) {
      return Object.getPrototypeOf(n.t);
    },
    setPrototypeOf: function setPrototypeOf() {
      n(12);
    }
  },
  on = {};
i(en, function (n, r) {
  on[n] = function () {
    return arguments[0] = arguments[0][0], r.apply(this, arguments);
  };
}), on.deleteProperty = function (r, t) {
  return "production" !== process.env.NODE_ENV && isNaN(parseInt(t)) && n(13), on.set.call(this, r, t, void 0);
}, on.set = function (r, t, e) {
  return "production" !== process.env.NODE_ENV && "length" !== t && isNaN(parseInt(t)) && n(14), en.set.call(this, r[0], t, e, r[0]);
};
var un = function () {
    function e(r) {
      var e = this;
      this.O = B, this.D = !0, this.produce = function (r, i, o) {
        if ("function" == typeof r && "function" != typeof i) {
          var u = i;
          i = r;
          var a = e;
          return function (n) {
            var r = this;
            void 0 === n && (n = u);
            for (var t = arguments.length, e = Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++) {
              e[o - 1] = arguments[o];
            }
            return a.produce(n, function (n) {
              var t;
              return (t = i).call.apply(t, [r, n].concat(e));
            });
          };
        }
        var f;
        if ("function" != typeof i && n(6), void 0 !== o && "function" != typeof o && n(7), t(r)) {
          var c = w(e),
            s = N(e, r, void 0),
            v = !0;
          try {
            f = i(s), v = !1;
          } finally {
            v ? g(c) : O(c);
          }
          return "undefined" != typeof Promise && f instanceof Promise ? f.then(function (n) {
            return j(c, o), P(n, c);
          }, function (n) {
            throw g(c), n;
          }) : (j(c, o), P(f, c));
        }
        if (!r || "object" != typeof r) {
          if (void 0 === (f = i(r)) && (f = r), f === H && (f = void 0), e.D && d(f, !0), o) {
            var p = [],
              l = [];
            b("Patches").M(r, f, p, l), o(p, l);
          }
          return f;
        }
        n(21, r);
      }, this.produceWithPatches = function (n, r) {
        if ("function" == typeof n) return function (r) {
          for (var t = arguments.length, i = Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++) {
            i[o - 1] = arguments[o];
          }
          return e.produceWithPatches(r, function (r) {
            return n.apply(void 0, [r].concat(i));
          });
        };
        var t,
          i,
          o = e.produce(n, r, function (n, r) {
            t = n, i = r;
          });
        return "undefined" != typeof Promise && o instanceof Promise ? o.then(function (n) {
          return [n, t, i];
        }) : [o, t, i];
      }, "boolean" == typeof (null == r ? void 0 : r.useProxies) && this.setUseProxies(r.useProxies), "boolean" == typeof (null == r ? void 0 : r.autoFreeze) && this.setAutoFreeze(r.autoFreeze);
    }
    var i = e.prototype;
    return i.createDraft = function (e) {
      t(e) || n(8), r(e) && (e = R(e));
      var i = w(this),
        o = N(this, e, void 0);
      return o[Q].C = !0, O(i), o;
    }, i.finishDraft = function (r, t) {
      var e = r && r[Q];
      "production" !== process.env.NODE_ENV && (e && e.C || n(9), e.I && n(10));
      var i = e.A;
      return j(i, t), P(void 0, i);
    }, i.setAutoFreeze = function (n) {
      this.D = n;
    }, i.setUseProxies = function (r) {
      r && !B && n(20), this.O = r;
    }, i.applyPatches = function (n, t) {
      var e;
      for (e = t.length - 1; e >= 0; e--) {
        var i = t[e];
        if (0 === i.path.length && "replace" === i.op) {
          n = i.value;
          break;
        }
      }
      e > -1 && (t = t.slice(e + 1));
      var o = b("Patches").$;
      return r(n) ? o(n, t) : this.produce(n, function (n) {
        return o(n, t);
      });
    }, e;
  }(),
  an = new un(),
  fn = an.produce;
  an.produceWithPatches.bind(an);
  an.setAutoFreeze.bind(an);
  an.setUseProxies.bind(an);
  an.applyPatches.bind(an);
  an.createDraft.bind(an);
  an.finishDraft.bind(an);

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */
var randomString = function randomString() {
  return Math.random().toString(36).substring(7).split('').join('.');
};
({
  INIT: "@@redux/INIT" + randomString(),
  REPLACE: "@@redux/REPLACE" + randomString(),
  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
  }
});

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */

  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
  } catch (e) {} // eslint-disable-line no-empty
}

/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */

function isCrushed() {}
if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
  warning('You are currently using minified code outside of NODE_ENV === "production". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');
}

/** A function that accepts a potential "extra argument" value to be injected later,
 * and returns an instance of the thunk middleware that uses that value
 */
function createThunkMiddleware(extraArgument) {
  // Standard Redux middleware definition pattern:
  // See: https://redux.js.org/tutorials/fundamentals/part-4-store#writing-custom-middleware
  var middleware = function middleware(_ref) {
    var dispatch = _ref.dispatch,
      getState = _ref.getState;
    return function (next) {
      return function (action) {
        // The thunk middleware looks for any functions that were passed to `store.dispatch`.
        // If this "action" is really a function, call it and return the result.
        if (typeof action === 'function') {
          // Inject the store's `dispatch` and `getState` methods, as well as any "extra arg"
          return action(dispatch, getState, extraArgument);
        } // Otherwise, pass the action down the middleware chain as usual

        return next(action);
      };
    };
  };
  return middleware;
}
var thunk = createThunkMiddleware(); // Attach the factory function so users can create a customized version
// with whatever "extra arg" they want to inject into their thunks

thunk.withExtraArgument = createThunkMiddleware;

var __extends$4 = undefined && undefined.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
      }
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __generator$4 = undefined && undefined.__generator || function (thisArg, body) {
  var _ = {
      label: 0,
      sent: function sent() {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
    f,
    y,
    t,
    g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;
  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};
var __spreadArray$1 = undefined && undefined.__spreadArray || function (to, from) {
  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
    to[j] = from[i];
  }
  return to;
};
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};
var __spreadValues = function __spreadValues(a, b) {
  for (var prop in b || (b = {})) {
    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }
  if (__getOwnPropSymbols) for (var _i = 0, _c = __getOwnPropSymbols(b); _i < _c.length; _i++) {
    var prop = _c[_i];
    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }
  return a;
};
var __spreadProps = function __spreadProps(a, b) {
  return __defProps(a, __getOwnPropDescs(b));
};
var __async = function __async(__this, __arguments, generator) {
  return new Promise(function (resolve, reject) {
    var fulfilled = function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    };
    var step = function step(x) {
      return x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    };
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
/** @class */(function (_super) {
  __extends$4(MiddlewareArray, _super);
  function MiddlewareArray() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var _this = _super.apply(this, args) || this;
    Object.setPrototypeOf(_this, MiddlewareArray.prototype);
    return _this;
  }
  Object.defineProperty(MiddlewareArray, Symbol.species, {
    get: function get() {
      return MiddlewareArray;
    },
    enumerable: false,
    configurable: true
  });
  MiddlewareArray.prototype.concat = function () {
    var arr = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      arr[_i] = arguments[_i];
    }
    return _super.prototype.concat.apply(this, arr);
  };
  MiddlewareArray.prototype.prepend = function () {
    var arr = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      arr[_i] = arguments[_i];
    }
    if (arr.length === 1 && Array.isArray(arr[0])) {
      return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray$1([void 0], arr[0].concat(this))))();
    }
    return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray$1([void 0], arr.concat(this))))();
  };
  return MiddlewareArray;
})(Array);
function freezeDraftable(val) {
  return t(val) ? fn(val, function () {}) : val;
}
// src/immutableStateInvariantMiddleware.ts
process.env.NODE_ENV === "production";
// src/configureStore.ts
process.env.NODE_ENV === "production";
// src/createAction.ts
function createAction(type, prepareAction) {
  function actionCreator() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    if (prepareAction) {
      var prepared = prepareAction.apply(void 0, args);
      if (!prepared) {
        throw new Error("prepareAction did not return an object");
      }
      return __spreadValues(__spreadValues({
        type: type,
        payload: prepared.payload
      }, "meta" in prepared && {
        meta: prepared.meta
      }), "error" in prepared && {
        error: prepared.error
      });
    }
    return {
      type: type,
      payload: args[0]
    };
  }
  actionCreator.toString = function () {
    return "" + type;
  };
  actionCreator.type = type;
  actionCreator.match = function (action) {
    return action.type === type;
  };
  return actionCreator;
}
// src/mapBuilders.ts
function executeReducerBuilderCallback(builderCallback) {
  var actionsMap = {};
  var actionMatchers = [];
  var defaultCaseReducer;
  var builder = {
    addCase: function addCase(typeOrActionCreator, reducer) {
      if (process.env.NODE_ENV !== "production") {
        if (actionMatchers.length > 0) {
          throw new Error("`builder.addCase` should only be called before calling `builder.addMatcher`");
        }
        if (defaultCaseReducer) {
          throw new Error("`builder.addCase` should only be called before calling `builder.addDefaultCase`");
        }
      }
      var type = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
      if (type in actionsMap) {
        throw new Error("addCase cannot be called with two reducers for the same action type");
      }
      actionsMap[type] = reducer;
      return builder;
    },
    addMatcher: function addMatcher(matcher, reducer) {
      if (process.env.NODE_ENV !== "production") {
        if (defaultCaseReducer) {
          throw new Error("`builder.addMatcher` should only be called before calling `builder.addDefaultCase`");
        }
      }
      actionMatchers.push({
        matcher: matcher,
        reducer: reducer
      });
      return builder;
    },
    addDefaultCase: function addDefaultCase(reducer) {
      if (process.env.NODE_ENV !== "production") {
        if (defaultCaseReducer) {
          throw new Error("`builder.addDefaultCase` can only be called once");
        }
      }
      defaultCaseReducer = reducer;
      return builder;
    }
  };
  builderCallback(builder);
  return [actionsMap, actionMatchers, defaultCaseReducer];
}
// src/createReducer.ts
function isStateFunction(x) {
  return typeof x === "function";
}
var hasWarnedAboutObjectNotation = false;
function createReducer(initialState, mapOrBuilderCallback, actionMatchers, defaultCaseReducer) {
  if (actionMatchers === void 0) {
    actionMatchers = [];
  }
  if (process.env.NODE_ENV !== "production") {
    if (typeof mapOrBuilderCallback === "object") {
      if (!hasWarnedAboutObjectNotation) {
        hasWarnedAboutObjectNotation = true;
        console.warn("The object notation for `createReducer` is deprecated, and will be removed in RTK 2.0. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer");
      }
    }
  }
  var _c = typeof mapOrBuilderCallback === "function" ? executeReducerBuilderCallback(mapOrBuilderCallback) : [mapOrBuilderCallback, actionMatchers, defaultCaseReducer],
    actionsMap = _c[0],
    finalActionMatchers = _c[1],
    finalDefaultCaseReducer = _c[2];
  var getInitialState;
  if (isStateFunction(initialState)) {
    getInitialState = function getInitialState() {
      return freezeDraftable(initialState());
    };
  } else {
    var frozenInitialState_1 = freezeDraftable(initialState);
    getInitialState = function getInitialState() {
      return frozenInitialState_1;
    };
  }
  function reducer(state, action) {
    if (state === void 0) {
      state = getInitialState();
    }
    var caseReducers = __spreadArray$1([actionsMap[action.type]], finalActionMatchers.filter(function (_c) {
      var matcher = _c.matcher;
      return matcher(action);
    }).map(function (_c) {
      var reducer2 = _c.reducer;
      return reducer2;
    }));
    if (caseReducers.filter(function (cr) {
      return !!cr;
    }).length === 0) {
      caseReducers = [finalDefaultCaseReducer];
    }
    return caseReducers.reduce(function (previousState, caseReducer) {
      if (caseReducer) {
        if (r(previousState)) {
          var draft = previousState;
          var result = caseReducer(draft, action);
          if (result === void 0) {
            return previousState;
          }
          return result;
        } else if (!t(previousState)) {
          var result = caseReducer(previousState, action);
          if (result === void 0) {
            if (previousState === null) {
              return previousState;
            }
            throw Error("A case reducer on a non-draftable value must not return undefined");
          }
          return result;
        } else {
          return fn(previousState, function (draft) {
            return caseReducer(draft, action);
          });
        }
      }
      return previousState;
    }, state);
  }
  reducer.getInitialState = getInitialState;
  return reducer;
}
// src/createSlice.ts
var hasWarnedAboutObjectNotation2 = false;
function getType2(slice, actionKey) {
  return slice + "/" + actionKey;
}
function createSlice(options) {
  var name = options.name;
  if (!name) {
    throw new Error("`name` is a required option for createSlice");
  }
  if (typeof process !== "undefined" && process.env.NODE_ENV === "development") {
    if (options.initialState === void 0) {
      console.error("You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`");
    }
  }
  var initialState = typeof options.initialState == "function" ? options.initialState : freezeDraftable(options.initialState);
  var reducers = options.reducers || {};
  var reducerNames = Object.keys(reducers);
  var sliceCaseReducersByName = {};
  var sliceCaseReducersByType = {};
  var actionCreators = {};
  reducerNames.forEach(function (reducerName) {
    var maybeReducerWithPrepare = reducers[reducerName];
    var type = getType2(name, reducerName);
    var caseReducer;
    var prepareCallback;
    if ("reducer" in maybeReducerWithPrepare) {
      caseReducer = maybeReducerWithPrepare.reducer;
      prepareCallback = maybeReducerWithPrepare.prepare;
    } else {
      caseReducer = maybeReducerWithPrepare;
    }
    sliceCaseReducersByName[reducerName] = caseReducer;
    sliceCaseReducersByType[type] = caseReducer;
    actionCreators[reducerName] = prepareCallback ? createAction(type, prepareCallback) : createAction(type);
  });
  function buildReducer() {
    if (process.env.NODE_ENV !== "production") {
      if (typeof options.extraReducers === "object") {
        if (!hasWarnedAboutObjectNotation2) {
          hasWarnedAboutObjectNotation2 = true;
          console.warn("The object notation for `createSlice.extraReducers` is deprecated, and will be removed in RTK 2.0. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice");
        }
      }
    }
    var _c = typeof options.extraReducers === "function" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers],
      _d = _c[0],
      extraReducers = _d === void 0 ? {} : _d,
      _e = _c[1],
      actionMatchers = _e === void 0 ? [] : _e,
      _f = _c[2],
      defaultCaseReducer = _f === void 0 ? void 0 : _f;
    var finalCaseReducers = __spreadValues(__spreadValues({}, extraReducers), sliceCaseReducersByType);
    return createReducer(initialState, function (builder) {
      for (var key in finalCaseReducers) {
        builder.addCase(key, finalCaseReducers[key]);
      }
      for (var _i = 0, actionMatchers_1 = actionMatchers; _i < actionMatchers_1.length; _i++) {
        var m = actionMatchers_1[_i];
        builder.addMatcher(m.matcher, m.reducer);
      }
      if (defaultCaseReducer) {
        builder.addDefaultCase(defaultCaseReducer);
      }
    });
  }
  var _reducer;
  return {
    name: name,
    reducer: function reducer(state, action) {
      if (!_reducer) _reducer = buildReducer();
      return _reducer(state, action);
    },
    actions: actionCreators,
    caseReducers: sliceCaseReducersByName,
    getInitialState: function getInitialState() {
      if (!_reducer) _reducer = buildReducer();
      return _reducer.getInitialState();
    }
  };
}
// src/nanoid.ts
var urlAlphabet = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW";
var nanoid = function nanoid(size) {
  if (size === void 0) {
    size = 21;
  }
  var id = "";
  var i = size;
  while (i--) {
    id += urlAlphabet[Math.random() * 64 | 0];
  }
  return id;
};
// src/createAsyncThunk.ts
var commonProperties = ["name", "message", "stack", "code"];
var RejectWithValue = /** @class */function () {
  function RejectWithValue(payload, meta) {
    this.payload = payload;
    this.meta = meta;
  }
  return RejectWithValue;
}();
var FulfillWithMeta = /** @class */function () {
  function FulfillWithMeta(payload, meta) {
    this.payload = payload;
    this.meta = meta;
  }
  return FulfillWithMeta;
}();
var miniSerializeError = function miniSerializeError(value) {
  if (typeof value === "object" && value !== null) {
    var simpleError = {};
    for (var _i = 0, commonProperties_1 = commonProperties; _i < commonProperties_1.length; _i++) {
      var property = commonProperties_1[_i];
      if (typeof value[property] === "string") {
        simpleError[property] = value[property];
      }
    }
    return simpleError;
  }
  return {
    message: String(value)
  };
};
(function () {
  function createAsyncThunk2(typePrefix, payloadCreator, options) {
    var fulfilled = createAction(typePrefix + "/fulfilled", function (payload, requestId, arg, meta) {
      return {
        payload: payload,
        meta: __spreadProps(__spreadValues({}, meta || {}), {
          arg: arg,
          requestId: requestId,
          requestStatus: "fulfilled"
        })
      };
    });
    var pending = createAction(typePrefix + "/pending", function (requestId, arg, meta) {
      return {
        payload: void 0,
        meta: __spreadProps(__spreadValues({}, meta || {}), {
          arg: arg,
          requestId: requestId,
          requestStatus: "pending"
        })
      };
    });
    var rejected = createAction(typePrefix + "/rejected", function (error, requestId, arg, payload, meta) {
      return {
        payload: payload,
        error: (options && options.serializeError || miniSerializeError)(error || "Rejected"),
        meta: __spreadProps(__spreadValues({}, meta || {}), {
          arg: arg,
          requestId: requestId,
          rejectedWithValue: !!payload,
          requestStatus: "rejected",
          aborted: (error == null ? void 0 : error.name) === "AbortError",
          condition: (error == null ? void 0 : error.name) === "ConditionError"
        })
      };
    });
    var displayedWarning = false;
    var AC = typeof AbortController !== "undefined" ? AbortController : /** @class */function () {
      function class_1() {
        this.signal = {
          aborted: false,
          addEventListener: function addEventListener() {},
          dispatchEvent: function dispatchEvent() {
            return false;
          },
          onabort: function onabort() {},
          removeEventListener: function removeEventListener() {},
          reason: void 0,
          throwIfAborted: function throwIfAborted() {}
        };
      }
      class_1.prototype.abort = function () {
        if (process.env.NODE_ENV !== "production") {
          if (!displayedWarning) {
            displayedWarning = true;
            console.info("This platform does not implement AbortController. \nIf you want to use the AbortController to react to `abort` events, please consider importing a polyfill like 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only'.");
          }
        }
      };
      return class_1;
    }();
    function actionCreator(arg) {
      return function (dispatch, getState, extra) {
        var requestId = (options == null ? void 0 : options.idGenerator) ? options.idGenerator(arg) : nanoid();
        var abortController = new AC();
        var abortReason;
        function abort(reason) {
          abortReason = reason;
          abortController.abort();
        }
        var promise2 = function () {
          return __async(this, null, function () {
            var _a, _b, finalAction, conditionResult, abortedPromise, err_1, skipDispatch;
            return __generator$4(this, function (_c) {
              switch (_c.label) {
                case 0:
                  _c.trys.push([0, 4,, 5]);
                  conditionResult = (_a = options == null ? void 0 : options.condition) == null ? void 0 : _a.call(options, arg, {
                    getState: getState,
                    extra: extra
                  });
                  if (!isThenable(conditionResult)) return [3 /*break*/, 2];
                  return [4 /*yield*/, conditionResult];
                case 1:
                  conditionResult = _c.sent();
                  _c.label = 2;
                case 2:
                  if (conditionResult === false || abortController.signal.aborted) {
                    throw {
                      name: "ConditionError",
                      message: "Aborted due to condition callback returning false."
                    };
                  }
                  abortedPromise = new Promise(function (_, reject) {
                    return abortController.signal.addEventListener("abort", function () {
                      return reject({
                        name: "AbortError",
                        message: abortReason || "Aborted"
                      });
                    });
                  });
                  dispatch(pending(requestId, arg, (_b = options == null ? void 0 : options.getPendingMeta) == null ? void 0 : _b.call(options, {
                    requestId: requestId,
                    arg: arg
                  }, {
                    getState: getState,
                    extra: extra
                  })));
                  return [4 /*yield*/, Promise.race([abortedPromise, Promise.resolve(payloadCreator(arg, {
                    dispatch: dispatch,
                    getState: getState,
                    extra: extra,
                    requestId: requestId,
                    signal: abortController.signal,
                    abort: abort,
                    rejectWithValue: function rejectWithValue(value, meta) {
                      return new RejectWithValue(value, meta);
                    },
                    fulfillWithValue: function fulfillWithValue(value, meta) {
                      return new FulfillWithMeta(value, meta);
                    }
                  })).then(function (result) {
                    if (result instanceof RejectWithValue) {
                      throw result;
                    }
                    if (result instanceof FulfillWithMeta) {
                      return fulfilled(result.payload, requestId, arg, result.meta);
                    }
                    return fulfilled(result, requestId, arg);
                  })])];
                case 3:
                  finalAction = _c.sent();
                  return [3 /*break*/, 5];
                case 4:
                  err_1 = _c.sent();
                  finalAction = err_1 instanceof RejectWithValue ? rejected(null, requestId, arg, err_1.payload, err_1.meta) : rejected(err_1, requestId, arg);
                  return [3 /*break*/, 5];
                case 5:
                  skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;
                  if (!skipDispatch) {
                    dispatch(finalAction);
                  }
                  return [2 /*return*/, finalAction];
              }
            });
          });
        }();
        return Object.assign(promise2, {
          abort: abort,
          requestId: requestId,
          arg: arg,
          unwrap: function unwrap() {
            return promise2.then(unwrapResult);
          }
        });
      };
    }
    return Object.assign(actionCreator, {
      pending: pending,
      rejected: rejected,
      fulfilled: fulfilled,
      typePrefix: typePrefix
    });
  }
  createAsyncThunk2.withTypes = function () {
    return createAsyncThunk2;
  };
  return createAsyncThunk2;
})();
function unwrapResult(action) {
  if (action.meta && action.meta.rejectedWithValue) {
    throw action.payload;
  }
  if (action.error) {
    throw action.error;
  }
  return action.payload;
}
function isThenable(value) {
  return value !== null && typeof value === "object" && typeof value.then === "function";
}
var alm = "listenerMiddleware";
createAction(alm + "/add");
createAction(alm + "/removeAll");
createAction(alm + "/remove");
var promise;
typeof queueMicrotask === "function" ? queueMicrotask.bind(typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : globalThis) : function (cb) {
  return (promise || (promise = Promise.resolve())).then(cb)["catch"](function (err) {
    return setTimeout(function () {
      throw err;
    }, 0);
  });
};
// src/index.ts
F();

var web3Slice = createSlice({
  name: "web3",
  initialState: {
    chainId: supportedChains[0],
    modals: {
      login: {
        show: false
      },
      signMessage: {
        show: false
      }
    }
  },
  reducers: {
    setupNetwork: function setupNetwork(state, action) {
      state.chainId = action.payload;
    },
    setLoginModal: function setLoginModal(state, action) {
      state.modals.login = action.payload;
    },
    setSignMessageModal: function setSignMessageModal(state, action) {
      state.modals.signMessage = action.payload;
    }
  }
});
var selectors = {
  selectChainId: function selectChainId(state) {
    return state.web3.chainId;
  },
  selectLoginModal: function selectLoginModal(state) {
    return state.web3.modals.login;
  },
  selectSignMessageModal: function selectSignMessageModal(state) {
    return state.web3.modals.signMessage;
  }
};
var actions = web3Slice.actions;

var useWeb3Auth$1 = function useWeb3Auth(_ref) {
  var useDispatch = _ref.useDispatch,
    useSelector = _ref.useSelector,
    useWeb3React = _ref.useWeb3React,
    createNotification = _ref.createNotification,
    useCallback = _ref.useCallback,
    useEffect = _ref.useEffect;
  var dispatch = useDispatch();
  var reduxChainId = useSelector(selectors.selectChainId);
  var loginModal = useSelector(selectors.selectLoginModal);
  var _useWeb3React = useWeb3React(),
    chainId = _useWeb3React.chainId,
    activate = _useWeb3React.activate,
    deactivate = _useWeb3React.deactivate,
    account = _useWeb3React.account,
    provider = _useWeb3React.library;
  var logout = useCallback(function () {
    console.log("web3 logout");
    deactivate();
    localStorage.removeItem(connectorLocalStorageKey);
    localStorage.removeItem("connectorUid");

    // This localStorage key is set by @web3-react/walletconnect-connector
    if (localStorage.walletConnect || localStorage.walletconnect) {
      connectorsByName.walletConnect.close();
      connectorsByName.walletConnect.walletConnectProvider = null;
    }
  }, [provider, provider]);
  var login = useCallback( /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(connectorId, connectorUid) {
      var connector;
      return regenerator.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              connector = connectorsByName[connectorId];
              connector.connectorUid = connectorUid;
              if (!connector) {
                _context2.next = 7;
                break;
              }
              window.localStorage.setItem(connectorLocalStorageKey, connectorId);
              window.localStorage.setItem("connectorUid", connectorUid);
              console.log("web3 login");
              return _context2.abrupt("return", new Promise(function (resolve, reject) {
                activate(connector, /*#__PURE__*/function () {
                  var _ref3 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(error) {
                    var _error$message, _error$message2, _provider, walletConnector;
                    return regenerator.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.prev = 0;
                            console.log("activate", error);
                            if (!(connectorUid === "metamask" && (error === null || error === void 0 ? void 0 : error.message) === "Already processing eth_requestAccounts. Please wait.")) {
                              _context.next = 5;
                              break;
                            }
                            createNotification({
                              title: "Please open your MetaMask and follow the instructions",
                              event: "warning"
                            });
                            return _context.abrupt("return");
                          case 5:
                            console.log({
                              error: error,
                              reduxChainId: reduxChainId,
                              provider: provider,
                              connectorUid: connectorUid,
                              connector: connector,
                              bool: error.name === "UnsupportedChainIdError" || ((_error$message = error.message) === null || _error$message === void 0 ? void 0 : _error$message.includes("chain"))
                            });
                            if (!(error.name === "UnsupportedChainIdError" || (_error$message2 = error.message) !== null && _error$message2 !== void 0 && _error$message2.includes("chain"))) {
                              _context.next = 14;
                              break;
                            }
                            _provider = connectorUid === "metamask" ? window.ethereum : connector.walletConnectProvider;
                            _context.next = 10;
                            return setupNetwork(_provider, reduxChainId, createNotification);
                          case 10:
                            activate(connector)["catch"](function () {
                              return logout();
                            });
                            return _context.abrupt("return");
                          case 14:
                            window.localStorage.removeItem(connectorLocalStorageKey);
                            if (!(error.name === "NoEthereumProviderError")) {
                              _context.next = 20;
                              break;
                            }
                            createNotification({
                              title: "Provider Error, no provider was found",
                              event: "error"
                            });
                            reject(error);
                            _context.next = 26;
                            break;
                          case 20:
                            if (!(error.name === "UserRejectedRequestErrorInjected" || error.name === "UserRejectedRequestErrorWalletConnect")) {
                              _context.next = 26;
                              break;
                            }
                            if (connectorUid !== "metamask") {
                              walletConnector = connector;
                              walletConnector.walletConnectProvider = null;
                            }
                            createNotification({
                              title: error === null || error === void 0 ? void 0 : error.message,
                              event: "error"
                            });
                            logout();
                            reject(error);
                            return _context.abrupt("return");
                          case 26:
                            createNotification({
                              title: error === null || error === void 0 ? void 0 : error.message,
                              event: "error"
                            });
                            logout();
                            reject(error);
                            _context.next = 36;
                            break;
                          case 31:
                            _context.prev = 31;
                            _context.t0 = _context["catch"](0);
                            console.log("activate catch error", _context.t0);
                            logout();
                            reject(_context.t0);
                          case 36:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee, null, [[0, 31]]);
                  }));
                  return function (_x3) {
                    return _ref3.apply(this, arguments);
                  };
                }()).then(resolve)["catch"](function (err) {
                  return console.log("activate", err);
                });
              }));
            case 7:
              createNotification({
                title: "Unable to find connector, the connector config is wrong",
                event: "error"
              });
              throw new Error("Unable to find connector, the connector config is wrong");
            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }(), [activate, provider]);
  var setupProviderNetwork = function setupProviderNetwork(chainId) {
    var connectorId = localStorage[connectorLocalStorageKey];
    var connectorUid = localStorage.connectorUid;
    var connector = connectorsByName[connectorId];
    var provider = connectorUid === "metamask" ? window.ethereum : connector.walletConnectProvider;
    setupNetwork(provider, chainId, createNotification);
  };
  useEffect(function () {
    if (chainId == reduxChainId || !provider) return;
    if (supportedChains.includes(chainId)) {
      dispatch(actions.setupNetwork(chainId));
    }
  }, [chainId, reduxChainId, provider]);
  useEffect(function () {
    var connectorKey = localStorage.getItem(connectorLocalStorageKey);
    var connectorUid = localStorage.getItem("connectorUid");
    if (connectorKey && connectorUid) {
      login(connectorKey, connectorUid)["catch"](function (err) {
        return console.error("login", err);
      });
    }
  }, []);
  return {
    login: login,
    logout: logout,
    account: account === null || account === void 0 ? void 0 : account.toLowerCase(),
    provider: provider,
    chainId: chainId,
    showWeb3Login: loginModal.show,
    setShowWeb3Login: function setShowWeb3Login(show) {
      return dispatch(actions.setLoginModal({
        show: show
      }));
    },
    setupProviderNetwork: setupProviderNetwork
  };
};

var hooks$1 = {
  useWeb3Auth: useWeb3Auth$1
};

var redux = {
  slice: web3Slice,
  selectors: selectors,
  actions: actions
};

var authTokensStorageKey = "authTokensStorage";
var authTokensManager = {
  _getStorage: function _getStorage() {
    return readJson(localStorage$1[authTokensStorageKey], {});
  },
  _setAccountStorage: function _setAccountStorage(address, accountStorage) {
    var storage = this._getStorage() || {};
    storage[address] = accountStorage;
    localStorage$1.setItem(authTokensStorageKey, JSON.stringify(storage));
  },
  _getAccountStorage: function _getAccountStorage(address) {
    var accountStorage = this._getStorage()[address] || {};
    return accountStorage;
  },
  _setToken: function _setToken(address, tokenKey, token) {
    var accountStorage = this._getAccountStorage(address.toLowerCase());
    accountStorage[tokenKey] = token;
    this._setAccountStorage(address.toLowerCase(), accountStorage);
  },
  _getToken: function _getToken(address, tokenKey) {
    return address && this._getAccountStorage(address.toLowerCase())[tokenKey];
  },
  getJwt: function getJwt(address) {
    if (!address) {
      address = this.getCurrentAccount();
    }
    return this._getToken(address, "jwt");
  },
  getCurrentAccount: function getCurrentAccount() {
    return localStorage$1.getItem("currentWeb3Account");
  },
  setJwt: function setJwt(address, jwt) {
    if (!address) {
      address = this.getCurrentAccount();
    }
    return address && this._setToken(address, "jwt", jwt);
  },
  setSignatureData: function setSignatureData(address, signatureData) {
    if (!address) {
      address = this.getCurrentAccount();
    }
    return address && this._setToken(address, "signature", signatureData);
  },
  getSignatureData: function getSignatureData(address) {
    if (!address) {
      address = this.getCurrentAccount();
    }
    return this._getToken(address, "signature");
  },
  setCurrentAccount: function setCurrentAccount(address) {
    localStorage$1.setItem("currentWeb3Account", address.toLowerCase());
  },
  clearCurrentAccount: function clearCurrentAccount() {
    localStorage$1.removeItem("currentWeb3Account");
  },
  removeJwt: function removeJwt(address) {
    if (!address) {
      address = this.getCurrentAccount();
    }
    console.log("removeJwt", address);
    return address && this._setToken(address, "jwt", null);
  }
};
var localStorage$1 = typeof window === "undefined" ? {
  setItem: function setItem() {},
  getItem: function getItem() {}
} : window.localStorage;
var readJson = function readJson(json) {
  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  try {
    return JSON.parse(json);
  } catch (error) {
    return defaultValue;
  }
};

var __jsx = React__default["default"].createElement;
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var WalletButtons = function WalletButtons(_ref) {
  var _ref$onSelectWallet = _ref.onSelectWallet,
    onSelectWallet = _ref$onSelectWallet === void 0 ? function () {} : _ref$onSelectWallet,
    _ref$className = _ref.className,
    className = _ref$className === void 0 ? "" : _ref$className,
    _ref$containerClassNa = _ref.containerClassName,
    containerClassName = _ref$containerClassNa === void 0 ? "" : _ref$containerClassNa,
    _ref$styles = _ref.styles,
    styles = _ref$styles === void 0 ? {} : _ref$styles;
  return __jsx("div", {
    className: "flex flex-col items-center ".concat(containerClassName)
  }, walletConfigs.map(function (_ref2) {
    var title = _ref2.title,
      connectorId = _ref2.connectorId,
      uid = _ref2.uid,
      background = _ref2.background;
    return __jsx("button", {
      key: uid,
      onClick: function onClick() {
        return onSelectWallet(connectorId, uid)["catch"](function () {
          return null;
        });
      },
      style: _objectSpread({
        background: background
      }, styles[uid]),
      className: "font-medium px-4 py-2 my-2 border rounded-md text-white ".concat(className)
    }, title);
  }));
};

var components = {
  WalletButtons: WalletButtons
};

var useWeb3Auth = hooks$1.useWeb3Auth;
var web3 = {
  connectors: {
    connectorsByName: connectorsByName,
    getLibrary: getLibrary,
    connectorLocalStorageKey: connectorLocalStorageKey
  },
  utils: {
    getContract: getContract,
    formatAddress: formatAddress,
    iconFromAddress: iconFromAddress,
    getExplorerUrl: getExplorerUrl
  },
  walletActions: {
    setupNetwork: setupNetwork,
    signMessage: signMessage,
    signTypedMessage: signTypedMessage,
    registerToken: registerToken
  },
  configs: {
    supportedChains: supportedChains,
    rpcUrlByChains: rpcUrlByChains,
    ChainIds: ChainIds,
    wallets: walletConfigs,
    networks: networkConfigs,
    providerByChains: providerByChains
  },
  hooks: {
    useWeb3Auth: useWeb3Auth
  },
  redux: redux,
  components: components,
  storage: {
    authTokensManager: authTokensManager
  }
};

var cjs$b = {};

var classCallCheck = {exports: {}};

(function (module) {
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (classCallCheck));

var createClass = {exports: {}};

var toPropertyKey = {exports: {}};

var toPrimitive = {exports: {}};

(function (module) {
	var _typeof$1 = _typeof.exports["default"];
	function _toPrimitive(input, hint) {
	  if (_typeof$1(input) !== "object" || input === null) return input;
	  var prim = input[Symbol.toPrimitive];
	  if (prim !== undefined) {
	    var res = prim.call(input, hint || "default");
	    if (_typeof$1(res) !== "object") return res;
	    throw new TypeError("@@toPrimitive must return a primitive value.");
	  }
	  return (hint === "string" ? String : Number)(input);
	}
	module.exports = _toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (toPrimitive));

(function (module) {
	var _typeof$1 = _typeof.exports["default"];
	var toPrimitive$1 = toPrimitive.exports;
	function _toPropertyKey(arg) {
	  var key = toPrimitive$1(arg, "string");
	  return _typeof$1(key) === "symbol" ? key : String(key);
	}
	module.exports = _toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (toPropertyKey));

(function (module) {
	var toPropertyKey$1 = toPropertyKey.exports;
	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, toPropertyKey$1(descriptor.key), descriptor);
	  }
	}
	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  Object.defineProperty(Constructor, "prototype", {
	    writable: false
	  });
	  return Constructor;
	}
	module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (createClass));

var assertThisInitialized = {exports: {}};

(function (module) {
	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	  return self;
	}
	module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (assertThisInitialized));

var inherits = {exports: {}};

var setPrototypeOf = {exports: {}};

(function (module) {
	function _setPrototypeOf(o, p) {
	  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
	  return _setPrototypeOf(o, p);
	}
	module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (setPrototypeOf));

(function (module) {
	var setPrototypeOf$1 = setPrototypeOf.exports;
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }
	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  Object.defineProperty(subClass, "prototype", {
	    writable: false
	  });
	  if (superClass) setPrototypeOf$1(subClass, superClass);
	}
	module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (inherits));

var possibleConstructorReturn = {exports: {}};

(function (module) {
	var _typeof$1 = _typeof.exports["default"];
	var assertThisInitialized$1 = assertThisInitialized.exports;
	function _possibleConstructorReturn(self, call) {
	  if (call && (_typeof$1(call) === "object" || typeof call === "function")) {
	    return call;
	  } else if (call !== void 0) {
	    throw new TypeError("Derived constructors may only return object or undefined");
	  }
	  return assertThisInitialized$1(self);
	}
	module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (possibleConstructorReturn));

var getPrototypeOf = {exports: {}};

(function (module) {
	function _getPrototypeOf(o) {
	  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
	  return _getPrototypeOf(o);
	}
	module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (getPrototypeOf));

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var _extendStatics$3 = function extendStatics(d, b) {
  _extendStatics$3 = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) {
      if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    }
  };
  return _extendStatics$3(d, b);
};
function __extends$3(d, b) {
  if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  _extendStatics$3(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var _assign$3 = function __assign() {
  _assign$3 = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return _assign$3.apply(this, arguments);
};
function __rest$3(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __decorate$3(decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param$3(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata$3(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter$3(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator$3(thisArg, body) {
  var _ = {
      label: 0,
      sent: function sent() {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
    f,
    y,
    t,
    g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;
  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}
var __createBinding$3 = Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
};
function __exportStar$3(m, o) {
  for (var p in m) {
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding$3(o, m, p);
  }
}
function __values$3(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
    m = s && o[s],
    i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function next() {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read$3(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
    r,
    ar = [],
    e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}

/** @deprecated */
function __spread$3() {
  for (var ar = [], i = 0; i < arguments.length; i++) {
    ar = ar.concat(__read$3(arguments[i]));
  }
  return ar;
}

/** @deprecated */
function __spreadArrays$4() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }
  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await$3(v) {
  return this instanceof __await$3 ? (this.v = v, this) : new __await$3(v);
}
function __asyncGenerator$3(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
    i,
    q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;
  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await$3 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator$3(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await$3(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues$3(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
    i;
  return m ? m.call(o) : (o = typeof __values$3 === "function" ? __values$3(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}
function __makeTemplateObject$3(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
var __setModuleDefault = Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
};
function __importStar$3(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$3(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault$3(mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
}
function __classPrivateFieldGet$3(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet$3(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}

var tslib_es6$3 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  __extends: __extends$3,
  get __assign () { return _assign$3; },
  __rest: __rest$3,
  __decorate: __decorate$3,
  __param: __param$3,
  __metadata: __metadata$3,
  __awaiter: __awaiter$3,
  __generator: __generator$3,
  __createBinding: __createBinding$3,
  __exportStar: __exportStar$3,
  __values: __values$3,
  __read: __read$3,
  __spread: __spread$3,
  __spreadArrays: __spreadArrays$4,
  __spreadArray: __spreadArray,
  __await: __await$3,
  __asyncGenerator: __asyncGenerator$3,
  __asyncDelegator: __asyncDelegator$3,
  __asyncValues: __asyncValues$3,
  __makeTemplateObject: __makeTemplateObject$3,
  __importStar: __importStar$3,
  __importDefault: __importDefault$3,
  __classPrivateFieldGet: __classPrivateFieldGet$3,
  __classPrivateFieldSet: __classPrivateFieldSet$3,
  __classPrivateFieldIn: __classPrivateFieldIn
});

var require$$7 = /*@__PURE__*/getAugmentedNamespace(tslib_es6$3);

var cjs$a = {};

var cjs$9 = {};

var toConsumableArray = {exports: {}};

var arrayWithoutHoles = {exports: {}};

var arrayLikeToArray = {exports: {}};

var hasRequiredArrayLikeToArray;

function requireArrayLikeToArray () {
	if (hasRequiredArrayLikeToArray) return arrayLikeToArray.exports;
	hasRequiredArrayLikeToArray = 1;
	(function (module) {
		function _arrayLikeToArray(arr, len) {
		  if (len == null || len > arr.length) len = arr.length;
		  for (var i = 0, arr2 = new Array(len); i < len; i++) {
		    arr2[i] = arr[i];
		  }
		  return arr2;
		}
		module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (arrayLikeToArray));
	return arrayLikeToArray.exports;
}

var hasRequiredArrayWithoutHoles;

function requireArrayWithoutHoles () {
	if (hasRequiredArrayWithoutHoles) return arrayWithoutHoles.exports;
	hasRequiredArrayWithoutHoles = 1;
	(function (module) {
		var arrayLikeToArray = requireArrayLikeToArray();
		function _arrayWithoutHoles(arr) {
		  if (Array.isArray(arr)) return arrayLikeToArray(arr);
		}
		module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (arrayWithoutHoles));
	return arrayWithoutHoles.exports;
}

var iterableToArray = {exports: {}};

var hasRequiredIterableToArray;

function requireIterableToArray () {
	if (hasRequiredIterableToArray) return iterableToArray.exports;
	hasRequiredIterableToArray = 1;
	(function (module) {
		function _iterableToArray(iter) {
		  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
		}
		module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (iterableToArray));
	return iterableToArray.exports;
}

var unsupportedIterableToArray = {exports: {}};

var hasRequiredUnsupportedIterableToArray;

function requireUnsupportedIterableToArray () {
	if (hasRequiredUnsupportedIterableToArray) return unsupportedIterableToArray.exports;
	hasRequiredUnsupportedIterableToArray = 1;
	(function (module) {
		var arrayLikeToArray = requireArrayLikeToArray();
		function _unsupportedIterableToArray(o, minLen) {
		  if (!o) return;
		  if (typeof o === "string") return arrayLikeToArray(o, minLen);
		  var n = Object.prototype.toString.call(o).slice(8, -1);
		  if (n === "Object" && o.constructor) n = o.constructor.name;
		  if (n === "Map" || n === "Set") return Array.from(o);
		  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
		}
		module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (unsupportedIterableToArray));
	return unsupportedIterableToArray.exports;
}

var nonIterableSpread = {exports: {}};

var hasRequiredNonIterableSpread;

function requireNonIterableSpread () {
	if (hasRequiredNonIterableSpread) return nonIterableSpread.exports;
	hasRequiredNonIterableSpread = 1;
	(function (module) {
		function _nonIterableSpread() {
		  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
		}
		module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (nonIterableSpread));
	return nonIterableSpread.exports;
}

var hasRequiredToConsumableArray;

function requireToConsumableArray () {
	if (hasRequiredToConsumableArray) return toConsumableArray.exports;
	hasRequiredToConsumableArray = 1;
	(function (module) {
		var arrayWithoutHoles = requireArrayWithoutHoles();
		var iterableToArray = requireIterableToArray();
		var unsupportedIterableToArray = requireUnsupportedIterableToArray();
		var nonIterableSpread = requireNonIterableSpread();
		function _toConsumableArray(arr) {
		  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
		}
		module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (toConsumableArray));
	return toConsumableArray.exports;
}

var cjs$8 = {};

var cjs$7 = {};

var browser$1 = {};

var cjs$6 = {};

var cjs$5 = {};

var hasRequiredCjs$9;

function requireCjs$9 () {
	if (hasRequiredCjs$9) return cjs$5;
	hasRequiredCjs$9 = 1;

	Object.defineProperty(cjs$5, "__esModule", {
	  value: true
	});
	cjs$5.getLocalStorage = cjs$5.getLocalStorageOrThrow = cjs$5.getCrypto = cjs$5.getCryptoOrThrow = cjs$5.getLocation = cjs$5.getLocationOrThrow = cjs$5.getNavigator = cjs$5.getNavigatorOrThrow = cjs$5.getDocument = cjs$5.getDocumentOrThrow = cjs$5.getFromWindowOrThrow = cjs$5.getFromWindow = void 0;
	function getFromWindow(name) {
	  var res = undefined;
	  if (typeof window !== "undefined" && typeof window[name] !== "undefined") {
	    res = window[name];
	  }
	  return res;
	}
	cjs$5.getFromWindow = getFromWindow;
	function getFromWindowOrThrow(name) {
	  var res = getFromWindow(name);
	  if (!res) {
	    throw new Error("".concat(name, " is not defined in Window"));
	  }
	  return res;
	}
	cjs$5.getFromWindowOrThrow = getFromWindowOrThrow;
	function getDocumentOrThrow() {
	  return getFromWindowOrThrow("document");
	}
	cjs$5.getDocumentOrThrow = getDocumentOrThrow;
	function getDocument() {
	  return getFromWindow("document");
	}
	cjs$5.getDocument = getDocument;
	function getNavigatorOrThrow() {
	  return getFromWindowOrThrow("navigator");
	}
	cjs$5.getNavigatorOrThrow = getNavigatorOrThrow;
	function getNavigator() {
	  return getFromWindow("navigator");
	}
	cjs$5.getNavigator = getNavigator;
	function getLocationOrThrow() {
	  return getFromWindowOrThrow("location");
	}
	cjs$5.getLocationOrThrow = getLocationOrThrow;
	function getLocation() {
	  return getFromWindow("location");
	}
	cjs$5.getLocation = getLocation;
	function getCryptoOrThrow() {
	  return getFromWindowOrThrow("crypto");
	}
	cjs$5.getCryptoOrThrow = getCryptoOrThrow;
	function getCrypto() {
	  return getFromWindow("crypto");
	}
	cjs$5.getCrypto = getCrypto;
	function getLocalStorageOrThrow() {
	  return getFromWindowOrThrow("localStorage");
	}
	cjs$5.getLocalStorageOrThrow = getLocalStorageOrThrow;
	function getLocalStorage() {
	  return getFromWindow("localStorage");
	}
	cjs$5.getLocalStorage = getLocalStorage;
	return cjs$5;
}

var hasRequiredCjs$8;

function requireCjs$8 () {
	if (hasRequiredCjs$8) return cjs$6;
	hasRequiredCjs$8 = 1;

	Object.defineProperty(cjs$6, "__esModule", {
	  value: true
	});
	cjs$6.getWindowMetadata = void 0;
	var window_getters_1 = requireCjs$9();
	function getWindowMetadata() {
	  var doc;
	  var loc;
	  try {
	    doc = window_getters_1.getDocumentOrThrow();
	    loc = window_getters_1.getLocationOrThrow();
	  } catch (e) {
	    return null;
	  }
	  function getIcons() {
	    var links = doc.getElementsByTagName("link");
	    var icons = [];
	    for (var i = 0; i < links.length; i++) {
	      var link = links[i];
	      var rel = link.getAttribute("rel");
	      if (rel) {
	        if (rel.toLowerCase().indexOf("icon") > -1) {
	          var href = link.getAttribute("href");
	          if (href) {
	            if (href.toLowerCase().indexOf("https:") === -1 && href.toLowerCase().indexOf("http:") === -1 && href.indexOf("//") !== 0) {
	              var absoluteHref = loc.protocol + "//" + loc.host;
	              if (href.indexOf("/") === 0) {
	                absoluteHref += href;
	              } else {
	                var path = loc.pathname.split("/");
	                path.pop();
	                var finalPath = path.join("/");
	                absoluteHref += finalPath + "/" + href;
	              }
	              icons.push(absoluteHref);
	            } else if (href.indexOf("//") === 0) {
	              var absoluteUrl = loc.protocol + href;
	              icons.push(absoluteUrl);
	            } else {
	              icons.push(href);
	            }
	          }
	        }
	      }
	    }
	    return icons;
	  }
	  function getWindowMetadataOfAny() {
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    var metaTags = doc.getElementsByTagName("meta");
	    var _loop = function _loop(i) {
	      var tag = metaTags[i];
	      var attributes = ["itemprop", "property", "name"].map(function (target) {
	        return tag.getAttribute(target);
	      }).filter(function (attr) {
	        if (attr) {
	          return args.includes(attr);
	        }
	        return false;
	      });
	      if (attributes.length && attributes) {
	        var content = tag.getAttribute("content");
	        if (content) {
	          return {
	            v: content
	          };
	        }
	      }
	    };
	    for (var i = 0; i < metaTags.length; i++) {
	      var _ret = _loop(i);
	      if (typeof _ret === "object") return _ret.v;
	    }
	    return "";
	  }
	  function getName() {
	    var name = getWindowMetadataOfAny("name", "og:site_name", "og:title", "twitter:title");
	    if (!name) {
	      name = doc.title;
	    }
	    return name;
	  }
	  function getDescription() {
	    var description = getWindowMetadataOfAny("description", "og:description", "twitter:description", "keywords");
	    return description;
	  }
	  var name = getName();
	  var description = getDescription();
	  var url = loc.origin;
	  var icons = getIcons();
	  var meta = {
	    description: description,
	    url: url,
	    icons: icons,
	    name: name
	  };
	  return meta;
	}
	cjs$6.getWindowMetadata = getWindowMetadata;
	return cjs$6;
}

var __spreadArrays$3 = undefined && undefined.__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }
  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }
  return r;
};
var BrowserInfo = /** @class */function () {
  function BrowserInfo(name, version, os) {
    this.name = name;
    this.version = version;
    this.os = os;
    this.type = 'browser';
  }
  return BrowserInfo;
}();
var NodeInfo = /** @class */function () {
  function NodeInfo(version) {
    this.version = version;
    this.type = 'node';
    this.name = 'node';
    this.os = process.platform;
  }
  return NodeInfo;
}();
var SearchBotDeviceInfo = /** @class */function () {
  function SearchBotDeviceInfo(name, version, os, bot) {
    this.name = name;
    this.version = version;
    this.os = os;
    this.bot = bot;
    this.type = 'bot-device';
  }
  return SearchBotDeviceInfo;
}();
var BotInfo = /** @class */function () {
  function BotInfo() {
    this.type = 'bot';
    this.bot = true; // NOTE: deprecated test name instead
    this.name = 'bot';
    this.version = null;
    this.os = null;
  }
  return BotInfo;
}();
var ReactNativeInfo = /** @class */function () {
  function ReactNativeInfo() {
    this.type = 'react-native';
    this.name = 'react-native';
    this.version = null;
    this.os = null;
  }
  return ReactNativeInfo;
}();
// tslint:disable-next-line:max-line-length
var SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
var SEARCHBOT_OS_REGEX = /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
var REQUIRED_VERSION_PARTS = 3;
var userAgentRules = [['aol', /AOLShield\/([0-9\._]+)/], ['edge', /Edge\/([0-9\._]+)/], ['edge-ios', /EdgiOS\/([0-9\._]+)/], ['yandexbrowser', /YaBrowser\/([0-9\._]+)/], ['kakaotalk', /KAKAOTALK\s([0-9\.]+)/], ['samsung', /SamsungBrowser\/([0-9\.]+)/], ['silk', /\bSilk\/([0-9._-]+)\b/], ['miui', /MiuiBrowser\/([0-9\.]+)$/], ['beaker', /BeakerBrowser\/([0-9\.]+)/], ['edge-chromium', /EdgA?\/([0-9\.]+)/], ['chromium-webview', /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/], ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/], ['phantomjs', /PhantomJS\/([0-9\.]+)(:?\s|$)/], ['crios', /CriOS\/([0-9\.]+)(:?\s|$)/], ['firefox', /Firefox\/([0-9\.]+)(?:\s|$)/], ['fxios', /FxiOS\/([0-9\.]+)/], ['opera-mini', /Opera Mini.*Version\/([0-9\.]+)/], ['opera', /Opera\/([0-9\.]+)(?:\s|$)/], ['opera', /OPR\/([0-9\.]+)(:?\s|$)/], ['ie', /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/], ['ie', /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/], ['ie', /MSIE\s(7\.0)/], ['bb10', /BB10;\sTouch.*Version\/([0-9\.]+)/], ['android', /Android\s([0-9\.]+)/], ['ios', /Version\/([0-9\._]+).*Mobile.*Safari.*/], ['safari', /Version\/([0-9\._]+).*Safari/], ['facebook', /FBAV\/([0-9\.]+)/], ['instagram', /Instagram\s([0-9\.]+)/], ['ios-webview', /AppleWebKit\/([0-9\.]+).*Mobile/], ['ios-webview', /AppleWebKit\/([0-9\.]+).*Gecko\)$/], ['searchbot', SEARCHBOX_UA_REGEX]];
var operatingSystemRules = [['iOS', /iP(hone|od|ad)/], ['Android OS', /Android/], ['BlackBerry OS', /BlackBerry|BB10/], ['Windows Mobile', /IEMobile/], ['Amazon OS', /Kindle/], ['Windows 3.11', /Win16/], ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/], ['Windows 98', /(Windows 98)|(Win98)/], ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/], ['Windows XP', /(Windows NT 5.1)|(Windows XP)/], ['Windows Server 2003', /(Windows NT 5.2)/], ['Windows Vista', /(Windows NT 6.0)/], ['Windows 7', /(Windows NT 6.1)/], ['Windows 8', /(Windows NT 6.2)/], ['Windows 8.1', /(Windows NT 6.3)/], ['Windows 10', /(Windows NT 10.0)/], ['Windows ME', /Windows ME/], ['Open BSD', /OpenBSD/], ['Sun OS', /SunOS/], ['Chrome OS', /CrOS/], ['Linux', /(Linux)|(X11)/], ['Mac OS', /(Mac_PowerPC)|(Macintosh)/], ['QNX', /QNX/], ['BeOS', /BeOS/], ['OS/2', /OS\/2/]];
function detect(userAgent) {
  if (!!userAgent) {
    return parseUserAgent(userAgent);
  }
  if (typeof document === 'undefined' && typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    return new ReactNativeInfo();
  }
  if (typeof navigator !== 'undefined') {
    return parseUserAgent(navigator.userAgent);
  }
  return getNodeVersion();
}
function matchUserAgent(ua) {
  // opted for using reduce here rather than Array#first with a regex.test call
  // this is primarily because using the reduce we only perform the regex
  // execution once rather than once for the test and for the exec again below
  // probably something that needs to be benchmarked though
  return ua !== '' && userAgentRules.reduce(function (matched, _a) {
    var browser = _a[0],
      regex = _a[1];
    if (matched) {
      return matched;
    }
    var uaMatch = regex.exec(ua);
    return !!uaMatch && [browser, uaMatch];
  }, false);
}
function browserName(ua) {
  var data = matchUserAgent(ua);
  return data ? data[0] : null;
}
function parseUserAgent(ua) {
  var matchedRule = matchUserAgent(ua);
  if (!matchedRule) {
    return null;
  }
  var name = matchedRule[0],
    match = matchedRule[1];
  if (name === 'searchbot') {
    return new BotInfo();
  }
  var versionParts = match[1] && match[1].split(/[._]/).slice(0, 3);
  if (versionParts) {
    if (versionParts.length < REQUIRED_VERSION_PARTS) {
      versionParts = __spreadArrays$3(versionParts, createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length));
    }
  } else {
    versionParts = [];
  }
  var version = versionParts.join('.');
  var os = detectOS(ua);
  var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);
  if (searchBotMatch && searchBotMatch[1]) {
    return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);
  }
  return new BrowserInfo(name, version, os);
}
function detectOS(ua) {
  for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {
    var _a = operatingSystemRules[ii],
      os = _a[0],
      regex = _a[1];
    var match = regex.exec(ua);
    if (match) {
      return os;
    }
  }
  return null;
}
function getNodeVersion() {
  var isNode = typeof process !== 'undefined' && process.version;
  return isNode ? new NodeInfo(process.version.slice(1)) : null;
}
function createVersionParts(count) {
  var output = [];
  for (var ii = 0; ii < count; ii++) {
    output.push('0');
  }
  return output;
}

var es = /*#__PURE__*/Object.freeze({
  __proto__: null,
  BrowserInfo: BrowserInfo,
  NodeInfo: NodeInfo,
  SearchBotDeviceInfo: SearchBotDeviceInfo,
  BotInfo: BotInfo,
  ReactNativeInfo: ReactNativeInfo,
  detect: detect,
  browserName: browserName,
  parseUserAgent: parseUserAgent,
  detectOS: detectOS,
  getNodeVersion: getNodeVersion
});

var require$$3$1 = /*@__PURE__*/getAugmentedNamespace(es);

var hasRequiredBrowser$1;

function requireBrowser$1 () {
	if (hasRequiredBrowser$1) return browser$1;
	hasRequiredBrowser$1 = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.getClientMeta = exports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = exports.isBrowser = exports.isNode = exports.isMobile = exports.isIOS = exports.isAndroid = exports.detectOS = exports.detectEnv = void 0;
		var tslib_1 = require$$7;
		var windowMetadata = tslib_1.__importStar(requireCjs$8());
		var windowGetters = tslib_1.__importStar(requireCjs$9());
		var detect_browser_1 = require$$3$1;
		function detectEnv(userAgent) {
		  return (0, detect_browser_1.detect)(userAgent);
		}
		exports.detectEnv = detectEnv;
		function detectOS() {
		  var env = detectEnv();
		  return env && env.os ? env.os : undefined;
		}
		exports.detectOS = detectOS;
		function isAndroid() {
		  var os = detectOS();
		  return os ? os.toLowerCase().includes("android") : false;
		}
		exports.isAndroid = isAndroid;
		function isIOS() {
		  var os = detectOS();
		  return os ? os.toLowerCase().includes("ios") || os.toLowerCase().includes("mac") && navigator.maxTouchPoints > 1 : false;
		}
		exports.isIOS = isIOS;
		function isMobile() {
		  var os = detectOS();
		  return os ? isAndroid() || isIOS() : false;
		}
		exports.isMobile = isMobile;
		function isNode() {
		  var env = detectEnv();
		  var result = env && env.name ? env.name.toLowerCase() === "node" : false;
		  return result;
		}
		exports.isNode = isNode;
		function isBrowser() {
		  var result = !isNode() && !!(0, exports.getNavigator)();
		  return result;
		}
		exports.isBrowser = isBrowser;
		exports.getFromWindow = windowGetters.getFromWindow;
		exports.getFromWindowOrThrow = windowGetters.getFromWindowOrThrow;
		exports.getDocumentOrThrow = windowGetters.getDocumentOrThrow;
		exports.getDocument = windowGetters.getDocument;
		exports.getNavigatorOrThrow = windowGetters.getNavigatorOrThrow;
		exports.getNavigator = windowGetters.getNavigator;
		exports.getLocationOrThrow = windowGetters.getLocationOrThrow;
		exports.getLocation = windowGetters.getLocation;
		exports.getCryptoOrThrow = windowGetters.getCryptoOrThrow;
		exports.getCrypto = windowGetters.getCrypto;
		exports.getLocalStorageOrThrow = windowGetters.getLocalStorageOrThrow;
		exports.getLocalStorage = windowGetters.getLocalStorage;
		function getClientMeta() {
		  return windowMetadata.getWindowMetadata();
		}
		exports.getClientMeta = getClientMeta;
} (browser$1));
	return browser$1;
}

var json = {};

function safeJsonParse(value) {
  if (typeof value !== "string") {
    throw new Error("Cannot safe json parse value of type ".concat(typeof value));
  }
  try {
    return JSON.parse(value);
  } catch (_a) {
    return value;
  }
}
function safeJsonStringify(value) {
  return typeof value === "string" ? value : JSON.stringify(value);
}

var esm$2 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  safeJsonParse: safeJsonParse,
  safeJsonStringify: safeJsonStringify
});

var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(esm$2);

var hasRequiredJson;

function requireJson () {
	if (hasRequiredJson) return json;
	hasRequiredJson = 1;

	Object.defineProperty(json, "__esModule", {
	  value: true
	});
	json.safeJsonStringify = json.safeJsonParse = void 0;
	var tslib_1 = require$$7;
	var safeJson = tslib_1.__importStar(require$$1$1);
	json.safeJsonParse = safeJson.safeJsonParse;
	json.safeJsonStringify = safeJson.safeJsonStringify;
	return json;
}

var local = {};

var hasRequiredLocal;

function requireLocal () {
	if (hasRequiredLocal) return local;
	hasRequiredLocal = 1;

	Object.defineProperty(local, "__esModule", {
	  value: true
	});
	local.removeLocal = local.getLocal = local.setLocal = void 0;
	var json_1 = requireJson();
	var browser_1 = requireBrowser$1();
	function setLocal(key, data) {
	  var raw = (0, json_1.safeJsonStringify)(data);
	  var local = (0, browser_1.getLocalStorage)();
	  if (local) {
	    local.setItem(key, raw);
	  }
	}
	local.setLocal = setLocal;
	function getLocal(key) {
	  var data = null;
	  var raw = null;
	  var local = (0, browser_1.getLocalStorage)();
	  if (local) {
	    raw = local.getItem(key);
	  }
	  data = raw ? (0, json_1.safeJsonParse)(raw) : raw;
	  return data;
	}
	local.getLocal = getLocal;
	function removeLocal(key) {
	  var local = (0, browser_1.getLocalStorage)();
	  if (local) {
	    local.removeItem(key);
	  }
	}
	local.removeLocal = removeLocal;
	return local;
}

var mobile = {};

var hasRequiredMobile;

function requireMobile () {
	if (hasRequiredMobile) return mobile;
	hasRequiredMobile = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.getMobileLinkRegistry = exports.getMobileRegistryEntry = exports.saveMobileLinkInfo = exports.formatIOSMobile = exports.mobileLinkChoiceKey = void 0;
		var local_1 = requireLocal();
		exports.mobileLinkChoiceKey = "WALLETCONNECT_DEEPLINK_CHOICE";
		function formatIOSMobile(uri, entry) {
		  var encodedUri = encodeURIComponent(uri);
		  return entry.universalLink ? "".concat(entry.universalLink, "/wc?uri=").concat(encodedUri) : entry.deepLink ? "".concat(entry.deepLink).concat(entry.deepLink.endsWith(":") ? "//" : "/", "wc?uri=").concat(encodedUri) : "";
		}
		exports.formatIOSMobile = formatIOSMobile;
		function saveMobileLinkInfo(data) {
		  var focusUri = data.href.split("?")[0];
		  (0, local_1.setLocal)(exports.mobileLinkChoiceKey, Object.assign(Object.assign({}, data), {
		    href: focusUri
		  }));
		}
		exports.saveMobileLinkInfo = saveMobileLinkInfo;
		function getMobileRegistryEntry(registry, name) {
		  return registry.filter(function (entry) {
		    return entry.name.toLowerCase().includes(name.toLowerCase());
		  })[0];
		}
		exports.getMobileRegistryEntry = getMobileRegistryEntry;
		function getMobileLinkRegistry(registry, whitelist) {
		  var links = registry;
		  if (whitelist) {
		    links = whitelist.map(function (name) {
		      return getMobileRegistryEntry(registry, name);
		    }).filter(Boolean);
		  }
		  return links;
		}
		exports.getMobileLinkRegistry = getMobileLinkRegistry;
} (mobile));
	return mobile;
}

var registry = {};

var hasRequiredRegistry;

function requireRegistry () {
	if (hasRequiredRegistry) return registry;
	hasRequiredRegistry = 1;

	Object.defineProperty(registry, "__esModule", {
	  value: true
	});
	registry.formatMobileRegistry = registry.formatMobileRegistryEntry = registry.getDappRegistryUrl = registry.getWalletRegistryUrl = void 0;
	var API_URL = "https://registry.walletconnect.com";
	function getWalletRegistryUrl() {
	  return API_URL + "/api/v2/wallets";
	}
	registry.getWalletRegistryUrl = getWalletRegistryUrl;
	function getDappRegistryUrl() {
	  return API_URL + "/api/v2/dapps";
	}
	registry.getDappRegistryUrl = getDappRegistryUrl;
	function formatMobileRegistryEntry(entry) {
	  var platform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "mobile";
	  var _a;
	  return {
	    name: entry.name || "",
	    shortName: entry.metadata.shortName || "",
	    color: entry.metadata.colors.primary || "",
	    logo: (_a = entry.image_url.sm) !== null && _a !== void 0 ? _a : "",
	    universalLink: entry[platform].universal || "",
	    deepLink: entry[platform]["native"] || ""
	  };
	}
	registry.formatMobileRegistryEntry = formatMobileRegistryEntry;
	function formatMobileRegistry(registry) {
	  var platform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "mobile";
	  return Object.values(registry).filter(function (entry) {
	    return !!entry[platform].universal || !!entry[platform]["native"];
	  }).map(function (entry) {
	    return formatMobileRegistryEntry(entry, platform);
	  });
	}
	registry.formatMobileRegistry = formatMobileRegistry;
	return registry;
}

var hasRequiredCjs$7;

function requireCjs$7 () {
	if (hasRequiredCjs$7) return cjs$7;
	hasRequiredCjs$7 = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var tslib_1 = require$$7;
		tslib_1.__exportStar(requireBrowser$1(), exports);
		tslib_1.__exportStar(requireJson(), exports);
		tslib_1.__exportStar(requireLocal(), exports);
		tslib_1.__exportStar(requireMobile(), exports);
		tslib_1.__exportStar(requireRegistry(), exports);
} (cjs$7));
	return cjs$7;
}

var constants$4 = {};

var hasRequiredConstants$4;

function requireConstants$4 () {
	if (hasRequiredConstants$4) return constants$4;
	hasRequiredConstants$4 = 1;

	Object.defineProperty(constants$4, "__esModule", {
	  value: true
	});
	constants$4.infuraNetworks = constants$4.stateMethods = constants$4.signingMethods = constants$4.reservedEvents = void 0;
	constants$4.reservedEvents = ["session_request", "session_update", "exchange_key", "connect", "disconnect", "display_uri", "modal_closed", "transport_open", "transport_close", "transport_error"];
	constants$4.signingMethods = ["eth_sendTransaction", "eth_signTransaction", "eth_sign", "eth_signTypedData", "eth_signTypedData_v1", "eth_signTypedData_v2", "eth_signTypedData_v3", "eth_signTypedData_v4", "personal_sign", "wallet_addEthereumChain", "wallet_switchEthereumChain", "wallet_getPermissions", "wallet_requestPermissions", "wallet_registerOnboarding", "wallet_watchAsset", "wallet_scanQRCode"];
	constants$4.stateMethods = ["eth_accounts", "eth_chainId", "net_version"];
	constants$4.infuraNetworks = {
	  1: "mainnet",
	  3: "ropsten",
	  4: "rinkeby",
	  5: "goerli",
	  42: "kovan"
	};
	return constants$4;
}

var encoding$1 = {};

var bn$2 = {exports: {}};

var hasRequiredBn$2;

function requireBn$2 () {
	if (hasRequiredBn$2) return bn$2.exports;
	hasRequiredBn$2 = 1;
	(function (module) {
		(function (module, exports) {

		  // Utils
		  function assert(val, msg) {
		    if (!val) throw new Error(msg || 'Assertion failed');
		  }

		  // Could use `inherits` module, but don't want to move from single file
		  // architecture yet.
		  function inherits(ctor, superCtor) {
		    ctor.super_ = superCtor;
		    var TempCtor = function TempCtor() {};
		    TempCtor.prototype = superCtor.prototype;
		    ctor.prototype = new TempCtor();
		    ctor.prototype.constructor = ctor;
		  }

		  // BN

		  function BN(number, base, endian) {
		    if (BN.isBN(number)) {
		      return number;
		    }
		    this.negative = 0;
		    this.words = null;
		    this.length = 0;

		    // Reduction context
		    this.red = null;
		    if (number !== null) {
		      if (base === 'le' || base === 'be') {
		        endian = base;
		        base = 10;
		      }
		      this._init(number || 0, base || 10, endian || 'be');
		    }
		  }
		  if (typeof module === 'object') {
		    module.exports = BN;
		  } else {
		    exports.BN = BN;
		  }
		  BN.BN = BN;
		  BN.wordSize = 26;
		  var Buffer;
		  try {
		    Buffer = require('buffer').Buffer;
		  } catch (e) {}
		  BN.isBN = function isBN(num) {
		    if (num instanceof BN) {
		      return true;
		    }
		    return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
		  };
		  BN.max = function max(left, right) {
		    if (left.cmp(right) > 0) return left;
		    return right;
		  };
		  BN.min = function min(left, right) {
		    if (left.cmp(right) < 0) return left;
		    return right;
		  };
		  BN.prototype._init = function init(number, base, endian) {
		    if (typeof number === 'number') {
		      return this._initNumber(number, base, endian);
		    }
		    if (typeof number === 'object') {
		      return this._initArray(number, base, endian);
		    }
		    if (base === 'hex') {
		      base = 16;
		    }
		    assert(base === (base | 0) && base >= 2 && base <= 36);
		    number = number.toString().replace(/\s+/g, '');
		    var start = 0;
		    if (number[0] === '-') {
		      start++;
		    }
		    if (base === 16) {
		      this._parseHex(number, start);
		    } else {
		      this._parseBase(number, base, start);
		    }
		    if (number[0] === '-') {
		      this.negative = 1;
		    }
		    this.strip();
		    if (endian !== 'le') return;
		    this._initArray(this.toArray(), base, endian);
		  };
		  BN.prototype._initNumber = function _initNumber(number, base, endian) {
		    if (number < 0) {
		      this.negative = 1;
		      number = -number;
		    }
		    if (number < 0x4000000) {
		      this.words = [number & 0x3ffffff];
		      this.length = 1;
		    } else if (number < 0x10000000000000) {
		      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
		      this.length = 2;
		    } else {
		      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
		      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
		      this.length = 3;
		    }
		    if (endian !== 'le') return;

		    // Reverse the bytes
		    this._initArray(this.toArray(), base, endian);
		  };
		  BN.prototype._initArray = function _initArray(number, base, endian) {
		    // Perhaps a Uint8Array
		    assert(typeof number.length === 'number');
		    if (number.length <= 0) {
		      this.words = [0];
		      this.length = 1;
		      return this;
		    }
		    this.length = Math.ceil(number.length / 3);
		    this.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      this.words[i] = 0;
		    }
		    var j, w;
		    var off = 0;
		    if (endian === 'be') {
		      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
		        w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
		        this.words[j] |= w << off & 0x3ffffff;
		        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
		        off += 24;
		        if (off >= 26) {
		          off -= 26;
		          j++;
		        }
		      }
		    } else if (endian === 'le') {
		      for (i = 0, j = 0; i < number.length; i += 3) {
		        w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
		        this.words[j] |= w << off & 0x3ffffff;
		        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
		        off += 24;
		        if (off >= 26) {
		          off -= 26;
		          j++;
		        }
		      }
		    }
		    return this.strip();
		  };
		  function parseHex(str, start, end) {
		    var r = 0;
		    var len = Math.min(str.length, end);
		    for (var i = start; i < len; i++) {
		      var c = str.charCodeAt(i) - 48;
		      r <<= 4;

		      // 'a' - 'f'
		      if (c >= 49 && c <= 54) {
		        r |= c - 49 + 0xa;

		        // 'A' - 'F'
		      } else if (c >= 17 && c <= 22) {
		        r |= c - 17 + 0xa;

		        // '0' - '9'
		      } else {
		        r |= c & 0xf;
		      }
		    }
		    return r;
		  }
		  BN.prototype._parseHex = function _parseHex(number, start) {
		    // Create possibly bigger array to ensure that it fits the number
		    this.length = Math.ceil((number.length - start) / 6);
		    this.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      this.words[i] = 0;
		    }
		    var j, w;
		    // Scan 24-bit chunks and add them to the number
		    var off = 0;
		    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
		      w = parseHex(number, i, i + 6);
		      this.words[j] |= w << off & 0x3ffffff;
		      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
		      this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
		      off += 24;
		      if (off >= 26) {
		        off -= 26;
		        j++;
		      }
		    }
		    if (i + 6 !== start) {
		      w = parseHex(number, start, i + 6);
		      this.words[j] |= w << off & 0x3ffffff;
		      this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
		    }
		    this.strip();
		  };
		  function parseBase(str, start, end, mul) {
		    var r = 0;
		    var len = Math.min(str.length, end);
		    for (var i = start; i < len; i++) {
		      var c = str.charCodeAt(i) - 48;
		      r *= mul;

		      // 'a'
		      if (c >= 49) {
		        r += c - 49 + 0xa;

		        // 'A'
		      } else if (c >= 17) {
		        r += c - 17 + 0xa;

		        // '0' - '9'
		      } else {
		        r += c;
		      }
		    }
		    return r;
		  }
		  BN.prototype._parseBase = function _parseBase(number, base, start) {
		    // Initialize as zero
		    this.words = [0];
		    this.length = 1;

		    // Find length of limb in base
		    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
		      limbLen++;
		    }
		    limbLen--;
		    limbPow = limbPow / base | 0;
		    var total = number.length - start;
		    var mod = total % limbLen;
		    var end = Math.min(total, total - mod) + start;
		    var word = 0;
		    for (var i = start; i < end; i += limbLen) {
		      word = parseBase(number, i, i + limbLen, base);
		      this.imuln(limbPow);
		      if (this.words[0] + word < 0x4000000) {
		        this.words[0] += word;
		      } else {
		        this._iaddn(word);
		      }
		    }
		    if (mod !== 0) {
		      var pow = 1;
		      word = parseBase(number, i, number.length, base);
		      for (i = 0; i < mod; i++) {
		        pow *= base;
		      }
		      this.imuln(pow);
		      if (this.words[0] + word < 0x4000000) {
		        this.words[0] += word;
		      } else {
		        this._iaddn(word);
		      }
		    }
		  };
		  BN.prototype.copy = function copy(dest) {
		    dest.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      dest.words[i] = this.words[i];
		    }
		    dest.length = this.length;
		    dest.negative = this.negative;
		    dest.red = this.red;
		  };
		  BN.prototype.clone = function clone() {
		    var r = new BN(null);
		    this.copy(r);
		    return r;
		  };
		  BN.prototype._expand = function _expand(size) {
		    while (this.length < size) {
		      this.words[this.length++] = 0;
		    }
		    return this;
		  };

		  // Remove leading `0` from `this`
		  BN.prototype.strip = function strip() {
		    while (this.length > 1 && this.words[this.length - 1] === 0) {
		      this.length--;
		    }
		    return this._normSign();
		  };
		  BN.prototype._normSign = function _normSign() {
		    // -0 = 0
		    if (this.length === 1 && this.words[0] === 0) {
		      this.negative = 0;
		    }
		    return this;
		  };
		  BN.prototype.inspect = function inspect() {
		    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
		  };

		  /*
		   var zeros = [];
		  var groupSizes = [];
		  var groupBases = [];
		   var s = '';
		  var i = -1;
		  while (++i < BN.wordSize) {
		    zeros[i] = s;
		    s += '0';
		  }
		  groupSizes[0] = 0;
		  groupSizes[1] = 0;
		  groupBases[0] = 0;
		  groupBases[1] = 0;
		  var base = 2 - 1;
		  while (++base < 36 + 1) {
		    var groupSize = 0;
		    var groupBase = 1;
		    while (groupBase < (1 << BN.wordSize) / base) {
		      groupBase *= base;
		      groupSize += 1;
		    }
		    groupSizes[base] = groupSize;
		    groupBases[base] = groupBase;
		  }
		   */

		  var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
		  var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
		  var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
		  BN.prototype.toString = function toString(base, padding) {
		    base = base || 10;
		    padding = padding | 0 || 1;
		    var out;
		    if (base === 16 || base === 'hex') {
		      out = '';
		      var off = 0;
		      var carry = 0;
		      for (var i = 0; i < this.length; i++) {
		        var w = this.words[i];
		        var word = ((w << off | carry) & 0xffffff).toString(16);
		        carry = w >>> 24 - off & 0xffffff;
		        if (carry !== 0 || i !== this.length - 1) {
		          out = zeros[6 - word.length] + word + out;
		        } else {
		          out = word + out;
		        }
		        off += 2;
		        if (off >= 26) {
		          off -= 26;
		          i--;
		        }
		      }
		      if (carry !== 0) {
		        out = carry.toString(16) + out;
		      }
		      while (out.length % padding !== 0) {
		        out = '0' + out;
		      }
		      if (this.negative !== 0) {
		        out = '-' + out;
		      }
		      return out;
		    }
		    if (base === (base | 0) && base >= 2 && base <= 36) {
		      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
		      var groupSize = groupSizes[base];
		      // var groupBase = Math.pow(base, groupSize);
		      var groupBase = groupBases[base];
		      out = '';
		      var c = this.clone();
		      c.negative = 0;
		      while (!c.isZero()) {
		        var r = c.modn(groupBase).toString(base);
		        c = c.idivn(groupBase);
		        if (!c.isZero()) {
		          out = zeros[groupSize - r.length] + r + out;
		        } else {
		          out = r + out;
		        }
		      }
		      if (this.isZero()) {
		        out = '0' + out;
		      }
		      while (out.length % padding !== 0) {
		        out = '0' + out;
		      }
		      if (this.negative !== 0) {
		        out = '-' + out;
		      }
		      return out;
		    }
		    assert(false, 'Base should be between 2 and 36');
		  };
		  BN.prototype.toNumber = function toNumber() {
		    var ret = this.words[0];
		    if (this.length === 2) {
		      ret += this.words[1] * 0x4000000;
		    } else if (this.length === 3 && this.words[2] === 0x01) {
		      // NOTE: at this stage it is known that the top bit is set
		      ret += 0x10000000000000 + this.words[1] * 0x4000000;
		    } else if (this.length > 2) {
		      assert(false, 'Number can only safely store up to 53 bits');
		    }
		    return this.negative !== 0 ? -ret : ret;
		  };
		  BN.prototype.toJSON = function toJSON() {
		    return this.toString(16);
		  };
		  BN.prototype.toBuffer = function toBuffer(endian, length) {
		    assert(typeof Buffer !== 'undefined');
		    return this.toArrayLike(Buffer, endian, length);
		  };
		  BN.prototype.toArray = function toArray(endian, length) {
		    return this.toArrayLike(Array, endian, length);
		  };
		  BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
		    var byteLength = this.byteLength();
		    var reqLength = length || Math.max(1, byteLength);
		    assert(byteLength <= reqLength, 'byte array longer than desired length');
		    assert(reqLength > 0, 'Requested array length <= 0');
		    this.strip();
		    var littleEndian = endian === 'le';
		    var res = new ArrayType(reqLength);
		    var b, i;
		    var q = this.clone();
		    if (!littleEndian) {
		      // Assume big-endian
		      for (i = 0; i < reqLength - byteLength; i++) {
		        res[i] = 0;
		      }
		      for (i = 0; !q.isZero(); i++) {
		        b = q.andln(0xff);
		        q.iushrn(8);
		        res[reqLength - i - 1] = b;
		      }
		    } else {
		      for (i = 0; !q.isZero(); i++) {
		        b = q.andln(0xff);
		        q.iushrn(8);
		        res[i] = b;
		      }
		      for (; i < reqLength; i++) {
		        res[i] = 0;
		      }
		    }
		    return res;
		  };
		  if (Math.clz32) {
		    BN.prototype._countBits = function _countBits(w) {
		      return 32 - Math.clz32(w);
		    };
		  } else {
		    BN.prototype._countBits = function _countBits(w) {
		      var t = w;
		      var r = 0;
		      if (t >= 0x1000) {
		        r += 13;
		        t >>>= 13;
		      }
		      if (t >= 0x40) {
		        r += 7;
		        t >>>= 7;
		      }
		      if (t >= 0x8) {
		        r += 4;
		        t >>>= 4;
		      }
		      if (t >= 0x02) {
		        r += 2;
		        t >>>= 2;
		      }
		      return r + t;
		    };
		  }
		  BN.prototype._zeroBits = function _zeroBits(w) {
		    // Short-cut
		    if (w === 0) return 26;
		    var t = w;
		    var r = 0;
		    if ((t & 0x1fff) === 0) {
		      r += 13;
		      t >>>= 13;
		    }
		    if ((t & 0x7f) === 0) {
		      r += 7;
		      t >>>= 7;
		    }
		    if ((t & 0xf) === 0) {
		      r += 4;
		      t >>>= 4;
		    }
		    if ((t & 0x3) === 0) {
		      r += 2;
		      t >>>= 2;
		    }
		    if ((t & 0x1) === 0) {
		      r++;
		    }
		    return r;
		  };

		  // Return number of used bits in a BN
		  BN.prototype.bitLength = function bitLength() {
		    var w = this.words[this.length - 1];
		    var hi = this._countBits(w);
		    return (this.length - 1) * 26 + hi;
		  };
		  function toBitArray(num) {
		    var w = new Array(num.bitLength());
		    for (var bit = 0; bit < w.length; bit++) {
		      var off = bit / 26 | 0;
		      var wbit = bit % 26;
		      w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
		    }
		    return w;
		  }

		  // Number of trailing zero bits
		  BN.prototype.zeroBits = function zeroBits() {
		    if (this.isZero()) return 0;
		    var r = 0;
		    for (var i = 0; i < this.length; i++) {
		      var b = this._zeroBits(this.words[i]);
		      r += b;
		      if (b !== 26) break;
		    }
		    return r;
		  };
		  BN.prototype.byteLength = function byteLength() {
		    return Math.ceil(this.bitLength() / 8);
		  };
		  BN.prototype.toTwos = function toTwos(width) {
		    if (this.negative !== 0) {
		      return this.abs().inotn(width).iaddn(1);
		    }
		    return this.clone();
		  };
		  BN.prototype.fromTwos = function fromTwos(width) {
		    if (this.testn(width - 1)) {
		      return this.notn(width).iaddn(1).ineg();
		    }
		    return this.clone();
		  };
		  BN.prototype.isNeg = function isNeg() {
		    return this.negative !== 0;
		  };

		  // Return negative clone of `this`
		  BN.prototype.neg = function neg() {
		    return this.clone().ineg();
		  };
		  BN.prototype.ineg = function ineg() {
		    if (!this.isZero()) {
		      this.negative ^= 1;
		    }
		    return this;
		  };

		  // Or `num` with `this` in-place
		  BN.prototype.iuor = function iuor(num) {
		    while (this.length < num.length) {
		      this.words[this.length++] = 0;
		    }
		    for (var i = 0; i < num.length; i++) {
		      this.words[i] = this.words[i] | num.words[i];
		    }
		    return this.strip();
		  };
		  BN.prototype.ior = function ior(num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuor(num);
		  };

		  // Or `num` with `this`
		  BN.prototype.or = function or(num) {
		    if (this.length > num.length) return this.clone().ior(num);
		    return num.clone().ior(this);
		  };
		  BN.prototype.uor = function uor(num) {
		    if (this.length > num.length) return this.clone().iuor(num);
		    return num.clone().iuor(this);
		  };

		  // And `num` with `this` in-place
		  BN.prototype.iuand = function iuand(num) {
		    // b = min-length(num, this)
		    var b;
		    if (this.length > num.length) {
		      b = num;
		    } else {
		      b = this;
		    }
		    for (var i = 0; i < b.length; i++) {
		      this.words[i] = this.words[i] & num.words[i];
		    }
		    this.length = b.length;
		    return this.strip();
		  };
		  BN.prototype.iand = function iand(num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuand(num);
		  };

		  // And `num` with `this`
		  BN.prototype.and = function and(num) {
		    if (this.length > num.length) return this.clone().iand(num);
		    return num.clone().iand(this);
		  };
		  BN.prototype.uand = function uand(num) {
		    if (this.length > num.length) return this.clone().iuand(num);
		    return num.clone().iuand(this);
		  };

		  // Xor `num` with `this` in-place
		  BN.prototype.iuxor = function iuxor(num) {
		    // a.length > b.length
		    var a;
		    var b;
		    if (this.length > num.length) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }
		    for (var i = 0; i < b.length; i++) {
		      this.words[i] = a.words[i] ^ b.words[i];
		    }
		    if (this !== a) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }
		    this.length = a.length;
		    return this.strip();
		  };
		  BN.prototype.ixor = function ixor(num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuxor(num);
		  };

		  // Xor `num` with `this`
		  BN.prototype.xor = function xor(num) {
		    if (this.length > num.length) return this.clone().ixor(num);
		    return num.clone().ixor(this);
		  };
		  BN.prototype.uxor = function uxor(num) {
		    if (this.length > num.length) return this.clone().iuxor(num);
		    return num.clone().iuxor(this);
		  };

		  // Not ``this`` with ``width`` bitwidth
		  BN.prototype.inotn = function inotn(width) {
		    assert(typeof width === 'number' && width >= 0);
		    var bytesNeeded = Math.ceil(width / 26) | 0;
		    var bitsLeft = width % 26;

		    // Extend the buffer with leading zeroes
		    this._expand(bytesNeeded);
		    if (bitsLeft > 0) {
		      bytesNeeded--;
		    }

		    // Handle complete words
		    for (var i = 0; i < bytesNeeded; i++) {
		      this.words[i] = ~this.words[i] & 0x3ffffff;
		    }

		    // Handle the residue
		    if (bitsLeft > 0) {
		      this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
		    }

		    // And remove leading zeroes
		    return this.strip();
		  };
		  BN.prototype.notn = function notn(width) {
		    return this.clone().inotn(width);
		  };

		  // Set `bit` of `this`
		  BN.prototype.setn = function setn(bit, val) {
		    assert(typeof bit === 'number' && bit >= 0);
		    var off = bit / 26 | 0;
		    var wbit = bit % 26;
		    this._expand(off + 1);
		    if (val) {
		      this.words[off] = this.words[off] | 1 << wbit;
		    } else {
		      this.words[off] = this.words[off] & ~(1 << wbit);
		    }
		    return this.strip();
		  };

		  // Add `num` to `this` in-place
		  BN.prototype.iadd = function iadd(num) {
		    var r;

		    // negative + positive
		    if (this.negative !== 0 && num.negative === 0) {
		      this.negative = 0;
		      r = this.isub(num);
		      this.negative ^= 1;
		      return this._normSign();

		      // positive + negative
		    } else if (this.negative === 0 && num.negative !== 0) {
		      num.negative = 0;
		      r = this.isub(num);
		      num.negative = 1;
		      return r._normSign();
		    }

		    // a.length > b.length
		    var a, b;
		    if (this.length > num.length) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }
		    var carry = 0;
		    for (var i = 0; i < b.length; i++) {
		      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
		      this.words[i] = r & 0x3ffffff;
		      carry = r >>> 26;
		    }
		    for (; carry !== 0 && i < a.length; i++) {
		      r = (a.words[i] | 0) + carry;
		      this.words[i] = r & 0x3ffffff;
		      carry = r >>> 26;
		    }
		    this.length = a.length;
		    if (carry !== 0) {
		      this.words[this.length] = carry;
		      this.length++;
		      // Copy the rest of the words
		    } else if (a !== this) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }
		    return this;
		  };

		  // Add `num` to `this`
		  BN.prototype.add = function add(num) {
		    var res;
		    if (num.negative !== 0 && this.negative === 0) {
		      num.negative = 0;
		      res = this.sub(num);
		      num.negative ^= 1;
		      return res;
		    } else if (num.negative === 0 && this.negative !== 0) {
		      this.negative = 0;
		      res = num.sub(this);
		      this.negative = 1;
		      return res;
		    }
		    if (this.length > num.length) return this.clone().iadd(num);
		    return num.clone().iadd(this);
		  };

		  // Subtract `num` from `this` in-place
		  BN.prototype.isub = function isub(num) {
		    // this - (-num) = this + num
		    if (num.negative !== 0) {
		      num.negative = 0;
		      var r = this.iadd(num);
		      num.negative = 1;
		      return r._normSign();

		      // -this - num = -(this + num)
		    } else if (this.negative !== 0) {
		      this.negative = 0;
		      this.iadd(num);
		      this.negative = 1;
		      return this._normSign();
		    }

		    // At this point both numbers are positive
		    var cmp = this.cmp(num);

		    // Optimization - zeroify
		    if (cmp === 0) {
		      this.negative = 0;
		      this.length = 1;
		      this.words[0] = 0;
		      return this;
		    }

		    // a > b
		    var a, b;
		    if (cmp > 0) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }
		    var carry = 0;
		    for (var i = 0; i < b.length; i++) {
		      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
		      carry = r >> 26;
		      this.words[i] = r & 0x3ffffff;
		    }
		    for (; carry !== 0 && i < a.length; i++) {
		      r = (a.words[i] | 0) + carry;
		      carry = r >> 26;
		      this.words[i] = r & 0x3ffffff;
		    }

		    // Copy rest of the words
		    if (carry === 0 && i < a.length && a !== this) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }
		    this.length = Math.max(this.length, i);
		    if (a !== this) {
		      this.negative = 1;
		    }
		    return this.strip();
		  };

		  // Subtract `num` from `this`
		  BN.prototype.sub = function sub(num) {
		    return this.clone().isub(num);
		  };
		  function smallMulTo(self, num, out) {
		    out.negative = num.negative ^ self.negative;
		    var len = self.length + num.length | 0;
		    out.length = len;
		    len = len - 1 | 0;

		    // Peel one iteration (compiler can't do it, because of code complexity)
		    var a = self.words[0] | 0;
		    var b = num.words[0] | 0;
		    var r = a * b;
		    var lo = r & 0x3ffffff;
		    var carry = r / 0x4000000 | 0;
		    out.words[0] = lo;
		    for (var k = 1; k < len; k++) {
		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		      // note that ncarry could be >= 0x3ffffff
		      var ncarry = carry >>> 26;
		      var rword = carry & 0x3ffffff;
		      var maxJ = Math.min(k, num.length - 1);
		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
		        var i = k - j | 0;
		        a = self.words[i] | 0;
		        b = num.words[j] | 0;
		        r = a * b + rword;
		        ncarry += r / 0x4000000 | 0;
		        rword = r & 0x3ffffff;
		      }
		      out.words[k] = rword | 0;
		      carry = ncarry | 0;
		    }
		    if (carry !== 0) {
		      out.words[k] = carry | 0;
		    } else {
		      out.length--;
		    }
		    return out.strip();
		  }

		  // TODO(indutny): it may be reasonable to omit it for users who don't need
		  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
		  // multiplication (like elliptic secp256k1).
		  var comb10MulTo = function comb10MulTo(self, num, out) {
		    var a = self.words;
		    var b = num.words;
		    var o = out.words;
		    var c = 0;
		    var lo;
		    var mid;
		    var hi;
		    var a0 = a[0] | 0;
		    var al0 = a0 & 0x1fff;
		    var ah0 = a0 >>> 13;
		    var a1 = a[1] | 0;
		    var al1 = a1 & 0x1fff;
		    var ah1 = a1 >>> 13;
		    var a2 = a[2] | 0;
		    var al2 = a2 & 0x1fff;
		    var ah2 = a2 >>> 13;
		    var a3 = a[3] | 0;
		    var al3 = a3 & 0x1fff;
		    var ah3 = a3 >>> 13;
		    var a4 = a[4] | 0;
		    var al4 = a4 & 0x1fff;
		    var ah4 = a4 >>> 13;
		    var a5 = a[5] | 0;
		    var al5 = a5 & 0x1fff;
		    var ah5 = a5 >>> 13;
		    var a6 = a[6] | 0;
		    var al6 = a6 & 0x1fff;
		    var ah6 = a6 >>> 13;
		    var a7 = a[7] | 0;
		    var al7 = a7 & 0x1fff;
		    var ah7 = a7 >>> 13;
		    var a8 = a[8] | 0;
		    var al8 = a8 & 0x1fff;
		    var ah8 = a8 >>> 13;
		    var a9 = a[9] | 0;
		    var al9 = a9 & 0x1fff;
		    var ah9 = a9 >>> 13;
		    var b0 = b[0] | 0;
		    var bl0 = b0 & 0x1fff;
		    var bh0 = b0 >>> 13;
		    var b1 = b[1] | 0;
		    var bl1 = b1 & 0x1fff;
		    var bh1 = b1 >>> 13;
		    var b2 = b[2] | 0;
		    var bl2 = b2 & 0x1fff;
		    var bh2 = b2 >>> 13;
		    var b3 = b[3] | 0;
		    var bl3 = b3 & 0x1fff;
		    var bh3 = b3 >>> 13;
		    var b4 = b[4] | 0;
		    var bl4 = b4 & 0x1fff;
		    var bh4 = b4 >>> 13;
		    var b5 = b[5] | 0;
		    var bl5 = b5 & 0x1fff;
		    var bh5 = b5 >>> 13;
		    var b6 = b[6] | 0;
		    var bl6 = b6 & 0x1fff;
		    var bh6 = b6 >>> 13;
		    var b7 = b[7] | 0;
		    var bl7 = b7 & 0x1fff;
		    var bh7 = b7 >>> 13;
		    var b8 = b[8] | 0;
		    var bl8 = b8 & 0x1fff;
		    var bh8 = b8 >>> 13;
		    var b9 = b[9] | 0;
		    var bl9 = b9 & 0x1fff;
		    var bh9 = b9 >>> 13;
		    out.negative = self.negative ^ num.negative;
		    out.length = 19;
		    /* k = 0 */
		    lo = Math.imul(al0, bl0);
		    mid = Math.imul(al0, bh0);
		    mid = mid + Math.imul(ah0, bl0) | 0;
		    hi = Math.imul(ah0, bh0);
		    var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
		    w0 &= 0x3ffffff;
		    /* k = 1 */
		    lo = Math.imul(al1, bl0);
		    mid = Math.imul(al1, bh0);
		    mid = mid + Math.imul(ah1, bl0) | 0;
		    hi = Math.imul(ah1, bh0);
		    lo = lo + Math.imul(al0, bl1) | 0;
		    mid = mid + Math.imul(al0, bh1) | 0;
		    mid = mid + Math.imul(ah0, bl1) | 0;
		    hi = hi + Math.imul(ah0, bh1) | 0;
		    var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
		    w1 &= 0x3ffffff;
		    /* k = 2 */
		    lo = Math.imul(al2, bl0);
		    mid = Math.imul(al2, bh0);
		    mid = mid + Math.imul(ah2, bl0) | 0;
		    hi = Math.imul(ah2, bh0);
		    lo = lo + Math.imul(al1, bl1) | 0;
		    mid = mid + Math.imul(al1, bh1) | 0;
		    mid = mid + Math.imul(ah1, bl1) | 0;
		    hi = hi + Math.imul(ah1, bh1) | 0;
		    lo = lo + Math.imul(al0, bl2) | 0;
		    mid = mid + Math.imul(al0, bh2) | 0;
		    mid = mid + Math.imul(ah0, bl2) | 0;
		    hi = hi + Math.imul(ah0, bh2) | 0;
		    var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
		    w2 &= 0x3ffffff;
		    /* k = 3 */
		    lo = Math.imul(al3, bl0);
		    mid = Math.imul(al3, bh0);
		    mid = mid + Math.imul(ah3, bl0) | 0;
		    hi = Math.imul(ah3, bh0);
		    lo = lo + Math.imul(al2, bl1) | 0;
		    mid = mid + Math.imul(al2, bh1) | 0;
		    mid = mid + Math.imul(ah2, bl1) | 0;
		    hi = hi + Math.imul(ah2, bh1) | 0;
		    lo = lo + Math.imul(al1, bl2) | 0;
		    mid = mid + Math.imul(al1, bh2) | 0;
		    mid = mid + Math.imul(ah1, bl2) | 0;
		    hi = hi + Math.imul(ah1, bh2) | 0;
		    lo = lo + Math.imul(al0, bl3) | 0;
		    mid = mid + Math.imul(al0, bh3) | 0;
		    mid = mid + Math.imul(ah0, bl3) | 0;
		    hi = hi + Math.imul(ah0, bh3) | 0;
		    var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
		    w3 &= 0x3ffffff;
		    /* k = 4 */
		    lo = Math.imul(al4, bl0);
		    mid = Math.imul(al4, bh0);
		    mid = mid + Math.imul(ah4, bl0) | 0;
		    hi = Math.imul(ah4, bh0);
		    lo = lo + Math.imul(al3, bl1) | 0;
		    mid = mid + Math.imul(al3, bh1) | 0;
		    mid = mid + Math.imul(ah3, bl1) | 0;
		    hi = hi + Math.imul(ah3, bh1) | 0;
		    lo = lo + Math.imul(al2, bl2) | 0;
		    mid = mid + Math.imul(al2, bh2) | 0;
		    mid = mid + Math.imul(ah2, bl2) | 0;
		    hi = hi + Math.imul(ah2, bh2) | 0;
		    lo = lo + Math.imul(al1, bl3) | 0;
		    mid = mid + Math.imul(al1, bh3) | 0;
		    mid = mid + Math.imul(ah1, bl3) | 0;
		    hi = hi + Math.imul(ah1, bh3) | 0;
		    lo = lo + Math.imul(al0, bl4) | 0;
		    mid = mid + Math.imul(al0, bh4) | 0;
		    mid = mid + Math.imul(ah0, bl4) | 0;
		    hi = hi + Math.imul(ah0, bh4) | 0;
		    var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
		    w4 &= 0x3ffffff;
		    /* k = 5 */
		    lo = Math.imul(al5, bl0);
		    mid = Math.imul(al5, bh0);
		    mid = mid + Math.imul(ah5, bl0) | 0;
		    hi = Math.imul(ah5, bh0);
		    lo = lo + Math.imul(al4, bl1) | 0;
		    mid = mid + Math.imul(al4, bh1) | 0;
		    mid = mid + Math.imul(ah4, bl1) | 0;
		    hi = hi + Math.imul(ah4, bh1) | 0;
		    lo = lo + Math.imul(al3, bl2) | 0;
		    mid = mid + Math.imul(al3, bh2) | 0;
		    mid = mid + Math.imul(ah3, bl2) | 0;
		    hi = hi + Math.imul(ah3, bh2) | 0;
		    lo = lo + Math.imul(al2, bl3) | 0;
		    mid = mid + Math.imul(al2, bh3) | 0;
		    mid = mid + Math.imul(ah2, bl3) | 0;
		    hi = hi + Math.imul(ah2, bh3) | 0;
		    lo = lo + Math.imul(al1, bl4) | 0;
		    mid = mid + Math.imul(al1, bh4) | 0;
		    mid = mid + Math.imul(ah1, bl4) | 0;
		    hi = hi + Math.imul(ah1, bh4) | 0;
		    lo = lo + Math.imul(al0, bl5) | 0;
		    mid = mid + Math.imul(al0, bh5) | 0;
		    mid = mid + Math.imul(ah0, bl5) | 0;
		    hi = hi + Math.imul(ah0, bh5) | 0;
		    var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
		    w5 &= 0x3ffffff;
		    /* k = 6 */
		    lo = Math.imul(al6, bl0);
		    mid = Math.imul(al6, bh0);
		    mid = mid + Math.imul(ah6, bl0) | 0;
		    hi = Math.imul(ah6, bh0);
		    lo = lo + Math.imul(al5, bl1) | 0;
		    mid = mid + Math.imul(al5, bh1) | 0;
		    mid = mid + Math.imul(ah5, bl1) | 0;
		    hi = hi + Math.imul(ah5, bh1) | 0;
		    lo = lo + Math.imul(al4, bl2) | 0;
		    mid = mid + Math.imul(al4, bh2) | 0;
		    mid = mid + Math.imul(ah4, bl2) | 0;
		    hi = hi + Math.imul(ah4, bh2) | 0;
		    lo = lo + Math.imul(al3, bl3) | 0;
		    mid = mid + Math.imul(al3, bh3) | 0;
		    mid = mid + Math.imul(ah3, bl3) | 0;
		    hi = hi + Math.imul(ah3, bh3) | 0;
		    lo = lo + Math.imul(al2, bl4) | 0;
		    mid = mid + Math.imul(al2, bh4) | 0;
		    mid = mid + Math.imul(ah2, bl4) | 0;
		    hi = hi + Math.imul(ah2, bh4) | 0;
		    lo = lo + Math.imul(al1, bl5) | 0;
		    mid = mid + Math.imul(al1, bh5) | 0;
		    mid = mid + Math.imul(ah1, bl5) | 0;
		    hi = hi + Math.imul(ah1, bh5) | 0;
		    lo = lo + Math.imul(al0, bl6) | 0;
		    mid = mid + Math.imul(al0, bh6) | 0;
		    mid = mid + Math.imul(ah0, bl6) | 0;
		    hi = hi + Math.imul(ah0, bh6) | 0;
		    var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
		    w6 &= 0x3ffffff;
		    /* k = 7 */
		    lo = Math.imul(al7, bl0);
		    mid = Math.imul(al7, bh0);
		    mid = mid + Math.imul(ah7, bl0) | 0;
		    hi = Math.imul(ah7, bh0);
		    lo = lo + Math.imul(al6, bl1) | 0;
		    mid = mid + Math.imul(al6, bh1) | 0;
		    mid = mid + Math.imul(ah6, bl1) | 0;
		    hi = hi + Math.imul(ah6, bh1) | 0;
		    lo = lo + Math.imul(al5, bl2) | 0;
		    mid = mid + Math.imul(al5, bh2) | 0;
		    mid = mid + Math.imul(ah5, bl2) | 0;
		    hi = hi + Math.imul(ah5, bh2) | 0;
		    lo = lo + Math.imul(al4, bl3) | 0;
		    mid = mid + Math.imul(al4, bh3) | 0;
		    mid = mid + Math.imul(ah4, bl3) | 0;
		    hi = hi + Math.imul(ah4, bh3) | 0;
		    lo = lo + Math.imul(al3, bl4) | 0;
		    mid = mid + Math.imul(al3, bh4) | 0;
		    mid = mid + Math.imul(ah3, bl4) | 0;
		    hi = hi + Math.imul(ah3, bh4) | 0;
		    lo = lo + Math.imul(al2, bl5) | 0;
		    mid = mid + Math.imul(al2, bh5) | 0;
		    mid = mid + Math.imul(ah2, bl5) | 0;
		    hi = hi + Math.imul(ah2, bh5) | 0;
		    lo = lo + Math.imul(al1, bl6) | 0;
		    mid = mid + Math.imul(al1, bh6) | 0;
		    mid = mid + Math.imul(ah1, bl6) | 0;
		    hi = hi + Math.imul(ah1, bh6) | 0;
		    lo = lo + Math.imul(al0, bl7) | 0;
		    mid = mid + Math.imul(al0, bh7) | 0;
		    mid = mid + Math.imul(ah0, bl7) | 0;
		    hi = hi + Math.imul(ah0, bh7) | 0;
		    var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
		    w7 &= 0x3ffffff;
		    /* k = 8 */
		    lo = Math.imul(al8, bl0);
		    mid = Math.imul(al8, bh0);
		    mid = mid + Math.imul(ah8, bl0) | 0;
		    hi = Math.imul(ah8, bh0);
		    lo = lo + Math.imul(al7, bl1) | 0;
		    mid = mid + Math.imul(al7, bh1) | 0;
		    mid = mid + Math.imul(ah7, bl1) | 0;
		    hi = hi + Math.imul(ah7, bh1) | 0;
		    lo = lo + Math.imul(al6, bl2) | 0;
		    mid = mid + Math.imul(al6, bh2) | 0;
		    mid = mid + Math.imul(ah6, bl2) | 0;
		    hi = hi + Math.imul(ah6, bh2) | 0;
		    lo = lo + Math.imul(al5, bl3) | 0;
		    mid = mid + Math.imul(al5, bh3) | 0;
		    mid = mid + Math.imul(ah5, bl3) | 0;
		    hi = hi + Math.imul(ah5, bh3) | 0;
		    lo = lo + Math.imul(al4, bl4) | 0;
		    mid = mid + Math.imul(al4, bh4) | 0;
		    mid = mid + Math.imul(ah4, bl4) | 0;
		    hi = hi + Math.imul(ah4, bh4) | 0;
		    lo = lo + Math.imul(al3, bl5) | 0;
		    mid = mid + Math.imul(al3, bh5) | 0;
		    mid = mid + Math.imul(ah3, bl5) | 0;
		    hi = hi + Math.imul(ah3, bh5) | 0;
		    lo = lo + Math.imul(al2, bl6) | 0;
		    mid = mid + Math.imul(al2, bh6) | 0;
		    mid = mid + Math.imul(ah2, bl6) | 0;
		    hi = hi + Math.imul(ah2, bh6) | 0;
		    lo = lo + Math.imul(al1, bl7) | 0;
		    mid = mid + Math.imul(al1, bh7) | 0;
		    mid = mid + Math.imul(ah1, bl7) | 0;
		    hi = hi + Math.imul(ah1, bh7) | 0;
		    lo = lo + Math.imul(al0, bl8) | 0;
		    mid = mid + Math.imul(al0, bh8) | 0;
		    mid = mid + Math.imul(ah0, bl8) | 0;
		    hi = hi + Math.imul(ah0, bh8) | 0;
		    var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
		    w8 &= 0x3ffffff;
		    /* k = 9 */
		    lo = Math.imul(al9, bl0);
		    mid = Math.imul(al9, bh0);
		    mid = mid + Math.imul(ah9, bl0) | 0;
		    hi = Math.imul(ah9, bh0);
		    lo = lo + Math.imul(al8, bl1) | 0;
		    mid = mid + Math.imul(al8, bh1) | 0;
		    mid = mid + Math.imul(ah8, bl1) | 0;
		    hi = hi + Math.imul(ah8, bh1) | 0;
		    lo = lo + Math.imul(al7, bl2) | 0;
		    mid = mid + Math.imul(al7, bh2) | 0;
		    mid = mid + Math.imul(ah7, bl2) | 0;
		    hi = hi + Math.imul(ah7, bh2) | 0;
		    lo = lo + Math.imul(al6, bl3) | 0;
		    mid = mid + Math.imul(al6, bh3) | 0;
		    mid = mid + Math.imul(ah6, bl3) | 0;
		    hi = hi + Math.imul(ah6, bh3) | 0;
		    lo = lo + Math.imul(al5, bl4) | 0;
		    mid = mid + Math.imul(al5, bh4) | 0;
		    mid = mid + Math.imul(ah5, bl4) | 0;
		    hi = hi + Math.imul(ah5, bh4) | 0;
		    lo = lo + Math.imul(al4, bl5) | 0;
		    mid = mid + Math.imul(al4, bh5) | 0;
		    mid = mid + Math.imul(ah4, bl5) | 0;
		    hi = hi + Math.imul(ah4, bh5) | 0;
		    lo = lo + Math.imul(al3, bl6) | 0;
		    mid = mid + Math.imul(al3, bh6) | 0;
		    mid = mid + Math.imul(ah3, bl6) | 0;
		    hi = hi + Math.imul(ah3, bh6) | 0;
		    lo = lo + Math.imul(al2, bl7) | 0;
		    mid = mid + Math.imul(al2, bh7) | 0;
		    mid = mid + Math.imul(ah2, bl7) | 0;
		    hi = hi + Math.imul(ah2, bh7) | 0;
		    lo = lo + Math.imul(al1, bl8) | 0;
		    mid = mid + Math.imul(al1, bh8) | 0;
		    mid = mid + Math.imul(ah1, bl8) | 0;
		    hi = hi + Math.imul(ah1, bh8) | 0;
		    lo = lo + Math.imul(al0, bl9) | 0;
		    mid = mid + Math.imul(al0, bh9) | 0;
		    mid = mid + Math.imul(ah0, bl9) | 0;
		    hi = hi + Math.imul(ah0, bh9) | 0;
		    var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
		    w9 &= 0x3ffffff;
		    /* k = 10 */
		    lo = Math.imul(al9, bl1);
		    mid = Math.imul(al9, bh1);
		    mid = mid + Math.imul(ah9, bl1) | 0;
		    hi = Math.imul(ah9, bh1);
		    lo = lo + Math.imul(al8, bl2) | 0;
		    mid = mid + Math.imul(al8, bh2) | 0;
		    mid = mid + Math.imul(ah8, bl2) | 0;
		    hi = hi + Math.imul(ah8, bh2) | 0;
		    lo = lo + Math.imul(al7, bl3) | 0;
		    mid = mid + Math.imul(al7, bh3) | 0;
		    mid = mid + Math.imul(ah7, bl3) | 0;
		    hi = hi + Math.imul(ah7, bh3) | 0;
		    lo = lo + Math.imul(al6, bl4) | 0;
		    mid = mid + Math.imul(al6, bh4) | 0;
		    mid = mid + Math.imul(ah6, bl4) | 0;
		    hi = hi + Math.imul(ah6, bh4) | 0;
		    lo = lo + Math.imul(al5, bl5) | 0;
		    mid = mid + Math.imul(al5, bh5) | 0;
		    mid = mid + Math.imul(ah5, bl5) | 0;
		    hi = hi + Math.imul(ah5, bh5) | 0;
		    lo = lo + Math.imul(al4, bl6) | 0;
		    mid = mid + Math.imul(al4, bh6) | 0;
		    mid = mid + Math.imul(ah4, bl6) | 0;
		    hi = hi + Math.imul(ah4, bh6) | 0;
		    lo = lo + Math.imul(al3, bl7) | 0;
		    mid = mid + Math.imul(al3, bh7) | 0;
		    mid = mid + Math.imul(ah3, bl7) | 0;
		    hi = hi + Math.imul(ah3, bh7) | 0;
		    lo = lo + Math.imul(al2, bl8) | 0;
		    mid = mid + Math.imul(al2, bh8) | 0;
		    mid = mid + Math.imul(ah2, bl8) | 0;
		    hi = hi + Math.imul(ah2, bh8) | 0;
		    lo = lo + Math.imul(al1, bl9) | 0;
		    mid = mid + Math.imul(al1, bh9) | 0;
		    mid = mid + Math.imul(ah1, bl9) | 0;
		    hi = hi + Math.imul(ah1, bh9) | 0;
		    var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
		    w10 &= 0x3ffffff;
		    /* k = 11 */
		    lo = Math.imul(al9, bl2);
		    mid = Math.imul(al9, bh2);
		    mid = mid + Math.imul(ah9, bl2) | 0;
		    hi = Math.imul(ah9, bh2);
		    lo = lo + Math.imul(al8, bl3) | 0;
		    mid = mid + Math.imul(al8, bh3) | 0;
		    mid = mid + Math.imul(ah8, bl3) | 0;
		    hi = hi + Math.imul(ah8, bh3) | 0;
		    lo = lo + Math.imul(al7, bl4) | 0;
		    mid = mid + Math.imul(al7, bh4) | 0;
		    mid = mid + Math.imul(ah7, bl4) | 0;
		    hi = hi + Math.imul(ah7, bh4) | 0;
		    lo = lo + Math.imul(al6, bl5) | 0;
		    mid = mid + Math.imul(al6, bh5) | 0;
		    mid = mid + Math.imul(ah6, bl5) | 0;
		    hi = hi + Math.imul(ah6, bh5) | 0;
		    lo = lo + Math.imul(al5, bl6) | 0;
		    mid = mid + Math.imul(al5, bh6) | 0;
		    mid = mid + Math.imul(ah5, bl6) | 0;
		    hi = hi + Math.imul(ah5, bh6) | 0;
		    lo = lo + Math.imul(al4, bl7) | 0;
		    mid = mid + Math.imul(al4, bh7) | 0;
		    mid = mid + Math.imul(ah4, bl7) | 0;
		    hi = hi + Math.imul(ah4, bh7) | 0;
		    lo = lo + Math.imul(al3, bl8) | 0;
		    mid = mid + Math.imul(al3, bh8) | 0;
		    mid = mid + Math.imul(ah3, bl8) | 0;
		    hi = hi + Math.imul(ah3, bh8) | 0;
		    lo = lo + Math.imul(al2, bl9) | 0;
		    mid = mid + Math.imul(al2, bh9) | 0;
		    mid = mid + Math.imul(ah2, bl9) | 0;
		    hi = hi + Math.imul(ah2, bh9) | 0;
		    var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
		    w11 &= 0x3ffffff;
		    /* k = 12 */
		    lo = Math.imul(al9, bl3);
		    mid = Math.imul(al9, bh3);
		    mid = mid + Math.imul(ah9, bl3) | 0;
		    hi = Math.imul(ah9, bh3);
		    lo = lo + Math.imul(al8, bl4) | 0;
		    mid = mid + Math.imul(al8, bh4) | 0;
		    mid = mid + Math.imul(ah8, bl4) | 0;
		    hi = hi + Math.imul(ah8, bh4) | 0;
		    lo = lo + Math.imul(al7, bl5) | 0;
		    mid = mid + Math.imul(al7, bh5) | 0;
		    mid = mid + Math.imul(ah7, bl5) | 0;
		    hi = hi + Math.imul(ah7, bh5) | 0;
		    lo = lo + Math.imul(al6, bl6) | 0;
		    mid = mid + Math.imul(al6, bh6) | 0;
		    mid = mid + Math.imul(ah6, bl6) | 0;
		    hi = hi + Math.imul(ah6, bh6) | 0;
		    lo = lo + Math.imul(al5, bl7) | 0;
		    mid = mid + Math.imul(al5, bh7) | 0;
		    mid = mid + Math.imul(ah5, bl7) | 0;
		    hi = hi + Math.imul(ah5, bh7) | 0;
		    lo = lo + Math.imul(al4, bl8) | 0;
		    mid = mid + Math.imul(al4, bh8) | 0;
		    mid = mid + Math.imul(ah4, bl8) | 0;
		    hi = hi + Math.imul(ah4, bh8) | 0;
		    lo = lo + Math.imul(al3, bl9) | 0;
		    mid = mid + Math.imul(al3, bh9) | 0;
		    mid = mid + Math.imul(ah3, bl9) | 0;
		    hi = hi + Math.imul(ah3, bh9) | 0;
		    var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
		    w12 &= 0x3ffffff;
		    /* k = 13 */
		    lo = Math.imul(al9, bl4);
		    mid = Math.imul(al9, bh4);
		    mid = mid + Math.imul(ah9, bl4) | 0;
		    hi = Math.imul(ah9, bh4);
		    lo = lo + Math.imul(al8, bl5) | 0;
		    mid = mid + Math.imul(al8, bh5) | 0;
		    mid = mid + Math.imul(ah8, bl5) | 0;
		    hi = hi + Math.imul(ah8, bh5) | 0;
		    lo = lo + Math.imul(al7, bl6) | 0;
		    mid = mid + Math.imul(al7, bh6) | 0;
		    mid = mid + Math.imul(ah7, bl6) | 0;
		    hi = hi + Math.imul(ah7, bh6) | 0;
		    lo = lo + Math.imul(al6, bl7) | 0;
		    mid = mid + Math.imul(al6, bh7) | 0;
		    mid = mid + Math.imul(ah6, bl7) | 0;
		    hi = hi + Math.imul(ah6, bh7) | 0;
		    lo = lo + Math.imul(al5, bl8) | 0;
		    mid = mid + Math.imul(al5, bh8) | 0;
		    mid = mid + Math.imul(ah5, bl8) | 0;
		    hi = hi + Math.imul(ah5, bh8) | 0;
		    lo = lo + Math.imul(al4, bl9) | 0;
		    mid = mid + Math.imul(al4, bh9) | 0;
		    mid = mid + Math.imul(ah4, bl9) | 0;
		    hi = hi + Math.imul(ah4, bh9) | 0;
		    var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
		    w13 &= 0x3ffffff;
		    /* k = 14 */
		    lo = Math.imul(al9, bl5);
		    mid = Math.imul(al9, bh5);
		    mid = mid + Math.imul(ah9, bl5) | 0;
		    hi = Math.imul(ah9, bh5);
		    lo = lo + Math.imul(al8, bl6) | 0;
		    mid = mid + Math.imul(al8, bh6) | 0;
		    mid = mid + Math.imul(ah8, bl6) | 0;
		    hi = hi + Math.imul(ah8, bh6) | 0;
		    lo = lo + Math.imul(al7, bl7) | 0;
		    mid = mid + Math.imul(al7, bh7) | 0;
		    mid = mid + Math.imul(ah7, bl7) | 0;
		    hi = hi + Math.imul(ah7, bh7) | 0;
		    lo = lo + Math.imul(al6, bl8) | 0;
		    mid = mid + Math.imul(al6, bh8) | 0;
		    mid = mid + Math.imul(ah6, bl8) | 0;
		    hi = hi + Math.imul(ah6, bh8) | 0;
		    lo = lo + Math.imul(al5, bl9) | 0;
		    mid = mid + Math.imul(al5, bh9) | 0;
		    mid = mid + Math.imul(ah5, bl9) | 0;
		    hi = hi + Math.imul(ah5, bh9) | 0;
		    var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
		    w14 &= 0x3ffffff;
		    /* k = 15 */
		    lo = Math.imul(al9, bl6);
		    mid = Math.imul(al9, bh6);
		    mid = mid + Math.imul(ah9, bl6) | 0;
		    hi = Math.imul(ah9, bh6);
		    lo = lo + Math.imul(al8, bl7) | 0;
		    mid = mid + Math.imul(al8, bh7) | 0;
		    mid = mid + Math.imul(ah8, bl7) | 0;
		    hi = hi + Math.imul(ah8, bh7) | 0;
		    lo = lo + Math.imul(al7, bl8) | 0;
		    mid = mid + Math.imul(al7, bh8) | 0;
		    mid = mid + Math.imul(ah7, bl8) | 0;
		    hi = hi + Math.imul(ah7, bh8) | 0;
		    lo = lo + Math.imul(al6, bl9) | 0;
		    mid = mid + Math.imul(al6, bh9) | 0;
		    mid = mid + Math.imul(ah6, bl9) | 0;
		    hi = hi + Math.imul(ah6, bh9) | 0;
		    var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
		    w15 &= 0x3ffffff;
		    /* k = 16 */
		    lo = Math.imul(al9, bl7);
		    mid = Math.imul(al9, bh7);
		    mid = mid + Math.imul(ah9, bl7) | 0;
		    hi = Math.imul(ah9, bh7);
		    lo = lo + Math.imul(al8, bl8) | 0;
		    mid = mid + Math.imul(al8, bh8) | 0;
		    mid = mid + Math.imul(ah8, bl8) | 0;
		    hi = hi + Math.imul(ah8, bh8) | 0;
		    lo = lo + Math.imul(al7, bl9) | 0;
		    mid = mid + Math.imul(al7, bh9) | 0;
		    mid = mid + Math.imul(ah7, bl9) | 0;
		    hi = hi + Math.imul(ah7, bh9) | 0;
		    var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
		    w16 &= 0x3ffffff;
		    /* k = 17 */
		    lo = Math.imul(al9, bl8);
		    mid = Math.imul(al9, bh8);
		    mid = mid + Math.imul(ah9, bl8) | 0;
		    hi = Math.imul(ah9, bh8);
		    lo = lo + Math.imul(al8, bl9) | 0;
		    mid = mid + Math.imul(al8, bh9) | 0;
		    mid = mid + Math.imul(ah8, bl9) | 0;
		    hi = hi + Math.imul(ah8, bh9) | 0;
		    var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
		    w17 &= 0x3ffffff;
		    /* k = 18 */
		    lo = Math.imul(al9, bl9);
		    mid = Math.imul(al9, bh9);
		    mid = mid + Math.imul(ah9, bl9) | 0;
		    hi = Math.imul(ah9, bh9);
		    var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
		    w18 &= 0x3ffffff;
		    o[0] = w0;
		    o[1] = w1;
		    o[2] = w2;
		    o[3] = w3;
		    o[4] = w4;
		    o[5] = w5;
		    o[6] = w6;
		    o[7] = w7;
		    o[8] = w8;
		    o[9] = w9;
		    o[10] = w10;
		    o[11] = w11;
		    o[12] = w12;
		    o[13] = w13;
		    o[14] = w14;
		    o[15] = w15;
		    o[16] = w16;
		    o[17] = w17;
		    o[18] = w18;
		    if (c !== 0) {
		      o[19] = c;
		      out.length++;
		    }
		    return out;
		  };

		  // Polyfill comb
		  if (!Math.imul) {
		    comb10MulTo = smallMulTo;
		  }
		  function bigMulTo(self, num, out) {
		    out.negative = num.negative ^ self.negative;
		    out.length = self.length + num.length;
		    var carry = 0;
		    var hncarry = 0;
		    for (var k = 0; k < out.length - 1; k++) {
		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		      // note that ncarry could be >= 0x3ffffff
		      var ncarry = hncarry;
		      hncarry = 0;
		      var rword = carry & 0x3ffffff;
		      var maxJ = Math.min(k, num.length - 1);
		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
		        var i = k - j;
		        var a = self.words[i] | 0;
		        var b = num.words[j] | 0;
		        var r = a * b;
		        var lo = r & 0x3ffffff;
		        ncarry = ncarry + (r / 0x4000000 | 0) | 0;
		        lo = lo + rword | 0;
		        rword = lo & 0x3ffffff;
		        ncarry = ncarry + (lo >>> 26) | 0;
		        hncarry += ncarry >>> 26;
		        ncarry &= 0x3ffffff;
		      }
		      out.words[k] = rword;
		      carry = ncarry;
		      ncarry = hncarry;
		    }
		    if (carry !== 0) {
		      out.words[k] = carry;
		    } else {
		      out.length--;
		    }
		    return out.strip();
		  }
		  function jumboMulTo(self, num, out) {
		    var fftm = new FFTM();
		    return fftm.mulp(self, num, out);
		  }
		  BN.prototype.mulTo = function mulTo(num, out) {
		    var res;
		    var len = this.length + num.length;
		    if (this.length === 10 && num.length === 10) {
		      res = comb10MulTo(this, num, out);
		    } else if (len < 63) {
		      res = smallMulTo(this, num, out);
		    } else if (len < 1024) {
		      res = bigMulTo(this, num, out);
		    } else {
		      res = jumboMulTo(this, num, out);
		    }
		    return res;
		  };

		  // Cooley-Tukey algorithm for FFT
		  // slightly revisited to rely on looping instead of recursion

		  function FFTM(x, y) {
		    this.x = x;
		    this.y = y;
		  }
		  FFTM.prototype.makeRBT = function makeRBT(N) {
		    var t = new Array(N);
		    var l = BN.prototype._countBits(N) - 1;
		    for (var i = 0; i < N; i++) {
		      t[i] = this.revBin(i, l, N);
		    }
		    return t;
		  };

		  // Returns binary-reversed representation of `x`
		  FFTM.prototype.revBin = function revBin(x, l, N) {
		    if (x === 0 || x === N - 1) return x;
		    var rb = 0;
		    for (var i = 0; i < l; i++) {
		      rb |= (x & 1) << l - i - 1;
		      x >>= 1;
		    }
		    return rb;
		  };

		  // Performs "tweedling" phase, therefore 'emulating'
		  // behaviour of the recursive algorithm
		  FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
		    for (var i = 0; i < N; i++) {
		      rtws[i] = rws[rbt[i]];
		      itws[i] = iws[rbt[i]];
		    }
		  };
		  FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
		    this.permute(rbt, rws, iws, rtws, itws, N);
		    for (var s = 1; s < N; s <<= 1) {
		      var l = s << 1;
		      var rtwdf = Math.cos(2 * Math.PI / l);
		      var itwdf = Math.sin(2 * Math.PI / l);
		      for (var p = 0; p < N; p += l) {
		        var rtwdf_ = rtwdf;
		        var itwdf_ = itwdf;
		        for (var j = 0; j < s; j++) {
		          var re = rtws[p + j];
		          var ie = itws[p + j];
		          var ro = rtws[p + j + s];
		          var io = itws[p + j + s];
		          var rx = rtwdf_ * ro - itwdf_ * io;
		          io = rtwdf_ * io + itwdf_ * ro;
		          ro = rx;
		          rtws[p + j] = re + ro;
		          itws[p + j] = ie + io;
		          rtws[p + j + s] = re - ro;
		          itws[p + j + s] = ie - io;

		          /* jshint maxdepth : false */
		          if (j !== l) {
		            rx = rtwdf * rtwdf_ - itwdf * itwdf_;
		            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
		            rtwdf_ = rx;
		          }
		        }
		      }
		    }
		  };
		  FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
		    var N = Math.max(m, n) | 1;
		    var odd = N & 1;
		    var i = 0;
		    for (N = N / 2 | 0; N; N = N >>> 1) {
		      i++;
		    }
		    return 1 << i + 1 + odd;
		  };
		  FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
		    if (N <= 1) return;
		    for (var i = 0; i < N / 2; i++) {
		      var t = rws[i];
		      rws[i] = rws[N - i - 1];
		      rws[N - i - 1] = t;
		      t = iws[i];
		      iws[i] = -iws[N - i - 1];
		      iws[N - i - 1] = -t;
		    }
		  };
		  FFTM.prototype.normalize13b = function normalize13b(ws, N) {
		    var carry = 0;
		    for (var i = 0; i < N / 2; i++) {
		      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
		      ws[i] = w & 0x3ffffff;
		      if (w < 0x4000000) {
		        carry = 0;
		      } else {
		        carry = w / 0x4000000 | 0;
		      }
		    }
		    return ws;
		  };
		  FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
		    var carry = 0;
		    for (var i = 0; i < len; i++) {
		      carry = carry + (ws[i] | 0);
		      rws[2 * i] = carry & 0x1fff;
		      carry = carry >>> 13;
		      rws[2 * i + 1] = carry & 0x1fff;
		      carry = carry >>> 13;
		    }

		    // Pad with zeroes
		    for (i = 2 * len; i < N; ++i) {
		      rws[i] = 0;
		    }
		    assert(carry === 0);
		    assert((carry & ~0x1fff) === 0);
		  };
		  FFTM.prototype.stub = function stub(N) {
		    var ph = new Array(N);
		    for (var i = 0; i < N; i++) {
		      ph[i] = 0;
		    }
		    return ph;
		  };
		  FFTM.prototype.mulp = function mulp(x, y, out) {
		    var N = 2 * this.guessLen13b(x.length, y.length);
		    var rbt = this.makeRBT(N);
		    var _ = this.stub(N);
		    var rws = new Array(N);
		    var rwst = new Array(N);
		    var iwst = new Array(N);
		    var nrws = new Array(N);
		    var nrwst = new Array(N);
		    var niwst = new Array(N);
		    var rmws = out.words;
		    rmws.length = N;
		    this.convert13b(x.words, x.length, rws, N);
		    this.convert13b(y.words, y.length, nrws, N);
		    this.transform(rws, _, rwst, iwst, N, rbt);
		    this.transform(nrws, _, nrwst, niwst, N, rbt);
		    for (var i = 0; i < N; i++) {
		      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
		      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
		      rwst[i] = rx;
		    }
		    this.conjugate(rwst, iwst, N);
		    this.transform(rwst, iwst, rmws, _, N, rbt);
		    this.conjugate(rmws, _, N);
		    this.normalize13b(rmws, N);
		    out.negative = x.negative ^ y.negative;
		    out.length = x.length + y.length;
		    return out.strip();
		  };

		  // Multiply `this` by `num`
		  BN.prototype.mul = function mul(num) {
		    var out = new BN(null);
		    out.words = new Array(this.length + num.length);
		    return this.mulTo(num, out);
		  };

		  // Multiply employing FFT
		  BN.prototype.mulf = function mulf(num) {
		    var out = new BN(null);
		    out.words = new Array(this.length + num.length);
		    return jumboMulTo(this, num, out);
		  };

		  // In-place Multiplication
		  BN.prototype.imul = function imul(num) {
		    return this.clone().mulTo(num, this);
		  };
		  BN.prototype.imuln = function imuln(num) {
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);

		    // Carry
		    var carry = 0;
		    for (var i = 0; i < this.length; i++) {
		      var w = (this.words[i] | 0) * num;
		      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
		      carry >>= 26;
		      carry += w / 0x4000000 | 0;
		      // NOTE: lo is 27bit maximum
		      carry += lo >>> 26;
		      this.words[i] = lo & 0x3ffffff;
		    }
		    if (carry !== 0) {
		      this.words[i] = carry;
		      this.length++;
		    }
		    return this;
		  };
		  BN.prototype.muln = function muln(num) {
		    return this.clone().imuln(num);
		  };

		  // `this` * `this`
		  BN.prototype.sqr = function sqr() {
		    return this.mul(this);
		  };

		  // `this` * `this` in-place
		  BN.prototype.isqr = function isqr() {
		    return this.imul(this.clone());
		  };

		  // Math.pow(`this`, `num`)
		  BN.prototype.pow = function pow(num) {
		    var w = toBitArray(num);
		    if (w.length === 0) return new BN(1);

		    // Skip leading zeroes
		    var res = this;
		    for (var i = 0; i < w.length; i++, res = res.sqr()) {
		      if (w[i] !== 0) break;
		    }
		    if (++i < w.length) {
		      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
		        if (w[i] === 0) continue;
		        res = res.mul(q);
		      }
		    }
		    return res;
		  };

		  // Shift-left in-place
		  BN.prototype.iushln = function iushln(bits) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var r = bits % 26;
		    var s = (bits - r) / 26;
		    var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
		    var i;
		    if (r !== 0) {
		      var carry = 0;
		      for (i = 0; i < this.length; i++) {
		        var newCarry = this.words[i] & carryMask;
		        var c = (this.words[i] | 0) - newCarry << r;
		        this.words[i] = c | carry;
		        carry = newCarry >>> 26 - r;
		      }
		      if (carry) {
		        this.words[i] = carry;
		        this.length++;
		      }
		    }
		    if (s !== 0) {
		      for (i = this.length - 1; i >= 0; i--) {
		        this.words[i + s] = this.words[i];
		      }
		      for (i = 0; i < s; i++) {
		        this.words[i] = 0;
		      }
		      this.length += s;
		    }
		    return this.strip();
		  };
		  BN.prototype.ishln = function ishln(bits) {
		    // TODO(indutny): implement me
		    assert(this.negative === 0);
		    return this.iushln(bits);
		  };

		  // Shift-right in-place
		  // NOTE: `hint` is a lowest bit before trailing zeroes
		  // NOTE: if `extended` is present - it will be filled with destroyed bits
		  BN.prototype.iushrn = function iushrn(bits, hint, extended) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var h;
		    if (hint) {
		      h = (hint - hint % 26) / 26;
		    } else {
		      h = 0;
		    }
		    var r = bits % 26;
		    var s = Math.min((bits - r) / 26, this.length);
		    var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
		    var maskedWords = extended;
		    h -= s;
		    h = Math.max(0, h);

		    // Extended mode, copy masked part
		    if (maskedWords) {
		      for (var i = 0; i < s; i++) {
		        maskedWords.words[i] = this.words[i];
		      }
		      maskedWords.length = s;
		    }
		    if (s === 0) ; else if (this.length > s) {
		      this.length -= s;
		      for (i = 0; i < this.length; i++) {
		        this.words[i] = this.words[i + s];
		      }
		    } else {
		      this.words[0] = 0;
		      this.length = 1;
		    }
		    var carry = 0;
		    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
		      var word = this.words[i] | 0;
		      this.words[i] = carry << 26 - r | word >>> r;
		      carry = word & mask;
		    }

		    // Push carried bits as a mask
		    if (maskedWords && carry !== 0) {
		      maskedWords.words[maskedWords.length++] = carry;
		    }
		    if (this.length === 0) {
		      this.words[0] = 0;
		      this.length = 1;
		    }
		    return this.strip();
		  };
		  BN.prototype.ishrn = function ishrn(bits, hint, extended) {
		    // TODO(indutny): implement me
		    assert(this.negative === 0);
		    return this.iushrn(bits, hint, extended);
		  };

		  // Shift-left
		  BN.prototype.shln = function shln(bits) {
		    return this.clone().ishln(bits);
		  };
		  BN.prototype.ushln = function ushln(bits) {
		    return this.clone().iushln(bits);
		  };

		  // Shift-right
		  BN.prototype.shrn = function shrn(bits) {
		    return this.clone().ishrn(bits);
		  };
		  BN.prototype.ushrn = function ushrn(bits) {
		    return this.clone().iushrn(bits);
		  };

		  // Test if n bit is set
		  BN.prototype.testn = function testn(bit) {
		    assert(typeof bit === 'number' && bit >= 0);
		    var r = bit % 26;
		    var s = (bit - r) / 26;
		    var q = 1 << r;

		    // Fast case: bit is much higher than all existing words
		    if (this.length <= s) return false;

		    // Check bit and return
		    var w = this.words[s];
		    return !!(w & q);
		  };

		  // Return only lowers bits of number (in-place)
		  BN.prototype.imaskn = function imaskn(bits) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var r = bits % 26;
		    var s = (bits - r) / 26;
		    assert(this.negative === 0, 'imaskn works only with positive numbers');
		    if (this.length <= s) {
		      return this;
		    }
		    if (r !== 0) {
		      s++;
		    }
		    this.length = Math.min(s, this.length);
		    if (r !== 0) {
		      var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
		      this.words[this.length - 1] &= mask;
		    }
		    return this.strip();
		  };

		  // Return only lowers bits of number
		  BN.prototype.maskn = function maskn(bits) {
		    return this.clone().imaskn(bits);
		  };

		  // Add plain number `num` to `this`
		  BN.prototype.iaddn = function iaddn(num) {
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);
		    if (num < 0) return this.isubn(-num);

		    // Possible sign change
		    if (this.negative !== 0) {
		      if (this.length === 1 && (this.words[0] | 0) < num) {
		        this.words[0] = num - (this.words[0] | 0);
		        this.negative = 0;
		        return this;
		      }
		      this.negative = 0;
		      this.isubn(num);
		      this.negative = 1;
		      return this;
		    }

		    // Add without checks
		    return this._iaddn(num);
		  };
		  BN.prototype._iaddn = function _iaddn(num) {
		    this.words[0] += num;

		    // Carry
		    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
		      this.words[i] -= 0x4000000;
		      if (i === this.length - 1) {
		        this.words[i + 1] = 1;
		      } else {
		        this.words[i + 1]++;
		      }
		    }
		    this.length = Math.max(this.length, i + 1);
		    return this;
		  };

		  // Subtract plain number `num` from `this`
		  BN.prototype.isubn = function isubn(num) {
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);
		    if (num < 0) return this.iaddn(-num);
		    if (this.negative !== 0) {
		      this.negative = 0;
		      this.iaddn(num);
		      this.negative = 1;
		      return this;
		    }
		    this.words[0] -= num;
		    if (this.length === 1 && this.words[0] < 0) {
		      this.words[0] = -this.words[0];
		      this.negative = 1;
		    } else {
		      // Carry
		      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
		        this.words[i] += 0x4000000;
		        this.words[i + 1] -= 1;
		      }
		    }
		    return this.strip();
		  };
		  BN.prototype.addn = function addn(num) {
		    return this.clone().iaddn(num);
		  };
		  BN.prototype.subn = function subn(num) {
		    return this.clone().isubn(num);
		  };
		  BN.prototype.iabs = function iabs() {
		    this.negative = 0;
		    return this;
		  };
		  BN.prototype.abs = function abs() {
		    return this.clone().iabs();
		  };
		  BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
		    var len = num.length + shift;
		    var i;
		    this._expand(len);
		    var w;
		    var carry = 0;
		    for (i = 0; i < num.length; i++) {
		      w = (this.words[i + shift] | 0) + carry;
		      var right = (num.words[i] | 0) * mul;
		      w -= right & 0x3ffffff;
		      carry = (w >> 26) - (right / 0x4000000 | 0);
		      this.words[i + shift] = w & 0x3ffffff;
		    }
		    for (; i < this.length - shift; i++) {
		      w = (this.words[i + shift] | 0) + carry;
		      carry = w >> 26;
		      this.words[i + shift] = w & 0x3ffffff;
		    }
		    if (carry === 0) return this.strip();

		    // Subtraction overflow
		    assert(carry === -1);
		    carry = 0;
		    for (i = 0; i < this.length; i++) {
		      w = -(this.words[i] | 0) + carry;
		      carry = w >> 26;
		      this.words[i] = w & 0x3ffffff;
		    }
		    this.negative = 1;
		    return this.strip();
		  };
		  BN.prototype._wordDiv = function _wordDiv(num, mode) {
		    var shift = this.length - num.length;
		    var a = this.clone();
		    var b = num;

		    // Normalize
		    var bhi = b.words[b.length - 1] | 0;
		    var bhiBits = this._countBits(bhi);
		    shift = 26 - bhiBits;
		    if (shift !== 0) {
		      b = b.ushln(shift);
		      a.iushln(shift);
		      bhi = b.words[b.length - 1] | 0;
		    }

		    // Initialize quotient
		    var m = a.length - b.length;
		    var q;
		    if (mode !== 'mod') {
		      q = new BN(null);
		      q.length = m + 1;
		      q.words = new Array(q.length);
		      for (var i = 0; i < q.length; i++) {
		        q.words[i] = 0;
		      }
		    }
		    var diff = a.clone()._ishlnsubmul(b, 1, m);
		    if (diff.negative === 0) {
		      a = diff;
		      if (q) {
		        q.words[m] = 1;
		      }
		    }
		    for (var j = m - 1; j >= 0; j--) {
		      var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);

		      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
		      // (0x7ffffff)
		      qj = Math.min(qj / bhi | 0, 0x3ffffff);
		      a._ishlnsubmul(b, qj, j);
		      while (a.negative !== 0) {
		        qj--;
		        a.negative = 0;
		        a._ishlnsubmul(b, 1, j);
		        if (!a.isZero()) {
		          a.negative ^= 1;
		        }
		      }
		      if (q) {
		        q.words[j] = qj;
		      }
		    }
		    if (q) {
		      q.strip();
		    }
		    a.strip();

		    // Denormalize
		    if (mode !== 'div' && shift !== 0) {
		      a.iushrn(shift);
		    }
		    return {
		      div: q || null,
		      mod: a
		    };
		  };

		  // NOTE: 1) `mode` can be set to `mod` to request mod only,
		  //       to `div` to request div only, or be absent to
		  //       request both div & mod
		  //       2) `positive` is true if unsigned mod is requested
		  BN.prototype.divmod = function divmod(num, mode, positive) {
		    assert(!num.isZero());
		    if (this.isZero()) {
		      return {
		        div: new BN(0),
		        mod: new BN(0)
		      };
		    }
		    var div, mod, res;
		    if (this.negative !== 0 && num.negative === 0) {
		      res = this.neg().divmod(num, mode);
		      if (mode !== 'mod') {
		        div = res.div.neg();
		      }
		      if (mode !== 'div') {
		        mod = res.mod.neg();
		        if (positive && mod.negative !== 0) {
		          mod.iadd(num);
		        }
		      }
		      return {
		        div: div,
		        mod: mod
		      };
		    }
		    if (this.negative === 0 && num.negative !== 0) {
		      res = this.divmod(num.neg(), mode);
		      if (mode !== 'mod') {
		        div = res.div.neg();
		      }
		      return {
		        div: div,
		        mod: res.mod
		      };
		    }
		    if ((this.negative & num.negative) !== 0) {
		      res = this.neg().divmod(num.neg(), mode);
		      if (mode !== 'div') {
		        mod = res.mod.neg();
		        if (positive && mod.negative !== 0) {
		          mod.isub(num);
		        }
		      }
		      return {
		        div: res.div,
		        mod: mod
		      };
		    }

		    // Both numbers are positive at this point

		    // Strip both numbers to approximate shift value
		    if (num.length > this.length || this.cmp(num) < 0) {
		      return {
		        div: new BN(0),
		        mod: this
		      };
		    }

		    // Very short reduction
		    if (num.length === 1) {
		      if (mode === 'div') {
		        return {
		          div: this.divn(num.words[0]),
		          mod: null
		        };
		      }
		      if (mode === 'mod') {
		        return {
		          div: null,
		          mod: new BN(this.modn(num.words[0]))
		        };
		      }
		      return {
		        div: this.divn(num.words[0]),
		        mod: new BN(this.modn(num.words[0]))
		      };
		    }
		    return this._wordDiv(num, mode);
		  };

		  // Find `this` / `num`
		  BN.prototype.div = function div(num) {
		    return this.divmod(num, 'div', false).div;
		  };

		  // Find `this` % `num`
		  BN.prototype.mod = function mod(num) {
		    return this.divmod(num, 'mod', false).mod;
		  };
		  BN.prototype.umod = function umod(num) {
		    return this.divmod(num, 'mod', true).mod;
		  };

		  // Find Round(`this` / `num`)
		  BN.prototype.divRound = function divRound(num) {
		    var dm = this.divmod(num);

		    // Fast case - exact division
		    if (dm.mod.isZero()) return dm.div;
		    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
		    var half = num.ushrn(1);
		    var r2 = num.andln(1);
		    var cmp = mod.cmp(half);

		    // Round down
		    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

		    // Round up
		    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
		  };
		  BN.prototype.modn = function modn(num) {
		    assert(num <= 0x3ffffff);
		    var p = (1 << 26) % num;
		    var acc = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      acc = (p * acc + (this.words[i] | 0)) % num;
		    }
		    return acc;
		  };

		  // In-place division by number
		  BN.prototype.idivn = function idivn(num) {
		    assert(num <= 0x3ffffff);
		    var carry = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      var w = (this.words[i] | 0) + carry * 0x4000000;
		      this.words[i] = w / num | 0;
		      carry = w % num;
		    }
		    return this.strip();
		  };
		  BN.prototype.divn = function divn(num) {
		    return this.clone().idivn(num);
		  };
		  BN.prototype.egcd = function egcd(p) {
		    assert(p.negative === 0);
		    assert(!p.isZero());
		    var x = this;
		    var y = p.clone();
		    if (x.negative !== 0) {
		      x = x.umod(p);
		    } else {
		      x = x.clone();
		    }

		    // A * x + B * y = x
		    var A = new BN(1);
		    var B = new BN(0);

		    // C * x + D * y = y
		    var C = new BN(0);
		    var D = new BN(1);
		    var g = 0;
		    while (x.isEven() && y.isEven()) {
		      x.iushrn(1);
		      y.iushrn(1);
		      ++g;
		    }
		    var yp = y.clone();
		    var xp = x.clone();
		    while (!x.isZero()) {
		      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
		      }
		      if (i > 0) {
		        x.iushrn(i);
		        while (i-- > 0) {
		          if (A.isOdd() || B.isOdd()) {
		            A.iadd(yp);
		            B.isub(xp);
		          }
		          A.iushrn(1);
		          B.iushrn(1);
		        }
		      }
		      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
		      }
		      if (j > 0) {
		        y.iushrn(j);
		        while (j-- > 0) {
		          if (C.isOdd() || D.isOdd()) {
		            C.iadd(yp);
		            D.isub(xp);
		          }
		          C.iushrn(1);
		          D.iushrn(1);
		        }
		      }
		      if (x.cmp(y) >= 0) {
		        x.isub(y);
		        A.isub(C);
		        B.isub(D);
		      } else {
		        y.isub(x);
		        C.isub(A);
		        D.isub(B);
		      }
		    }
		    return {
		      a: C,
		      b: D,
		      gcd: y.iushln(g)
		    };
		  };

		  // This is reduced incarnation of the binary EEA
		  // above, designated to invert members of the
		  // _prime_ fields F(p) at a maximal speed
		  BN.prototype._invmp = function _invmp(p) {
		    assert(p.negative === 0);
		    assert(!p.isZero());
		    var a = this;
		    var b = p.clone();
		    if (a.negative !== 0) {
		      a = a.umod(p);
		    } else {
		      a = a.clone();
		    }
		    var x1 = new BN(1);
		    var x2 = new BN(0);
		    var delta = b.clone();
		    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
		      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
		      }
		      if (i > 0) {
		        a.iushrn(i);
		        while (i-- > 0) {
		          if (x1.isOdd()) {
		            x1.iadd(delta);
		          }
		          x1.iushrn(1);
		        }
		      }
		      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
		      }
		      if (j > 0) {
		        b.iushrn(j);
		        while (j-- > 0) {
		          if (x2.isOdd()) {
		            x2.iadd(delta);
		          }
		          x2.iushrn(1);
		        }
		      }
		      if (a.cmp(b) >= 0) {
		        a.isub(b);
		        x1.isub(x2);
		      } else {
		        b.isub(a);
		        x2.isub(x1);
		      }
		    }
		    var res;
		    if (a.cmpn(1) === 0) {
		      res = x1;
		    } else {
		      res = x2;
		    }
		    if (res.cmpn(0) < 0) {
		      res.iadd(p);
		    }
		    return res;
		  };
		  BN.prototype.gcd = function gcd(num) {
		    if (this.isZero()) return num.abs();
		    if (num.isZero()) return this.abs();
		    var a = this.clone();
		    var b = num.clone();
		    a.negative = 0;
		    b.negative = 0;

		    // Remove common factor of two
		    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
		      a.iushrn(1);
		      b.iushrn(1);
		    }
		    do {
		      while (a.isEven()) {
		        a.iushrn(1);
		      }
		      while (b.isEven()) {
		        b.iushrn(1);
		      }
		      var r = a.cmp(b);
		      if (r < 0) {
		        // Swap `a` and `b` to make `a` always bigger than `b`
		        var t = a;
		        a = b;
		        b = t;
		      } else if (r === 0 || b.cmpn(1) === 0) {
		        break;
		      }
		      a.isub(b);
		    } while (true);
		    return b.iushln(shift);
		  };

		  // Invert number in the field F(num)
		  BN.prototype.invm = function invm(num) {
		    return this.egcd(num).a.umod(num);
		  };
		  BN.prototype.isEven = function isEven() {
		    return (this.words[0] & 1) === 0;
		  };
		  BN.prototype.isOdd = function isOdd() {
		    return (this.words[0] & 1) === 1;
		  };

		  // And first word and num
		  BN.prototype.andln = function andln(num) {
		    return this.words[0] & num;
		  };

		  // Increment at the bit position in-line
		  BN.prototype.bincn = function bincn(bit) {
		    assert(typeof bit === 'number');
		    var r = bit % 26;
		    var s = (bit - r) / 26;
		    var q = 1 << r;

		    // Fast case: bit is much higher than all existing words
		    if (this.length <= s) {
		      this._expand(s + 1);
		      this.words[s] |= q;
		      return this;
		    }

		    // Add bit and propagate, if needed
		    var carry = q;
		    for (var i = s; carry !== 0 && i < this.length; i++) {
		      var w = this.words[i] | 0;
		      w += carry;
		      carry = w >>> 26;
		      w &= 0x3ffffff;
		      this.words[i] = w;
		    }
		    if (carry !== 0) {
		      this.words[i] = carry;
		      this.length++;
		    }
		    return this;
		  };
		  BN.prototype.isZero = function isZero() {
		    return this.length === 1 && this.words[0] === 0;
		  };
		  BN.prototype.cmpn = function cmpn(num) {
		    var negative = num < 0;
		    if (this.negative !== 0 && !negative) return -1;
		    if (this.negative === 0 && negative) return 1;
		    this.strip();
		    var res;
		    if (this.length > 1) {
		      res = 1;
		    } else {
		      if (negative) {
		        num = -num;
		      }
		      assert(num <= 0x3ffffff, 'Number is too big');
		      var w = this.words[0] | 0;
		      res = w === num ? 0 : w < num ? -1 : 1;
		    }
		    if (this.negative !== 0) return -res | 0;
		    return res;
		  };

		  // Compare two numbers and return:
		  // 1 - if `this` > `num`
		  // 0 - if `this` == `num`
		  // -1 - if `this` < `num`
		  BN.prototype.cmp = function cmp(num) {
		    if (this.negative !== 0 && num.negative === 0) return -1;
		    if (this.negative === 0 && num.negative !== 0) return 1;
		    var res = this.ucmp(num);
		    if (this.negative !== 0) return -res | 0;
		    return res;
		  };

		  // Unsigned comparison
		  BN.prototype.ucmp = function ucmp(num) {
		    // At this point both numbers have the same sign
		    if (this.length > num.length) return 1;
		    if (this.length < num.length) return -1;
		    var res = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      var a = this.words[i] | 0;
		      var b = num.words[i] | 0;
		      if (a === b) continue;
		      if (a < b) {
		        res = -1;
		      } else if (a > b) {
		        res = 1;
		      }
		      break;
		    }
		    return res;
		  };
		  BN.prototype.gtn = function gtn(num) {
		    return this.cmpn(num) === 1;
		  };
		  BN.prototype.gt = function gt(num) {
		    return this.cmp(num) === 1;
		  };
		  BN.prototype.gten = function gten(num) {
		    return this.cmpn(num) >= 0;
		  };
		  BN.prototype.gte = function gte(num) {
		    return this.cmp(num) >= 0;
		  };
		  BN.prototype.ltn = function ltn(num) {
		    return this.cmpn(num) === -1;
		  };
		  BN.prototype.lt = function lt(num) {
		    return this.cmp(num) === -1;
		  };
		  BN.prototype.lten = function lten(num) {
		    return this.cmpn(num) <= 0;
		  };
		  BN.prototype.lte = function lte(num) {
		    return this.cmp(num) <= 0;
		  };
		  BN.prototype.eqn = function eqn(num) {
		    return this.cmpn(num) === 0;
		  };
		  BN.prototype.eq = function eq(num) {
		    return this.cmp(num) === 0;
		  };

		  //
		  // A reduce context, could be using montgomery or something better, depending
		  // on the `m` itself.
		  //
		  BN.red = function red(num) {
		    return new Red(num);
		  };
		  BN.prototype.toRed = function toRed(ctx) {
		    assert(!this.red, 'Already a number in reduction context');
		    assert(this.negative === 0, 'red works only with positives');
		    return ctx.convertTo(this)._forceRed(ctx);
		  };
		  BN.prototype.fromRed = function fromRed() {
		    assert(this.red, 'fromRed works only with numbers in reduction context');
		    return this.red.convertFrom(this);
		  };
		  BN.prototype._forceRed = function _forceRed(ctx) {
		    this.red = ctx;
		    return this;
		  };
		  BN.prototype.forceRed = function forceRed(ctx) {
		    assert(!this.red, 'Already a number in reduction context');
		    return this._forceRed(ctx);
		  };
		  BN.prototype.redAdd = function redAdd(num) {
		    assert(this.red, 'redAdd works only with red numbers');
		    return this.red.add(this, num);
		  };
		  BN.prototype.redIAdd = function redIAdd(num) {
		    assert(this.red, 'redIAdd works only with red numbers');
		    return this.red.iadd(this, num);
		  };
		  BN.prototype.redSub = function redSub(num) {
		    assert(this.red, 'redSub works only with red numbers');
		    return this.red.sub(this, num);
		  };
		  BN.prototype.redISub = function redISub(num) {
		    assert(this.red, 'redISub works only with red numbers');
		    return this.red.isub(this, num);
		  };
		  BN.prototype.redShl = function redShl(num) {
		    assert(this.red, 'redShl works only with red numbers');
		    return this.red.shl(this, num);
		  };
		  BN.prototype.redMul = function redMul(num) {
		    assert(this.red, 'redMul works only with red numbers');
		    this.red._verify2(this, num);
		    return this.red.mul(this, num);
		  };
		  BN.prototype.redIMul = function redIMul(num) {
		    assert(this.red, 'redMul works only with red numbers');
		    this.red._verify2(this, num);
		    return this.red.imul(this, num);
		  };
		  BN.prototype.redSqr = function redSqr() {
		    assert(this.red, 'redSqr works only with red numbers');
		    this.red._verify1(this);
		    return this.red.sqr(this);
		  };
		  BN.prototype.redISqr = function redISqr() {
		    assert(this.red, 'redISqr works only with red numbers');
		    this.red._verify1(this);
		    return this.red.isqr(this);
		  };

		  // Square root over p
		  BN.prototype.redSqrt = function redSqrt() {
		    assert(this.red, 'redSqrt works only with red numbers');
		    this.red._verify1(this);
		    return this.red.sqrt(this);
		  };
		  BN.prototype.redInvm = function redInvm() {
		    assert(this.red, 'redInvm works only with red numbers');
		    this.red._verify1(this);
		    return this.red.invm(this);
		  };

		  // Return negative clone of `this` % `red modulo`
		  BN.prototype.redNeg = function redNeg() {
		    assert(this.red, 'redNeg works only with red numbers');
		    this.red._verify1(this);
		    return this.red.neg(this);
		  };
		  BN.prototype.redPow = function redPow(num) {
		    assert(this.red && !num.red, 'redPow(normalNum)');
		    this.red._verify1(this);
		    return this.red.pow(this, num);
		  };

		  // Prime numbers with efficient reduction
		  var primes = {
		    k256: null,
		    p224: null,
		    p192: null,
		    p25519: null
		  };

		  // Pseudo-Mersenne prime
		  function MPrime(name, p) {
		    // P = 2 ^ N - K
		    this.name = name;
		    this.p = new BN(p, 16);
		    this.n = this.p.bitLength();
		    this.k = new BN(1).iushln(this.n).isub(this.p);
		    this.tmp = this._tmp();
		  }
		  MPrime.prototype._tmp = function _tmp() {
		    var tmp = new BN(null);
		    tmp.words = new Array(Math.ceil(this.n / 13));
		    return tmp;
		  };
		  MPrime.prototype.ireduce = function ireduce(num) {
		    // Assumes that `num` is less than `P^2`
		    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
		    var r = num;
		    var rlen;
		    do {
		      this.split(r, this.tmp);
		      r = this.imulK(r);
		      r = r.iadd(this.tmp);
		      rlen = r.bitLength();
		    } while (rlen > this.n);
		    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
		    if (cmp === 0) {
		      r.words[0] = 0;
		      r.length = 1;
		    } else if (cmp > 0) {
		      r.isub(this.p);
		    } else {
		      r.strip();
		    }
		    return r;
		  };
		  MPrime.prototype.split = function split(input, out) {
		    input.iushrn(this.n, 0, out);
		  };
		  MPrime.prototype.imulK = function imulK(num) {
		    return num.imul(this.k);
		  };
		  function K256() {
		    MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
		  }
		  inherits(K256, MPrime);
		  K256.prototype.split = function split(input, output) {
		    // 256 = 9 * 26 + 22
		    var mask = 0x3fffff;
		    var outLen = Math.min(input.length, 9);
		    for (var i = 0; i < outLen; i++) {
		      output.words[i] = input.words[i];
		    }
		    output.length = outLen;
		    if (input.length <= 9) {
		      input.words[0] = 0;
		      input.length = 1;
		      return;
		    }

		    // Shift by 9 limbs
		    var prev = input.words[9];
		    output.words[output.length++] = prev & mask;
		    for (i = 10; i < input.length; i++) {
		      var next = input.words[i] | 0;
		      input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
		      prev = next;
		    }
		    prev >>>= 22;
		    input.words[i - 10] = prev;
		    if (prev === 0 && input.length > 10) {
		      input.length -= 10;
		    } else {
		      input.length -= 9;
		    }
		  };
		  K256.prototype.imulK = function imulK(num) {
		    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
		    num.words[num.length] = 0;
		    num.words[num.length + 1] = 0;
		    num.length += 2;

		    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
		    var lo = 0;
		    for (var i = 0; i < num.length; i++) {
		      var w = num.words[i] | 0;
		      lo += w * 0x3d1;
		      num.words[i] = lo & 0x3ffffff;
		      lo = w * 0x40 + (lo / 0x4000000 | 0);
		    }

		    // Fast length reduction
		    if (num.words[num.length - 1] === 0) {
		      num.length--;
		      if (num.words[num.length - 1] === 0) {
		        num.length--;
		      }
		    }
		    return num;
		  };
		  function P224() {
		    MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
		  }
		  inherits(P224, MPrime);
		  function P192() {
		    MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
		  }
		  inherits(P192, MPrime);
		  function P25519() {
		    // 2 ^ 255 - 19
		    MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
		  }
		  inherits(P25519, MPrime);
		  P25519.prototype.imulK = function imulK(num) {
		    // K = 0x13
		    var carry = 0;
		    for (var i = 0; i < num.length; i++) {
		      var hi = (num.words[i] | 0) * 0x13 + carry;
		      var lo = hi & 0x3ffffff;
		      hi >>>= 26;
		      num.words[i] = lo;
		      carry = hi;
		    }
		    if (carry !== 0) {
		      num.words[num.length++] = carry;
		    }
		    return num;
		  };

		  // Exported mostly for testing purposes, use plain name instead
		  BN._prime = function prime(name) {
		    // Cached version of prime
		    if (primes[name]) return primes[name];
		    var prime;
		    if (name === 'k256') {
		      prime = new K256();
		    } else if (name === 'p224') {
		      prime = new P224();
		    } else if (name === 'p192') {
		      prime = new P192();
		    } else if (name === 'p25519') {
		      prime = new P25519();
		    } else {
		      throw new Error('Unknown prime ' + name);
		    }
		    primes[name] = prime;
		    return prime;
		  };

		  //
		  // Base reduction engine
		  //
		  function Red(m) {
		    if (typeof m === 'string') {
		      var prime = BN._prime(m);
		      this.m = prime.p;
		      this.prime = prime;
		    } else {
		      assert(m.gtn(1), 'modulus must be greater than 1');
		      this.m = m;
		      this.prime = null;
		    }
		  }
		  Red.prototype._verify1 = function _verify1(a) {
		    assert(a.negative === 0, 'red works only with positives');
		    assert(a.red, 'red works only with red numbers');
		  };
		  Red.prototype._verify2 = function _verify2(a, b) {
		    assert((a.negative | b.negative) === 0, 'red works only with positives');
		    assert(a.red && a.red === b.red, 'red works only with red numbers');
		  };
		  Red.prototype.imod = function imod(a) {
		    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
		    return a.umod(this.m)._forceRed(this);
		  };
		  Red.prototype.neg = function neg(a) {
		    if (a.isZero()) {
		      return a.clone();
		    }
		    return this.m.sub(a)._forceRed(this);
		  };
		  Red.prototype.add = function add(a, b) {
		    this._verify2(a, b);
		    var res = a.add(b);
		    if (res.cmp(this.m) >= 0) {
		      res.isub(this.m);
		    }
		    return res._forceRed(this);
		  };
		  Red.prototype.iadd = function iadd(a, b) {
		    this._verify2(a, b);
		    var res = a.iadd(b);
		    if (res.cmp(this.m) >= 0) {
		      res.isub(this.m);
		    }
		    return res;
		  };
		  Red.prototype.sub = function sub(a, b) {
		    this._verify2(a, b);
		    var res = a.sub(b);
		    if (res.cmpn(0) < 0) {
		      res.iadd(this.m);
		    }
		    return res._forceRed(this);
		  };
		  Red.prototype.isub = function isub(a, b) {
		    this._verify2(a, b);
		    var res = a.isub(b);
		    if (res.cmpn(0) < 0) {
		      res.iadd(this.m);
		    }
		    return res;
		  };
		  Red.prototype.shl = function shl(a, num) {
		    this._verify1(a);
		    return this.imod(a.ushln(num));
		  };
		  Red.prototype.imul = function imul(a, b) {
		    this._verify2(a, b);
		    return this.imod(a.imul(b));
		  };
		  Red.prototype.mul = function mul(a, b) {
		    this._verify2(a, b);
		    return this.imod(a.mul(b));
		  };
		  Red.prototype.isqr = function isqr(a) {
		    return this.imul(a, a.clone());
		  };
		  Red.prototype.sqr = function sqr(a) {
		    return this.mul(a, a);
		  };
		  Red.prototype.sqrt = function sqrt(a) {
		    if (a.isZero()) return a.clone();
		    var mod3 = this.m.andln(3);
		    assert(mod3 % 2 === 1);

		    // Fast case
		    if (mod3 === 3) {
		      var pow = this.m.add(new BN(1)).iushrn(2);
		      return this.pow(a, pow);
		    }

		    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
		    //
		    // Find Q and S, that Q * 2 ^ S = (P - 1)
		    var q = this.m.subn(1);
		    var s = 0;
		    while (!q.isZero() && q.andln(1) === 0) {
		      s++;
		      q.iushrn(1);
		    }
		    assert(!q.isZero());
		    var one = new BN(1).toRed(this);
		    var nOne = one.redNeg();

		    // Find quadratic non-residue
		    // NOTE: Max is such because of generalized Riemann hypothesis.
		    var lpow = this.m.subn(1).iushrn(1);
		    var z = this.m.bitLength();
		    z = new BN(2 * z * z).toRed(this);
		    while (this.pow(z, lpow).cmp(nOne) !== 0) {
		      z.redIAdd(nOne);
		    }
		    var c = this.pow(z, q);
		    var r = this.pow(a, q.addn(1).iushrn(1));
		    var t = this.pow(a, q);
		    var m = s;
		    while (t.cmp(one) !== 0) {
		      var tmp = t;
		      for (var i = 0; tmp.cmp(one) !== 0; i++) {
		        tmp = tmp.redSqr();
		      }
		      assert(i < m);
		      var b = this.pow(c, new BN(1).iushln(m - i - 1));
		      r = r.redMul(b);
		      c = b.redSqr();
		      t = t.redMul(c);
		      m = i;
		    }
		    return r;
		  };
		  Red.prototype.invm = function invm(a) {
		    var inv = a._invmp(this.m);
		    if (inv.negative !== 0) {
		      inv.negative = 0;
		      return this.imod(inv).redNeg();
		    } else {
		      return this.imod(inv);
		    }
		  };
		  Red.prototype.pow = function pow(a, num) {
		    if (num.isZero()) return new BN(1).toRed(this);
		    if (num.cmpn(1) === 0) return a.clone();
		    var windowSize = 4;
		    var wnd = new Array(1 << windowSize);
		    wnd[0] = new BN(1).toRed(this);
		    wnd[1] = a;
		    for (var i = 2; i < wnd.length; i++) {
		      wnd[i] = this.mul(wnd[i - 1], a);
		    }
		    var res = wnd[0];
		    var current = 0;
		    var currentLen = 0;
		    var start = num.bitLength() % 26;
		    if (start === 0) {
		      start = 26;
		    }
		    for (i = num.length - 1; i >= 0; i--) {
		      var word = num.words[i];
		      for (var j = start - 1; j >= 0; j--) {
		        var bit = word >> j & 1;
		        if (res !== wnd[0]) {
		          res = this.sqr(res);
		        }
		        if (bit === 0 && current === 0) {
		          currentLen = 0;
		          continue;
		        }
		        current <<= 1;
		        current |= bit;
		        currentLen++;
		        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
		        res = this.mul(res, wnd[current]);
		        currentLen = 0;
		        current = 0;
		      }
		      start = 26;
		    }
		    return res;
		  };
		  Red.prototype.convertTo = function convertTo(num) {
		    var r = num.umod(this.m);
		    return r === num ? r.clone() : r;
		  };
		  Red.prototype.convertFrom = function convertFrom(num) {
		    var res = num.clone();
		    res.red = null;
		    return res;
		  };

		  //
		  // Montgomery method engine
		  //

		  BN.mont = function mont(num) {
		    return new Mont(num);
		  };
		  function Mont(m) {
		    Red.call(this, m);
		    this.shift = this.m.bitLength();
		    if (this.shift % 26 !== 0) {
		      this.shift += 26 - this.shift % 26;
		    }
		    this.r = new BN(1).iushln(this.shift);
		    this.r2 = this.imod(this.r.sqr());
		    this.rinv = this.r._invmp(this.m);
		    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
		    this.minv = this.minv.umod(this.r);
		    this.minv = this.r.sub(this.minv);
		  }
		  inherits(Mont, Red);
		  Mont.prototype.convertTo = function convertTo(num) {
		    return this.imod(num.ushln(this.shift));
		  };
		  Mont.prototype.convertFrom = function convertFrom(num) {
		    var r = this.imod(num.mul(this.rinv));
		    r.red = null;
		    return r;
		  };
		  Mont.prototype.imul = function imul(a, b) {
		    if (a.isZero() || b.isZero()) {
		      a.words[0] = 0;
		      a.length = 1;
		      return a;
		    }
		    var t = a.imul(b);
		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		    var u = t.isub(c).iushrn(this.shift);
		    var res = u;
		    if (u.cmp(this.m) >= 0) {
		      res = u.isub(this.m);
		    } else if (u.cmpn(0) < 0) {
		      res = u.iadd(this.m);
		    }
		    return res._forceRed(this);
		  };
		  Mont.prototype.mul = function mul(a, b) {
		    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
		    var t = a.mul(b);
		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		    var u = t.isub(c).iushrn(this.shift);
		    var res = u;
		    if (u.cmp(this.m) >= 0) {
		      res = u.isub(this.m);
		    } else if (u.cmpn(0) < 0) {
		      res = u.iadd(this.m);
		    }
		    return res._forceRed(this);
		  };
		  Mont.prototype.invm = function invm(a) {
		    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
		    var res = this.imod(a._invmp(this.m).mul(this.r2));
		    return res._forceRed(this);
		  };
		})(module, commonjsGlobal);
} (bn$2));
	return bn$2.exports;
}

var isTypedarray = isTypedArray$2;
isTypedArray$2.strict = isStrictTypedArray;
isTypedArray$2.loose = isLooseTypedArray;
var toString = Object.prototype.toString;
var names = {
  '[object Int8Array]': true,
  '[object Int16Array]': true,
  '[object Int32Array]': true,
  '[object Uint8Array]': true,
  '[object Uint8ClampedArray]': true,
  '[object Uint16Array]': true,
  '[object Uint32Array]': true,
  '[object Float32Array]': true,
  '[object Float64Array]': true
};
function isTypedArray$2(arr) {
  return isStrictTypedArray(arr) || isLooseTypedArray(arr);
}
function isStrictTypedArray(arr) {
  return arr instanceof Int8Array || arr instanceof Int16Array || arr instanceof Int32Array || arr instanceof Uint8Array || arr instanceof Uint8ClampedArray || arr instanceof Uint16Array || arr instanceof Uint32Array || arr instanceof Float32Array || arr instanceof Float64Array;
}
function isLooseTypedArray(arr) {
  return names[toString.call(arr)];
}

/**
 * Convert a typed array to a Buffer without a copy
 *
 * Author:   Feross Aboukhadijeh <https://feross.org>
 * License:  MIT
 *
 * `npm install typedarray-to-buffer`
 */

var isTypedArray$1 = isTypedarray.strict;
var typedarrayToBuffer = function typedarrayToBuffer(arr) {
  if (isTypedArray$1(arr)) {
    // To avoid a copy, use the typed array's underlying ArrayBuffer to back new Buffer
    var buf = Buffer.from(arr.buffer);
    if (arr.byteLength !== arr.buffer.byteLength) {
      // Respect the "view", i.e. byteOffset and byteLength, without doing a copy
      buf = buf.slice(arr.byteOffset, arr.byteOffset + arr.byteLength);
    }
    return buf;
  } else {
    // Pass through all other types to `Buffer.from`
    return Buffer.from(arr);
  }
};

var ENC_HEX = "hex";
var ENC_UTF8 = "utf8";
var ENC_BIN = "binary";
var TYPE_BUFFER = "buffer";
var TYPE_ARRAY = "array";
var TYPE_TYPED_ARRAY = "typed-array";
var TYPE_ARRAY_BUFFER = "array-buffer";
var STRING_ZERO = "0";
function bufferToArray(buf) {
  return new Uint8Array(buf);
}
function bufferToHex(buf) {
  var prefixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var hex = buf.toString(ENC_HEX);
  return prefixed ? addHexPrefix(hex) : hex;
}
function bufferToUtf8(buf) {
  return buf.toString(ENC_UTF8);
}
function bufferToNumber(buf) {
  return buf.readUIntBE(0, buf.length);
}
function bufferToBinary(buf) {
  return arrayToBinary(bufferToArray(buf));
}
function arrayToBuffer(arr) {
  return typedarrayToBuffer(arr);
}
function arrayToHex(arr) {
  var prefixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return bufferToHex(arrayToBuffer(arr), prefixed);
}
function arrayToUtf8(arr) {
  return bufferToUtf8(arrayToBuffer(arr));
}
function arrayToNumber(arr) {
  return bufferToNumber(arrayToBuffer(arr));
}
function arrayToBinary(arr) {
  return Array.from(arr).map(numberToBinary).join("");
}
function hexToBuffer(hex) {
  return Buffer.from(removeHexPrefix(hex), ENC_HEX);
}
function hexToArray(hex) {
  return bufferToArray(hexToBuffer(hex));
}
function hexToUtf8(hex) {
  return bufferToUtf8(hexToBuffer(hex));
}
function hexToNumber(hex) {
  return arrayToNumber(hexToArray(hex));
}
function hexToBinary(hex) {
  return arrayToBinary(hexToArray(hex));
}
function utf8ToBuffer(utf8) {
  return Buffer.from(utf8, ENC_UTF8);
}
function utf8ToArray(utf8) {
  return bufferToArray(utf8ToBuffer(utf8));
}
function utf8ToHex(utf8) {
  var prefixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return bufferToHex(utf8ToBuffer(utf8), prefixed);
}
function utf8ToNumber(utf8) {
  var num = parseInt(utf8, 10);
  assert(isDefined(num), "Number can only safely store up to 53 bits");
  return num;
}
function utf8ToBinary(utf8) {
  return arrayToBinary(utf8ToArray(utf8));
}
function numberToBuffer(num) {
  return binaryToBuffer(numberToBinary(num));
}
function numberToArray(num) {
  return binaryToArray(numberToBinary(num));
}
function numberToHex(num, prefixed) {
  return binaryToHex(numberToBinary(num), prefixed);
}
function numberToUtf8(num) {
  return "".concat(num);
}
function numberToBinary(num) {
  var bin = (num >>> 0).toString(2);
  return sanitizeBytes(bin);
}
function binaryToBuffer(bin) {
  return arrayToBuffer(binaryToArray(bin));
}
function binaryToArray(bin) {
  return new Uint8Array(splitBytes(bin).map(function (x) {
    return parseInt(x, 2);
  }));
}
function binaryToHex(bin, prefixed) {
  return arrayToHex(binaryToArray(bin), prefixed);
}
function binaryToUtf8(bin) {
  return arrayToUtf8(binaryToArray(bin));
}
function binaryToNumber(bin) {
  return arrayToNumber(binaryToArray(bin));
}
function isBinaryString(str) {
  if (typeof str !== "string" || !new RegExp(/^[01]+$/).test(str)) {
    return false;
  }
  if (str.length % 8 !== 0) {
    return false;
  }
  return true;
}
function isHexString(str, length) {
  if (typeof str !== "string" || !str.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (length && str.length !== 2 + 2 * length) {
    return false;
  }
  return true;
}
function isBuffer$1(val) {
  return Buffer.isBuffer(val);
}
function isTypedArray(val) {
  return isTypedarray.strict(val) && !isBuffer$1(val);
}
function isArrayBuffer(val) {
  return !isTypedArray(val) && !isBuffer$1(val) && typeof val.byteLength !== "undefined";
}
function getType(val) {
  if (isBuffer$1(val)) {
    return TYPE_BUFFER;
  } else if (isTypedArray(val)) {
    return TYPE_TYPED_ARRAY;
  } else if (isArrayBuffer(val)) {
    return TYPE_ARRAY_BUFFER;
  } else if (Array.isArray(val)) {
    return TYPE_ARRAY;
  } else {
    return typeof val;
  }
}
function getEncoding(str) {
  if (isBinaryString(str)) {
    return ENC_BIN;
  }
  if (isHexString(str)) {
    return ENC_HEX;
  }
  return ENC_UTF8;
}
function concatBuffers() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  var result = Buffer.concat(args);
  return result;
}
function concatArrays() {
  var result = [];
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }
  args.forEach(function (arg) {
    return result = result.concat(Array.from(arg));
  });
  return new Uint8Array(_toConsumableArray(result));
}
function trimLeft(data, length) {
  var diff = data.length - length;
  if (diff > 0) {
    data = data.slice(diff);
  }
  return data;
}
function trimRight(data, length) {
  return data.slice(0, length);
}
function calcByteLength(length) {
  var byteSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;
  var remainder = length % byteSize;
  return remainder ? (length - remainder) / byteSize * byteSize + byteSize : length;
}
function splitBytes(str) {
  var byteSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;
  var bytes = sanitizeBytes(str).match(new RegExp(".{".concat(byteSize, "}"), "gi"));
  return Array.from(bytes || []);
}
function swapBytes(str) {
  return splitBytes(str).map(reverseString).join("");
}
function swapHex(str) {
  return binaryToHex(swapBytes(hexToBinary(str)));
}
function sanitizeBytes(str) {
  var byteSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;
  var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : STRING_ZERO;
  return padLeft(str, calcByteLength(str.length, byteSize), padding);
}
function padLeft(str, length) {
  var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : STRING_ZERO;
  return padString(str, length, true, padding);
}
function padRight(str, length) {
  var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : STRING_ZERO;
  return padString(str, length, false, padding);
}
function removeHexPrefix(hex) {
  return hex.replace(/^0x/, "");
}
function addHexPrefix(hex) {
  return hex.startsWith("0x") ? hex : "0x".concat(hex);
}
function sanitizeHex(hex) {
  hex = removeHexPrefix(hex);
  hex = sanitizeBytes(hex, 2);
  if (hex) {
    hex = addHexPrefix(hex);
  }
  return hex;
}
function removeHexLeadingZeros(hex) {
  var prefixed = hex.startsWith("0x");
  hex = removeHexPrefix(hex);
  hex = hex.startsWith(STRING_ZERO) ? hex.substring(1) : hex;
  return prefixed ? addHexPrefix(hex) : hex;
}
function isUndefined(value) {
  return typeof value === "undefined";
}
function isDefined(value) {
  return !isUndefined(value);
}
function assert(assertion, errorMessage) {
  if (!assertion) {
    throw new Error(errorMessage);
  }
}
function reverseString(str) {
  return str.split("").reverse().join("");
}
function padString(str, length, left) {
  var padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : STRING_ZERO;
  var diff = length - str.length;
  var result = str;
  if (diff > 0) {
    var pad = padding.repeat(diff);
    result = left ? pad + str : str + pad;
  }
  return result;
}

var esm$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  bufferToArray: bufferToArray,
  bufferToHex: bufferToHex,
  bufferToUtf8: bufferToUtf8,
  bufferToNumber: bufferToNumber,
  bufferToBinary: bufferToBinary,
  arrayToBuffer: arrayToBuffer,
  arrayToHex: arrayToHex,
  arrayToUtf8: arrayToUtf8,
  arrayToNumber: arrayToNumber,
  arrayToBinary: arrayToBinary,
  hexToBuffer: hexToBuffer,
  hexToArray: hexToArray,
  hexToUtf8: hexToUtf8,
  hexToNumber: hexToNumber,
  hexToBinary: hexToBinary,
  utf8ToBuffer: utf8ToBuffer,
  utf8ToArray: utf8ToArray,
  utf8ToHex: utf8ToHex,
  utf8ToNumber: utf8ToNumber,
  utf8ToBinary: utf8ToBinary,
  numberToBuffer: numberToBuffer,
  numberToArray: numberToArray,
  numberToHex: numberToHex,
  numberToUtf8: numberToUtf8,
  numberToBinary: numberToBinary,
  binaryToBuffer: binaryToBuffer,
  binaryToArray: binaryToArray,
  binaryToHex: binaryToHex,
  binaryToUtf8: binaryToUtf8,
  binaryToNumber: binaryToNumber,
  isBinaryString: isBinaryString,
  isHexString: isHexString,
  isBuffer: isBuffer$1,
  isTypedArray: isTypedArray,
  isArrayBuffer: isArrayBuffer,
  getType: getType,
  getEncoding: getEncoding,
  concatBuffers: concatBuffers,
  concatArrays: concatArrays,
  trimLeft: trimLeft,
  trimRight: trimRight,
  calcByteLength: calcByteLength,
  splitBytes: splitBytes,
  swapBytes: swapBytes,
  swapHex: swapHex,
  sanitizeBytes: sanitizeBytes,
  padLeft: padLeft,
  padRight: padRight,
  removeHexPrefix: removeHexPrefix,
  addHexPrefix: addHexPrefix,
  sanitizeHex: sanitizeHex,
  removeHexLeadingZeros: removeHexLeadingZeros
});

var require$$3 = /*@__PURE__*/getAugmentedNamespace(esm$1);

var hasRequiredEncoding$1;

function requireEncoding$1 () {
	if (hasRequiredEncoding$1) return encoding$1;
	hasRequiredEncoding$1 = 1;

	Object.defineProperty(encoding$1, "__esModule", {
	  value: true
	});
	encoding$1.convertNumberToHex = encoding$1.convertNumberToUtf8 = encoding$1.convertNumberToArrayBuffer = encoding$1.convertNumberToBuffer = encoding$1.convertHexToNumber = encoding$1.convertHexToUtf8 = encoding$1.convertHexToArrayBuffer = encoding$1.convertHexToBuffer = encoding$1.convertUtf8ToNumber = encoding$1.convertUtf8ToHex = encoding$1.convertUtf8ToBuffer = encoding$1.convertUtf8ToArrayBuffer = encoding$1.concatBuffers = encoding$1.convertBufferToNumber = encoding$1.convertBufferToHex = encoding$1.convertBufferToUtf8 = encoding$1.convertBufferToArrayBuffer = encoding$1.concatArrayBuffers = encoding$1.convertArrayBufferToNumber = encoding$1.convertArrayBufferToHex = encoding$1.convertArrayBufferToUtf8 = encoding$1.convertArrayBufferToBuffer = void 0;
	var tslib_1 = require$$7;
	var bn_js_1 = tslib_1.__importDefault(requireBn$2());
	var encoding = tslib_1.__importStar(require$$3);
	function convertArrayBufferToBuffer(arrBuf) {
	  return encoding.arrayToBuffer(new Uint8Array(arrBuf));
	}
	encoding$1.convertArrayBufferToBuffer = convertArrayBufferToBuffer;
	function convertArrayBufferToUtf8(arrBuf) {
	  return encoding.arrayToUtf8(new Uint8Array(arrBuf));
	}
	encoding$1.convertArrayBufferToUtf8 = convertArrayBufferToUtf8;
	function convertArrayBufferToHex(arrBuf, noPrefix) {
	  return encoding.arrayToHex(new Uint8Array(arrBuf), !noPrefix);
	}
	encoding$1.convertArrayBufferToHex = convertArrayBufferToHex;
	function convertArrayBufferToNumber(arrBuf) {
	  return encoding.arrayToNumber(new Uint8Array(arrBuf));
	}
	encoding$1.convertArrayBufferToNumber = convertArrayBufferToNumber;
	function concatArrayBuffers() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }
	  return encoding.hexToArray(args.map(function (b) {
	    return encoding.arrayToHex(new Uint8Array(b));
	  }).join("")).buffer;
	}
	encoding$1.concatArrayBuffers = concatArrayBuffers;
	function convertBufferToArrayBuffer(buf) {
	  return encoding.bufferToArray(buf).buffer;
	}
	encoding$1.convertBufferToArrayBuffer = convertBufferToArrayBuffer;
	function convertBufferToUtf8(buf) {
	  return encoding.bufferToUtf8(buf);
	}
	encoding$1.convertBufferToUtf8 = convertBufferToUtf8;
	function convertBufferToHex(buf, noPrefix) {
	  return encoding.bufferToHex(buf, !noPrefix);
	}
	encoding$1.convertBufferToHex = convertBufferToHex;
	function convertBufferToNumber(buf) {
	  return encoding.bufferToNumber(buf);
	}
	encoding$1.convertBufferToNumber = convertBufferToNumber;
	function concatBuffers() {
	  return encoding.concatBuffers.apply(encoding, arguments);
	}
	encoding$1.concatBuffers = concatBuffers;
	function convertUtf8ToArrayBuffer(utf8) {
	  return encoding.utf8ToArray(utf8).buffer;
	}
	encoding$1.convertUtf8ToArrayBuffer = convertUtf8ToArrayBuffer;
	function convertUtf8ToBuffer(utf8) {
	  return encoding.utf8ToBuffer(utf8);
	}
	encoding$1.convertUtf8ToBuffer = convertUtf8ToBuffer;
	function convertUtf8ToHex(utf8, noPrefix) {
	  return encoding.utf8ToHex(utf8, !noPrefix);
	}
	encoding$1.convertUtf8ToHex = convertUtf8ToHex;
	function convertUtf8ToNumber(utf8) {
	  return new bn_js_1["default"](utf8, 10).toNumber();
	}
	encoding$1.convertUtf8ToNumber = convertUtf8ToNumber;
	function convertHexToBuffer(hex) {
	  return encoding.hexToBuffer(hex);
	}
	encoding$1.convertHexToBuffer = convertHexToBuffer;
	function convertHexToArrayBuffer(hex) {
	  return encoding.hexToArray(hex).buffer;
	}
	encoding$1.convertHexToArrayBuffer = convertHexToArrayBuffer;
	function convertHexToUtf8(hex) {
	  return encoding.hexToUtf8(hex);
	}
	encoding$1.convertHexToUtf8 = convertHexToUtf8;
	function convertHexToNumber(hex) {
	  return new bn_js_1["default"](encoding.removeHexPrefix(hex), "hex").toNumber();
	}
	encoding$1.convertHexToNumber = convertHexToNumber;
	function convertNumberToBuffer(num) {
	  return encoding.numberToBuffer(num);
	}
	encoding$1.convertNumberToBuffer = convertNumberToBuffer;
	function convertNumberToArrayBuffer(num) {
	  return encoding.numberToArray(num).buffer;
	}
	encoding$1.convertNumberToArrayBuffer = convertNumberToArrayBuffer;
	function convertNumberToUtf8(num) {
	  return new bn_js_1["default"](num).toString();
	}
	encoding$1.convertNumberToUtf8 = convertNumberToUtf8;
	function convertNumberToHex(num, noPrefix) {
	  var hex = encoding.removeHexPrefix(encoding.sanitizeHex(new bn_js_1["default"](num).toString(16)));
	  return noPrefix ? hex : encoding.addHexPrefix(hex);
	}
	encoding$1.convertNumberToHex = convertNumberToHex;
	return encoding$1;
}

var ethereum = {};

var misc = {};

var _STANDARD_ERROR_MAP;
var PARSE_ERROR = "PARSE_ERROR";
var INVALID_REQUEST = "INVALID_REQUEST";
var METHOD_NOT_FOUND = "METHOD_NOT_FOUND";
var INVALID_PARAMS = "INVALID_PARAMS";
var INTERNAL_ERROR = "INTERNAL_ERROR";
var SERVER_ERROR = "SERVER_ERROR";
var RESERVED_ERROR_CODES = [-32700, -32600, -32601, -32602, -32603];
var SERVER_ERROR_CODE_RANGE = [-32000, -32099];
var STANDARD_ERROR_MAP = (_STANDARD_ERROR_MAP = {}, _defineProperty(_STANDARD_ERROR_MAP, PARSE_ERROR, {
  code: -32700,
  message: "Parse error"
}), _defineProperty(_STANDARD_ERROR_MAP, INVALID_REQUEST, {
  code: -32600,
  message: "Invalid Request"
}), _defineProperty(_STANDARD_ERROR_MAP, METHOD_NOT_FOUND, {
  code: -32601,
  message: "Method not found"
}), _defineProperty(_STANDARD_ERROR_MAP, INVALID_PARAMS, {
  code: -32602,
  message: "Invalid params"
}), _defineProperty(_STANDARD_ERROR_MAP, INTERNAL_ERROR, {
  code: -32603,
  message: "Internal error"
}), _defineProperty(_STANDARD_ERROR_MAP, SERVER_ERROR, {
  code: -32000,
  message: "Server error"
}), _STANDARD_ERROR_MAP);
var DEFAULT_ERROR = SERVER_ERROR;

function isServerErrorCode(code) {
  return code <= SERVER_ERROR_CODE_RANGE[0] && code >= SERVER_ERROR_CODE_RANGE[1];
}
function isReservedErrorCode(code) {
  return RESERVED_ERROR_CODES.includes(code);
}
function isValidErrorCode(code) {
  return typeof code === "number";
}
function getError(type) {
  if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return STANDARD_ERROR_MAP[type];
}
function getErrorByCode(code) {
  var match = Object.values(STANDARD_ERROR_MAP).find(function (e) {
    return e.code === code;
  });
  if (!match) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return match;
}
function validateJsonRpcError(response) {
  if (typeof response.error.code === "undefined") {
    return {
      valid: false,
      error: "Missing code for JSON-RPC error"
    };
  }
  if (typeof response.error.message === "undefined") {
    return {
      valid: false,
      error: "Missing message for JSON-RPC error"
    };
  }
  if (!isValidErrorCode(response.error.code)) {
    return {
      valid: false,
      error: "Invalid error code type for JSON-RPC: ".concat(response.error.code)
    };
  }
  if (isReservedErrorCode(response.error.code)) {
    var error = getErrorByCode(response.error.code);
    if (error.message !== STANDARD_ERROR_MAP[DEFAULT_ERROR].message && response.error.message === error.message) {
      return {
        valid: false,
        error: "Invalid error code message for JSON-RPC: ".concat(response.error.code)
      };
    }
  }
  return {
    valid: true
  };
}
function parseConnectionError(e, url, type) {
  return e.message.includes("getaddrinfo ENOTFOUND") || e.message.includes("connect ECONNREFUSED") ? new Error("Unavailable ".concat(type, " RPC url at ").concat(url)) : e;
}

var cjs$4 = {};

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var _extendStatics$2 = function extendStatics(d, b) {
  _extendStatics$2 = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) {
      if (b.hasOwnProperty(p)) d[p] = b[p];
    }
  };
  return _extendStatics$2(d, b);
};
function __extends$2(d, b) {
  _extendStatics$2(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var _assign$2 = function __assign() {
  _assign$2 = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return _assign$2.apply(this, arguments);
};
function __rest$2(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __decorate$2(decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param$2(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata$2(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter$2(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator$2(thisArg, body) {
  var _ = {
      label: 0,
      sent: function sent() {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
    f,
    y,
    t,
    g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;
  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}
function __createBinding$2(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
}
function __exportStar$2(m, exports) {
  for (var p in m) {
    if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
  }
}
function __values$2(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
    m = s && o[s],
    i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function next() {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read$2(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
    r,
    ar = [],
    e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}
function __spread$2() {
  for (var ar = [], i = 0; i < arguments.length; i++) {
    ar = ar.concat(__read$2(arguments[i]));
  }
  return ar;
}
function __spreadArrays$2() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }
  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }
  return r;
}
function __await$2(v) {
  return this instanceof __await$2 ? (this.v = v, this) : new __await$2(v);
}
function __asyncGenerator$2(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
    i,
    q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;
  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await$2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator$2(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await$2(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues$2(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
    i;
  return m ? m.call(o) : (o = typeof __values$2 === "function" ? __values$2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}
function __makeTemplateObject$2(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar$2(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
}
function __importDefault$2(mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
}
function __classPrivateFieldGet$2(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet$2(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}

var tslib_es6$2 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  __extends: __extends$2,
  get __assign () { return _assign$2; },
  __rest: __rest$2,
  __decorate: __decorate$2,
  __param: __param$2,
  __metadata: __metadata$2,
  __awaiter: __awaiter$2,
  __generator: __generator$2,
  __createBinding: __createBinding$2,
  __exportStar: __exportStar$2,
  __values: __values$2,
  __read: __read$2,
  __spread: __spread$2,
  __spreadArrays: __spreadArrays$2,
  __await: __await$2,
  __asyncGenerator: __asyncGenerator$2,
  __asyncDelegator: __asyncDelegator$2,
  __asyncValues: __asyncValues$2,
  __makeTemplateObject: __makeTemplateObject$2,
  __importStar: __importStar$2,
  __importDefault: __importDefault$2,
  __classPrivateFieldGet: __classPrivateFieldGet$2,
  __classPrivateFieldSet: __classPrivateFieldSet$2
});

var require$$0$3 = /*@__PURE__*/getAugmentedNamespace(tslib_es6$2);

var crypto = {};

var hasRequiredCrypto;

function requireCrypto () {
	if (hasRequiredCrypto) return crypto;
	hasRequiredCrypto = 1;

	Object.defineProperty(crypto, "__esModule", {
	  value: true
	});
	crypto.isBrowserCryptoAvailable = crypto.getSubtleCrypto = crypto.getBrowerCrypto = void 0;
	function getBrowerCrypto() {
	  return (commonjsGlobal === null || commonjsGlobal === void 0 ? void 0 : commonjsGlobal.crypto) || (commonjsGlobal === null || commonjsGlobal === void 0 ? void 0 : commonjsGlobal.msCrypto) || {};
	}
	crypto.getBrowerCrypto = getBrowerCrypto;
	function getSubtleCrypto() {
	  var browserCrypto = getBrowerCrypto();
	  return browserCrypto.subtle || browserCrypto.webkitSubtle;
	}
	crypto.getSubtleCrypto = getSubtleCrypto;
	function isBrowserCryptoAvailable() {
	  return !!getBrowerCrypto() && !!getSubtleCrypto();
	}
	crypto.isBrowserCryptoAvailable = isBrowserCryptoAvailable;
	return crypto;
}

var env$1 = {};

var hasRequiredEnv$1;

function requireEnv$1 () {
	if (hasRequiredEnv$1) return env$1;
	hasRequiredEnv$1 = 1;

	Object.defineProperty(env$1, "__esModule", {
	  value: true
	});
	env$1.isBrowser = env$1.isNode = env$1.isReactNative = void 0;
	function isReactNative() {
	  return typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative";
	}
	env$1.isReactNative = isReactNative;
	function isNode() {
	  return typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined";
	}
	env$1.isNode = isNode;
	function isBrowser() {
	  return !isReactNative() && !isNode();
	}
	env$1.isBrowser = isBrowser;
	return env$1;
}

(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var tslib_1 = require$$0$3;
	tslib_1.__exportStar(requireCrypto(), exports);
	tslib_1.__exportStar(requireEnv$1(), exports);
} (cjs$4));

var isNodeJs = cjs$4.isNode;

function payloadId() {
  var date = Date.now() * Math.pow(10, 3);
  var extra = Math.floor(Math.random() * Math.pow(10, 3));
  return date + extra;
}
function formatJsonRpcRequest(method, params, id) {
  return {
    id: id || payloadId(),
    jsonrpc: "2.0",
    method: method,
    params: params
  };
}
function formatJsonRpcResult(id, result) {
  return {
    id: id,
    jsonrpc: "2.0",
    result: result
  };
}
function formatJsonRpcError(id, error, data) {
  return {
    id: id,
    jsonrpc: "2.0",
    error: formatErrorMessage(error, data)
  };
}
function formatErrorMessage(error, data) {
  if (typeof error === "undefined") {
    return getError(INTERNAL_ERROR);
  }
  if (typeof error === "string") {
    error = Object.assign(Object.assign({}, getError(SERVER_ERROR)), {
      message: error
    });
  }
  if (typeof data !== "undefined") {
    error.data = data;
  }
  if (isReservedErrorCode(error.code)) {
    error = getErrorByCode(error.code);
  }
  return error;
}

function isValidRoute(route) {
  if (route.includes("*")) {
    return isValidWildcardRoute(route);
  }
  if (/\W/g.test(route)) {
    return false;
  }
  return true;
}
function isValidDefaultRoute(route) {
  return route === "*";
}
function isValidWildcardRoute(route) {
  if (isValidDefaultRoute(route)) {
    return true;
  }
  if (!route.includes("*")) {
    return false;
  }
  if (route.split("*").length !== 2) {
    return false;
  }
  if (route.split("*").filter(function (x) {
    return x.trim() === "";
  }).length !== 1) {
    return false;
  }
  return true;
}
function isValidLeadingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[0].trim();
}
function isValidTrailingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[1].trim();
}

var IEvents = /*#__PURE__*/_createClass(function IEvents() {
  _classCallCheck(this, IEvents);
});

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var IJsonRpcConnection = /*#__PURE__*/function (_IEvents) {
  _inherits(IJsonRpcConnection, _IEvents);
  var _super = _createSuper(IJsonRpcConnection);
  function IJsonRpcConnection(opts) {
    _classCallCheck(this, IJsonRpcConnection);
    return _super.call(this);
  }
  return _createClass(IJsonRpcConnection);
}(IEvents);
var IBaseJsonRpcProvider = /*#__PURE__*/function (_IEvents2) {
  _inherits(IBaseJsonRpcProvider, _IEvents2);
  var _super2 = _createSuper(IBaseJsonRpcProvider);
  function IBaseJsonRpcProvider() {
    _classCallCheck(this, IBaseJsonRpcProvider);
    return _super2.call(this);
  }
  return _createClass(IBaseJsonRpcProvider);
}(IEvents);
var IJsonRpcProvider = /*#__PURE__*/function (_IBaseJsonRpcProvider) {
  _inherits(IJsonRpcProvider, _IBaseJsonRpcProvider);
  var _super3 = _createSuper(IJsonRpcProvider);
  function IJsonRpcProvider(connection) {
    _classCallCheck(this, IJsonRpcProvider);
    return _super3.call(this);
  }
  return _createClass(IJsonRpcProvider);
}(IBaseJsonRpcProvider);

var HTTP_REGEX = "^https?:";
var WS_REGEX = "^wss?:";
function getUrlProtocol(url) {
  var matches = url.match(new RegExp(/^\w+:/, "gi"));
  if (!matches || !matches.length) return;
  return matches[0];
}
function matchRegexProtocol(url, regex) {
  var protocol = getUrlProtocol(url);
  if (typeof protocol === "undefined") return false;
  return new RegExp(regex).test(protocol);
}
function isHttpUrl(url) {
  return matchRegexProtocol(url, HTTP_REGEX);
}
function isWsUrl(url) {
  return matchRegexProtocol(url, WS_REGEX);
}
function isLocalhostUrl(url) {
  return new RegExp("wss?://localhost(:d{2,5})?").test(url);
}

function isJsonRpcPayload(payload) {
  return typeof payload === "object" && "id" in payload && "jsonrpc" in payload && payload.jsonrpc === "2.0";
}
function isJsonRpcRequest(payload) {
  return isJsonRpcPayload(payload) && "method" in payload;
}
function isJsonRpcResponse(payload) {
  return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));
}
function isJsonRpcResult(payload) {
  return "result" in payload;
}
function isJsonRpcError(payload) {
  return "error" in payload;
}
function isJsonRpcValidationInvalid(validation) {
  return "error" in validation && validation.valid === false;
}

var esm = /*#__PURE__*/Object.freeze({
  __proto__: null,
  PARSE_ERROR: PARSE_ERROR,
  INVALID_REQUEST: INVALID_REQUEST,
  METHOD_NOT_FOUND: METHOD_NOT_FOUND,
  INVALID_PARAMS: INVALID_PARAMS,
  INTERNAL_ERROR: INTERNAL_ERROR,
  SERVER_ERROR: SERVER_ERROR,
  RESERVED_ERROR_CODES: RESERVED_ERROR_CODES,
  SERVER_ERROR_CODE_RANGE: SERVER_ERROR_CODE_RANGE,
  STANDARD_ERROR_MAP: STANDARD_ERROR_MAP,
  DEFAULT_ERROR: DEFAULT_ERROR,
  isServerErrorCode: isServerErrorCode,
  isReservedErrorCode: isReservedErrorCode,
  isValidErrorCode: isValidErrorCode,
  getError: getError,
  getErrorByCode: getErrorByCode,
  validateJsonRpcError: validateJsonRpcError,
  parseConnectionError: parseConnectionError,
  isNodeJs: isNodeJs,
  payloadId: payloadId,
  formatJsonRpcRequest: formatJsonRpcRequest,
  formatJsonRpcResult: formatJsonRpcResult,
  formatJsonRpcError: formatJsonRpcError,
  formatErrorMessage: formatErrorMessage,
  isValidRoute: isValidRoute,
  isValidDefaultRoute: isValidDefaultRoute,
  isValidWildcardRoute: isValidWildcardRoute,
  isValidLeadingWildcardRoute: isValidLeadingWildcardRoute,
  isValidTrailingWildcardRoute: isValidTrailingWildcardRoute,
  IEvents: IEvents,
  IJsonRpcConnection: IJsonRpcConnection,
  IBaseJsonRpcProvider: IBaseJsonRpcProvider,
  IJsonRpcProvider: IJsonRpcProvider,
  isHttpUrl: isHttpUrl,
  isWsUrl: isWsUrl,
  isLocalhostUrl: isLocalhostUrl,
  isJsonRpcPayload: isJsonRpcPayload,
  isJsonRpcRequest: isJsonRpcRequest,
  isJsonRpcResponse: isJsonRpcResponse,
  isJsonRpcResult: isJsonRpcResult,
  isJsonRpcError: isJsonRpcError,
  isJsonRpcValidationInvalid: isJsonRpcValidationInvalid
});

var require$$2 = /*@__PURE__*/getAugmentedNamespace(esm);

var hasRequiredMisc;

function requireMisc () {
	if (hasRequiredMisc) return misc;
	hasRequiredMisc = 1;

	Object.defineProperty(misc, "__esModule", {
	  value: true
	});
	misc.getRpcUrl = misc.getInfuraRpcUrl = misc.logDeprecationWarning = misc.uuid = misc.payloadId = misc.removeHexLeadingZeros = misc.removeHexPrefix = misc.addHexPrefix = misc.sanitizeHex = void 0;
	var tslib_1 = require$$7;
	var encoding = tslib_1.__importStar(require$$3);
	var jsonRpcUtils = tslib_1.__importStar(require$$2);
	var constants_1 = requireConstants$4();
	function sanitizeHex(hex) {
	  return encoding.sanitizeHex(hex);
	}
	misc.sanitizeHex = sanitizeHex;
	function addHexPrefix(hex) {
	  return encoding.addHexPrefix(hex);
	}
	misc.addHexPrefix = addHexPrefix;
	function removeHexPrefix(hex) {
	  return encoding.removeHexPrefix(hex);
	}
	misc.removeHexPrefix = removeHexPrefix;
	function removeHexLeadingZeros(hex) {
	  return encoding.removeHexLeadingZeros(encoding.addHexPrefix(hex));
	}
	misc.removeHexLeadingZeros = removeHexLeadingZeros;
	misc.payloadId = jsonRpcUtils.payloadId;
	function uuid() {
	  var result = function (a, b) {
	    for (b = a = ""; a++ < 36; b += a * 51 & 52 ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16) : "-") {}
	    return b;
	  }();
	  return result;
	}
	misc.uuid = uuid;
	function logDeprecationWarning() {
	  console.warn("DEPRECATION WARNING: This WalletConnect client library will be deprecated in favor of @walletconnect/client. Please check docs.walletconnect.org to learn more about this migration!");
	}
	misc.logDeprecationWarning = logDeprecationWarning;
	function getInfuraRpcUrl(chainId, infuraId) {
	  var rpcUrl;
	  var network = constants_1.infuraNetworks[chainId];
	  if (network) {
	    rpcUrl = "https://".concat(network, ".infura.io/v3/").concat(infuraId);
	  }
	  return rpcUrl;
	}
	misc.getInfuraRpcUrl = getInfuraRpcUrl;
	function getRpcUrl(chainId, rpc) {
	  var rpcUrl;
	  var infuraUrl = getInfuraRpcUrl(chainId, rpc.infuraId);
	  if (rpc.custom && rpc.custom[chainId]) {
	    rpcUrl = rpc.custom[chainId];
	  } else if (infuraUrl) {
	    rpcUrl = infuraUrl;
	  }
	  return rpcUrl;
	}
	misc.getRpcUrl = getRpcUrl;
	return misc;
}

var validators$1 = {};

var hasRequiredValidators$1;

function requireValidators$1 () {
	if (hasRequiredValidators$1) return validators$1;
	hasRequiredValidators$1 = 1;

	Object.defineProperty(validators$1, "__esModule", {
	  value: true
	});
	validators$1.isSilentPayload = validators$1.isReservedEvent = validators$1.isInternalEvent = validators$1.isJsonRpcResponseError = validators$1.isJsonRpcResponseSuccess = validators$1.isJsonRpcRequest = validators$1.isJsonRpcSubscription = validators$1.isHexString = validators$1.getEncoding = validators$1.getType = validators$1.isArrayBuffer = validators$1.isTypedArray = validators$1.isBuffer = validators$1.isEmptyArray = validators$1.isEmptyString = void 0;
	var tslib_1 = require$$7;
	var encoding = tslib_1.__importStar(require$$3);
	var constants_1 = requireConstants$4();
	function isEmptyString(value) {
	  return value === "" || typeof value === "string" && value.trim() === "";
	}
	validators$1.isEmptyString = isEmptyString;
	function isEmptyArray(array) {
	  return !(array && array.length);
	}
	validators$1.isEmptyArray = isEmptyArray;
	function isBuffer(val) {
	  return encoding.isBuffer(val);
	}
	validators$1.isBuffer = isBuffer;
	function isTypedArray(val) {
	  return encoding.isTypedArray(val);
	}
	validators$1.isTypedArray = isTypedArray;
	function isArrayBuffer(val) {
	  return encoding.isArrayBuffer(val);
	}
	validators$1.isArrayBuffer = isArrayBuffer;
	function getType(val) {
	  return encoding.getType(val);
	}
	validators$1.getType = getType;
	function getEncoding(val) {
	  return encoding.getEncoding(val);
	}
	validators$1.getEncoding = getEncoding;
	function isHexString(value, length) {
	  return encoding.isHexString(value, length);
	}
	validators$1.isHexString = isHexString;
	function isJsonRpcSubscription(object) {
	  return typeof object.params === "object";
	}
	validators$1.isJsonRpcSubscription = isJsonRpcSubscription;
	function isJsonRpcRequest(object) {
	  return typeof object.method !== "undefined";
	}
	validators$1.isJsonRpcRequest = isJsonRpcRequest;
	function isJsonRpcResponseSuccess(object) {
	  return typeof object.result !== "undefined";
	}
	validators$1.isJsonRpcResponseSuccess = isJsonRpcResponseSuccess;
	function isJsonRpcResponseError(object) {
	  return typeof object.error !== "undefined";
	}
	validators$1.isJsonRpcResponseError = isJsonRpcResponseError;
	function isInternalEvent(object) {
	  return typeof object.event !== "undefined";
	}
	validators$1.isInternalEvent = isInternalEvent;
	function isReservedEvent(event) {
	  return constants_1.reservedEvents.includes(event) || event.startsWith("wc_");
	}
	validators$1.isReservedEvent = isReservedEvent;
	function isSilentPayload(request) {
	  if (request.method.startsWith("wc_")) {
	    return true;
	  }
	  if (constants_1.signingMethods.includes(request.method)) {
	    return false;
	  }
	  return true;
	}
	validators$1.isSilentPayload = isSilentPayload;
	return validators$1;
}

var hasRequiredEthereum;

function requireEthereum () {
	if (hasRequiredEthereum) return ethereum;
	hasRequiredEthereum = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.parseTransactionData = exports.parsePersonalSign = exports.isValidAddress = exports.toChecksumAddress = void 0;
		var js_sha3_1 = sha3$1.exports;
		var encoding_1 = require$$3;
		var encoding_2 = requireEncoding$1();
		var misc_1 = requireMisc();
		var validators_1 = requireValidators$1();
		function toChecksumAddress(address) {
		  address = (0, encoding_1.removeHexPrefix)(address.toLowerCase());
		  var hash = (0, encoding_1.removeHexPrefix)((0, js_sha3_1.keccak_256)((0, encoding_2.convertUtf8ToBuffer)(address)));
		  var checksum = "";
		  for (var i = 0; i < address.length; i++) {
		    if (parseInt(hash[i], 16) > 7) {
		      checksum += address[i].toUpperCase();
		    } else {
		      checksum += address[i];
		    }
		  }
		  return (0, encoding_1.addHexPrefix)(checksum);
		}
		exports.toChecksumAddress = toChecksumAddress;
		var isValidAddress = function isValidAddress(address) {
		  if (!address) {
		    return false;
		  } else if (address.toLowerCase().substring(0, 2) !== "0x") {
		    return false;
		  } else if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
		    return false;
		  } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
		    return true;
		  } else {
		    return address === toChecksumAddress(address);
		  }
		};
		exports.isValidAddress = isValidAddress;
		function parsePersonalSign(params) {
		  if (!(0, validators_1.isEmptyArray)(params) && !(0, validators_1.isHexString)(params[0])) {
		    params[0] = (0, encoding_2.convertUtf8ToHex)(params[0]);
		  }
		  return params;
		}
		exports.parsePersonalSign = parsePersonalSign;
		function parseTransactionData(txData) {
		  if (typeof txData.type !== "undefined" && txData.type !== "0") return txData;
		  if (typeof txData.from === "undefined" || !(0, exports.isValidAddress)(txData.from)) {
		    throw new Error("Transaction object must include a valid 'from' value.");
		  }
		  function parseHexValues(value) {
		    var result = value;
		    if (typeof value === "number" || typeof value === "string" && !(0, validators_1.isEmptyString)(value)) {
		      if (!(0, validators_1.isHexString)(value)) {
		        result = (0, encoding_2.convertNumberToHex)(value);
		      } else if (typeof value === "string") {
		        result = (0, misc_1.sanitizeHex)(value);
		      }
		    }
		    if (typeof result === "string") {
		      result = (0, misc_1.removeHexLeadingZeros)(result);
		    }
		    return result;
		  }
		  var txDataRPC = {
		    from: (0, misc_1.sanitizeHex)(txData.from),
		    to: typeof txData.to === "undefined" ? undefined : (0, misc_1.sanitizeHex)(txData.to),
		    gasPrice: typeof txData.gasPrice === "undefined" ? "" : parseHexValues(txData.gasPrice),
		    gas: typeof txData.gas === "undefined" ? typeof txData.gasLimit === "undefined" ? "" : parseHexValues(txData.gasLimit) : parseHexValues(txData.gas),
		    value: typeof txData.value === "undefined" ? "" : parseHexValues(txData.value),
		    nonce: typeof txData.nonce === "undefined" ? "" : parseHexValues(txData.nonce),
		    data: typeof txData.data === "undefined" ? "" : (0, misc_1.sanitizeHex)(txData.data) || "0x"
		  };
		  var prunable = ["gasPrice", "gas", "value", "nonce"];
		  Object.keys(txDataRPC).forEach(function (key) {
		    if ((typeof txDataRPC[key] === "undefined" || typeof txDataRPC[key] === "string" && !txDataRPC[key].trim().length) && prunable.includes(key)) {
		      delete txDataRPC[key];
		    }
		  });
		  return txDataRPC;
		}
		exports.parseTransactionData = parseTransactionData;
} (ethereum));
	return ethereum;
}

var payload = {};

var hasRequiredPayload;

function requirePayload () {
	if (hasRequiredPayload) return payload;
	hasRequiredPayload = 1;

	var _regeneratorRuntime = regenerator;
	Object.defineProperty(payload, "__esModule", {
	  value: true
	});
	payload.formatRpcError = payload.promisify = void 0;
	var tslib_1 = require$$7;
	function promisify(originalFn, thisArg) {
	  var _this = this;
	  var promisifiedFunction = function promisifiedFunction() {
	    for (var _len = arguments.length, callArgs = new Array(_len), _key = 0; _key < _len; _key++) {
	      callArgs[_key] = arguments[_key];
	    }
	    return tslib_1.__awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
	      return _regeneratorRuntime.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              return _context.abrupt("return", new Promise(function (resolve, reject) {
	                var callback = function callback(err, data) {
	                  if (err === null || typeof err === "undefined") {
	                    reject(err);
	                  }
	                  resolve(data);
	                };
	                originalFn.apply(thisArg, [].concat(callArgs, [callback]));
	              }));
	            case 1:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee);
	    }));
	  };
	  return promisifiedFunction;
	}
	payload.promisify = promisify;
	function formatRpcError(error) {
	  var message = error.message || "Failed or Rejected Request";
	  var code = -32000;
	  if (error && !error.code) {
	    switch (message) {
	      case "Parse error":
	        code = -32700;
	        break;
	      case "Invalid request":
	        code = -32600;
	        break;
	      case "Method not found":
	        code = -32601;
	        break;
	      case "Invalid params":
	        code = -32602;
	        break;
	      case "Internal error":
	        code = -32603;
	        break;
	      default:
	        code = -32000;
	        break;
	    }
	  }
	  var result = {
	    code: code,
	    message: message
	  };
	  if (error.data) {
	    result.data = error.data;
	  }
	  return result;
	}
	payload.formatRpcError = formatRpcError;
	return payload;
}

var session = {};

var url$1 = {};

var queryString = {};

var slicedToArray = {exports: {}};

var arrayWithHoles = {exports: {}};

var hasRequiredArrayWithHoles;

function requireArrayWithHoles () {
	if (hasRequiredArrayWithHoles) return arrayWithHoles.exports;
	hasRequiredArrayWithHoles = 1;
	(function (module) {
		function _arrayWithHoles(arr) {
		  if (Array.isArray(arr)) return arr;
		}
		module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (arrayWithHoles));
	return arrayWithHoles.exports;
}

var iterableToArrayLimit = {exports: {}};

var hasRequiredIterableToArrayLimit;

function requireIterableToArrayLimit () {
	if (hasRequiredIterableToArrayLimit) return iterableToArrayLimit.exports;
	hasRequiredIterableToArrayLimit = 1;
	(function (module) {
		function _iterableToArrayLimit(arr, i) {
		  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
		  if (null != _i) {
		    var _s,
		      _e,
		      _x,
		      _r,
		      _arr = [],
		      _n = !0,
		      _d = !1;
		    try {
		      if (_x = (_i = _i.call(arr)).next, 0 === i) {
		        if (Object(_i) !== _i) return;
		        _n = !1;
		      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) {
		        ;
		      }
		    } catch (err) {
		      _d = !0, _e = err;
		    } finally {
		      try {
		        if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;
		      } finally {
		        if (_d) throw _e;
		      }
		    }
		    return _arr;
		  }
		}
		module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (iterableToArrayLimit));
	return iterableToArrayLimit.exports;
}

var nonIterableRest = {exports: {}};

var hasRequiredNonIterableRest;

function requireNonIterableRest () {
	if (hasRequiredNonIterableRest) return nonIterableRest.exports;
	hasRequiredNonIterableRest = 1;
	(function (module) {
		function _nonIterableRest() {
		  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
		}
		module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (nonIterableRest));
	return nonIterableRest.exports;
}

var hasRequiredSlicedToArray;

function requireSlicedToArray () {
	if (hasRequiredSlicedToArray) return slicedToArray.exports;
	hasRequiredSlicedToArray = 1;
	(function (module) {
		var arrayWithHoles = requireArrayWithHoles();
		var iterableToArrayLimit = requireIterableToArrayLimit();
		var unsupportedIterableToArray = requireUnsupportedIterableToArray();
		var nonIterableRest = requireNonIterableRest();
		function _slicedToArray(arr, i) {
		  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
		}
		module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (slicedToArray));
	return slicedToArray.exports;
}

var strictUriEncode;
var hasRequiredStrictUriEncode;

function requireStrictUriEncode () {
	if (hasRequiredStrictUriEncode) return strictUriEncode;
	hasRequiredStrictUriEncode = 1;

	strictUriEncode = function (str) {
	  return encodeURIComponent(str).replace(/[!'()*]/g, function (x) {
	    return "%".concat(x.charCodeAt(0).toString(16).toUpperCase());
	  });
	};
	return strictUriEncode;
}

var decodeUriComponent;
var hasRequiredDecodeUriComponent;

function requireDecodeUriComponent () {
	if (hasRequiredDecodeUriComponent) return decodeUriComponent;
	hasRequiredDecodeUriComponent = 1;

	var token = '%[a-f0-9]{2}';
	var singleMatcher = new RegExp('(' + token + ')|([^%]+?)', 'gi');
	var multiMatcher = new RegExp('(' + token + ')+', 'gi');
	function decodeComponents(components, split) {
	  try {
	    // Try to decode the entire string first
	    return [decodeURIComponent(components.join(''))];
	  } catch (err) {
	    // Do nothing
	  }
	  if (components.length === 1) {
	    return components;
	  }
	  split = split || 1;

	  // Split the array in 2 parts
	  var left = components.slice(0, split);
	  var right = components.slice(split);
	  return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
	}
	function decode(input) {
	  try {
	    return decodeURIComponent(input);
	  } catch (err) {
	    var tokens = input.match(singleMatcher) || [];
	    for (var i = 1; i < tokens.length; i++) {
	      input = decodeComponents(tokens, i).join('');
	      tokens = input.match(singleMatcher) || [];
	    }
	    return input;
	  }
	}
	function customDecodeURIComponent(input) {
	  // Keep track of all the replacements and prefill the map with the `BOM`
	  var replaceMap = {
	    '%FE%FF': "\uFFFD\uFFFD",
	    '%FF%FE': "\uFFFD\uFFFD"
	  };
	  var match = multiMatcher.exec(input);
	  while (match) {
	    try {
	      // Decode as big chunks as possible
	      replaceMap[match[0]] = decodeURIComponent(match[0]);
	    } catch (err) {
	      var result = decode(match[0]);
	      if (result !== match[0]) {
	        replaceMap[match[0]] = result;
	      }
	    }
	    match = multiMatcher.exec(input);
	  }

	  // Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
	  replaceMap['%C2'] = "\uFFFD";
	  var entries = Object.keys(replaceMap);
	  for (var i = 0; i < entries.length; i++) {
	    // Replace all decoded components
	    var key = entries[i];
	    input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
	  }
	  return input;
	}
	decodeUriComponent = function (encodedURI) {
	  if (typeof encodedURI !== 'string') {
	    throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
	  }
	  try {
	    encodedURI = encodedURI.replace(/\+/g, ' ');

	    // Try the built in decoder first
	    return decodeURIComponent(encodedURI);
	  } catch (err) {
	    // Fallback to a more advanced decoder
	    return customDecodeURIComponent(encodedURI);
	  }
	};
	return decodeUriComponent;
}

var splitOnFirst;
var hasRequiredSplitOnFirst;

function requireSplitOnFirst () {
	if (hasRequiredSplitOnFirst) return splitOnFirst;
	hasRequiredSplitOnFirst = 1;

	splitOnFirst = function (string, separator) {
	  if (!(typeof string === 'string' && typeof separator === 'string')) {
	    throw new TypeError('Expected the arguments to be of type `string`');
	  }
	  if (separator === '') {
	    return [string];
	  }
	  var separatorIndex = string.indexOf(separator);
	  if (separatorIndex === -1) {
	    return [string];
	  }
	  return [string.slice(0, separatorIndex), string.slice(separatorIndex + separator.length)];
	};
	return splitOnFirst;
}

var hasRequiredQueryString;

function requireQueryString () {
	if (hasRequiredQueryString) return queryString;
	hasRequiredQueryString = 1;
	(function (exports) {

		var _slicedToArray = requireSlicedToArray();
		var _toConsumableArray = requireToConsumableArray();
		function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
		function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
		function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
		var strictUriEncode = requireStrictUriEncode();
		var decodeComponent = requireDecodeUriComponent();
		var splitOnFirst = requireSplitOnFirst();
		var isNullOrUndefined = function isNullOrUndefined(value) {
		  return value === null || value === undefined;
		};
		function encoderForArrayFormat(options) {
		  switch (options.arrayFormat) {
		    case 'index':
		      return function (key) {
		        return function (result, value) {
		          var index = result.length;
		          if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {
		            return result;
		          }
		          if (value === null) {
		            return [].concat(_toConsumableArray(result), [[encode(key, options), '[', index, ']'].join('')]);
		          }
		          return [].concat(_toConsumableArray(result), [[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')]);
		        };
		      };
		    case 'bracket':
		      return function (key) {
		        return function (result, value) {
		          if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {
		            return result;
		          }
		          if (value === null) {
		            return [].concat(_toConsumableArray(result), [[encode(key, options), '[]'].join('')]);
		          }
		          return [].concat(_toConsumableArray(result), [[encode(key, options), '[]=', encode(value, options)].join('')]);
		        };
		      };
		    case 'comma':
		    case 'separator':
		      return function (key) {
		        return function (result, value) {
		          if (value === null || value === undefined || value.length === 0) {
		            return result;
		          }
		          if (result.length === 0) {
		            return [[encode(key, options), '=', encode(value, options)].join('')];
		          }
		          return [[result, encode(value, options)].join(options.arrayFormatSeparator)];
		        };
		      };
		    default:
		      return function (key) {
		        return function (result, value) {
		          if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {
		            return result;
		          }
		          if (value === null) {
		            return [].concat(_toConsumableArray(result), [encode(key, options)]);
		          }
		          return [].concat(_toConsumableArray(result), [[encode(key, options), '=', encode(value, options)].join('')]);
		        };
		      };
		  }
		}
		function parserForArrayFormat(options) {
		  var result;
		  switch (options.arrayFormat) {
		    case 'index':
		      return function (key, value, accumulator) {
		        result = /\[(\d*)\]$/.exec(key);
		        key = key.replace(/\[\d*\]$/, '');
		        if (!result) {
		          accumulator[key] = value;
		          return;
		        }
		        if (accumulator[key] === undefined) {
		          accumulator[key] = {};
		        }
		        accumulator[key][result[1]] = value;
		      };
		    case 'bracket':
		      return function (key, value, accumulator) {
		        result = /(\[\])$/.exec(key);
		        key = key.replace(/\[\]$/, '');
		        if (!result) {
		          accumulator[key] = value;
		          return;
		        }
		        if (accumulator[key] === undefined) {
		          accumulator[key] = [value];
		          return;
		        }
		        accumulator[key] = [].concat(accumulator[key], value);
		      };
		    case 'comma':
		    case 'separator':
		      return function (key, value, accumulator) {
		        var isArray = typeof value === 'string' && value.split('').indexOf(options.arrayFormatSeparator) > -1;
		        var newValue = isArray ? value.split(options.arrayFormatSeparator).map(function (item) {
		          return decode(item, options);
		        }) : value === null ? value : decode(value, options);
		        accumulator[key] = newValue;
		      };
		    default:
		      return function (key, value, accumulator) {
		        if (accumulator[key] === undefined) {
		          accumulator[key] = value;
		          return;
		        }
		        accumulator[key] = [].concat(accumulator[key], value);
		      };
		  }
		}
		function validateArrayFormatSeparator(value) {
		  if (typeof value !== 'string' || value.length !== 1) {
		    throw new TypeError('arrayFormatSeparator must be single character string');
		  }
		}
		function encode(value, options) {
		  if (options.encode) {
		    return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
		  }
		  return value;
		}
		function decode(value, options) {
		  if (options.decode) {
		    return decodeComponent(value);
		  }
		  return value;
		}
		function keysSorter(input) {
		  if (Array.isArray(input)) {
		    return input.sort();
		  }
		  if (typeof input === 'object') {
		    return keysSorter(Object.keys(input)).sort(function (a, b) {
		      return Number(a) - Number(b);
		    }).map(function (key) {
		      return input[key];
		    });
		  }
		  return input;
		}
		function removeHash(input) {
		  var hashStart = input.indexOf('#');
		  if (hashStart !== -1) {
		    input = input.slice(0, hashStart);
		  }
		  return input;
		}
		function getHash(url) {
		  var hash = '';
		  var hashStart = url.indexOf('#');
		  if (hashStart !== -1) {
		    hash = url.slice(hashStart);
		  }
		  return hash;
		}
		function extract(input) {
		  input = removeHash(input);
		  var queryStart = input.indexOf('?');
		  if (queryStart === -1) {
		    return '';
		  }
		  return input.slice(queryStart + 1);
		}
		function parseValue(value, options) {
		  if (options.parseNumbers && !Number.isNaN(Number(value)) && typeof value === 'string' && value.trim() !== '') {
		    value = Number(value);
		  } else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {
		    value = value.toLowerCase() === 'true';
		  }
		  return value;
		}
		function parse(input, options) {
		  options = Object.assign({
		    decode: true,
		    sort: true,
		    arrayFormat: 'none',
		    arrayFormatSeparator: ',',
		    parseNumbers: false,
		    parseBooleans: false
		  }, options);
		  validateArrayFormatSeparator(options.arrayFormatSeparator);
		  var formatter = parserForArrayFormat(options);

		  // Create an object with no prototype
		  var ret = Object.create(null);
		  if (typeof input !== 'string') {
		    return ret;
		  }
		  input = input.trim().replace(/^[?#&]/, '');
		  if (!input) {
		    return ret;
		  }
		  var _iterator = _createForOfIteratorHelper(input.split('&')),
		    _step;
		  try {
		    for (_iterator.s(); !(_step = _iterator.n()).done;) {
		      var param = _step.value;
		      var _splitOnFirst = splitOnFirst(options.decode ? param.replace(/\+/g, ' ') : param, '='),
		        _splitOnFirst2 = _slicedToArray(_splitOnFirst, 2),
		        _key = _splitOnFirst2[0],
		        _value = _splitOnFirst2[1];

		      // Missing `=` should be `null`:
		      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
		      _value = _value === undefined ? null : ['comma', 'separator'].includes(options.arrayFormat) ? _value : decode(_value, options);
		      formatter(decode(_key, options), _value, ret);
		    }
		  } catch (err) {
		    _iterator.e(err);
		  } finally {
		    _iterator.f();
		  }
		  for (var _i = 0, _Object$keys = Object.keys(ret); _i < _Object$keys.length; _i++) {
		    var key = _Object$keys[_i];
		    var value = ret[key];
		    if (typeof value === 'object' && value !== null) {
		      for (var _i2 = 0, _Object$keys2 = Object.keys(value); _i2 < _Object$keys2.length; _i2++) {
		        var k = _Object$keys2[_i2];
		        value[k] = parseValue(value[k], options);
		      }
		    } else {
		      ret[key] = parseValue(value, options);
		    }
		  }
		  if (options.sort === false) {
		    return ret;
		  }
		  return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce(function (result, key) {
		    var value = ret[key];
		    if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {
		      // Sort object keys, not values
		      result[key] = keysSorter(value);
		    } else {
		      result[key] = value;
		    }
		    return result;
		  }, Object.create(null));
		}
		exports.extract = extract;
		exports.parse = parse;
		exports.stringify = function (object, options) {
		  if (!object) {
		    return '';
		  }
		  options = Object.assign({
		    encode: true,
		    strict: true,
		    arrayFormat: 'none',
		    arrayFormatSeparator: ','
		  }, options);
		  validateArrayFormatSeparator(options.arrayFormatSeparator);
		  var shouldFilter = function shouldFilter(key) {
		    return options.skipNull && isNullOrUndefined(object[key]) || options.skipEmptyString && object[key] === '';
		  };
		  var formatter = encoderForArrayFormat(options);
		  var objectCopy = {};
		  for (var _i3 = 0, _Object$keys3 = Object.keys(object); _i3 < _Object$keys3.length; _i3++) {
		    var key = _Object$keys3[_i3];
		    if (!shouldFilter(key)) {
		      objectCopy[key] = object[key];
		    }
		  }
		  var keys = Object.keys(objectCopy);
		  if (options.sort !== false) {
		    keys.sort(options.sort);
		  }
		  return keys.map(function (key) {
		    var value = object[key];
		    if (value === undefined) {
		      return '';
		    }
		    if (value === null) {
		      return encode(key, options);
		    }
		    if (Array.isArray(value)) {
		      return value.reduce(formatter(key), []).join('&');
		    }
		    return encode(key, options) + '=' + encode(value, options);
		  }).filter(function (x) {
		    return x.length > 0;
		  }).join('&');
		};
		exports.parseUrl = function (input, options) {
		  options = Object.assign({
		    decode: true
		  }, options);
		  var _splitOnFirst3 = splitOnFirst(input, '#'),
		    _splitOnFirst4 = _slicedToArray(_splitOnFirst3, 2),
		    url = _splitOnFirst4[0],
		    hash = _splitOnFirst4[1];
		  return Object.assign({
		    url: url.split('?')[0] || '',
		    query: parse(extract(input), options)
		  }, options && options.parseFragmentIdentifier && hash ? {
		    fragmentIdentifier: decode(hash, options)
		  } : {});
		};
		exports.stringifyUrl = function (input, options) {
		  options = Object.assign({
		    encode: true,
		    strict: true
		  }, options);
		  var url = removeHash(input.url).split('?')[0] || '';
		  var queryFromUrl = exports.extract(input.url);
		  var parsedQueryFromUrl = exports.parse(queryFromUrl, {
		    sort: false
		  });
		  var query = Object.assign(parsedQueryFromUrl, input.query);
		  var queryString = exports.stringify(query, options);
		  if (queryString) {
		    queryString = "?".concat(queryString);
		  }
		  var hash = getHash(input.url);
		  if (input.fragmentIdentifier) {
		    hash = "#".concat(encode(input.fragmentIdentifier, options));
		  }
		  return "".concat(url).concat(queryString).concat(hash);
		};
} (queryString));
	return queryString;
}

var hasRequiredUrl$1;

function requireUrl$1 () {
	if (hasRequiredUrl$1) return url$1;
	hasRequiredUrl$1 = 1;

	Object.defineProperty(url$1, "__esModule", {
	  value: true
	});
	url$1.formatQueryString = url$1.parseQueryString = url$1.appendToQueryString = url$1.getQueryString = void 0;
	var tslib_1 = require$$7;
	var queryStringUtils = tslib_1.__importStar(requireQueryString());
	function getQueryString(url) {
	  var pathEnd = url.indexOf("?") !== -1 ? url.indexOf("?") : undefined;
	  var queryString = typeof pathEnd !== "undefined" ? url.substr(pathEnd) : "";
	  return queryString;
	}
	url$1.getQueryString = getQueryString;
	function appendToQueryString(queryString, newQueryParams) {
	  var queryParams = parseQueryString(queryString);
	  queryParams = Object.assign(Object.assign({}, queryParams), newQueryParams);
	  queryString = formatQueryString(queryParams);
	  return queryString;
	}
	url$1.appendToQueryString = appendToQueryString;
	function parseQueryString(queryString) {
	  return queryStringUtils.parse(queryString);
	}
	url$1.parseQueryString = parseQueryString;
	function formatQueryString(queryParams) {
	  return queryStringUtils.stringify(queryParams);
	}
	url$1.formatQueryString = formatQueryString;
	return url$1;
}

var hasRequiredSession;

function requireSession () {
	if (hasRequiredSession) return session;
	hasRequiredSession = 1;

	Object.defineProperty(session, "__esModule", {
	  value: true
	});
	session.parseWalletConnectUri = session.isWalletConnectSession = void 0;
	var url_1 = requireUrl$1();
	function isWalletConnectSession(object) {
	  return typeof object.bridge !== "undefined";
	}
	session.isWalletConnectSession = isWalletConnectSession;
	function parseWalletConnectUri(str) {
	  var pathStart = str.indexOf(":");
	  var pathEnd = str.indexOf("?") !== -1 ? str.indexOf("?") : undefined;
	  var protocol = str.substring(0, pathStart);
	  var path = str.substring(pathStart + 1, pathEnd);
	  function parseRequiredParams(path) {
	    var separator = "@";
	    var values = path.split(separator);
	    var requiredParams = {
	      handshakeTopic: values[0],
	      version: parseInt(values[1], 10)
	    };
	    return requiredParams;
	  }
	  var requiredParams = parseRequiredParams(path);
	  var queryString = typeof pathEnd !== "undefined" ? str.substr(pathEnd) : "";
	  function parseQueryParams(queryString) {
	    var result = (0, url_1.parseQueryString)(queryString);
	    var parameters = {
	      key: result.key || "",
	      bridge: result.bridge || ""
	    };
	    return parameters;
	  }
	  var queryParams = parseQueryParams(queryString);
	  var result = Object.assign(Object.assign({
	    protocol: protocol
	  }, requiredParams), queryParams);
	  return result;
	}
	session.parseWalletConnectUri = parseWalletConnectUri;
	return session;
}

var hasRequiredCjs$6;

function requireCjs$6 () {
	if (hasRequiredCjs$6) return cjs$8;
	hasRequiredCjs$6 = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var tslib_1 = require$$7;
		tslib_1.__exportStar(requireCjs$7(), exports);
		tslib_1.__exportStar(requireConstants$4(), exports);
		tslib_1.__exportStar(requireEncoding$1(), exports);
		tslib_1.__exportStar(requireEthereum(), exports);
		tslib_1.__exportStar(requireMisc(), exports);
		tslib_1.__exportStar(requirePayload(), exports);
		tslib_1.__exportStar(requireSession(), exports);
		tslib_1.__exportStar(requireUrl$1(), exports);
		tslib_1.__exportStar(requireValidators$1(), exports);
} (cjs$8));
	return cjs$8;
}

var cjs$3 = {};

var network = {};

var hasRequiredNetwork;

function requireNetwork () {
	if (hasRequiredNetwork) return network;
	hasRequiredNetwork = 1;
	(function (exports) {

		var _classCallCheck = classCallCheck.exports;
		var _createClass = createClass.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var NetworkMonitor = /*#__PURE__*/function () {
		  function NetworkMonitor() {
		    var _this = this;
		    _classCallCheck(this, NetworkMonitor);
		    this._eventEmitters = [];
		    if (typeof window !== "undefined" && typeof window.addEventListener !== "undefined") {
		      window.addEventListener("online", function () {
		        return _this.trigger("online");
		      });
		      window.addEventListener("offline", function () {
		        return _this.trigger("offline");
		      });
		    }
		  }
		  _createClass(NetworkMonitor, [{
		    key: "on",
		    value: function on(event, callback) {
		      this._eventEmitters.push({
		        event: event,
		        callback: callback
		      });
		    }
		  }, {
		    key: "trigger",
		    value: function trigger(event) {
		      var eventEmitters = [];
		      if (event) {
		        eventEmitters = this._eventEmitters.filter(function (eventEmitter) {
		          return eventEmitter.event === event;
		        });
		      }
		      eventEmitters.forEach(function (eventEmitter) {
		        eventEmitter.callback();
		      });
		    }
		  }]);
		  return NetworkMonitor;
		}();
		exports["default"] = NetworkMonitor;
} (network));
	return network;
}

var defineProperty = {exports: {}};

var hasRequiredDefineProperty;

function requireDefineProperty () {
	if (hasRequiredDefineProperty) return defineProperty.exports;
	hasRequiredDefineProperty = 1;
	(function (module) {
		var toPropertyKey$1 = toPropertyKey.exports;
		function _defineProperty(obj, key, value) {
		  key = toPropertyKey$1(key);
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (defineProperty));
	return defineProperty.exports;
}

var bufferUtil = {exports: {}};

var constants$3;
var hasRequiredConstants$3;

function requireConstants$3 () {
	if (hasRequiredConstants$3) return constants$3;
	hasRequiredConstants$3 = 1;

	constants$3 = {
	  BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],
	  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',
	  kStatusCode: Symbol('status-code'),
	  kWebSocket: Symbol('websocket'),
	  EMPTY_BUFFER: Buffer.alloc(0),
	  NOOP: function NOOP() {}
	};
	return constants$3;
}

var hasRequiredBufferUtil;

function requireBufferUtil () {
	if (hasRequiredBufferUtil) return bufferUtil.exports;
	hasRequiredBufferUtil = 1;

	var _require = requireConstants$3(),
	  EMPTY_BUFFER = _require.EMPTY_BUFFER;

	/**
	 * Merges an array of buffers into a new buffer.
	 *
	 * @param {Buffer[]} list The array of buffers to concat
	 * @param {Number} totalLength The total length of buffers in the list
	 * @return {Buffer} The resulting buffer
	 * @public
	 */
	function concat(list, totalLength) {
	  if (list.length === 0) return EMPTY_BUFFER;
	  if (list.length === 1) return list[0];
	  var target = Buffer.allocUnsafe(totalLength);
	  var offset = 0;
	  for (var i = 0; i < list.length; i++) {
	    var buf = list[i];
	    target.set(buf, offset);
	    offset += buf.length;
	  }
	  if (offset < totalLength) return target.slice(0, offset);
	  return target;
	}

	/**
	 * Masks a buffer using the given mask.
	 *
	 * @param {Buffer} source The buffer to mask
	 * @param {Buffer} mask The mask to use
	 * @param {Buffer} output The buffer where to store the result
	 * @param {Number} offset The offset at which to start writing
	 * @param {Number} length The number of bytes to mask.
	 * @public
	 */
	function _mask(source, mask, output, offset, length) {
	  for (var i = 0; i < length; i++) {
	    output[offset + i] = source[i] ^ mask[i & 3];
	  }
	}

	/**
	 * Unmasks a buffer using the given mask.
	 *
	 * @param {Buffer} buffer The buffer to unmask
	 * @param {Buffer} mask The mask to use
	 * @public
	 */
	function _unmask(buffer, mask) {
	  // Required until https://github.com/nodejs/node/issues/9006 is resolved.
	  var length = buffer.length;
	  for (var i = 0; i < length; i++) {
	    buffer[i] ^= mask[i & 3];
	  }
	}

	/**
	 * Converts a buffer to an `ArrayBuffer`.
	 *
	 * @param {Buffer} buf The buffer to convert
	 * @return {ArrayBuffer} Converted buffer
	 * @public
	 */
	function toArrayBuffer(buf) {
	  if (buf.byteLength === buf.buffer.byteLength) {
	    return buf.buffer;
	  }
	  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
	}

	/**
	 * Converts `data` to a `Buffer`.
	 *
	 * @param {*} data The data to convert
	 * @return {Buffer} The buffer
	 * @throws {TypeError}
	 * @public
	 */
	function toBuffer(data) {
	  toBuffer.readOnly = true;
	  if (Buffer.isBuffer(data)) return data;
	  var buf;
	  if (data instanceof ArrayBuffer) {
	    buf = Buffer.from(data);
	  } else if (ArrayBuffer.isView(data)) {
	    buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
	  } else {
	    buf = Buffer.from(data);
	    toBuffer.readOnly = false;
	  }
	  return buf;
	}
	try {
	  var bufferUtil$1 = require('bufferutil');
	  var bu = bufferUtil$1.BufferUtil || bufferUtil$1;
	  bufferUtil.exports = {
	    concat: concat,
	    mask: function mask(source, _mask2, output, offset, length) {
	      if (length < 48) _mask(source, _mask2, output, offset, length);else bu.mask(source, _mask2, output, offset, length);
	    },
	    toArrayBuffer: toArrayBuffer,
	    toBuffer: toBuffer,
	    unmask: function unmask(buffer, mask) {
	      if (buffer.length < 32) _unmask(buffer, mask);else bu.unmask(buffer, mask);
	    }
	  };
	} catch (e) /* istanbul ignore next */{
	  bufferUtil.exports = {
	    concat: concat,
	    mask: _mask,
	    toArrayBuffer: toArrayBuffer,
	    toBuffer: toBuffer,
	    unmask: _unmask
	  };
	}
	return bufferUtil.exports;
}

var limiter;
var hasRequiredLimiter;

function requireLimiter () {
	if (hasRequiredLimiter) return limiter;
	hasRequiredLimiter = 1;

	var _classCallCheck = classCallCheck.exports;
	var _createClass = createClass.exports;
	var kDone = Symbol('kDone');
	var kRun = Symbol('kRun');

	/**
	 * A very simple job queue with adjustable concurrency. Adapted from
	 * https://github.com/STRML/async-limiter
	 */
	var Limiter = /*#__PURE__*/function () {
	  /**
	   * Creates a new `Limiter`.
	   *
	   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed
	   *     to run concurrently
	   */
	  function Limiter(concurrency) {
	    var _this = this;
	    _classCallCheck(this, Limiter);
	    this[kDone] = function () {
	      _this.pending--;
	      _this[kRun]();
	    };
	    this.concurrency = concurrency || Infinity;
	    this.jobs = [];
	    this.pending = 0;
	  }

	  /**
	   * Adds a job to the queue.
	   *
	   * @param {Function} job The job to run
	   * @public
	   */
	  _createClass(Limiter, [{
	    key: "add",
	    value: function add(job) {
	      this.jobs.push(job);
	      this[kRun]();
	    }

	    /**
	     * Removes a job from the queue and runs it if possible.
	     *
	     * @private
	     */
	  }, {
	    key: kRun,
	    value: function value() {
	      if (this.pending === this.concurrency) return;
	      if (this.jobs.length) {
	        var job = this.jobs.shift();
	        this.pending++;
	        job(this[kDone]);
	      }
	    }
	  }]);
	  return Limiter;
	}();
	limiter = Limiter;
	return limiter;
}

var permessageDeflate;
var hasRequiredPermessageDeflate;

function requirePermessageDeflate () {
	if (hasRequiredPermessageDeflate) return permessageDeflate;
	hasRequiredPermessageDeflate = 1;

	var _defineProperty = requireDefineProperty();
	var _classCallCheck = classCallCheck.exports;
	var _createClass = createClass.exports;
	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
	var zlib = require$$1__default["default"];
	var bufferUtil = requireBufferUtil();
	var Limiter = requireLimiter();
	var _require = requireConstants$3(),
	  kStatusCode = _require.kStatusCode,
	  NOOP = _require.NOOP;
	var TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);
	var kPerMessageDeflate = Symbol('permessage-deflate');
	var kTotalLength = Symbol('total-length');
	var kCallback = Symbol('callback');
	var kBuffers = Symbol('buffers');
	var kError = Symbol('error');

	//
	// We limit zlib concurrency, which prevents severe memory fragmentation
	// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913
	// and https://github.com/websockets/ws/issues/1202
	//
	// Intentionally global; it's the global thread pool that's an issue.
	//
	var zlibLimiter;

	/**
	 * permessage-deflate implementation.
	 */
	var PerMessageDeflate = /*#__PURE__*/function () {
	  /**
	   * Creates a PerMessageDeflate instance.
	   *
	   * @param {Object} [options] Configuration options
	   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept
	   *     disabling of server context takeover
	   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/
	   *     acknowledge disabling of client context takeover
	   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the
	   *     use of a custom server window size
	   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support
	   *     for, or request, a custom client window size
	   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on
	   *     deflate
	   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on
	   *     inflate
	   * @param {Number} [options.threshold=1024] Size (in bytes) below which
	   *     messages should not be compressed
	   * @param {Number} [options.concurrencyLimit=10] The number of concurrent
	   *     calls to zlib
	   * @param {Boolean} [isServer=false] Create the instance in either server or
	   *     client mode
	   * @param {Number} [maxPayload=0] The maximum allowed message length
	   */
	  function PerMessageDeflate(options, isServer, maxPayload) {
	    _classCallCheck(this, PerMessageDeflate);
	    this._maxPayload = maxPayload | 0;
	    this._options = options || {};
	    this._threshold = this._options.threshold !== undefined ? this._options.threshold : 1024;
	    this._isServer = !!isServer;
	    this._deflate = null;
	    this._inflate = null;
	    this.params = null;
	    if (!zlibLimiter) {
	      var concurrency = this._options.concurrencyLimit !== undefined ? this._options.concurrencyLimit : 10;
	      zlibLimiter = new Limiter(concurrency);
	    }
	  }

	  /**
	   * @type {String}
	   */
	  _createClass(PerMessageDeflate, [{
	    key: "offer",
	    value:
	    /**
	     * Create an extension negotiation offer.
	     *
	     * @return {Object} Extension parameters
	     * @public
	     */
	    function offer() {
	      var params = {};
	      if (this._options.serverNoContextTakeover) {
	        params.server_no_context_takeover = true;
	      }
	      if (this._options.clientNoContextTakeover) {
	        params.client_no_context_takeover = true;
	      }
	      if (this._options.serverMaxWindowBits) {
	        params.server_max_window_bits = this._options.serverMaxWindowBits;
	      }
	      if (this._options.clientMaxWindowBits) {
	        params.client_max_window_bits = this._options.clientMaxWindowBits;
	      } else if (this._options.clientMaxWindowBits == null) {
	        params.client_max_window_bits = true;
	      }
	      return params;
	    }

	    /**
	     * Accept an extension negotiation offer/response.
	     *
	     * @param {Array} configurations The extension negotiation offers/reponse
	     * @return {Object} Accepted configuration
	     * @public
	     */
	  }, {
	    key: "accept",
	    value: function accept(configurations) {
	      configurations = this.normalizeParams(configurations);
	      this.params = this._isServer ? this.acceptAsServer(configurations) : this.acceptAsClient(configurations);
	      return this.params;
	    }

	    /**
	     * Releases all resources used by the extension.
	     *
	     * @public
	     */
	  }, {
	    key: "cleanup",
	    value: function cleanup() {
	      if (this._inflate) {
	        this._inflate.close();
	        this._inflate = null;
	      }
	      if (this._deflate) {
	        var callback = this._deflate[kCallback];
	        this._deflate.close();
	        this._deflate = null;
	        if (callback) {
	          callback(new Error('The deflate stream was closed while data was being processed'));
	        }
	      }
	    }

	    /**
	     *  Accept an extension negotiation offer.
	     *
	     * @param {Array} offers The extension negotiation offers
	     * @return {Object} Accepted configuration
	     * @private
	     */
	  }, {
	    key: "acceptAsServer",
	    value: function acceptAsServer(offers) {
	      var opts = this._options;
	      var accepted = offers.find(function (params) {
	        if (opts.serverNoContextTakeover === false && params.server_no_context_takeover || params.server_max_window_bits && (opts.serverMaxWindowBits === false || typeof opts.serverMaxWindowBits === 'number' && opts.serverMaxWindowBits > params.server_max_window_bits) || typeof opts.clientMaxWindowBits === 'number' && !params.client_max_window_bits) {
	          return false;
	        }
	        return true;
	      });
	      if (!accepted) {
	        throw new Error('None of the extension offers can be accepted');
	      }
	      if (opts.serverNoContextTakeover) {
	        accepted.server_no_context_takeover = true;
	      }
	      if (opts.clientNoContextTakeover) {
	        accepted.client_no_context_takeover = true;
	      }
	      if (typeof opts.serverMaxWindowBits === 'number') {
	        accepted.server_max_window_bits = opts.serverMaxWindowBits;
	      }
	      if (typeof opts.clientMaxWindowBits === 'number') {
	        accepted.client_max_window_bits = opts.clientMaxWindowBits;
	      } else if (accepted.client_max_window_bits === true || opts.clientMaxWindowBits === false) {
	        delete accepted.client_max_window_bits;
	      }
	      return accepted;
	    }

	    /**
	     * Accept the extension negotiation response.
	     *
	     * @param {Array} response The extension negotiation response
	     * @return {Object} Accepted configuration
	     * @private
	     */
	  }, {
	    key: "acceptAsClient",
	    value: function acceptAsClient(response) {
	      var params = response[0];
	      if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {
	        throw new Error('Unexpected parameter "client_no_context_takeover"');
	      }
	      if (!params.client_max_window_bits) {
	        if (typeof this._options.clientMaxWindowBits === 'number') {
	          params.client_max_window_bits = this._options.clientMaxWindowBits;
	        }
	      } else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits === 'number' && params.client_max_window_bits > this._options.clientMaxWindowBits) {
	        throw new Error('Unexpected or invalid parameter "client_max_window_bits"');
	      }
	      return params;
	    }

	    /**
	     * Normalize parameters.
	     *
	     * @param {Array} configurations The extension negotiation offers/reponse
	     * @return {Array} The offers/response with normalized parameters
	     * @private
	     */
	  }, {
	    key: "normalizeParams",
	    value: function normalizeParams(configurations) {
	      var _this = this;
	      configurations.forEach(function (params) {
	        Object.keys(params).forEach(function (key) {
	          var value = params[key];
	          if (value.length > 1) {
	            throw new Error("Parameter \"".concat(key, "\" must have only a single value"));
	          }
	          value = value[0];
	          if (key === 'client_max_window_bits') {
	            if (value !== true) {
	              var num = +value;
	              if (!Number.isInteger(num) || num < 8 || num > 15) {
	                throw new TypeError("Invalid value for parameter \"".concat(key, "\": ").concat(value));
	              }
	              value = num;
	            } else if (!_this._isServer) {
	              throw new TypeError("Invalid value for parameter \"".concat(key, "\": ").concat(value));
	            }
	          } else if (key === 'server_max_window_bits') {
	            var _num = +value;
	            if (!Number.isInteger(_num) || _num < 8 || _num > 15) {
	              throw new TypeError("Invalid value for parameter \"".concat(key, "\": ").concat(value));
	            }
	            value = _num;
	          } else if (key === 'client_no_context_takeover' || key === 'server_no_context_takeover') {
	            if (value !== true) {
	              throw new TypeError("Invalid value for parameter \"".concat(key, "\": ").concat(value));
	            }
	          } else {
	            throw new Error("Unknown parameter \"".concat(key, "\""));
	          }
	          params[key] = value;
	        });
	      });
	      return configurations;
	    }

	    /**
	     * Decompress data. Concurrency limited.
	     *
	     * @param {Buffer} data Compressed data
	     * @param {Boolean} fin Specifies whether or not this is the last fragment
	     * @param {Function} callback Callback
	     * @public
	     */
	  }, {
	    key: "decompress",
	    value: function decompress(data, fin, callback) {
	      var _this2 = this;
	      zlibLimiter.add(function (done) {
	        _this2._decompress(data, fin, function (err, result) {
	          done();
	          callback(err, result);
	        });
	      });
	    }

	    /**
	     * Compress data. Concurrency limited.
	     *
	     * @param {Buffer} data Data to compress
	     * @param {Boolean} fin Specifies whether or not this is the last fragment
	     * @param {Function} callback Callback
	     * @public
	     */
	  }, {
	    key: "compress",
	    value: function compress(data, fin, callback) {
	      var _this3 = this;
	      zlibLimiter.add(function (done) {
	        _this3._compress(data, fin, function (err, result) {
	          done();
	          callback(err, result);
	        });
	      });
	    }

	    /**
	     * Decompress data.
	     *
	     * @param {Buffer} data Compressed data
	     * @param {Boolean} fin Specifies whether or not this is the last fragment
	     * @param {Function} callback Callback
	     * @private
	     */
	  }, {
	    key: "_decompress",
	    value: function _decompress(data, fin, callback) {
	      var _this4 = this;
	      var endpoint = this._isServer ? 'client' : 'server';
	      if (!this._inflate) {
	        var key = "".concat(endpoint, "_max_window_bits");
	        var windowBits = typeof this.params[key] !== 'number' ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
	        this._inflate = zlib.createInflateRaw(_objectSpread(_objectSpread({}, this._options.zlibInflateOptions), {}, {
	          windowBits: windowBits
	        }));
	        this._inflate[kPerMessageDeflate] = this;
	        this._inflate[kTotalLength] = 0;
	        this._inflate[kBuffers] = [];
	        this._inflate.on('error', inflateOnError);
	        this._inflate.on('data', inflateOnData);
	      }
	      this._inflate[kCallback] = callback;
	      this._inflate.write(data);
	      if (fin) this._inflate.write(TRAILER);
	      this._inflate.flush(function () {
	        var err = _this4._inflate[kError];
	        if (err) {
	          _this4._inflate.close();
	          _this4._inflate = null;
	          callback(err);
	          return;
	        }
	        var data = bufferUtil.concat(_this4._inflate[kBuffers], _this4._inflate[kTotalLength]);
	        if (_this4._inflate._readableState.endEmitted) {
	          _this4._inflate.close();
	          _this4._inflate = null;
	        } else {
	          _this4._inflate[kTotalLength] = 0;
	          _this4._inflate[kBuffers] = [];
	          if (fin && _this4.params["".concat(endpoint, "_no_context_takeover")]) {
	            _this4._inflate.reset();
	          }
	        }
	        callback(null, data);
	      });
	    }

	    /**
	     * Compress data.
	     *
	     * @param {Buffer} data Data to compress
	     * @param {Boolean} fin Specifies whether or not this is the last fragment
	     * @param {Function} callback Callback
	     * @private
	     */
	  }, {
	    key: "_compress",
	    value: function _compress(data, fin, callback) {
	      var _this5 = this;
	      var endpoint = this._isServer ? 'server' : 'client';
	      if (!this._deflate) {
	        var key = "".concat(endpoint, "_max_window_bits");
	        var windowBits = typeof this.params[key] !== 'number' ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
	        this._deflate = zlib.createDeflateRaw(_objectSpread(_objectSpread({}, this._options.zlibDeflateOptions), {}, {
	          windowBits: windowBits
	        }));
	        this._deflate[kTotalLength] = 0;
	        this._deflate[kBuffers] = [];

	        //
	        // An `'error'` event is emitted, only on Node.js < 10.0.0, if the
	        // `zlib.DeflateRaw` instance is closed while data is being processed.
	        // This can happen if `PerMessageDeflate#cleanup()` is called at the wrong
	        // time due to an abnormal WebSocket closure.
	        //
	        this._deflate.on('error', NOOP);
	        this._deflate.on('data', deflateOnData);
	      }
	      this._deflate[kCallback] = callback;
	      this._deflate.write(data);
	      this._deflate.flush(zlib.Z_SYNC_FLUSH, function () {
	        if (!_this5._deflate) {
	          //
	          // The deflate stream was closed while data was being processed.
	          //
	          return;
	        }
	        var data = bufferUtil.concat(_this5._deflate[kBuffers], _this5._deflate[kTotalLength]);
	        if (fin) data = data.slice(0, data.length - 4);

	        //
	        // Ensure that the callback will not be called again in
	        // `PerMessageDeflate#cleanup()`.
	        //
	        _this5._deflate[kCallback] = null;
	        _this5._deflate[kTotalLength] = 0;
	        _this5._deflate[kBuffers] = [];
	        if (fin && _this5.params["".concat(endpoint, "_no_context_takeover")]) {
	          _this5._deflate.reset();
	        }
	        callback(null, data);
	      });
	    }
	  }], [{
	    key: "extensionName",
	    get: function get() {
	      return 'permessage-deflate';
	    }
	  }]);
	  return PerMessageDeflate;
	}();
	permessageDeflate = PerMessageDeflate;

	/**
	 * The listener of the `zlib.DeflateRaw` stream `'data'` event.
	 *
	 * @param {Buffer} chunk A chunk of data
	 * @private
	 */
	function deflateOnData(chunk) {
	  this[kBuffers].push(chunk);
	  this[kTotalLength] += chunk.length;
	}

	/**
	 * The listener of the `zlib.InflateRaw` stream `'data'` event.
	 *
	 * @param {Buffer} chunk A chunk of data
	 * @private
	 */
	function inflateOnData(chunk) {
	  this[kTotalLength] += chunk.length;
	  if (this[kPerMessageDeflate]._maxPayload < 1 || this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload) {
	    this[kBuffers].push(chunk);
	    return;
	  }
	  this[kError] = new RangeError('Max payload size exceeded');
	  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';
	  this[kError][kStatusCode] = 1009;
	  this.removeListener('data', inflateOnData);
	  this.reset();
	}

	/**
	 * The listener of the `zlib.InflateRaw` stream `'error'` event.
	 *
	 * @param {Error} err The emitted error
	 * @private
	 */
	function inflateOnError(err) {
	  //
	  // There is no need to call `Zlib#close()` as the handle is automatically
	  // closed when an error is emitted.
	  //
	  this[kPerMessageDeflate]._inflate = null;
	  err[kStatusCode] = 1007;
	  this[kCallback](err);
	}
	return permessageDeflate;
}

var validation = {exports: {}};

var hasRequiredValidation;

function requireValidation () {
	if (hasRequiredValidation) return validation.exports;
	hasRequiredValidation = 1;

	/**
	 * Checks if a status code is allowed in a close frame.
	 *
	 * @param {Number} code The status code
	 * @return {Boolean} `true` if the status code is valid, else `false`
	 * @public
	 */
	function isValidStatusCode(code) {
	  return code >= 1000 && code <= 1014 && code !== 1004 && code !== 1005 && code !== 1006 || code >= 3000 && code <= 4999;
	}

	/**
	 * Checks if a given buffer contains only correct UTF-8.
	 * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by
	 * Markus Kuhn.
	 *
	 * @param {Buffer} buf The buffer to check
	 * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`
	 * @public
	 */
	function _isValidUTF8(buf) {
	  var len = buf.length;
	  var i = 0;
	  while (i < len) {
	    if ((buf[i] & 0x80) === 0) {
	      // 0xxxxxxx
	      i++;
	    } else if ((buf[i] & 0xe0) === 0xc0) {
	      // 110xxxxx 10xxxxxx
	      if (i + 1 === len || (buf[i + 1] & 0xc0) !== 0x80 || (buf[i] & 0xfe) === 0xc0 // Overlong
	      ) {
	        return false;
	      }
	      i += 2;
	    } else if ((buf[i] & 0xf0) === 0xe0) {
	      // 1110xxxx 10xxxxxx 10xxxxxx
	      if (i + 2 >= len || (buf[i + 1] & 0xc0) !== 0x80 || (buf[i + 2] & 0xc0) !== 0x80 || buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80 ||
	      // Overlong
	      buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0 // Surrogate (U+D800 - U+DFFF)
	      ) {
	        return false;
	      }
	      i += 3;
	    } else if ((buf[i] & 0xf8) === 0xf0) {
	      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
	      if (i + 3 >= len || (buf[i + 1] & 0xc0) !== 0x80 || (buf[i + 2] & 0xc0) !== 0x80 || (buf[i + 3] & 0xc0) !== 0x80 || buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80 ||
	      // Overlong
	      buf[i] === 0xf4 && buf[i + 1] > 0x8f || buf[i] > 0xf4 // > U+10FFFF
	      ) {
	        return false;
	      }
	      i += 4;
	    } else {
	      return false;
	    }
	  }
	  return true;
	}
	try {
	  var _isValidUTF = require('utf-8-validate');

	  /* istanbul ignore if */
	  if (typeof _isValidUTF === 'object') {
	    _isValidUTF = _isValidUTF.Validation.isValidUTF8; // utf-8-validate@<3.0.0
	  }

	  validation.exports = {
	    isValidStatusCode: isValidStatusCode,
	    isValidUTF8: function isValidUTF8(buf) {
	      return buf.length < 150 ? _isValidUTF8(buf) : _isValidUTF(buf);
	    }
	  };
	} catch (e) /* istanbul ignore next */{
	  validation.exports = {
	    isValidStatusCode: isValidStatusCode,
	    isValidUTF8: _isValidUTF8
	  };
	}
	return validation.exports;
}

var receiver;
var hasRequiredReceiver;

function requireReceiver () {
	if (hasRequiredReceiver) return receiver;
	hasRequiredReceiver = 1;

	var _classCallCheck = classCallCheck.exports;
	var _createClass = createClass.exports;
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf.exports;
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	var _require = require$$1__default$1["default"],
	  Writable = _require.Writable;
	var PerMessageDeflate = requirePermessageDeflate();
	var _require2 = requireConstants$3(),
	  BINARY_TYPES = _require2.BINARY_TYPES,
	  EMPTY_BUFFER = _require2.EMPTY_BUFFER,
	  kStatusCode = _require2.kStatusCode,
	  kWebSocket = _require2.kWebSocket;
	var _require3 = requireBufferUtil(),
	  concat = _require3.concat,
	  toArrayBuffer = _require3.toArrayBuffer,
	  unmask = _require3.unmask;
	var _require4 = requireValidation(),
	  isValidStatusCode = _require4.isValidStatusCode,
	  isValidUTF8 = _require4.isValidUTF8;
	var GET_INFO = 0;
	var GET_PAYLOAD_LENGTH_16 = 1;
	var GET_PAYLOAD_LENGTH_64 = 2;
	var GET_MASK = 3;
	var GET_DATA = 4;
	var INFLATING = 5;

	/**
	 * HyBi Receiver implementation.
	 *
	 * @extends Writable
	 */
	var Receiver = /*#__PURE__*/function (_Writable) {
	  _inherits(Receiver, _Writable);
	  var _super = _createSuper(Receiver);
	  /**
	   * Creates a Receiver instance.
	   *
	   * @param {String} [binaryType=nodebuffer] The type for binary data
	   * @param {Object} [extensions] An object containing the negotiated extensions
	   * @param {Boolean} [isServer=false] Specifies whether to operate in client or
	   *     server mode
	   * @param {Number} [maxPayload=0] The maximum allowed message length
	   */
	  function Receiver(binaryType, extensions, isServer, maxPayload) {
	    var _this;
	    _classCallCheck(this, Receiver);
	    _this = _super.call(this);
	    _this._binaryType = binaryType || BINARY_TYPES[0];
	    _this[kWebSocket] = undefined;
	    _this._extensions = extensions || {};
	    _this._isServer = !!isServer;
	    _this._maxPayload = maxPayload | 0;
	    _this._bufferedBytes = 0;
	    _this._buffers = [];
	    _this._compressed = false;
	    _this._payloadLength = 0;
	    _this._mask = undefined;
	    _this._fragmented = 0;
	    _this._masked = false;
	    _this._fin = false;
	    _this._opcode = 0;
	    _this._totalPayloadLength = 0;
	    _this._messageLength = 0;
	    _this._fragments = [];
	    _this._state = GET_INFO;
	    _this._loop = false;
	    return _this;
	  }

	  /**
	   * Implements `Writable.prototype._write()`.
	   *
	   * @param {Buffer} chunk The chunk of data to write
	   * @param {String} encoding The character encoding of `chunk`
	   * @param {Function} cb Callback
	   * @private
	   */
	  _createClass(Receiver, [{
	    key: "_write",
	    value: function _write(chunk, encoding, cb) {
	      if (this._opcode === 0x08 && this._state == GET_INFO) return cb();
	      this._bufferedBytes += chunk.length;
	      this._buffers.push(chunk);
	      this.startLoop(cb);
	    }

	    /**
	     * Consumes `n` bytes from the buffered data.
	     *
	     * @param {Number} n The number of bytes to consume
	     * @return {Buffer} The consumed bytes
	     * @private
	     */
	  }, {
	    key: "consume",
	    value: function consume(n) {
	      this._bufferedBytes -= n;
	      if (n === this._buffers[0].length) return this._buffers.shift();
	      if (n < this._buffers[0].length) {
	        var buf = this._buffers[0];
	        this._buffers[0] = buf.slice(n);
	        return buf.slice(0, n);
	      }
	      var dst = Buffer.allocUnsafe(n);
	      do {
	        var _buf = this._buffers[0];
	        var offset = dst.length - n;
	        if (n >= _buf.length) {
	          dst.set(this._buffers.shift(), offset);
	        } else {
	          dst.set(new Uint8Array(_buf.buffer, _buf.byteOffset, n), offset);
	          this._buffers[0] = _buf.slice(n);
	        }
	        n -= _buf.length;
	      } while (n > 0);
	      return dst;
	    }

	    /**
	     * Starts the parsing loop.
	     *
	     * @param {Function} cb Callback
	     * @private
	     */
	  }, {
	    key: "startLoop",
	    value: function startLoop(cb) {
	      var err;
	      this._loop = true;
	      do {
	        switch (this._state) {
	          case GET_INFO:
	            err = this.getInfo();
	            break;
	          case GET_PAYLOAD_LENGTH_16:
	            err = this.getPayloadLength16();
	            break;
	          case GET_PAYLOAD_LENGTH_64:
	            err = this.getPayloadLength64();
	            break;
	          case GET_MASK:
	            this.getMask();
	            break;
	          case GET_DATA:
	            err = this.getData(cb);
	            break;
	          default:
	            // `INFLATING`
	            this._loop = false;
	            return;
	        }
	      } while (this._loop);
	      cb(err);
	    }

	    /**
	     * Reads the first two bytes of a frame.
	     *
	     * @return {(RangeError|undefined)} A possible error
	     * @private
	     */
	  }, {
	    key: "getInfo",
	    value: function getInfo() {
	      if (this._bufferedBytes < 2) {
	        this._loop = false;
	        return;
	      }
	      var buf = this.consume(2);
	      if ((buf[0] & 0x30) !== 0x00) {
	        this._loop = false;
	        return error(RangeError, 'RSV2 and RSV3 must be clear', true, 1002, 'WS_ERR_UNEXPECTED_RSV_2_3');
	      }
	      var compressed = (buf[0] & 0x40) === 0x40;
	      if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {
	        this._loop = false;
	        return error(RangeError, 'RSV1 must be clear', true, 1002, 'WS_ERR_UNEXPECTED_RSV_1');
	      }
	      this._fin = (buf[0] & 0x80) === 0x80;
	      this._opcode = buf[0] & 0x0f;
	      this._payloadLength = buf[1] & 0x7f;
	      if (this._opcode === 0x00) {
	        if (compressed) {
	          this._loop = false;
	          return error(RangeError, 'RSV1 must be clear', true, 1002, 'WS_ERR_UNEXPECTED_RSV_1');
	        }
	        if (!this._fragmented) {
	          this._loop = false;
	          return error(RangeError, 'invalid opcode 0', true, 1002, 'WS_ERR_INVALID_OPCODE');
	        }
	        this._opcode = this._fragmented;
	      } else if (this._opcode === 0x01 || this._opcode === 0x02) {
	        if (this._fragmented) {
	          this._loop = false;
	          return error(RangeError, "invalid opcode ".concat(this._opcode), true, 1002, 'WS_ERR_INVALID_OPCODE');
	        }
	        this._compressed = compressed;
	      } else if (this._opcode > 0x07 && this._opcode < 0x0b) {
	        if (!this._fin) {
	          this._loop = false;
	          return error(RangeError, 'FIN must be set', true, 1002, 'WS_ERR_EXPECTED_FIN');
	        }
	        if (compressed) {
	          this._loop = false;
	          return error(RangeError, 'RSV1 must be clear', true, 1002, 'WS_ERR_UNEXPECTED_RSV_1');
	        }
	        if (this._payloadLength > 0x7d) {
	          this._loop = false;
	          return error(RangeError, "invalid payload length ".concat(this._payloadLength), true, 1002, 'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH');
	        }
	      } else {
	        this._loop = false;
	        return error(RangeError, "invalid opcode ".concat(this._opcode), true, 1002, 'WS_ERR_INVALID_OPCODE');
	      }
	      if (!this._fin && !this._fragmented) this._fragmented = this._opcode;
	      this._masked = (buf[1] & 0x80) === 0x80;
	      if (this._isServer) {
	        if (!this._masked) {
	          this._loop = false;
	          return error(RangeError, 'MASK must be set', true, 1002, 'WS_ERR_EXPECTED_MASK');
	        }
	      } else if (this._masked) {
	        this._loop = false;
	        return error(RangeError, 'MASK must be clear', true, 1002, 'WS_ERR_UNEXPECTED_MASK');
	      }
	      if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;else return this.haveLength();
	    }

	    /**
	     * Gets extended payload length (7+16).
	     *
	     * @return {(RangeError|undefined)} A possible error
	     * @private
	     */
	  }, {
	    key: "getPayloadLength16",
	    value: function getPayloadLength16() {
	      if (this._bufferedBytes < 2) {
	        this._loop = false;
	        return;
	      }
	      this._payloadLength = this.consume(2).readUInt16BE(0);
	      return this.haveLength();
	    }

	    /**
	     * Gets extended payload length (7+64).
	     *
	     * @return {(RangeError|undefined)} A possible error
	     * @private
	     */
	  }, {
	    key: "getPayloadLength64",
	    value: function getPayloadLength64() {
	      if (this._bufferedBytes < 8) {
	        this._loop = false;
	        return;
	      }
	      var buf = this.consume(8);
	      var num = buf.readUInt32BE(0);

	      //
	      // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned
	      // if payload length is greater than this number.
	      //
	      if (num > Math.pow(2, 53 - 32) - 1) {
	        this._loop = false;
	        return error(RangeError, 'Unsupported WebSocket frame: payload length > 2^53 - 1', false, 1009, 'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH');
	      }
	      this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
	      return this.haveLength();
	    }

	    /**
	     * Payload length has been read.
	     *
	     * @return {(RangeError|undefined)} A possible error
	     * @private
	     */
	  }, {
	    key: "haveLength",
	    value: function haveLength() {
	      if (this._payloadLength && this._opcode < 0x08) {
	        this._totalPayloadLength += this._payloadLength;
	        if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
	          this._loop = false;
	          return error(RangeError, 'Max payload size exceeded', false, 1009, 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH');
	        }
	      }
	      if (this._masked) this._state = GET_MASK;else this._state = GET_DATA;
	    }

	    /**
	     * Reads mask bytes.
	     *
	     * @private
	     */
	  }, {
	    key: "getMask",
	    value: function getMask() {
	      if (this._bufferedBytes < 4) {
	        this._loop = false;
	        return;
	      }
	      this._mask = this.consume(4);
	      this._state = GET_DATA;
	    }

	    /**
	     * Reads data bytes.
	     *
	     * @param {Function} cb Callback
	     * @return {(Error|RangeError|undefined)} A possible error
	     * @private
	     */
	  }, {
	    key: "getData",
	    value: function getData(cb) {
	      var data = EMPTY_BUFFER;
	      if (this._payloadLength) {
	        if (this._bufferedBytes < this._payloadLength) {
	          this._loop = false;
	          return;
	        }
	        data = this.consume(this._payloadLength);
	        if (this._masked) unmask(data, this._mask);
	      }
	      if (this._opcode > 0x07) return this.controlMessage(data);
	      if (this._compressed) {
	        this._state = INFLATING;
	        this.decompress(data, cb);
	        return;
	      }
	      if (data.length) {
	        //
	        // This message is not compressed so its lenght is the sum of the payload
	        // length of all fragments.
	        //
	        this._messageLength = this._totalPayloadLength;
	        this._fragments.push(data);
	      }
	      return this.dataMessage();
	    }

	    /**
	     * Decompresses data.
	     *
	     * @param {Buffer} data Compressed data
	     * @param {Function} cb Callback
	     * @private
	     */
	  }, {
	    key: "decompress",
	    value: function decompress(data, cb) {
	      var _this2 = this;
	      var perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
	      perMessageDeflate.decompress(data, this._fin, function (err, buf) {
	        if (err) return cb(err);
	        if (buf.length) {
	          _this2._messageLength += buf.length;
	          if (_this2._messageLength > _this2._maxPayload && _this2._maxPayload > 0) {
	            return cb(error(RangeError, 'Max payload size exceeded', false, 1009, 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'));
	          }
	          _this2._fragments.push(buf);
	        }
	        var er = _this2.dataMessage();
	        if (er) return cb(er);
	        _this2.startLoop(cb);
	      });
	    }

	    /**
	     * Handles a data message.
	     *
	     * @return {(Error|undefined)} A possible error
	     * @private
	     */
	  }, {
	    key: "dataMessage",
	    value: function dataMessage() {
	      if (this._fin) {
	        var messageLength = this._messageLength;
	        var fragments = this._fragments;
	        this._totalPayloadLength = 0;
	        this._messageLength = 0;
	        this._fragmented = 0;
	        this._fragments = [];
	        if (this._opcode === 2) {
	          var data;
	          if (this._binaryType === 'nodebuffer') {
	            data = concat(fragments, messageLength);
	          } else if (this._binaryType === 'arraybuffer') {
	            data = toArrayBuffer(concat(fragments, messageLength));
	          } else {
	            data = fragments;
	          }
	          this.emit('message', data);
	        } else {
	          var buf = concat(fragments, messageLength);
	          if (!isValidUTF8(buf)) {
	            this._loop = false;
	            return error(Error, 'invalid UTF-8 sequence', true, 1007, 'WS_ERR_INVALID_UTF8');
	          }
	          this.emit('message', buf.toString());
	        }
	      }
	      this._state = GET_INFO;
	    }

	    /**
	     * Handles a control message.
	     *
	     * @param {Buffer} data Data to handle
	     * @return {(Error|RangeError|undefined)} A possible error
	     * @private
	     */
	  }, {
	    key: "controlMessage",
	    value: function controlMessage(data) {
	      if (this._opcode === 0x08) {
	        this._loop = false;
	        if (data.length === 0) {
	          this.emit('conclude', 1005, '');
	          this.end();
	        } else if (data.length === 1) {
	          return error(RangeError, 'invalid payload length 1', true, 1002, 'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH');
	        } else {
	          var code = data.readUInt16BE(0);
	          if (!isValidStatusCode(code)) {
	            return error(RangeError, "invalid status code ".concat(code), true, 1002, 'WS_ERR_INVALID_CLOSE_CODE');
	          }
	          var buf = data.slice(2);
	          if (!isValidUTF8(buf)) {
	            return error(Error, 'invalid UTF-8 sequence', true, 1007, 'WS_ERR_INVALID_UTF8');
	          }
	          this.emit('conclude', code, buf.toString());
	          this.end();
	        }
	      } else if (this._opcode === 0x09) {
	        this.emit('ping', data);
	      } else {
	        this.emit('pong', data);
	      }
	      this._state = GET_INFO;
	    }
	  }]);
	  return Receiver;
	}(Writable);
	receiver = Receiver;

	/**
	 * Builds an error object.
	 *
	 * @param {function(new:Error|RangeError)} ErrorCtor The error constructor
	 * @param {String} message The error message
	 * @param {Boolean} prefix Specifies whether or not to add a default prefix to
	 *     `message`
	 * @param {Number} statusCode The status code
	 * @param {String} errorCode The exposed error code
	 * @return {(Error|RangeError)} The error
	 * @private
	 */
	function error(ErrorCtor, message, prefix, statusCode, errorCode) {
	  var err = new ErrorCtor(prefix ? "Invalid WebSocket frame: ".concat(message) : message);
	  Error.captureStackTrace(err, error);
	  err.code = errorCode;
	  err[kStatusCode] = statusCode;
	  return err;
	}
	return receiver;
}

/* eslint no-unused-vars: ["error", { "varsIgnorePattern": "^net|tls$" }] */

var sender;
var hasRequiredSender;

function requireSender () {
	if (hasRequiredSender) return sender;
	hasRequiredSender = 1;

	var _classCallCheck = classCallCheck.exports;
	var _createClass = createClass.exports;
	var _require = require$$12__default["default"],
	  randomFillSync = _require.randomFillSync;
	var PerMessageDeflate = requirePermessageDeflate();
	var _require2 = requireConstants$3(),
	  EMPTY_BUFFER = _require2.EMPTY_BUFFER;
	var _require3 = requireValidation(),
	  isValidStatusCode = _require3.isValidStatusCode;
	var _require4 = requireBufferUtil(),
	  applyMask = _require4.mask,
	  toBuffer = _require4.toBuffer;
	var mask = Buffer.alloc(4);

	/**
	 * HyBi Sender implementation.
	 */
	var Sender = /*#__PURE__*/function () {
	  /**
	   * Creates a Sender instance.
	   *
	   * @param {(net.Socket|tls.Socket)} socket The connection socket
	   * @param {Object} [extensions] An object containing the negotiated extensions
	   */
	  function Sender(socket, extensions) {
	    _classCallCheck(this, Sender);
	    this._extensions = extensions || {};
	    this._socket = socket;
	    this._firstFragment = true;
	    this._compress = false;
	    this._bufferedBytes = 0;
	    this._deflating = false;
	    this._queue = [];
	  }

	  /**
	   * Frames a piece of data according to the HyBi WebSocket protocol.
	   *
	   * @param {Buffer} data The data to frame
	   * @param {Object} options Options object
	   * @param {Number} options.opcode The opcode
	   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
	   *     modified
	   * @param {Boolean} [options.fin=false] Specifies whether or not to set the
	   *     FIN bit
	   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
	   *     `data`
	   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
	   *     RSV1 bit
	   * @return {Buffer[]} The framed data as a list of `Buffer` instances
	   * @public
	   */
	  _createClass(Sender, [{
	    key: "close",
	    value:
	    /**
	     * Sends a close message to the other peer.
	     *
	     * @param {Number} [code] The status code component of the body
	     * @param {String} [data] The message component of the body
	     * @param {Boolean} [mask=false] Specifies whether or not to mask the message
	     * @param {Function} [cb] Callback
	     * @public
	     */
	    function close(code, data, mask, cb) {
	      var buf;
	      if (code === undefined) {
	        buf = EMPTY_BUFFER;
	      } else if (typeof code !== 'number' || !isValidStatusCode(code)) {
	        throw new TypeError('First argument must be a valid error code number');
	      } else if (data === undefined || data === '') {
	        buf = Buffer.allocUnsafe(2);
	        buf.writeUInt16BE(code, 0);
	      } else {
	        var length = Buffer.byteLength(data);
	        if (length > 123) {
	          throw new RangeError('The message must not be greater than 123 bytes');
	        }
	        buf = Buffer.allocUnsafe(2 + length);
	        buf.writeUInt16BE(code, 0);
	        buf.write(data, 2);
	      }
	      if (this._deflating) {
	        this.enqueue([this.doClose, buf, mask, cb]);
	      } else {
	        this.doClose(buf, mask, cb);
	      }
	    }

	    /**
	     * Frames and sends a close message.
	     *
	     * @param {Buffer} data The message to send
	     * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
	     * @param {Function} [cb] Callback
	     * @private
	     */
	  }, {
	    key: "doClose",
	    value: function doClose(data, mask, cb) {
	      this.sendFrame(Sender.frame(data, {
	        fin: true,
	        rsv1: false,
	        opcode: 0x08,
	        mask: mask,
	        readOnly: false
	      }), cb);
	    }

	    /**
	     * Sends a ping message to the other peer.
	     *
	     * @param {*} data The message to send
	     * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
	     * @param {Function} [cb] Callback
	     * @public
	     */
	  }, {
	    key: "ping",
	    value: function ping(data, mask, cb) {
	      var buf = toBuffer(data);
	      if (buf.length > 125) {
	        throw new RangeError('The data size must not be greater than 125 bytes');
	      }
	      if (this._deflating) {
	        this.enqueue([this.doPing, buf, mask, toBuffer.readOnly, cb]);
	      } else {
	        this.doPing(buf, mask, toBuffer.readOnly, cb);
	      }
	    }

	    /**
	     * Frames and sends a ping message.
	     *
	     * @param {Buffer} data The message to send
	     * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
	     * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified
	     * @param {Function} [cb] Callback
	     * @private
	     */
	  }, {
	    key: "doPing",
	    value: function doPing(data, mask, readOnly, cb) {
	      this.sendFrame(Sender.frame(data, {
	        fin: true,
	        rsv1: false,
	        opcode: 0x09,
	        mask: mask,
	        readOnly: readOnly
	      }), cb);
	    }

	    /**
	     * Sends a pong message to the other peer.
	     *
	     * @param {*} data The message to send
	     * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
	     * @param {Function} [cb] Callback
	     * @public
	     */
	  }, {
	    key: "pong",
	    value: function pong(data, mask, cb) {
	      var buf = toBuffer(data);
	      if (buf.length > 125) {
	        throw new RangeError('The data size must not be greater than 125 bytes');
	      }
	      if (this._deflating) {
	        this.enqueue([this.doPong, buf, mask, toBuffer.readOnly, cb]);
	      } else {
	        this.doPong(buf, mask, toBuffer.readOnly, cb);
	      }
	    }

	    /**
	     * Frames and sends a pong message.
	     *
	     * @param {Buffer} data The message to send
	     * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
	     * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified
	     * @param {Function} [cb] Callback
	     * @private
	     */
	  }, {
	    key: "doPong",
	    value: function doPong(data, mask, readOnly, cb) {
	      this.sendFrame(Sender.frame(data, {
	        fin: true,
	        rsv1: false,
	        opcode: 0x0a,
	        mask: mask,
	        readOnly: readOnly
	      }), cb);
	    }

	    /**
	     * Sends a data message to the other peer.
	     *
	     * @param {*} data The message to send
	     * @param {Object} options Options object
	     * @param {Boolean} [options.compress=false] Specifies whether or not to
	     *     compress `data`
	     * @param {Boolean} [options.binary=false] Specifies whether `data` is binary
	     *     or text
	     * @param {Boolean} [options.fin=false] Specifies whether the fragment is the
	     *     last one
	     * @param {Boolean} [options.mask=false] Specifies whether or not to mask
	     *     `data`
	     * @param {Function} [cb] Callback
	     * @public
	     */
	  }, {
	    key: "send",
	    value: function send(data, options, cb) {
	      var buf = toBuffer(data);
	      var perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
	      var opcode = options.binary ? 2 : 1;
	      var rsv1 = options.compress;
	      if (this._firstFragment) {
	        this._firstFragment = false;
	        if (rsv1 && perMessageDeflate) {
	          rsv1 = buf.length >= perMessageDeflate._threshold;
	        }
	        this._compress = rsv1;
	      } else {
	        rsv1 = false;
	        opcode = 0;
	      }
	      if (options.fin) this._firstFragment = true;
	      if (perMessageDeflate) {
	        var opts = {
	          fin: options.fin,
	          rsv1: rsv1,
	          opcode: opcode,
	          mask: options.mask,
	          readOnly: toBuffer.readOnly
	        };
	        if (this._deflating) {
	          this.enqueue([this.dispatch, buf, this._compress, opts, cb]);
	        } else {
	          this.dispatch(buf, this._compress, opts, cb);
	        }
	      } else {
	        this.sendFrame(Sender.frame(buf, {
	          fin: options.fin,
	          rsv1: false,
	          opcode: opcode,
	          mask: options.mask,
	          readOnly: toBuffer.readOnly
	        }), cb);
	      }
	    }

	    /**
	     * Dispatches a data message.
	     *
	     * @param {Buffer} data The message to send
	     * @param {Boolean} [compress=false] Specifies whether or not to compress
	     *     `data`
	     * @param {Object} options Options object
	     * @param {Number} options.opcode The opcode
	     * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
	     *     modified
	     * @param {Boolean} [options.fin=false] Specifies whether or not to set the
	     *     FIN bit
	     * @param {Boolean} [options.mask=false] Specifies whether or not to mask
	     *     `data`
	     * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
	     *     RSV1 bit
	     * @param {Function} [cb] Callback
	     * @private
	     */
	  }, {
	    key: "dispatch",
	    value: function dispatch(data, compress, options, cb) {
	      var _this = this;
	      if (!compress) {
	        this.sendFrame(Sender.frame(data, options), cb);
	        return;
	      }
	      var perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
	      this._bufferedBytes += data.length;
	      this._deflating = true;
	      perMessageDeflate.compress(data, options.fin, function (_, buf) {
	        if (_this._socket.destroyed) {
	          var err = new Error('The socket was closed while data was being compressed');
	          if (typeof cb === 'function') cb(err);
	          for (var i = 0; i < _this._queue.length; i++) {
	            var callback = _this._queue[i][4];
	            if (typeof callback === 'function') callback(err);
	          }
	          return;
	        }
	        _this._bufferedBytes -= data.length;
	        _this._deflating = false;
	        options.readOnly = false;
	        _this.sendFrame(Sender.frame(buf, options), cb);
	        _this.dequeue();
	      });
	    }

	    /**
	     * Executes queued send operations.
	     *
	     * @private
	     */
	  }, {
	    key: "dequeue",
	    value: function dequeue() {
	      while (!this._deflating && this._queue.length) {
	        var params = this._queue.shift();
	        this._bufferedBytes -= params[1].length;
	        Reflect.apply(params[0], this, params.slice(1));
	      }
	    }

	    /**
	     * Enqueues a send operation.
	     *
	     * @param {Array} params Send operation parameters.
	     * @private
	     */
	  }, {
	    key: "enqueue",
	    value: function enqueue(params) {
	      this._bufferedBytes += params[1].length;
	      this._queue.push(params);
	    }

	    /**
	     * Sends a frame.
	     *
	     * @param {Buffer[]} list The frame to send
	     * @param {Function} [cb] Callback
	     * @private
	     */
	  }, {
	    key: "sendFrame",
	    value: function sendFrame(list, cb) {
	      if (list.length === 2) {
	        this._socket.cork();
	        this._socket.write(list[0]);
	        this._socket.write(list[1], cb);
	        this._socket.uncork();
	      } else {
	        this._socket.write(list[0], cb);
	      }
	    }
	  }], [{
	    key: "frame",
	    value: function frame(data, options) {
	      var merge = options.mask && options.readOnly;
	      var offset = options.mask ? 6 : 2;
	      var payloadLength = data.length;
	      if (data.length >= 65536) {
	        offset += 8;
	        payloadLength = 127;
	      } else if (data.length > 125) {
	        offset += 2;
	        payloadLength = 126;
	      }
	      var target = Buffer.allocUnsafe(merge ? data.length + offset : offset);
	      target[0] = options.fin ? options.opcode | 0x80 : options.opcode;
	      if (options.rsv1) target[0] |= 0x40;
	      target[1] = payloadLength;
	      if (payloadLength === 126) {
	        target.writeUInt16BE(data.length, 2);
	      } else if (payloadLength === 127) {
	        target.writeUInt32BE(0, 2);
	        target.writeUInt32BE(data.length, 6);
	      }
	      if (!options.mask) return [target, data];
	      randomFillSync(mask, 0, 4);
	      target[1] |= 0x80;
	      target[offset - 4] = mask[0];
	      target[offset - 3] = mask[1];
	      target[offset - 2] = mask[2];
	      target[offset - 1] = mask[3];
	      if (merge) {
	        applyMask(data, mask, target, offset, data.length);
	        return [target];
	      }
	      applyMask(data, mask, data, 0, data.length);
	      return [target, data];
	    }
	  }]);
	  return Sender;
	}();
	sender = Sender;
	return sender;
}

var eventTarget;
var hasRequiredEventTarget;

function requireEventTarget () {
	if (hasRequiredEventTarget) return eventTarget;
	hasRequiredEventTarget = 1;

	/**
	 * Class representing an event.
	 *
	 * @private
	 */
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf.exports;
	var _createClass = createClass.exports;
	var _classCallCheck = classCallCheck.exports;
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	var Event = /*#__PURE__*/_createClass(
	/**
	 * Create a new `Event`.
	 *
	 * @param {String} type The name of the event
	 * @param {Object} target A reference to the target to which the event was
	 *     dispatched
	 */
	function Event(type, target) {
	  _classCallCheck(this, Event);
	  this.target = target;
	  this.type = type;
	});
	/**
	 * Class representing a message event.
	 *
	 * @extends Event
	 * @private
	 */
	var MessageEvent = /*#__PURE__*/function (_Event) {
	  _inherits(MessageEvent, _Event);
	  var _super = _createSuper(MessageEvent);
	  /**
	   * Create a new `MessageEvent`.
	   *
	   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data
	   * @param {WebSocket} target A reference to the target to which the event was
	   *     dispatched
	   */
	  function MessageEvent(data, target) {
	    var _this;
	    _classCallCheck(this, MessageEvent);
	    _this = _super.call(this, 'message', target);
	    _this.data = data;
	    return _this;
	  }
	  return _createClass(MessageEvent);
	}(Event);
	/**
	 * Class representing a close event.
	 *
	 * @extends Event
	 * @private
	 */
	var CloseEvent = /*#__PURE__*/function (_Event2) {
	  _inherits(CloseEvent, _Event2);
	  var _super2 = _createSuper(CloseEvent);
	  /**
	   * Create a new `CloseEvent`.
	   *
	   * @param {Number} code The status code explaining why the connection is being
	   *     closed
	   * @param {String} reason A human-readable string explaining why the
	   *     connection is closing
	   * @param {WebSocket} target A reference to the target to which the event was
	   *     dispatched
	   */
	  function CloseEvent(code, reason, target) {
	    var _this2;
	    _classCallCheck(this, CloseEvent);
	    _this2 = _super2.call(this, 'close', target);
	    _this2.wasClean = target._closeFrameReceived && target._closeFrameSent;
	    _this2.reason = reason;
	    _this2.code = code;
	    return _this2;
	  }
	  return _createClass(CloseEvent);
	}(Event);
	/**
	 * Class representing an open event.
	 *
	 * @extends Event
	 * @private
	 */
	var OpenEvent = /*#__PURE__*/function (_Event3) {
	  _inherits(OpenEvent, _Event3);
	  var _super3 = _createSuper(OpenEvent);
	  /**
	   * Create a new `OpenEvent`.
	   *
	   * @param {WebSocket} target A reference to the target to which the event was
	   *     dispatched
	   */
	  function OpenEvent(target) {
	    _classCallCheck(this, OpenEvent);
	    return _super3.call(this, 'open', target);
	  }
	  return _createClass(OpenEvent);
	}(Event);
	/**
	 * Class representing an error event.
	 *
	 * @extends Event
	 * @private
	 */
	var ErrorEvent = /*#__PURE__*/function (_Event4) {
	  _inherits(ErrorEvent, _Event4);
	  var _super4 = _createSuper(ErrorEvent);
	  /**
	   * Create a new `ErrorEvent`.
	   *
	   * @param {Object} error The error that generated this event
	   * @param {WebSocket} target A reference to the target to which the event was
	   *     dispatched
	   */
	  function ErrorEvent(error, target) {
	    var _this3;
	    _classCallCheck(this, ErrorEvent);
	    _this3 = _super4.call(this, 'error', target);
	    _this3.message = error.message;
	    _this3.error = error;
	    return _this3;
	  }
	  return _createClass(ErrorEvent);
	}(Event);
	/**
	 * This provides methods for emulating the `EventTarget` interface. It's not
	 * meant to be used directly.
	 *
	 * @mixin
	 */
	var EventTarget = {
	  /**
	   * Register an event listener.
	   *
	   * @param {String} type A string representing the event type to listen for
	   * @param {Function} listener The listener to add
	   * @param {Object} [options] An options object specifies characteristics about
	   *     the event listener
	   * @param {Boolean} [options.once=false] A `Boolean`` indicating that the
	   *     listener should be invoked at most once after being added. If `true`,
	   *     the listener would be automatically removed when invoked.
	   * @public
	   */
	  addEventListener: function addEventListener(type, listener, options) {
	    if (typeof listener !== 'function') return;
	    function onMessage(data) {
	      listener.call(this, new MessageEvent(data, this));
	    }
	    function onClose(code, message) {
	      listener.call(this, new CloseEvent(code, message, this));
	    }
	    function onError(error) {
	      listener.call(this, new ErrorEvent(error, this));
	    }
	    function onOpen() {
	      listener.call(this, new OpenEvent(this));
	    }
	    var method = options && options.once ? 'once' : 'on';
	    if (type === 'message') {
	      onMessage._listener = listener;
	      this[method](type, onMessage);
	    } else if (type === 'close') {
	      onClose._listener = listener;
	      this[method](type, onClose);
	    } else if (type === 'error') {
	      onError._listener = listener;
	      this[method](type, onError);
	    } else if (type === 'open') {
	      onOpen._listener = listener;
	      this[method](type, onOpen);
	    } else {
	      this[method](type, listener);
	    }
	  },
	  /**
	   * Remove an event listener.
	   *
	   * @param {String} type A string representing the event type to remove
	   * @param {Function} listener The listener to remove
	   * @public
	   */
	  removeEventListener: function removeEventListener(type, listener) {
	    var listeners = this.listeners(type);
	    for (var i = 0; i < listeners.length; i++) {
	      if (listeners[i] === listener || listeners[i]._listener === listener) {
	        this.removeListener(type, listeners[i]);
	      }
	    }
	  }
	};
	eventTarget = EventTarget;
	return eventTarget;
}

var extension;
var hasRequiredExtension;

function requireExtension () {
	if (hasRequiredExtension) return extension;
	hasRequiredExtension = 1;

	//
	// Allowed token characters:
	//
	// '!', '#', '$', '%', '&', ''', '*', '+', '-',
	// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'
	//
	// tokenChars[32] === 0 // ' '
	// tokenChars[33] === 1 // '!'
	// tokenChars[34] === 0 // '"'
	// ...
	//
	// prettier-ignore
	var tokenChars = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 0 - 15
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 16 - 31
	0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0,
	// 32 - 47
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
	// 48 - 63
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	// 64 - 79
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1,
	// 80 - 95
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	// 96 - 111
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127
	];

	/**
	 * Adds an offer to the map of extension offers or a parameter to the map of
	 * parameters.
	 *
	 * @param {Object} dest The map of extension offers or parameters
	 * @param {String} name The extension or parameter name
	 * @param {(Object|Boolean|String)} elem The extension parameters or the
	 *     parameter value
	 * @private
	 */
	function push(dest, name, elem) {
	  if (dest[name] === undefined) dest[name] = [elem];else dest[name].push(elem);
	}

	/**
	 * Parses the `Sec-WebSocket-Extensions` header into an object.
	 *
	 * @param {String} header The field value of the header
	 * @return {Object} The parsed object
	 * @public
	 */
	function parse(header) {
	  var offers = Object.create(null);
	  if (header === undefined || header === '') return offers;
	  var params = Object.create(null);
	  var mustUnescape = false;
	  var isEscaping = false;
	  var inQuotes = false;
	  var extensionName;
	  var paramName;
	  var start = -1;
	  var end = -1;
	  var i = 0;
	  for (; i < header.length; i++) {
	    var code = header.charCodeAt(i);
	    if (extensionName === undefined) {
	      if (end === -1 && tokenChars[code] === 1) {
	        if (start === -1) start = i;
	      } else if (code === 0x20 /* ' ' */ || code === 0x09 /* '\t' */) {
	        if (end === -1 && start !== -1) end = i;
	      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {
	        if (start === -1) {
	          throw new SyntaxError("Unexpected character at index ".concat(i));
	        }
	        if (end === -1) end = i;
	        var name = header.slice(start, end);
	        if (code === 0x2c) {
	          push(offers, name, params);
	          params = Object.create(null);
	        } else {
	          extensionName = name;
	        }
	        start = end = -1;
	      } else {
	        throw new SyntaxError("Unexpected character at index ".concat(i));
	      }
	    } else if (paramName === undefined) {
	      if (end === -1 && tokenChars[code] === 1) {
	        if (start === -1) start = i;
	      } else if (code === 0x20 || code === 0x09) {
	        if (end === -1 && start !== -1) end = i;
	      } else if (code === 0x3b || code === 0x2c) {
	        if (start === -1) {
	          throw new SyntaxError("Unexpected character at index ".concat(i));
	        }
	        if (end === -1) end = i;
	        push(params, header.slice(start, end), true);
	        if (code === 0x2c) {
	          push(offers, extensionName, params);
	          params = Object.create(null);
	          extensionName = undefined;
	        }
	        start = end = -1;
	      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {
	        paramName = header.slice(start, i);
	        start = end = -1;
	      } else {
	        throw new SyntaxError("Unexpected character at index ".concat(i));
	      }
	    } else {
	      //
	      // The value of a quoted-string after unescaping must conform to the
	      // token ABNF, so only token characters are valid.
	      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1
	      //
	      if (isEscaping) {
	        if (tokenChars[code] !== 1) {
	          throw new SyntaxError("Unexpected character at index ".concat(i));
	        }
	        if (start === -1) start = i;else if (!mustUnescape) mustUnescape = true;
	        isEscaping = false;
	      } else if (inQuotes) {
	        if (tokenChars[code] === 1) {
	          if (start === -1) start = i;
	        } else if (code === 0x22 /* '"' */ && start !== -1) {
	          inQuotes = false;
	          end = i;
	        } else if (code === 0x5c /* '\' */) {
	          isEscaping = true;
	        } else {
	          throw new SyntaxError("Unexpected character at index ".concat(i));
	        }
	      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {
	        inQuotes = true;
	      } else if (end === -1 && tokenChars[code] === 1) {
	        if (start === -1) start = i;
	      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {
	        if (end === -1) end = i;
	      } else if (code === 0x3b || code === 0x2c) {
	        if (start === -1) {
	          throw new SyntaxError("Unexpected character at index ".concat(i));
	        }
	        if (end === -1) end = i;
	        var value = header.slice(start, end);
	        if (mustUnescape) {
	          value = value.replace(/\\/g, '');
	          mustUnescape = false;
	        }
	        push(params, paramName, value);
	        if (code === 0x2c) {
	          push(offers, extensionName, params);
	          params = Object.create(null);
	          extensionName = undefined;
	        }
	        paramName = undefined;
	        start = end = -1;
	      } else {
	        throw new SyntaxError("Unexpected character at index ".concat(i));
	      }
	    }
	  }
	  if (start === -1 || inQuotes) {
	    throw new SyntaxError('Unexpected end of input');
	  }
	  if (end === -1) end = i;
	  var token = header.slice(start, end);
	  if (extensionName === undefined) {
	    push(offers, token, params);
	  } else {
	    if (paramName === undefined) {
	      push(params, token, true);
	    } else if (mustUnescape) {
	      push(params, paramName, token.replace(/\\/g, ''));
	    } else {
	      push(params, paramName, token);
	    }
	    push(offers, extensionName, params);
	  }
	  return offers;
	}

	/**
	 * Builds the `Sec-WebSocket-Extensions` header field value.
	 *
	 * @param {Object} extensions The map of extensions and parameters to format
	 * @return {String} A string representing the given object
	 * @public
	 */
	function format(extensions) {
	  return Object.keys(extensions).map(function (extension) {
	    var configurations = extensions[extension];
	    if (!Array.isArray(configurations)) configurations = [configurations];
	    return configurations.map(function (params) {
	      return [extension].concat(Object.keys(params).map(function (k) {
	        var values = params[k];
	        if (!Array.isArray(values)) values = [values];
	        return values.map(function (v) {
	          return v === true ? k : "".concat(k, "=").concat(v);
	        }).join('; ');
	      })).join('; ');
	    }).join(', ');
	  }).join(', ');
	}
	extension = {
	  format: format,
	  parse: parse
	};
	return extension;
}

var websocket;
var hasRequiredWebsocket;

function requireWebsocket () {
	if (hasRequiredWebsocket) return websocket;
	hasRequiredWebsocket = 1;

	var _defineProperty = requireDefineProperty();
	var _classCallCheck = classCallCheck.exports;
	var _createClass = createClass.exports;
	var _assertThisInitialized = assertThisInitialized.exports;
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf.exports;
	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	var EventEmitter = require$$0__default["default"];
	var https = require$$8__default["default"];
	var http = require$$9__default["default"];
	var net = require$$10__default["default"];
	var tls = require$$11__default["default"];
	var _require = require$$12__default["default"],
	  randomBytes = _require.randomBytes,
	  createHash = _require.createHash;
	var _require2 = require$$13__default["default"],
	  URL = _require2.URL;
	var PerMessageDeflate = requirePermessageDeflate();
	var Receiver = requireReceiver();
	var Sender = requireSender();
	var _require3 = requireConstants$3(),
	  BINARY_TYPES = _require3.BINARY_TYPES,
	  EMPTY_BUFFER = _require3.EMPTY_BUFFER,
	  GUID = _require3.GUID,
	  kStatusCode = _require3.kStatusCode,
	  kWebSocket = _require3.kWebSocket,
	  NOOP = _require3.NOOP;
	var _require4 = requireEventTarget(),
	  addEventListener = _require4.addEventListener,
	  removeEventListener = _require4.removeEventListener;
	var _require5 = requireExtension(),
	  format = _require5.format,
	  parse = _require5.parse;
	var _require6 = requireBufferUtil(),
	  toBuffer = _require6.toBuffer;
	var readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];
	var protocolVersions = [8, 13];
	var closeTimeout = 30 * 1000;

	/**
	 * Class representing a WebSocket.
	 *
	 * @extends EventEmitter
	 */
	var WebSocket = /*#__PURE__*/function (_EventEmitter) {
	  _inherits(WebSocket, _EventEmitter);
	  var _super = _createSuper(WebSocket);
	  /**
	   * Create a new `WebSocket`.
	   *
	   * @param {(String|URL)} address The URL to which to connect
	   * @param {(String|String[])} [protocols] The subprotocols
	   * @param {Object} [options] Connection options
	   */
	  function WebSocket(address, protocols, options) {
	    var _this;
	    _classCallCheck(this, WebSocket);
	    _this = _super.call(this);
	    _this._binaryType = BINARY_TYPES[0];
	    _this._closeCode = 1006;
	    _this._closeFrameReceived = false;
	    _this._closeFrameSent = false;
	    _this._closeMessage = '';
	    _this._closeTimer = null;
	    _this._extensions = {};
	    _this._protocol = '';
	    _this._readyState = WebSocket.CONNECTING;
	    _this._receiver = null;
	    _this._sender = null;
	    _this._socket = null;
	    if (address !== null) {
	      _this._bufferedAmount = 0;
	      _this._isServer = false;
	      _this._redirects = 0;
	      if (Array.isArray(protocols)) {
	        protocols = protocols.join(', ');
	      } else if (typeof protocols === 'object' && protocols !== null) {
	        options = protocols;
	        protocols = undefined;
	      }
	      initAsClient(_assertThisInitialized(_this), address, protocols, options);
	    } else {
	      _this._isServer = true;
	    }
	    return _this;
	  }

	  /**
	   * This deviates from the WHATWG interface since ws doesn't support the
	   * required default "blob" type (instead we define a custom "nodebuffer"
	   * type).
	   *
	   * @type {String}
	   */
	  _createClass(WebSocket, [{
	    key: "binaryType",
	    get: function get() {
	      return this._binaryType;
	    },
	    set: function set(type) {
	      if (!BINARY_TYPES.includes(type)) return;
	      this._binaryType = type;

	      //
	      // Allow to change `binaryType` on the fly.
	      //
	      if (this._receiver) this._receiver._binaryType = type;
	    }

	    /**
	     * @type {Number}
	     */
	  }, {
	    key: "bufferedAmount",
	    get: function get() {
	      if (!this._socket) return this._bufferedAmount;
	      return this._socket._writableState.length + this._sender._bufferedBytes;
	    }

	    /**
	     * @type {String}
	     */
	  }, {
	    key: "extensions",
	    get: function get() {
	      return Object.keys(this._extensions).join();
	    }

	    /**
	     * @type {Function}
	     */
	    /* istanbul ignore next */
	  }, {
	    key: "onclose",
	    get: function get() {
	      return undefined;
	    }

	    /* istanbul ignore next */,
	    set: function set(listener) {}

	    /**
	     * @type {Function}
	     */
	    /* istanbul ignore next */
	  }, {
	    key: "onerror",
	    get: function get() {
	      return undefined;
	    }

	    /* istanbul ignore next */,
	    set: function set(listener) {}

	    /**
	     * @type {Function}
	     */
	    /* istanbul ignore next */
	  }, {
	    key: "onopen",
	    get: function get() {
	      return undefined;
	    }

	    /* istanbul ignore next */,
	    set: function set(listener) {}

	    /**
	     * @type {Function}
	     */
	    /* istanbul ignore next */
	  }, {
	    key: "onmessage",
	    get: function get() {
	      return undefined;
	    }

	    /* istanbul ignore next */,
	    set: function set(listener) {}

	    /**
	     * @type {String}
	     */
	  }, {
	    key: "protocol",
	    get: function get() {
	      return this._protocol;
	    }

	    /**
	     * @type {Number}
	     */
	  }, {
	    key: "readyState",
	    get: function get() {
	      return this._readyState;
	    }

	    /**
	     * @type {String}
	     */
	  }, {
	    key: "url",
	    get: function get() {
	      return this._url;
	    }

	    /**
	     * Set up the socket and the internal resources.
	     *
	     * @param {(net.Socket|tls.Socket)} socket The network socket between the
	     *     server and client
	     * @param {Buffer} head The first packet of the upgraded stream
	     * @param {Number} [maxPayload=0] The maximum allowed message size
	     * @private
	     */
	  }, {
	    key: "setSocket",
	    value: function setSocket(socket, head, maxPayload) {
	      var receiver = new Receiver(this.binaryType, this._extensions, this._isServer, maxPayload);
	      this._sender = new Sender(socket, this._extensions);
	      this._receiver = receiver;
	      this._socket = socket;
	      receiver[kWebSocket] = this;
	      socket[kWebSocket] = this;
	      receiver.on('conclude', receiverOnConclude);
	      receiver.on('drain', receiverOnDrain);
	      receiver.on('error', receiverOnError);
	      receiver.on('message', receiverOnMessage);
	      receiver.on('ping', receiverOnPing);
	      receiver.on('pong', receiverOnPong);
	      socket.setTimeout(0);
	      socket.setNoDelay();
	      if (head.length > 0) socket.unshift(head);
	      socket.on('close', socketOnClose);
	      socket.on('data', socketOnData);
	      socket.on('end', socketOnEnd);
	      socket.on('error', socketOnError);
	      this._readyState = WebSocket.OPEN;
	      this.emit('open');
	    }

	    /**
	     * Emit the `'close'` event.
	     *
	     * @private
	     */
	  }, {
	    key: "emitClose",
	    value: function emitClose() {
	      if (!this._socket) {
	        this._readyState = WebSocket.CLOSED;
	        this.emit('close', this._closeCode, this._closeMessage);
	        return;
	      }
	      if (this._extensions[PerMessageDeflate.extensionName]) {
	        this._extensions[PerMessageDeflate.extensionName].cleanup();
	      }
	      this._receiver.removeAllListeners();
	      this._readyState = WebSocket.CLOSED;
	      this.emit('close', this._closeCode, this._closeMessage);
	    }

	    /**
	     * Start a closing handshake.
	     *
	     *          +----------+   +-----------+   +----------+
	     *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -
	     *    |     +----------+   +-----------+   +----------+     |
	     *          +----------+   +-----------+         |
	     * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING
	     *          +----------+   +-----------+   |
	     *    |           |                        |   +---+        |
	     *                +------------------------+-->|fin| - - - -
	     *    |         +---+                      |   +---+
	     *     - - - - -|fin|<---------------------+
	     *              +---+
	     *
	     * @param {Number} [code] Status code explaining why the connection is closing
	     * @param {String} [data] A string explaining why the connection is closing
	     * @public
	     */
	  }, {
	    key: "close",
	    value: function close(code, data) {
	      var _this2 = this;
	      if (this.readyState === WebSocket.CLOSED) return;
	      if (this.readyState === WebSocket.CONNECTING) {
	        var msg = 'WebSocket was closed before the connection was established';
	        return abortHandshake(this, this._req, msg);
	      }
	      if (this.readyState === WebSocket.CLOSING) {
	        if (this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted)) {
	          this._socket.end();
	        }
	        return;
	      }
	      this._readyState = WebSocket.CLOSING;
	      this._sender.close(code, data, !this._isServer, function (err) {
	        //
	        // This error is handled by the `'error'` listener on the socket. We only
	        // want to know if the close frame has been sent here.
	        //
	        if (err) return;
	        _this2._closeFrameSent = true;
	        if (_this2._closeFrameReceived || _this2._receiver._writableState.errorEmitted) {
	          _this2._socket.end();
	        }
	      });

	      //
	      // Specify a timeout for the closing handshake to complete.
	      //
	      this._closeTimer = setTimeout(this._socket.destroy.bind(this._socket), closeTimeout);
	    }

	    /**
	     * Send a ping.
	     *
	     * @param {*} [data] The data to send
	     * @param {Boolean} [mask] Indicates whether or not to mask `data`
	     * @param {Function} [cb] Callback which is executed when the ping is sent
	     * @public
	     */
	  }, {
	    key: "ping",
	    value: function ping(data, mask, cb) {
	      if (this.readyState === WebSocket.CONNECTING) {
	        throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
	      }
	      if (typeof data === 'function') {
	        cb = data;
	        data = mask = undefined;
	      } else if (typeof mask === 'function') {
	        cb = mask;
	        mask = undefined;
	      }
	      if (typeof data === 'number') data = data.toString();
	      if (this.readyState !== WebSocket.OPEN) {
	        sendAfterClose(this, data, cb);
	        return;
	      }
	      if (mask === undefined) mask = !this._isServer;
	      this._sender.ping(data || EMPTY_BUFFER, mask, cb);
	    }

	    /**
	     * Send a pong.
	     *
	     * @param {*} [data] The data to send
	     * @param {Boolean} [mask] Indicates whether or not to mask `data`
	     * @param {Function} [cb] Callback which is executed when the pong is sent
	     * @public
	     */
	  }, {
	    key: "pong",
	    value: function pong(data, mask, cb) {
	      if (this.readyState === WebSocket.CONNECTING) {
	        throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
	      }
	      if (typeof data === 'function') {
	        cb = data;
	        data = mask = undefined;
	      } else if (typeof mask === 'function') {
	        cb = mask;
	        mask = undefined;
	      }
	      if (typeof data === 'number') data = data.toString();
	      if (this.readyState !== WebSocket.OPEN) {
	        sendAfterClose(this, data, cb);
	        return;
	      }
	      if (mask === undefined) mask = !this._isServer;
	      this._sender.pong(data || EMPTY_BUFFER, mask, cb);
	    }

	    /**
	     * Send a data message.
	     *
	     * @param {*} data The message to send
	     * @param {Object} [options] Options object
	     * @param {Boolean} [options.compress] Specifies whether or not to compress
	     *     `data`
	     * @param {Boolean} [options.binary] Specifies whether `data` is binary or
	     *     text
	     * @param {Boolean} [options.fin=true] Specifies whether the fragment is the
	     *     last one
	     * @param {Boolean} [options.mask] Specifies whether or not to mask `data`
	     * @param {Function} [cb] Callback which is executed when data is written out
	     * @public
	     */
	  }, {
	    key: "send",
	    value: function send(data, options, cb) {
	      if (this.readyState === WebSocket.CONNECTING) {
	        throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
	      }
	      if (typeof options === 'function') {
	        cb = options;
	        options = {};
	      }
	      if (typeof data === 'number') data = data.toString();
	      if (this.readyState !== WebSocket.OPEN) {
	        sendAfterClose(this, data, cb);
	        return;
	      }
	      var opts = _objectSpread({
	        binary: typeof data !== 'string',
	        mask: !this._isServer,
	        compress: true,
	        fin: true
	      }, options);
	      if (!this._extensions[PerMessageDeflate.extensionName]) {
	        opts.compress = false;
	      }
	      this._sender.send(data || EMPTY_BUFFER, opts, cb);
	    }

	    /**
	     * Forcibly close the connection.
	     *
	     * @public
	     */
	  }, {
	    key: "terminate",
	    value: function terminate() {
	      if (this.readyState === WebSocket.CLOSED) return;
	      if (this.readyState === WebSocket.CONNECTING) {
	        var msg = 'WebSocket was closed before the connection was established';
	        return abortHandshake(this, this._req, msg);
	      }
	      if (this._socket) {
	        this._readyState = WebSocket.CLOSING;
	        this._socket.destroy();
	      }
	    }
	  }]);
	  return WebSocket;
	}(EventEmitter);
	/**
	 * @constant {Number} CONNECTING
	 * @memberof WebSocket
	 */
	Object.defineProperty(WebSocket, 'CONNECTING', {
	  enumerable: true,
	  value: readyStates.indexOf('CONNECTING')
	});

	/**
	 * @constant {Number} CONNECTING
	 * @memberof WebSocket.prototype
	 */
	Object.defineProperty(WebSocket.prototype, 'CONNECTING', {
	  enumerable: true,
	  value: readyStates.indexOf('CONNECTING')
	});

	/**
	 * @constant {Number} OPEN
	 * @memberof WebSocket
	 */
	Object.defineProperty(WebSocket, 'OPEN', {
	  enumerable: true,
	  value: readyStates.indexOf('OPEN')
	});

	/**
	 * @constant {Number} OPEN
	 * @memberof WebSocket.prototype
	 */
	Object.defineProperty(WebSocket.prototype, 'OPEN', {
	  enumerable: true,
	  value: readyStates.indexOf('OPEN')
	});

	/**
	 * @constant {Number} CLOSING
	 * @memberof WebSocket
	 */
	Object.defineProperty(WebSocket, 'CLOSING', {
	  enumerable: true,
	  value: readyStates.indexOf('CLOSING')
	});

	/**
	 * @constant {Number} CLOSING
	 * @memberof WebSocket.prototype
	 */
	Object.defineProperty(WebSocket.prototype, 'CLOSING', {
	  enumerable: true,
	  value: readyStates.indexOf('CLOSING')
	});

	/**
	 * @constant {Number} CLOSED
	 * @memberof WebSocket
	 */
	Object.defineProperty(WebSocket, 'CLOSED', {
	  enumerable: true,
	  value: readyStates.indexOf('CLOSED')
	});

	/**
	 * @constant {Number} CLOSED
	 * @memberof WebSocket.prototype
	 */
	Object.defineProperty(WebSocket.prototype, 'CLOSED', {
	  enumerable: true,
	  value: readyStates.indexOf('CLOSED')
	});
	['binaryType', 'bufferedAmount', 'extensions', 'protocol', 'readyState', 'url'].forEach(function (property) {
	  Object.defineProperty(WebSocket.prototype, property, {
	    enumerable: true
	  });
	});

	//
	// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.
	// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface
	//
	['open', 'error', 'close', 'message'].forEach(function (method) {
	  Object.defineProperty(WebSocket.prototype, "on".concat(method), {
	    enumerable: true,
	    get: function get() {
	      var listeners = this.listeners(method);
	      for (var i = 0; i < listeners.length; i++) {
	        if (listeners[i]._listener) return listeners[i]._listener;
	      }
	      return undefined;
	    },
	    set: function set(listener) {
	      var listeners = this.listeners(method);
	      for (var i = 0; i < listeners.length; i++) {
	        //
	        // Remove only the listeners added via `addEventListener`.
	        //
	        if (listeners[i]._listener) this.removeListener(method, listeners[i]);
	      }
	      this.addEventListener(method, listener);
	    }
	  });
	});
	WebSocket.prototype.addEventListener = addEventListener;
	WebSocket.prototype.removeEventListener = removeEventListener;
	websocket = WebSocket;

	/**
	 * Initialize a WebSocket client.
	 *
	 * @param {WebSocket} websocket The client to initialize
	 * @param {(String|URL)} address The URL to which to connect
	 * @param {String} [protocols] The subprotocols
	 * @param {Object} [options] Connection options
	 * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable
	 *     permessage-deflate
	 * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the
	 *     handshake request
	 * @param {Number} [options.protocolVersion=13] Value of the
	 *     `Sec-WebSocket-Version` header
	 * @param {String} [options.origin] Value of the `Origin` or
	 *     `Sec-WebSocket-Origin` header
	 * @param {Number} [options.maxPayload=104857600] The maximum allowed message
	 *     size
	 * @param {Boolean} [options.followRedirects=false] Whether or not to follow
	 *     redirects
	 * @param {Number} [options.maxRedirects=10] The maximum number of redirects
	 *     allowed
	 * @private
	 */
	function initAsClient(websocket, address, protocols, options) {
	  var opts = _objectSpread(_objectSpread({
	    protocolVersion: protocolVersions[1],
	    maxPayload: 100 * 1024 * 1024,
	    perMessageDeflate: true,
	    followRedirects: false,
	    maxRedirects: 10
	  }, options), {}, {
	    createConnection: undefined,
	    socketPath: undefined,
	    hostname: undefined,
	    protocol: undefined,
	    timeout: undefined,
	    method: undefined,
	    host: undefined,
	    path: undefined,
	    port: undefined
	  });
	  if (!protocolVersions.includes(opts.protocolVersion)) {
	    throw new RangeError("Unsupported protocol version: ".concat(opts.protocolVersion, " ") + "(supported versions: ".concat(protocolVersions.join(', '), ")"));
	  }
	  var parsedUrl;
	  if (address instanceof URL) {
	    parsedUrl = address;
	    websocket._url = address.href;
	  } else {
	    parsedUrl = new URL(address);
	    websocket._url = address;
	  }
	  var isUnixSocket = parsedUrl.protocol === 'ws+unix:';
	  if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {
	    throw new Error("Invalid URL: ".concat(websocket.url));
	  }
	  var isSecure = parsedUrl.protocol === 'wss:' || parsedUrl.protocol === 'https:';
	  var defaultPort = isSecure ? 443 : 80;
	  var key = randomBytes(16).toString('base64');
	  var get = isSecure ? https.get : http.get;
	  var perMessageDeflate;
	  opts.createConnection = isSecure ? tlsConnect : netConnect;
	  opts.defaultPort = opts.defaultPort || defaultPort;
	  opts.port = parsedUrl.port || defaultPort;
	  opts.host = parsedUrl.hostname.startsWith('[') ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;
	  opts.headers = _objectSpread({
	    'Sec-WebSocket-Version': opts.protocolVersion,
	    'Sec-WebSocket-Key': key,
	    Connection: 'Upgrade',
	    Upgrade: 'websocket'
	  }, opts.headers);
	  opts.path = parsedUrl.pathname + parsedUrl.search;
	  opts.timeout = opts.handshakeTimeout;
	  if (opts.perMessageDeflate) {
	    perMessageDeflate = new PerMessageDeflate(opts.perMessageDeflate !== true ? opts.perMessageDeflate : {}, false, opts.maxPayload);
	    opts.headers['Sec-WebSocket-Extensions'] = format(_defineProperty({}, PerMessageDeflate.extensionName, perMessageDeflate.offer()));
	  }
	  if (protocols) {
	    opts.headers['Sec-WebSocket-Protocol'] = protocols;
	  }
	  if (opts.origin) {
	    if (opts.protocolVersion < 13) {
	      opts.headers['Sec-WebSocket-Origin'] = opts.origin;
	    } else {
	      opts.headers.Origin = opts.origin;
	    }
	  }
	  if (parsedUrl.username || parsedUrl.password) {
	    opts.auth = "".concat(parsedUrl.username, ":").concat(parsedUrl.password);
	  }
	  if (isUnixSocket) {
	    var parts = opts.path.split(':');
	    opts.socketPath = parts[0];
	    opts.path = parts[1];
	  }
	  var req = websocket._req = get(opts);
	  if (opts.timeout) {
	    req.on('timeout', function () {
	      abortHandshake(websocket, req, 'Opening handshake has timed out');
	    });
	  }
	  req.on('error', function (err) {
	    if (req === null || req.aborted) return;
	    req = websocket._req = null;
	    websocket._readyState = WebSocket.CLOSING;
	    websocket.emit('error', err);
	    websocket.emitClose();
	  });
	  req.on('response', function (res) {
	    var location = res.headers.location;
	    var statusCode = res.statusCode;
	    if (location && opts.followRedirects && statusCode >= 300 && statusCode < 400) {
	      if (++websocket._redirects > opts.maxRedirects) {
	        abortHandshake(websocket, req, 'Maximum redirects exceeded');
	        return;
	      }
	      req.abort();
	      var addr = new URL(location, address);
	      initAsClient(websocket, addr, protocols, options);
	    } else if (!websocket.emit('unexpected-response', req, res)) {
	      abortHandshake(websocket, req, "Unexpected server response: ".concat(res.statusCode));
	    }
	  });
	  req.on('upgrade', function (res, socket, head) {
	    websocket.emit('upgrade', res);

	    //
	    // The user may have closed the connection from a listener of the `upgrade`
	    // event.
	    //
	    if (websocket.readyState !== WebSocket.CONNECTING) return;
	    req = websocket._req = null;
	    var digest = createHash('sha1').update(key + GUID).digest('base64');
	    if (res.headers['sec-websocket-accept'] !== digest) {
	      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');
	      return;
	    }
	    var serverProt = res.headers['sec-websocket-protocol'];
	    var protList = (protocols || '').split(/, */);
	    var protError;
	    if (!protocols && serverProt) {
	      protError = 'Server sent a subprotocol but none was requested';
	    } else if (protocols && !serverProt) {
	      protError = 'Server sent no subprotocol';
	    } else if (serverProt && !protList.includes(serverProt)) {
	      protError = 'Server sent an invalid subprotocol';
	    }
	    if (protError) {
	      abortHandshake(websocket, socket, protError);
	      return;
	    }
	    if (serverProt) websocket._protocol = serverProt;
	    var secWebSocketExtensions = res.headers['sec-websocket-extensions'];
	    if (secWebSocketExtensions !== undefined) {
	      if (!perMessageDeflate) {
	        var message = 'Server sent a Sec-WebSocket-Extensions header but no extension ' + 'was requested';
	        abortHandshake(websocket, socket, message);
	        return;
	      }
	      var extensions;
	      try {
	        extensions = parse(secWebSocketExtensions);
	      } catch (err) {
	        var _message = 'Invalid Sec-WebSocket-Extensions header';
	        abortHandshake(websocket, socket, _message);
	        return;
	      }
	      var extensionNames = Object.keys(extensions);
	      if (extensionNames.length) {
	        if (extensionNames.length !== 1 || extensionNames[0] !== PerMessageDeflate.extensionName) {
	          var _message2 = 'Server indicated an extension that was not requested';
	          abortHandshake(websocket, socket, _message2);
	          return;
	        }
	        try {
	          perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);
	        } catch (err) {
	          var _message3 = 'Invalid Sec-WebSocket-Extensions header';
	          abortHandshake(websocket, socket, _message3);
	          return;
	        }
	        websocket._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
	      }
	    }
	    websocket.setSocket(socket, head, opts.maxPayload);
	  });
	}

	/**
	 * Create a `net.Socket` and initiate a connection.
	 *
	 * @param {Object} options Connection options
	 * @return {net.Socket} The newly created socket used to start the connection
	 * @private
	 */
	function netConnect(options) {
	  options.path = options.socketPath;
	  return net.connect(options);
	}

	/**
	 * Create a `tls.TLSSocket` and initiate a connection.
	 *
	 * @param {Object} options Connection options
	 * @return {tls.TLSSocket} The newly created socket used to start the connection
	 * @private
	 */
	function tlsConnect(options) {
	  options.path = undefined;
	  if (!options.servername && options.servername !== '') {
	    options.servername = net.isIP(options.host) ? '' : options.host;
	  }
	  return tls.connect(options);
	}

	/**
	 * Abort the handshake and emit an error.
	 *
	 * @param {WebSocket} websocket The WebSocket instance
	 * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to
	 *     abort or the socket to destroy
	 * @param {String} message The error message
	 * @private
	 */
	function abortHandshake(websocket, stream, message) {
	  websocket._readyState = WebSocket.CLOSING;
	  var err = new Error(message);
	  Error.captureStackTrace(err, abortHandshake);
	  if (stream.setHeader) {
	    stream.abort();
	    if (stream.socket && !stream.socket.destroyed) {
	      //
	      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if
	      // called after the request completed. See
	      // https://github.com/websockets/ws/issues/1869.
	      //
	      stream.socket.destroy();
	    }
	    stream.once('abort', websocket.emitClose.bind(websocket));
	    websocket.emit('error', err);
	  } else {
	    stream.destroy(err);
	    stream.once('error', websocket.emit.bind(websocket, 'error'));
	    stream.once('close', websocket.emitClose.bind(websocket));
	  }
	}

	/**
	 * Handle cases where the `ping()`, `pong()`, or `send()` methods are called
	 * when the `readyState` attribute is `CLOSING` or `CLOSED`.
	 *
	 * @param {WebSocket} websocket The WebSocket instance
	 * @param {*} [data] The data to send
	 * @param {Function} [cb] Callback
	 * @private
	 */
	function sendAfterClose(websocket, data, cb) {
	  if (data) {
	    var length = toBuffer(data).length;

	    //
	    // The `_bufferedAmount` property is used only when the peer is a client and
	    // the opening handshake fails. Under these circumstances, in fact, the
	    // `setSocket()` method is not called, so the `_socket` and `_sender`
	    // properties are set to `null`.
	    //
	    if (websocket._socket) websocket._sender._bufferedBytes += length;else websocket._bufferedAmount += length;
	  }
	  if (cb) {
	    var err = new Error("WebSocket is not open: readyState ".concat(websocket.readyState, " ") + "(".concat(readyStates[websocket.readyState], ")"));
	    cb(err);
	  }
	}

	/**
	 * The listener of the `Receiver` `'conclude'` event.
	 *
	 * @param {Number} code The status code
	 * @param {String} reason The reason for closing
	 * @private
	 */
	function receiverOnConclude(code, reason) {
	  var websocket = this[kWebSocket];
	  websocket._socket.removeListener('data', socketOnData);
	  websocket._socket.resume();
	  websocket._closeFrameReceived = true;
	  websocket._closeMessage = reason;
	  websocket._closeCode = code;
	  if (code === 1005) websocket.close();else websocket.close(code, reason);
	}

	/**
	 * The listener of the `Receiver` `'drain'` event.
	 *
	 * @private
	 */
	function receiverOnDrain() {
	  this[kWebSocket]._socket.resume();
	}

	/**
	 * The listener of the `Receiver` `'error'` event.
	 *
	 * @param {(RangeError|Error)} err The emitted error
	 * @private
	 */
	function receiverOnError(err) {
	  var websocket = this[kWebSocket];
	  websocket._socket.removeListener('data', socketOnData);
	  websocket._socket.resume();
	  websocket.close(err[kStatusCode]);
	  websocket.emit('error', err);
	}

	/**
	 * The listener of the `Receiver` `'finish'` event.
	 *
	 * @private
	 */
	function receiverOnFinish() {
	  this[kWebSocket].emitClose();
	}

	/**
	 * The listener of the `Receiver` `'message'` event.
	 *
	 * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The message
	 * @private
	 */
	function receiverOnMessage(data) {
	  this[kWebSocket].emit('message', data);
	}

	/**
	 * The listener of the `Receiver` `'ping'` event.
	 *
	 * @param {Buffer} data The data included in the ping frame
	 * @private
	 */
	function receiverOnPing(data) {
	  var websocket = this[kWebSocket];
	  websocket.pong(data, !websocket._isServer, NOOP);
	  websocket.emit('ping', data);
	}

	/**
	 * The listener of the `Receiver` `'pong'` event.
	 *
	 * @param {Buffer} data The data included in the pong frame
	 * @private
	 */
	function receiverOnPong(data) {
	  this[kWebSocket].emit('pong', data);
	}

	/**
	 * The listener of the `net.Socket` `'close'` event.
	 *
	 * @private
	 */
	function socketOnClose() {
	  var websocket = this[kWebSocket];
	  this.removeListener('close', socketOnClose);
	  this.removeListener('end', socketOnEnd);
	  websocket._readyState = WebSocket.CLOSING;

	  //
	  // The close frame might not have been received or the `'end'` event emitted,
	  // for example, if the socket was destroyed due to an error. Ensure that the
	  // `receiver` stream is closed after writing any remaining buffered data to
	  // it. If the readable side of the socket is in flowing mode then there is no
	  // buffered data as everything has been already written and `readable.read()`
	  // will return `null`. If instead, the socket is paused, any possible buffered
	  // data will be read as a single chunk and emitted synchronously in a single
	  // `'data'` event.
	  //
	  websocket._socket.read();
	  websocket._receiver.end();
	  this.removeListener('data', socketOnData);
	  this[kWebSocket] = undefined;
	  clearTimeout(websocket._closeTimer);
	  if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {
	    websocket.emitClose();
	  } else {
	    websocket._receiver.on('error', receiverOnFinish);
	    websocket._receiver.on('finish', receiverOnFinish);
	  }
	}

	/**
	 * The listener of the `net.Socket` `'data'` event.
	 *
	 * @param {Buffer} chunk A chunk of data
	 * @private
	 */
	function socketOnData(chunk) {
	  if (!this[kWebSocket]._receiver.write(chunk)) {
	    this.pause();
	  }
	}

	/**
	 * The listener of the `net.Socket` `'end'` event.
	 *
	 * @private
	 */
	function socketOnEnd() {
	  var websocket = this[kWebSocket];
	  websocket._readyState = WebSocket.CLOSING;
	  websocket._receiver.end();
	  this.end();
	}

	/**
	 * The listener of the `net.Socket` `'error'` event.
	 *
	 * @private
	 */
	function socketOnError() {
	  var websocket = this[kWebSocket];
	  this.removeListener('error', socketOnError);
	  this.on('error', NOOP);
	  if (websocket) {
	    websocket._readyState = WebSocket.CLOSING;
	    this.destroy();
	  }
	}
	return websocket;
}

var stream$1;
var hasRequiredStream$1;

function requireStream$1 () {
	if (hasRequiredStream$1) return stream$1;
	hasRequiredStream$1 = 1;

	var _defineProperty = requireDefineProperty();
	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
	var _require = require$$1__default$1["default"],
	  Duplex = _require.Duplex;

	/**
	 * Emits the `'close'` event on a stream.
	 *
	 * @param {Duplex} stream The stream.
	 * @private
	 */
	function emitClose(stream) {
	  stream.emit('close');
	}

	/**
	 * The listener of the `'end'` event.
	 *
	 * @private
	 */
	function duplexOnEnd() {
	  if (!this.destroyed && this._writableState.finished) {
	    this.destroy();
	  }
	}

	/**
	 * The listener of the `'error'` event.
	 *
	 * @param {Error} err The error
	 * @private
	 */
	function duplexOnError(err) {
	  this.removeListener('error', duplexOnError);
	  this.destroy();
	  if (this.listenerCount('error') === 0) {
	    // Do not suppress the throwing behavior.
	    this.emit('error', err);
	  }
	}

	/**
	 * Wraps a `WebSocket` in a duplex stream.
	 *
	 * @param {WebSocket} ws The `WebSocket` to wrap
	 * @param {Object} [options] The options for the `Duplex` constructor
	 * @return {Duplex} The duplex stream
	 * @public
	 */
	function createWebSocketStream(ws, options) {
	  var resumeOnReceiverDrain = true;
	  var terminateOnDestroy = true;
	  function receiverOnDrain() {
	    if (resumeOnReceiverDrain) ws._socket.resume();
	  }
	  if (ws.readyState === ws.CONNECTING) {
	    ws.once('open', function open() {
	      ws._receiver.removeAllListeners('drain');
	      ws._receiver.on('drain', receiverOnDrain);
	    });
	  } else {
	    ws._receiver.removeAllListeners('drain');
	    ws._receiver.on('drain', receiverOnDrain);
	  }
	  var duplex = new Duplex(_objectSpread(_objectSpread({}, options), {}, {
	    autoDestroy: false,
	    emitClose: false,
	    objectMode: false,
	    writableObjectMode: false
	  }));
	  ws.on('message', function message(msg) {
	    if (!duplex.push(msg)) {
	      resumeOnReceiverDrain = false;
	      ws._socket.pause();
	    }
	  });
	  ws.once('error', function error(err) {
	    if (duplex.destroyed) return;

	    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.
	    //
	    // - If the `'error'` event is emitted before the `'open'` event, then
	    //   `ws.terminate()` is a noop as no socket is assigned.
	    // - Otherwise, the error is re-emitted by the listener of the `'error'`
	    //   event of the `Receiver` object. The listener already closes the
	    //   connection by calling `ws.close()`. This allows a close frame to be
	    //   sent to the other peer. If `ws.terminate()` is called right after this,
	    //   then the close frame might not be sent.
	    terminateOnDestroy = false;
	    duplex.destroy(err);
	  });
	  ws.once('close', function close() {
	    if (duplex.destroyed) return;
	    duplex.push(null);
	  });
	  duplex._destroy = function (err, callback) {
	    if (ws.readyState === ws.CLOSED) {
	      callback(err);
	      process.nextTick(emitClose, duplex);
	      return;
	    }
	    var called = false;
	    ws.once('error', function error(err) {
	      called = true;
	      callback(err);
	    });
	    ws.once('close', function close() {
	      if (!called) callback(err);
	      process.nextTick(emitClose, duplex);
	    });
	    if (terminateOnDestroy) ws.terminate();
	  };
	  duplex._final = function (callback) {
	    if (ws.readyState === ws.CONNECTING) {
	      ws.once('open', function open() {
	        duplex._final(callback);
	      });
	      return;
	    }

	    // If the value of the `_socket` property is `null` it means that `ws` is a
	    // client websocket and the handshake failed. In fact, when this happens, a
	    // socket is never assigned to the websocket. Wait for the `'error'` event
	    // that will be emitted by the websocket.
	    if (ws._socket === null) return;
	    if (ws._socket._writableState.finished) {
	      callback();
	      if (duplex._readableState.endEmitted) duplex.destroy();
	    } else {
	      ws._socket.once('finish', function finish() {
	        // `duplex` is not destroyed here because the `'end'` event will be
	        // emitted on `duplex` after this `'finish'` event. The EOF signaling
	        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.
	        callback();
	      });
	      ws.close();
	    }
	  };
	  duplex._read = function () {
	    if (ws.readyState === ws.OPEN && !resumeOnReceiverDrain) {
	      resumeOnReceiverDrain = true;
	      if (!ws._receiver._writableState.needDrain) ws._socket.resume();
	    }
	  };
	  duplex._write = function (chunk, encoding, callback) {
	    if (ws.readyState === ws.CONNECTING) {
	      ws.once('open', function open() {
	        duplex._write(chunk, encoding, callback);
	      });
	      return;
	    }
	    ws.send(chunk, callback);
	  };
	  duplex.on('end', duplexOnEnd);
	  duplex.on('error', duplexOnError);
	  return duplex;
	}
	stream$1 = createWebSocketStream;
	return stream$1;
}

/* eslint no-unused-vars: ["error", { "varsIgnorePattern": "^net|tls|https$" }] */

var websocketServer;
var hasRequiredWebsocketServer;

function requireWebsocketServer () {
	if (hasRequiredWebsocketServer) return websocketServer;
	hasRequiredWebsocketServer = 1;

	var _defineProperty = requireDefineProperty();
	var _classCallCheck = classCallCheck.exports;
	var _createClass = createClass.exports;
	var _assertThisInitialized = assertThisInitialized.exports;
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf.exports;
	function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
	function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
	function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	var EventEmitter = require$$0__default["default"];
	var http = require$$9__default["default"];
	var _require = require$$12__default["default"],
	  createHash = _require.createHash;
	var PerMessageDeflate = requirePermessageDeflate();
	var WebSocket = requireWebsocket();
	var _require2 = requireExtension(),
	  format = _require2.format,
	  parse = _require2.parse;
	var _require3 = requireConstants$3(),
	  GUID = _require3.GUID,
	  kWebSocket = _require3.kWebSocket;
	var keyRegex = /^[+/0-9A-Za-z]{22}==$/;
	var RUNNING = 0;
	var CLOSING = 1;
	var CLOSED = 2;

	/**
	 * Class representing a WebSocket server.
	 *
	 * @extends EventEmitter
	 */
	var WebSocketServer = /*#__PURE__*/function (_EventEmitter) {
	  _inherits(WebSocketServer, _EventEmitter);
	  var _super = _createSuper(WebSocketServer);
	  /**
	   * Create a `WebSocketServer` instance.
	   *
	   * @param {Object} options Configuration options
	   * @param {Number} [options.backlog=511] The maximum length of the queue of
	   *     pending connections
	   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to
	   *     track clients
	   * @param {Function} [options.handleProtocols] A hook to handle protocols
	   * @param {String} [options.host] The hostname where to bind the server
	   * @param {Number} [options.maxPayload=104857600] The maximum allowed message
	   *     size
	   * @param {Boolean} [options.noServer=false] Enable no server mode
	   * @param {String} [options.path] Accept only connections matching this path
	   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable
	   *     permessage-deflate
	   * @param {Number} [options.port] The port where to bind the server
	   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S
	   *     server to use
	   * @param {Function} [options.verifyClient] A hook to reject connections
	   * @param {Function} [callback] A listener for the `listening` event
	   */
	  function WebSocketServer(options, callback) {
	    var _this;
	    _classCallCheck(this, WebSocketServer);
	    _this = _super.call(this);
	    options = _objectSpread({
	      maxPayload: 100 * 1024 * 1024,
	      perMessageDeflate: false,
	      handleProtocols: null,
	      clientTracking: true,
	      verifyClient: null,
	      noServer: false,
	      backlog: null,
	      // use default (511 as implemented in net.js)
	      server: null,
	      host: null,
	      path: null,
	      port: null
	    }, options);
	    if (options.port == null && !options.server && !options.noServer || options.port != null && (options.server || options.noServer) || options.server && options.noServer) {
	      throw new TypeError('One and only one of the "port", "server", or "noServer" options ' + 'must be specified');
	    }
	    if (options.port != null) {
	      _this._server = http.createServer(function (req, res) {
	        var body = http.STATUS_CODES[426];
	        res.writeHead(426, {
	          'Content-Length': body.length,
	          'Content-Type': 'text/plain'
	        });
	        res.end(body);
	      });
	      _this._server.listen(options.port, options.host, options.backlog, callback);
	    } else if (options.server) {
	      _this._server = options.server;
	    }
	    if (_this._server) {
	      var emitConnection = _this.emit.bind(_assertThisInitialized(_this), 'connection');
	      _this._removeListeners = addListeners(_this._server, {
	        listening: _this.emit.bind(_assertThisInitialized(_this), 'listening'),
	        error: _this.emit.bind(_assertThisInitialized(_this), 'error'),
	        upgrade: function upgrade(req, socket, head) {
	          _this.handleUpgrade(req, socket, head, emitConnection);
	        }
	      });
	    }
	    if (options.perMessageDeflate === true) options.perMessageDeflate = {};
	    if (options.clientTracking) _this.clients = new Set();
	    _this.options = options;
	    _this._state = RUNNING;
	    return _this;
	  }

	  /**
	   * Returns the bound address, the address family name, and port of the server
	   * as reported by the operating system if listening on an IP socket.
	   * If the server is listening on a pipe or UNIX domain socket, the name is
	   * returned as a string.
	   *
	   * @return {(Object|String|null)} The address of the server
	   * @public
	   */
	  _createClass(WebSocketServer, [{
	    key: "address",
	    value: function address() {
	      if (this.options.noServer) {
	        throw new Error('The server is operating in "noServer" mode');
	      }
	      if (!this._server) return null;
	      return this._server.address();
	    }

	    /**
	     * Close the server.
	     *
	     * @param {Function} [cb] Callback
	     * @public
	     */
	  }, {
	    key: "close",
	    value: function close(cb) {
	      if (cb) this.once('close', cb);
	      if (this._state === CLOSED) {
	        process.nextTick(emitClose, this);
	        return;
	      }
	      if (this._state === CLOSING) return;
	      this._state = CLOSING;

	      //
	      // Terminate all associated clients.
	      //
	      if (this.clients) {
	        var _iterator = _createForOfIteratorHelper(this.clients),
	          _step;
	        try {
	          for (_iterator.s(); !(_step = _iterator.n()).done;) {
	            var client = _step.value;
	            client.terminate();
	          }
	        } catch (err) {
	          _iterator.e(err);
	        } finally {
	          _iterator.f();
	        }
	      }
	      var server = this._server;
	      if (server) {
	        this._removeListeners();
	        this._removeListeners = this._server = null;

	        //
	        // Close the http server if it was internally created.
	        //
	        if (this.options.port != null) {
	          server.close(emitClose.bind(undefined, this));
	          return;
	        }
	      }
	      process.nextTick(emitClose, this);
	    }

	    /**
	     * See if a given request should be handled by this server instance.
	     *
	     * @param {http.IncomingMessage} req Request object to inspect
	     * @return {Boolean} `true` if the request is valid, else `false`
	     * @public
	     */
	  }, {
	    key: "shouldHandle",
	    value: function shouldHandle(req) {
	      if (this.options.path) {
	        var index = req.url.indexOf('?');
	        var pathname = index !== -1 ? req.url.slice(0, index) : req.url;
	        if (pathname !== this.options.path) return false;
	      }
	      return true;
	    }

	    /**
	     * Handle a HTTP Upgrade request.
	     *
	     * @param {http.IncomingMessage} req The request object
	     * @param {(net.Socket|tls.Socket)} socket The network socket between the
	     *     server and client
	     * @param {Buffer} head The first packet of the upgraded stream
	     * @param {Function} cb Callback
	     * @public
	     */
	  }, {
	    key: "handleUpgrade",
	    value: function handleUpgrade(req, socket, head, cb) {
	      var _this2 = this;
	      socket.on('error', socketOnError);
	      var key = req.headers['sec-websocket-key'] !== undefined ? req.headers['sec-websocket-key'].trim() : false;
	      var version = +req.headers['sec-websocket-version'];
	      var extensions = {};
	      if (req.method !== 'GET' || req.headers.upgrade.toLowerCase() !== 'websocket' || !key || !keyRegex.test(key) || version !== 8 && version !== 13 || !this.shouldHandle(req)) {
	        return abortHandshake(socket, 400);
	      }
	      if (this.options.perMessageDeflate) {
	        var perMessageDeflate = new PerMessageDeflate(this.options.perMessageDeflate, true, this.options.maxPayload);
	        try {
	          var offers = parse(req.headers['sec-websocket-extensions']);
	          if (offers[PerMessageDeflate.extensionName]) {
	            perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);
	            extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
	          }
	        } catch (err) {
	          return abortHandshake(socket, 400);
	        }
	      }

	      //
	      // Optionally call external client verification handler.
	      //
	      if (this.options.verifyClient) {
	        var info = {
	          origin: req.headers["".concat(version === 8 ? 'sec-websocket-origin' : 'origin')],
	          secure: !!(req.socket.authorized || req.socket.encrypted),
	          req: req
	        };
	        if (this.options.verifyClient.length === 2) {
	          this.options.verifyClient(info, function (verified, code, message, headers) {
	            if (!verified) {
	              return abortHandshake(socket, code || 401, message, headers);
	            }
	            _this2.completeUpgrade(key, extensions, req, socket, head, cb);
	          });
	          return;
	        }
	        if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);
	      }
	      this.completeUpgrade(key, extensions, req, socket, head, cb);
	    }

	    /**
	     * Upgrade the connection to WebSocket.
	     *
	     * @param {String} key The value of the `Sec-WebSocket-Key` header
	     * @param {Object} extensions The accepted extensions
	     * @param {http.IncomingMessage} req The request object
	     * @param {(net.Socket|tls.Socket)} socket The network socket between the
	     *     server and client
	     * @param {Buffer} head The first packet of the upgraded stream
	     * @param {Function} cb Callback
	     * @throws {Error} If called more than once with the same socket
	     * @private
	     */
	  }, {
	    key: "completeUpgrade",
	    value: function completeUpgrade(key, extensions, req, socket, head, cb) {
	      var _this3 = this;
	      //
	      // Destroy the socket if the client has already sent a FIN packet.
	      //
	      if (!socket.readable || !socket.writable) return socket.destroy();
	      if (socket[kWebSocket]) {
	        throw new Error('server.handleUpgrade() was called more than once with the same ' + 'socket, possibly due to a misconfiguration');
	      }
	      if (this._state > RUNNING) return abortHandshake(socket, 503);
	      var digest = createHash('sha1').update(key + GUID).digest('base64');
	      var headers = ['HTTP/1.1 101 Switching Protocols', 'Upgrade: websocket', 'Connection: Upgrade', "Sec-WebSocket-Accept: ".concat(digest)];
	      var ws = new WebSocket(null);
	      var protocol = req.headers['sec-websocket-protocol'];
	      if (protocol) {
	        protocol = protocol.split(',').map(trim);

	        //
	        // Optionally call external protocol selection handler.
	        //
	        if (this.options.handleProtocols) {
	          protocol = this.options.handleProtocols(protocol, req);
	        } else {
	          protocol = protocol[0];
	        }
	        if (protocol) {
	          headers.push("Sec-WebSocket-Protocol: ".concat(protocol));
	          ws._protocol = protocol;
	        }
	      }
	      if (extensions[PerMessageDeflate.extensionName]) {
	        var params = extensions[PerMessageDeflate.extensionName].params;
	        var value = format(_defineProperty({}, PerMessageDeflate.extensionName, [params]));
	        headers.push("Sec-WebSocket-Extensions: ".concat(value));
	        ws._extensions = extensions;
	      }

	      //
	      // Allow external modification/inspection of handshake headers.
	      //
	      this.emit('headers', headers, req);
	      socket.write(headers.concat('\r\n').join('\r\n'));
	      socket.removeListener('error', socketOnError);
	      ws.setSocket(socket, head, this.options.maxPayload);
	      if (this.clients) {
	        this.clients.add(ws);
	        ws.on('close', function () {
	          return _this3.clients["delete"](ws);
	        });
	      }
	      cb(ws, req);
	    }
	  }]);
	  return WebSocketServer;
	}(EventEmitter);
	websocketServer = WebSocketServer;

	/**
	 * Add event listeners on an `EventEmitter` using a map of <event, listener>
	 * pairs.
	 *
	 * @param {EventEmitter} server The event emitter
	 * @param {Object.<String, Function>} map The listeners to add
	 * @return {Function} A function that will remove the added listeners when
	 *     called
	 * @private
	 */
	function addListeners(server, map) {
	  for (var _i = 0, _Object$keys = Object.keys(map); _i < _Object$keys.length; _i++) {
	    var event = _Object$keys[_i];
	    server.on(event, map[event]);
	  }
	  return function removeListeners() {
	    for (var _i2 = 0, _Object$keys2 = Object.keys(map); _i2 < _Object$keys2.length; _i2++) {
	      var _event = _Object$keys2[_i2];
	      server.removeListener(_event, map[_event]);
	    }
	  };
	}

	/**
	 * Emit a `'close'` event on an `EventEmitter`.
	 *
	 * @param {EventEmitter} server The event emitter
	 * @private
	 */
	function emitClose(server) {
	  server._state = CLOSED;
	  server.emit('close');
	}

	/**
	 * Handle premature socket errors.
	 *
	 * @private
	 */
	function socketOnError() {
	  this.destroy();
	}

	/**
	 * Close the connection when preconditions are not fulfilled.
	 *
	 * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request
	 * @param {Number} code The HTTP response status code
	 * @param {String} [message] The HTTP response body
	 * @param {Object} [headers] Additional HTTP response headers
	 * @private
	 */
	function abortHandshake(socket, code, message, headers) {
	  if (socket.writable) {
	    message = message || http.STATUS_CODES[code];
	    headers = _objectSpread({
	      Connection: 'close',
	      'Content-Type': 'text/html',
	      'Content-Length': Buffer.byteLength(message)
	    }, headers);
	    socket.write("HTTP/1.1 ".concat(code, " ").concat(http.STATUS_CODES[code], "\r\n") + Object.keys(headers).map(function (h) {
	      return "".concat(h, ": ").concat(headers[h]);
	    }).join('\r\n') + '\r\n\r\n' + message);
	  }
	  socket.removeListener('error', socketOnError);
	  socket.destroy();
	}

	/**
	 * Remove whitespace characters from both ends of a string.
	 *
	 * @param {String} str The string
	 * @return {String} A new string representing `str` stripped of whitespace
	 *     characters from both its beginning and end
	 * @private
	 */
	function trim(str) {
	  return str.trim();
	}
	return websocketServer;
}

var ws;
var hasRequiredWs;

function requireWs () {
	if (hasRequiredWs) return ws;
	hasRequiredWs = 1;

	var WebSocket = requireWebsocket();
	WebSocket.createWebSocketStream = requireStream$1();
	WebSocket.Server = requireWebsocketServer();
	WebSocket.Receiver = requireReceiver();
	WebSocket.Sender = requireSender();
	ws = WebSocket;
	return ws;
}

var hasRequiredCjs$5;

function requireCjs$5 () {
	if (hasRequiredCjs$5) return cjs$3;
	hasRequiredCjs$5 = 1;
	(function (exports) {

		var _regeneratorRuntime = regenerator;
		var _classCallCheck = classCallCheck.exports;
		var _createClass = createClass.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var tslib_1 = require$$7;
		var utils_1 = requireCjs$6();
		var network_1 = tslib_1.__importDefault(requireNetwork());
		var WS = typeof commonjsGlobal.WebSocket !== "undefined" ? commonjsGlobal.WebSocket : requireWs();
		var SocketTransport = /*#__PURE__*/function () {
		  function SocketTransport(opts) {
		    var _this = this;
		    _classCallCheck(this, SocketTransport);
		    this.opts = opts;
		    this._queue = [];
		    this._events = [];
		    this._subscriptions = [];
		    this._protocol = opts.protocol;
		    this._version = opts.version;
		    this._url = "";
		    this._netMonitor = null;
		    this._socket = null;
		    this._nextSocket = null;
		    this._subscriptions = opts.subscriptions || [];
		    this._netMonitor = opts.netMonitor || new network_1["default"]();
		    if (!opts.url || typeof opts.url !== "string") {
		      throw new Error("Missing or invalid WebSocket url");
		    }
		    this._url = opts.url;
		    this._netMonitor.on("online", function () {
		      return _this._socketCreate();
		    });
		  }
		  _createClass(SocketTransport, [{
		    key: "readyState",
		    get: function get() {
		      return this._socket ? this._socket.readyState : -1;
		    },
		    set: function set(value) {}
		  }, {
		    key: "connecting",
		    get: function get() {
		      return this.readyState === 0;
		    },
		    set: function set(value) {}
		  }, {
		    key: "connected",
		    get: function get() {
		      return this.readyState === 1;
		    },
		    set: function set(value) {}
		  }, {
		    key: "closing",
		    get: function get() {
		      return this.readyState === 2;
		    },
		    set: function set(value) {}
		  }, {
		    key: "closed",
		    get: function get() {
		      return this.readyState === 3;
		    },
		    set: function set(value) {}
		  }, {
		    key: "open",
		    value: function open() {
		      this._socketCreate();
		    }
		  }, {
		    key: "close",
		    value: function close() {
		      this._socketClose();
		    }
		  }, {
		    key: "send",
		    value: function send(message, topic, silent) {
		      if (!topic || typeof topic !== "string") {
		        throw new Error("Missing or invalid topic field");
		      }
		      this._socketSend({
		        topic: topic,
		        type: "pub",
		        payload: message,
		        silent: !!silent
		      });
		    }
		  }, {
		    key: "subscribe",
		    value: function subscribe(topic) {
		      this._socketSend({
		        topic: topic,
		        type: "sub",
		        payload: "",
		        silent: true
		      });
		    }
		  }, {
		    key: "on",
		    value: function on(event, callback) {
		      this._events.push({
		        event: event,
		        callback: callback
		      });
		    }
		  }, {
		    key: "_socketCreate",
		    value: function _socketCreate() {
		      var _this2 = this;
		      if (this._nextSocket) {
		        return;
		      }
		      var url = getWebSocketUrl(this._url, this._protocol, this._version);
		      this._nextSocket = new WS(url);
		      if (!this._nextSocket) {
		        throw new Error("Failed to create socket");
		      }
		      this._nextSocket.onmessage = function (event) {
		        return _this2._socketReceive(event);
		      };
		      this._nextSocket.onopen = function () {
		        return _this2._socketOpen();
		      };
		      this._nextSocket.onerror = function (event) {
		        return _this2._socketError(event);
		      };
		      this._nextSocket.onclose = function () {
		        setTimeout(function () {
		          _this2._nextSocket = null;
		          _this2._socketCreate();
		        }, 1000);
		      };
		    }
		  }, {
		    key: "_socketOpen",
		    value: function _socketOpen() {
		      this._socketClose();
		      this._socket = this._nextSocket;
		      this._nextSocket = null;
		      this._queueSubscriptions();
		      this._pushQueue();
		    }
		  }, {
		    key: "_socketClose",
		    value: function _socketClose() {
		      if (this._socket) {
		        this._socket.onclose = function () {};
		        this._socket.close();
		      }
		    }
		  }, {
		    key: "_socketSend",
		    value: function _socketSend(socketMessage) {
		      var message = JSON.stringify(socketMessage);
		      if (this._socket && this._socket.readyState === 1) {
		        this._socket.send(message);
		      } else {
		        this._setToQueue(socketMessage);
		        this._socketCreate();
		      }
		    }
		  }, {
		    key: "_socketReceive",
		    value: function _socketReceive(event) {
		      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
		        var socketMessage, events;
		        return _regeneratorRuntime.wrap(function _callee$(_context) {
		          while (1) {
		            switch (_context.prev = _context.next) {
		              case 0:
		                _context.prev = 0;
		                socketMessage = JSON.parse(event.data);
		                _context.next = 7;
		                break;
		              case 4:
		                _context.prev = 4;
		                _context.t0 = _context["catch"](0);
		                return _context.abrupt("return");
		              case 7:
		                this._socketSend({
		                  topic: socketMessage.topic,
		                  type: "ack",
		                  payload: "",
		                  silent: true
		                });
		                if (this._socket && this._socket.readyState === 1) {
		                  events = this._events.filter(function (event) {
		                    return event.event === "message";
		                  });
		                  if (events && events.length) {
		                    events.forEach(function (event) {
		                      return event.callback(socketMessage);
		                    });
		                  }
		                }
		              case 9:
		              case "end":
		                return _context.stop();
		            }
		          }
		        }, _callee, this, [[0, 4]]);
		      }));
		    }
		  }, {
		    key: "_socketError",
		    value: function _socketError(e) {
		      var events = this._events.filter(function (event) {
		        return event.event === "error";
		      });
		      if (events && events.length) {
		        events.forEach(function (event) {
		          return event.callback(e);
		        });
		      }
		    }
		  }, {
		    key: "_queueSubscriptions",
		    value: function _queueSubscriptions() {
		      var _this3 = this;
		      var subscriptions = this._subscriptions;
		      subscriptions.forEach(function (topic) {
		        return _this3._queue.push({
		          topic: topic,
		          type: "sub",
		          payload: "",
		          silent: true
		        });
		      });
		      this._subscriptions = this.opts.subscriptions || [];
		    }
		  }, {
		    key: "_setToQueue",
		    value: function _setToQueue(socketMessage) {
		      this._queue.push(socketMessage);
		    }
		  }, {
		    key: "_pushQueue",
		    value: function _pushQueue() {
		      var _this4 = this;
		      var queue = this._queue;
		      queue.forEach(function (socketMessage) {
		        return _this4._socketSend(socketMessage);
		      });
		      this._queue = [];
		    }
		  }]);
		  return SocketTransport;
		}();
		function getWebSocketUrl(_url, protocol, version) {
		  var _a, _b;
		  var url = _url.startsWith("https") ? _url.replace("https", "wss") : _url.startsWith("http") ? _url.replace("http", "ws") : _url;
		  var splitUrl = url.split("?");
		  var params = (0, utils_1.isBrowser)() ? {
		    protocol: protocol,
		    version: version,
		    env: "browser",
		    host: ((_a = (0, utils_1.getLocation)()) === null || _a === void 0 ? void 0 : _a.host) || ""
		  } : {
		    protocol: protocol,
		    version: version,
		    env: ((_b = (0, utils_1.detectEnv)()) === null || _b === void 0 ? void 0 : _b.name) || ""
		  };
		  var queryString = (0, utils_1.appendToQueryString)((0, utils_1.getQueryString)(splitUrl[1] || ""), params);
		  return splitUrl[0] + "?" + queryString;
		}
		exports["default"] = SocketTransport;
} (cjs$3));
	return cjs$3;
}

var errors$3 = {};

var hasRequiredErrors$3;

function requireErrors$3 () {
	if (hasRequiredErrors$3) return errors$3;
	hasRequiredErrors$3 = 1;

	Object.defineProperty(errors$3, "__esModule", {
	  value: true
	});
	errors$3.ERROR_QRCODE_MODAL_USER_CLOSED = errors$3.ERROR_QRCODE_MODAL_NOT_PROVIDED = errors$3.ERROR_INVALID_URI = errors$3.ERROR_INVALID_RESPONSE = errors$3.ERROR_MISSING_REQUIRED = errors$3.ERROR_MISSING_ID = errors$3.ERROR_MISSING_METHOD = errors$3.ERROR_MISSING_ERROR = errors$3.ERROR_MISSING_RESULT = errors$3.ERROR_MISSING_JSON_RPC = errors$3.ERROR_SESSION_REJECTED = errors$3.ERROR_SESSION_DISCONNECTED = errors$3.ERROR_SESSION_CONNECTED = void 0;
	errors$3.ERROR_SESSION_CONNECTED = "Session currently connected";
	errors$3.ERROR_SESSION_DISCONNECTED = "Session currently disconnected";
	errors$3.ERROR_SESSION_REJECTED = "Session Rejected";
	errors$3.ERROR_MISSING_JSON_RPC = "Missing JSON RPC response";
	errors$3.ERROR_MISSING_RESULT = "JSON-RPC success response must include \"result\" field";
	errors$3.ERROR_MISSING_ERROR = "JSON-RPC error response must include \"error\" field";
	errors$3.ERROR_MISSING_METHOD = "JSON RPC request must have valid \"method\" value";
	errors$3.ERROR_MISSING_ID = "JSON RPC request must have valid \"id\" value";
	errors$3.ERROR_MISSING_REQUIRED = "Missing one of the required parameters: bridge / uri / session";
	errors$3.ERROR_INVALID_RESPONSE = "JSON RPC response format is invalid";
	errors$3.ERROR_INVALID_URI = "URI format is invalid";
	errors$3.ERROR_QRCODE_MODAL_NOT_PROVIDED = "QRCode Modal not provided";
	errors$3.ERROR_QRCODE_MODAL_USER_CLOSED = "User close QRCode Modal";
	return errors$3;
}

var events = {};

var hasRequiredEvents;

function requireEvents () {
	if (hasRequiredEvents) return events;
	hasRequiredEvents = 1;
	(function (exports) {

		var _classCallCheck = classCallCheck.exports;
		var _createClass = createClass.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var utils_1 = requireCjs$6();
		var EventManager = /*#__PURE__*/function () {
		  function EventManager() {
		    _classCallCheck(this, EventManager);
		    this._eventEmitters = [];
		  }
		  _createClass(EventManager, [{
		    key: "subscribe",
		    value: function subscribe(eventEmitter) {
		      this._eventEmitters.push(eventEmitter);
		    }
		  }, {
		    key: "unsubscribe",
		    value: function unsubscribe(event) {
		      this._eventEmitters = this._eventEmitters.filter(function (x) {
		        return x.event !== event;
		      });
		    }
		  }, {
		    key: "trigger",
		    value: function trigger(payload) {
		      var eventEmitters = [];
		      var event;
		      if ((0, utils_1.isJsonRpcRequest)(payload)) {
		        event = payload.method;
		      } else if ((0, utils_1.isJsonRpcResponseSuccess)(payload) || (0, utils_1.isJsonRpcResponseError)(payload)) {
		        event = "response:".concat(payload.id);
		      } else if ((0, utils_1.isInternalEvent)(payload)) {
		        event = payload.event;
		      } else {
		        event = "";
		      }
		      if (event) {
		        eventEmitters = this._eventEmitters.filter(function (eventEmitter) {
		          return eventEmitter.event === event;
		        });
		      }
		      if ((!eventEmitters || !eventEmitters.length) && !(0, utils_1.isReservedEvent)(event) && !(0, utils_1.isInternalEvent)(event)) {
		        eventEmitters = this._eventEmitters.filter(function (eventEmitter) {
		          return eventEmitter.event === "call_request";
		        });
		      }
		      eventEmitters.forEach(function (eventEmitter) {
		        if ((0, utils_1.isJsonRpcResponseError)(payload)) {
		          var error = new Error(payload.error.message);
		          eventEmitter.callback(error, null);
		        } else {
		          eventEmitter.callback(null, payload);
		        }
		      });
		    }
		  }]);
		  return EventManager;
		}();
		exports["default"] = EventManager;
} (events));
	return events;
}

var storage = {};

var hasRequiredStorage;

function requireStorage () {
	if (hasRequiredStorage) return storage;
	hasRequiredStorage = 1;
	(function (exports) {

		var _classCallCheck = classCallCheck.exports;
		var _createClass = createClass.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var utils_1 = requireCjs$6();
		var SessionStorage = /*#__PURE__*/function () {
		  function SessionStorage() {
		    var storageId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "walletconnect";
		    _classCallCheck(this, SessionStorage);
		    this.storageId = storageId;
		  }
		  _createClass(SessionStorage, [{
		    key: "getSession",
		    value: function getSession() {
		      var session = null;
		      var json = (0, utils_1.getLocal)(this.storageId);
		      if (json && (0, utils_1.isWalletConnectSession)(json)) {
		        session = json;
		      }
		      return session;
		    }
		  }, {
		    key: "setSession",
		    value: function setSession(session) {
		      (0, utils_1.setLocal)(this.storageId, session);
		      return session;
		    }
		  }, {
		    key: "removeSession",
		    value: function removeSession() {
		      (0, utils_1.removeLocal)(this.storageId);
		    }
		  }]);
		  return SessionStorage;
		}();
		exports["default"] = SessionStorage;
} (storage));
	return storage;
}

var url = {};

var hasRequiredUrl;

function requireUrl () {
	if (hasRequiredUrl) return url;
	hasRequiredUrl = 1;

	Object.defineProperty(url, "__esModule", {
	  value: true
	});
	url.getBridgeUrl = url.shouldSelectRandomly = url.selectRandomBridgeUrl = url.randomBridgeIndex = url.extractRootDomain = url.extractHostname = void 0;
	var domain = "walletconnect.org";
	var alphanumerical = "abcdefghijklmnopqrstuvwxyz0123456789";
	var bridges = alphanumerical.split("").map(function (_char) {
	  return "https://".concat(_char, ".bridge.walletconnect.org");
	});
	function extractHostname(url) {
	  var hostname = url.indexOf("//") > -1 ? url.split("/")[2] : url.split("/")[0];
	  hostname = hostname.split(":")[0];
	  hostname = hostname.split("?")[0];
	  return hostname;
	}
	url.extractHostname = extractHostname;
	function extractRootDomain(url) {
	  return extractHostname(url).split(".").slice(-2).join(".");
	}
	url.extractRootDomain = extractRootDomain;
	function randomBridgeIndex() {
	  return Math.floor(Math.random() * bridges.length);
	}
	url.randomBridgeIndex = randomBridgeIndex;
	function selectRandomBridgeUrl() {
	  return bridges[randomBridgeIndex()];
	}
	url.selectRandomBridgeUrl = selectRandomBridgeUrl;
	function shouldSelectRandomly(url) {
	  return extractRootDomain(url) === domain;
	}
	url.shouldSelectRandomly = shouldSelectRandomly;
	function getBridgeUrl(url) {
	  if (shouldSelectRandomly(url)) {
	    return selectRandomBridgeUrl();
	  }
	  return url;
	}
	url.getBridgeUrl = getBridgeUrl;
	return url;
}

var hasRequiredCjs$4;

function requireCjs$4 () {
	if (hasRequiredCjs$4) return cjs$9;
	hasRequiredCjs$4 = 1;
	(function (exports) {

		var _regeneratorRuntime = regenerator;
		var _toConsumableArray = requireToConsumableArray();
		var _classCallCheck = classCallCheck.exports;
		var _createClass = createClass.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var tslib_1 = require$$7;
		var utils_1 = requireCjs$6();
		var socket_transport_1 = tslib_1.__importDefault(requireCjs$5());
		var errors_1 = requireErrors$3();
		var events_1 = tslib_1.__importDefault(requireEvents());
		var storage_1 = tslib_1.__importDefault(requireStorage());
		var url_1 = requireUrl();
		var Connector = /*#__PURE__*/function () {
		  function Connector(opts) {
		    _classCallCheck(this, Connector);
		    this.protocol = "wc";
		    this.version = 1;
		    this._bridge = "";
		    this._key = null;
		    this._clientId = "";
		    this._clientMeta = null;
		    this._peerId = "";
		    this._peerMeta = null;
		    this._handshakeId = 0;
		    this._handshakeTopic = "";
		    this._connected = false;
		    this._accounts = [];
		    this._chainId = 0;
		    this._networkId = 0;
		    this._rpcUrl = "";
		    this._eventManager = new events_1["default"]();
		    this._clientMeta = (0, utils_1.getClientMeta)() || opts.connectorOpts.clientMeta || null;
		    this._cryptoLib = opts.cryptoLib;
		    this._sessionStorage = opts.sessionStorage || new storage_1["default"](opts.connectorOpts.storageId);
		    this._qrcodeModal = opts.connectorOpts.qrcodeModal;
		    this._qrcodeModalOptions = opts.connectorOpts.qrcodeModalOptions;
		    this._signingMethods = [].concat(_toConsumableArray(utils_1.signingMethods), _toConsumableArray(opts.connectorOpts.signingMethods || []));
		    if (!opts.connectorOpts.bridge && !opts.connectorOpts.uri && !opts.connectorOpts.session) {
		      throw new Error(errors_1.ERROR_MISSING_REQUIRED);
		    }
		    if (opts.connectorOpts.bridge) {
		      this.bridge = (0, url_1.getBridgeUrl)(opts.connectorOpts.bridge);
		    }
		    if (opts.connectorOpts.uri) {
		      this.uri = opts.connectorOpts.uri;
		    }
		    var session = opts.connectorOpts.session || this._getStorageSession();
		    if (session) {
		      this.session = session;
		    }
		    if (this.handshakeId) {
		      this._subscribeToSessionResponse(this.handshakeId, "Session request rejected");
		    }
		    this._transport = opts.transport || new socket_transport_1["default"]({
		      protocol: this.protocol,
		      version: this.version,
		      url: this.bridge,
		      subscriptions: [this.clientId]
		    });
		    this._subscribeToInternalEvents();
		    this._initTransport();
		    if (opts.connectorOpts.uri) {
		      this._subscribeToSessionRequest();
		    }
		    if (opts.pushServerOpts) {
		      this._registerPushServer(opts.pushServerOpts);
		    }
		  }
		  _createClass(Connector, [{
		    key: "bridge",
		    get: function get() {
		      return this._bridge;
		    },
		    set: function set(value) {
		      if (!value) {
		        return;
		      }
		      this._bridge = value;
		    }
		  }, {
		    key: "key",
		    get: function get() {
		      if (this._key) {
		        var key = (0, utils_1.convertArrayBufferToHex)(this._key, true);
		        return key;
		      }
		      return "";
		    },
		    set: function set(value) {
		      if (!value) {
		        return;
		      }
		      var key = (0, utils_1.convertHexToArrayBuffer)(value);
		      this._key = key;
		    }
		  }, {
		    key: "clientId",
		    get: function get() {
		      var clientId = this._clientId;
		      if (!clientId) {
		        clientId = this._clientId = (0, utils_1.uuid)();
		      }
		      return this._clientId;
		    },
		    set: function set(value) {
		      if (!value) {
		        return;
		      }
		      this._clientId = value;
		    }
		  }, {
		    key: "peerId",
		    get: function get() {
		      return this._peerId;
		    },
		    set: function set(value) {
		      if (!value) {
		        return;
		      }
		      this._peerId = value;
		    }
		  }, {
		    key: "clientMeta",
		    get: function get() {
		      var clientMeta = this._clientMeta;
		      if (!clientMeta) {
		        clientMeta = this._clientMeta = (0, utils_1.getClientMeta)();
		      }
		      return clientMeta;
		    },
		    set: function set(value) {}
		  }, {
		    key: "peerMeta",
		    get: function get() {
		      var peerMeta = this._peerMeta;
		      return peerMeta;
		    },
		    set: function set(value) {
		      this._peerMeta = value;
		    }
		  }, {
		    key: "handshakeTopic",
		    get: function get() {
		      return this._handshakeTopic;
		    },
		    set: function set(value) {
		      if (!value) {
		        return;
		      }
		      this._handshakeTopic = value;
		    }
		  }, {
		    key: "handshakeId",
		    get: function get() {
		      return this._handshakeId;
		    },
		    set: function set(value) {
		      if (!value) {
		        return;
		      }
		      this._handshakeId = value;
		    }
		  }, {
		    key: "uri",
		    get: function get() {
		      var _uri = this._formatUri();
		      return _uri;
		    },
		    set: function set(value) {
		      if (!value) {
		        return;
		      }
		      var _this$_parseUri = this._parseUri(value),
		        handshakeTopic = _this$_parseUri.handshakeTopic,
		        bridge = _this$_parseUri.bridge,
		        key = _this$_parseUri.key;
		      this.handshakeTopic = handshakeTopic;
		      this.bridge = bridge;
		      this.key = key;
		    }
		  }, {
		    key: "chainId",
		    get: function get() {
		      var chainId = this._chainId;
		      return chainId;
		    },
		    set: function set(value) {
		      this._chainId = value;
		    }
		  }, {
		    key: "networkId",
		    get: function get() {
		      var networkId = this._networkId;
		      return networkId;
		    },
		    set: function set(value) {
		      this._networkId = value;
		    }
		  }, {
		    key: "accounts",
		    get: function get() {
		      var accounts = this._accounts;
		      return accounts;
		    },
		    set: function set(value) {
		      this._accounts = value;
		    }
		  }, {
		    key: "rpcUrl",
		    get: function get() {
		      var rpcUrl = this._rpcUrl;
		      return rpcUrl;
		    },
		    set: function set(value) {
		      this._rpcUrl = value;
		    }
		  }, {
		    key: "connected",
		    get: function get() {
		      return this._connected;
		    },
		    set: function set(value) {}
		  }, {
		    key: "pending",
		    get: function get() {
		      return !!this._handshakeTopic;
		    },
		    set: function set(value) {}
		  }, {
		    key: "session",
		    get: function get() {
		      return {
		        connected: this.connected,
		        accounts: this.accounts,
		        chainId: this.chainId,
		        bridge: this.bridge,
		        key: this.key,
		        clientId: this.clientId,
		        clientMeta: this.clientMeta,
		        peerId: this.peerId,
		        peerMeta: this.peerMeta,
		        handshakeId: this.handshakeId,
		        handshakeTopic: this.handshakeTopic
		      };
		    },
		    set: function set(value) {
		      if (!value) {
		        return;
		      }
		      this._connected = value.connected;
		      this.accounts = value.accounts;
		      this.chainId = value.chainId;
		      this.bridge = value.bridge;
		      this.key = value.key;
		      this.clientId = value.clientId;
		      this.clientMeta = value.clientMeta;
		      this.peerId = value.peerId;
		      this.peerMeta = value.peerMeta;
		      this.handshakeId = value.handshakeId;
		      this.handshakeTopic = value.handshakeTopic;
		    }
		  }, {
		    key: "on",
		    value: function on(event, callback) {
		      var eventEmitter = {
		        event: event,
		        callback: callback
		      };
		      this._eventManager.subscribe(eventEmitter);
		    }
		  }, {
		    key: "off",
		    value: function off(event) {
		      this._eventManager.unsubscribe(event);
		    }
		  }, {
		    key: "createInstantRequest",
		    value: function createInstantRequest(instantRequest) {
		      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
		        var _this = this;
		        var request, endInstantRequest, result;
		        return _regeneratorRuntime.wrap(function _callee$(_context) {
		          while (1) {
		            switch (_context.prev = _context.next) {
		              case 0:
		                _context.next = 2;
		                return this._generateKey();
		              case 2:
		                this._key = _context.sent;
		                request = this._formatRequest({
		                  method: "wc_instantRequest",
		                  params: [{
		                    peerId: this.clientId,
		                    peerMeta: this.clientMeta,
		                    request: this._formatRequest(instantRequest)
		                  }]
		                });
		                this.handshakeId = request.id;
		                this.handshakeTopic = (0, utils_1.uuid)();
		                this._eventManager.trigger({
		                  event: "display_uri",
		                  params: [this.uri]
		                });
		                this.on("modal_closed", function () {
		                  throw new Error(errors_1.ERROR_QRCODE_MODAL_USER_CLOSED);
		                });
		                endInstantRequest = function endInstantRequest() {
		                  _this.killSession();
		                };
		                _context.prev = 9;
		                _context.next = 12;
		                return this._sendCallRequest(request);
		              case 12:
		                result = _context.sent;
		                if (result) {
		                  endInstantRequest();
		                }
		                return _context.abrupt("return", result);
		              case 17:
		                _context.prev = 17;
		                _context.t0 = _context["catch"](9);
		                endInstantRequest();
		                throw _context.t0;
		              case 21:
		              case "end":
		                return _context.stop();
		            }
		          }
		        }, _callee, this, [[9, 17]]);
		      }));
		    }
		  }, {
		    key: "connect",
		    value: function connect(opts) {
		      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
		        var _this2 = this;
		        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
		          while (1) {
		            switch (_context3.prev = _context3.next) {
		              case 0:
		                if (this._qrcodeModal) {
		                  _context3.next = 2;
		                  break;
		                }
		                throw new Error(errors_1.ERROR_QRCODE_MODAL_NOT_PROVIDED);
		              case 2:
		                if (!this.connected) {
		                  _context3.next = 4;
		                  break;
		                }
		                return _context3.abrupt("return", {
		                  chainId: this.chainId,
		                  accounts: this.accounts
		                });
		              case 4:
		                _context3.next = 6;
		                return this.createSession(opts);
		              case 6:
		                return _context3.abrupt("return", new Promise(function (resolve, reject) {
		                  return tslib_1.__awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
		                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
		                      while (1) {
		                        switch (_context2.prev = _context2.next) {
		                          case 0:
		                            this.on("modal_closed", function () {
		                              return reject(new Error(errors_1.ERROR_QRCODE_MODAL_USER_CLOSED));
		                            });
		                            this.on("connect", function (error, payload) {
		                              if (error) {
		                                return reject(error);
		                              }
		                              resolve(payload.params[0]);
		                            });
		                          case 2:
		                          case "end":
		                            return _context2.stop();
		                        }
		                      }
		                    }, _callee2, this);
		                  }));
		                }));
		              case 7:
		              case "end":
		                return _context3.stop();
		            }
		          }
		        }, _callee3, this);
		      }));
		    }
		  }, {
		    key: "createSession",
		    value: function createSession(opts) {
		      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
		        var request;
		        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
		          while (1) {
		            switch (_context4.prev = _context4.next) {
		              case 0:
		                if (!this._connected) {
		                  _context4.next = 2;
		                  break;
		                }
		                throw new Error(errors_1.ERROR_SESSION_CONNECTED);
		              case 2:
		                if (!this.pending) {
		                  _context4.next = 4;
		                  break;
		                }
		                return _context4.abrupt("return");
		              case 4:
		                _context4.next = 6;
		                return this._generateKey();
		              case 6:
		                this._key = _context4.sent;
		                request = this._formatRequest({
		                  method: "wc_sessionRequest",
		                  params: [{
		                    peerId: this.clientId,
		                    peerMeta: this.clientMeta,
		                    chainId: opts && opts.chainId ? opts.chainId : null
		                  }]
		                });
		                this.handshakeId = request.id;
		                this.handshakeTopic = (0, utils_1.uuid)();
		                this._sendSessionRequest(request, "Session update rejected", {
		                  topic: this.handshakeTopic
		                });
		                this._eventManager.trigger({
		                  event: "display_uri",
		                  params: [this.uri]
		                });
		              case 12:
		              case "end":
		                return _context4.stop();
		            }
		          }
		        }, _callee4, this);
		      }));
		    }
		  }, {
		    key: "approveSession",
		    value: function approveSession(sessionStatus) {
		      if (this._connected) {
		        throw new Error(errors_1.ERROR_SESSION_CONNECTED);
		      }
		      this.chainId = sessionStatus.chainId;
		      this.accounts = sessionStatus.accounts;
		      this.networkId = sessionStatus.networkId || 0;
		      this.rpcUrl = sessionStatus.rpcUrl || "";
		      var sessionParams = {
		        approved: true,
		        chainId: this.chainId,
		        networkId: this.networkId,
		        accounts: this.accounts,
		        rpcUrl: this.rpcUrl,
		        peerId: this.clientId,
		        peerMeta: this.clientMeta
		      };
		      var response = {
		        id: this.handshakeId,
		        jsonrpc: "2.0",
		        result: sessionParams
		      };
		      this._sendResponse(response);
		      this._connected = true;
		      this._setStorageSession();
		      this._eventManager.trigger({
		        event: "connect",
		        params: [{
		          peerId: this.peerId,
		          peerMeta: this.peerMeta,
		          chainId: this.chainId,
		          accounts: this.accounts
		        }]
		      });
		    }
		  }, {
		    key: "rejectSession",
		    value: function rejectSession(sessionError) {
		      if (this._connected) {
		        throw new Error(errors_1.ERROR_SESSION_CONNECTED);
		      }
		      var message = sessionError && sessionError.message ? sessionError.message : errors_1.ERROR_SESSION_REJECTED;
		      var response = this._formatResponse({
		        id: this.handshakeId,
		        error: {
		          message: message
		        }
		      });
		      this._sendResponse(response);
		      this._connected = false;
		      this._eventManager.trigger({
		        event: "disconnect",
		        params: [{
		          message: message
		        }]
		      });
		      this._removeStorageSession();
		    }
		  }, {
		    key: "updateSession",
		    value: function updateSession(sessionStatus) {
		      if (!this._connected) {
		        throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);
		      }
		      this.chainId = sessionStatus.chainId;
		      this.accounts = sessionStatus.accounts;
		      this.networkId = sessionStatus.networkId || 0;
		      this.rpcUrl = sessionStatus.rpcUrl || "";
		      var sessionParams = {
		        approved: true,
		        chainId: this.chainId,
		        networkId: this.networkId,
		        accounts: this.accounts,
		        rpcUrl: this.rpcUrl
		      };
		      var request = this._formatRequest({
		        method: "wc_sessionUpdate",
		        params: [sessionParams]
		      });
		      this._sendSessionRequest(request, "Session update rejected");
		      this._eventManager.trigger({
		        event: "session_update",
		        params: [{
		          chainId: this.chainId,
		          accounts: this.accounts
		        }]
		      });
		      this._manageStorageSession();
		    }
		  }, {
		    key: "killSession",
		    value: function killSession(sessionError) {
		      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
		        var message, sessionParams, request;
		        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
		          while (1) {
		            switch (_context5.prev = _context5.next) {
		              case 0:
		                message = sessionError ? sessionError.message : "Session Disconnected";
		                sessionParams = {
		                  approved: false,
		                  chainId: null,
		                  networkId: null,
		                  accounts: null
		                };
		                request = this._formatRequest({
		                  method: "wc_sessionUpdate",
		                  params: [sessionParams]
		                });
		                _context5.next = 5;
		                return this._sendRequest(request);
		              case 5:
		                this._handleSessionDisconnect(message);
		              case 6:
		              case "end":
		                return _context5.stop();
		            }
		          }
		        }, _callee5, this);
		      }));
		    }
		  }, {
		    key: "sendTransaction",
		    value: function sendTransaction(tx) {
		      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
		        var parsedTx, request, result;
		        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
		          while (1) {
		            switch (_context6.prev = _context6.next) {
		              case 0:
		                if (this._connected) {
		                  _context6.next = 2;
		                  break;
		                }
		                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);
		              case 2:
		                parsedTx = (0, utils_1.parseTransactionData)(tx);
		                request = this._formatRequest({
		                  method: "eth_sendTransaction",
		                  params: [parsedTx]
		                });
		                _context6.next = 6;
		                return this._sendCallRequest(request);
		              case 6:
		                result = _context6.sent;
		                return _context6.abrupt("return", result);
		              case 8:
		              case "end":
		                return _context6.stop();
		            }
		          }
		        }, _callee6, this);
		      }));
		    }
		  }, {
		    key: "signTransaction",
		    value: function signTransaction(tx) {
		      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
		        var parsedTx, request, result;
		        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
		          while (1) {
		            switch (_context7.prev = _context7.next) {
		              case 0:
		                if (this._connected) {
		                  _context7.next = 2;
		                  break;
		                }
		                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);
		              case 2:
		                parsedTx = (0, utils_1.parseTransactionData)(tx);
		                request = this._formatRequest({
		                  method: "eth_signTransaction",
		                  params: [parsedTx]
		                });
		                _context7.next = 6;
		                return this._sendCallRequest(request);
		              case 6:
		                result = _context7.sent;
		                return _context7.abrupt("return", result);
		              case 8:
		              case "end":
		                return _context7.stop();
		            }
		          }
		        }, _callee7, this);
		      }));
		    }
		  }, {
		    key: "signMessage",
		    value: function signMessage(params) {
		      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
		        var request, result;
		        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
		          while (1) {
		            switch (_context8.prev = _context8.next) {
		              case 0:
		                if (this._connected) {
		                  _context8.next = 2;
		                  break;
		                }
		                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);
		              case 2:
		                request = this._formatRequest({
		                  method: "eth_sign",
		                  params: params
		                });
		                _context8.next = 5;
		                return this._sendCallRequest(request);
		              case 5:
		                result = _context8.sent;
		                return _context8.abrupt("return", result);
		              case 7:
		              case "end":
		                return _context8.stop();
		            }
		          }
		        }, _callee8, this);
		      }));
		    }
		  }, {
		    key: "signPersonalMessage",
		    value: function signPersonalMessage(params) {
		      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
		        var request, result;
		        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
		          while (1) {
		            switch (_context9.prev = _context9.next) {
		              case 0:
		                if (this._connected) {
		                  _context9.next = 2;
		                  break;
		                }
		                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);
		              case 2:
		                params = (0, utils_1.parsePersonalSign)(params);
		                request = this._formatRequest({
		                  method: "personal_sign",
		                  params: params
		                });
		                _context9.next = 6;
		                return this._sendCallRequest(request);
		              case 6:
		                result = _context9.sent;
		                return _context9.abrupt("return", result);
		              case 8:
		              case "end":
		                return _context9.stop();
		            }
		          }
		        }, _callee9, this);
		      }));
		    }
		  }, {
		    key: "signTypedData",
		    value: function signTypedData(params) {
		      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
		        var request, result;
		        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
		          while (1) {
		            switch (_context10.prev = _context10.next) {
		              case 0:
		                if (this._connected) {
		                  _context10.next = 2;
		                  break;
		                }
		                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);
		              case 2:
		                request = this._formatRequest({
		                  method: "eth_signTypedData",
		                  params: params
		                });
		                _context10.next = 5;
		                return this._sendCallRequest(request);
		              case 5:
		                result = _context10.sent;
		                return _context10.abrupt("return", result);
		              case 7:
		              case "end":
		                return _context10.stop();
		            }
		          }
		        }, _callee10, this);
		      }));
		    }
		  }, {
		    key: "updateChain",
		    value: function updateChain(chainParams) {
		      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
		        var request, result;
		        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
		          while (1) {
		            switch (_context11.prev = _context11.next) {
		              case 0:
		                if (this._connected) {
		                  _context11.next = 2;
		                  break;
		                }
		                throw new Error("Session currently disconnected");
		              case 2:
		                request = this._formatRequest({
		                  method: "wallet_updateChain",
		                  params: [chainParams]
		                });
		                _context11.next = 5;
		                return this._sendCallRequest(request);
		              case 5:
		                result = _context11.sent;
		                return _context11.abrupt("return", result);
		              case 7:
		              case "end":
		                return _context11.stop();
		            }
		          }
		        }, _callee11, this);
		      }));
		    }
		  }, {
		    key: "unsafeSend",
		    value: function unsafeSend(request, options) {
		      var _this3 = this;
		      this._sendRequest(request, options);
		      this._eventManager.trigger({
		        event: "call_request_sent",
		        params: [{
		          request: request,
		          options: options
		        }]
		      });
		      return new Promise(function (resolve, reject) {
		        _this3._subscribeToResponse(request.id, function (error, payload) {
		          if (error) {
		            reject(error);
		            return;
		          }
		          if (!payload) {
		            throw new Error(errors_1.ERROR_MISSING_JSON_RPC);
		          }
		          resolve(payload);
		        });
		      });
		    }
		  }, {
		    key: "sendCustomRequest",
		    value: function sendCustomRequest(request, options) {
		      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
		        var formattedRequest, result;
		        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
		          while (1) {
		            switch (_context12.prev = _context12.next) {
		              case 0:
		                if (this._connected) {
		                  _context12.next = 2;
		                  break;
		                }
		                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);
		              case 2:
		                _context12.t0 = request.method;
		                _context12.next = _context12.t0 === "eth_accounts" ? 5 : _context12.t0 === "eth_chainId" ? 6 : _context12.t0 === "eth_sendTransaction" ? 7 : _context12.t0 === "eth_signTransaction" ? 7 : _context12.t0 === "personal_sign" ? 9 : 11;
		                break;
		              case 5:
		                return _context12.abrupt("return", this.accounts);
		              case 6:
		                return _context12.abrupt("return", (0, utils_1.convertNumberToHex)(this.chainId));
		              case 7:
		                if (request.params) {
		                  request.params[0] = (0, utils_1.parseTransactionData)(request.params[0]);
		                }
		                return _context12.abrupt("break", 12);
		              case 9:
		                if (request.params) {
		                  request.params = (0, utils_1.parsePersonalSign)(request.params);
		                }
		                return _context12.abrupt("break", 12);
		              case 11:
		                return _context12.abrupt("break", 12);
		              case 12:
		                formattedRequest = this._formatRequest(request);
		                _context12.next = 15;
		                return this._sendCallRequest(formattedRequest, options);
		              case 15:
		                result = _context12.sent;
		                return _context12.abrupt("return", result);
		              case 17:
		              case "end":
		                return _context12.stop();
		            }
		          }
		        }, _callee12, this);
		      }));
		    }
		  }, {
		    key: "approveRequest",
		    value: function approveRequest(response) {
		      if ((0, utils_1.isJsonRpcResponseSuccess)(response)) {
		        var formattedResponse = this._formatResponse(response);
		        this._sendResponse(formattedResponse);
		      } else {
		        throw new Error(errors_1.ERROR_MISSING_RESULT);
		      }
		    }
		  }, {
		    key: "rejectRequest",
		    value: function rejectRequest(response) {
		      if ((0, utils_1.isJsonRpcResponseError)(response)) {
		        var formattedResponse = this._formatResponse(response);
		        this._sendResponse(formattedResponse);
		      } else {
		        throw new Error(errors_1.ERROR_MISSING_ERROR);
		      }
		    }
		  }, {
		    key: "transportClose",
		    value: function transportClose() {
		      this._transport.close();
		    }
		  }, {
		    key: "_sendRequest",
		    value: function _sendRequest(request, options) {
		      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {
		        var callRequest, encryptionPayload, topic, payload, silent;
		        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
		          while (1) {
		            switch (_context13.prev = _context13.next) {
		              case 0:
		                callRequest = this._formatRequest(request);
		                _context13.next = 3;
		                return this._encrypt(callRequest);
		              case 3:
		                encryptionPayload = _context13.sent;
		                topic = typeof (options === null || options === void 0 ? void 0 : options.topic) !== "undefined" ? options.topic : this.peerId;
		                payload = JSON.stringify(encryptionPayload);
		                silent = typeof (options === null || options === void 0 ? void 0 : options.forcePushNotification) !== "undefined" ? !options.forcePushNotification : (0, utils_1.isSilentPayload)(callRequest);
		                this._transport.send(payload, topic, silent);
		              case 8:
		              case "end":
		                return _context13.stop();
		            }
		          }
		        }, _callee13, this);
		      }));
		    }
		  }, {
		    key: "_sendResponse",
		    value: function _sendResponse(response) {
		      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {
		        var encryptionPayload, topic, payload, silent;
		        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
		          while (1) {
		            switch (_context14.prev = _context14.next) {
		              case 0:
		                _context14.next = 2;
		                return this._encrypt(response);
		              case 2:
		                encryptionPayload = _context14.sent;
		                topic = this.peerId;
		                payload = JSON.stringify(encryptionPayload);
		                silent = true;
		                this._transport.send(payload, topic, silent);
		              case 7:
		              case "end":
		                return _context14.stop();
		            }
		          }
		        }, _callee14, this);
		      }));
		    }
		  }, {
		    key: "_sendSessionRequest",
		    value: function _sendSessionRequest(request, errorMsg, options) {
		      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {
		        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
		          while (1) {
		            switch (_context15.prev = _context15.next) {
		              case 0:
		                this._sendRequest(request, options);
		                this._subscribeToSessionResponse(request.id, errorMsg);
		              case 2:
		              case "end":
		                return _context15.stop();
		            }
		          }
		        }, _callee15, this);
		      }));
		    }
		  }, {
		    key: "_sendCallRequest",
		    value: function _sendCallRequest(request, options) {
		      this._sendRequest(request, options);
		      this._eventManager.trigger({
		        event: "call_request_sent",
		        params: [{
		          request: request,
		          options: options
		        }]
		      });
		      return this._subscribeToCallResponse(request.id);
		    }
		  }, {
		    key: "_formatRequest",
		    value: function _formatRequest(request) {
		      if (typeof request.method === "undefined") {
		        throw new Error(errors_1.ERROR_MISSING_METHOD);
		      }
		      var formattedRequest = {
		        id: typeof request.id === "undefined" ? (0, utils_1.payloadId)() : request.id,
		        jsonrpc: "2.0",
		        method: request.method,
		        params: typeof request.params === "undefined" ? [] : request.params
		      };
		      return formattedRequest;
		    }
		  }, {
		    key: "_formatResponse",
		    value: function _formatResponse(response) {
		      if (typeof response.id === "undefined") {
		        throw new Error(errors_1.ERROR_MISSING_ID);
		      }
		      var baseResponse = {
		        id: response.id,
		        jsonrpc: "2.0"
		      };
		      if ((0, utils_1.isJsonRpcResponseError)(response)) {
		        var error = (0, utils_1.formatRpcError)(response.error);
		        var errorResponse = Object.assign(Object.assign(Object.assign({}, baseResponse), response), {
		          error: error
		        });
		        return errorResponse;
		      } else if ((0, utils_1.isJsonRpcResponseSuccess)(response)) {
		        var successResponse = Object.assign(Object.assign({}, baseResponse), response);
		        return successResponse;
		      }
		      throw new Error(errors_1.ERROR_INVALID_RESPONSE);
		    }
		  }, {
		    key: "_handleSessionDisconnect",
		    value: function _handleSessionDisconnect(errorMsg) {
		      var message = errorMsg || "Session Disconnected";
		      if (!this._connected) {
		        if (this._qrcodeModal) {
		          this._qrcodeModal.close();
		        }
		        (0, utils_1.removeLocal)(utils_1.mobileLinkChoiceKey);
		      }
		      if (this._connected) {
		        this._connected = false;
		      }
		      if (this._handshakeId) {
		        this._handshakeId = 0;
		      }
		      if (this._handshakeTopic) {
		        this._handshakeTopic = "";
		      }
		      if (this._peerId) {
		        this._peerId = "";
		      }
		      this._eventManager.trigger({
		        event: "disconnect",
		        params: [{
		          message: message
		        }]
		      });
		      this._removeStorageSession();
		      this.transportClose();
		    }
		  }, {
		    key: "_handleSessionResponse",
		    value: function _handleSessionResponse(errorMsg, sessionParams) {
		      if (sessionParams) {
		        if (sessionParams.approved) {
		          if (!this._connected) {
		            this._connected = true;
		            if (sessionParams.chainId) {
		              this.chainId = sessionParams.chainId;
		            }
		            if (sessionParams.accounts) {
		              this.accounts = sessionParams.accounts;
		            }
		            if (sessionParams.peerId && !this.peerId) {
		              this.peerId = sessionParams.peerId;
		            }
		            if (sessionParams.peerMeta && !this.peerMeta) {
		              this.peerMeta = sessionParams.peerMeta;
		            }
		            this._eventManager.trigger({
		              event: "connect",
		              params: [{
		                peerId: this.peerId,
		                peerMeta: this.peerMeta,
		                chainId: this.chainId,
		                accounts: this.accounts
		              }]
		            });
		          } else {
		            if (sessionParams.chainId) {
		              this.chainId = sessionParams.chainId;
		            }
		            if (sessionParams.accounts) {
		              this.accounts = sessionParams.accounts;
		            }
		            this._eventManager.trigger({
		              event: "session_update",
		              params: [{
		                chainId: this.chainId,
		                accounts: this.accounts
		              }]
		            });
		          }
		          this._manageStorageSession();
		        } else {
		          this._handleSessionDisconnect(errorMsg);
		        }
		      } else {
		        this._handleSessionDisconnect(errorMsg);
		      }
		    }
		  }, {
		    key: "_handleIncomingMessages",
		    value: function _handleIncomingMessages(socketMessage) {
		      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {
		        var activeTopics, encryptionPayload, payload;
		        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
		          while (1) {
		            switch (_context16.prev = _context16.next) {
		              case 0:
		                activeTopics = [this.clientId, this.handshakeTopic];
		                if (activeTopics.includes(socketMessage.topic)) {
		                  _context16.next = 3;
		                  break;
		                }
		                return _context16.abrupt("return");
		              case 3:
		                _context16.prev = 3;
		                encryptionPayload = JSON.parse(socketMessage.payload);
		                _context16.next = 10;
		                break;
		              case 7:
		                _context16.prev = 7;
		                _context16.t0 = _context16["catch"](3);
		                return _context16.abrupt("return");
		              case 10:
		                _context16.next = 12;
		                return this._decrypt(encryptionPayload);
		              case 12:
		                payload = _context16.sent;
		                if (payload) {
		                  this._eventManager.trigger(payload);
		                }
		              case 14:
		              case "end":
		                return _context16.stop();
		            }
		          }
		        }, _callee16, this, [[3, 7]]);
		      }));
		    }
		  }, {
		    key: "_subscribeToSessionRequest",
		    value: function _subscribeToSessionRequest() {
		      this._transport.subscribe(this.handshakeTopic);
		    }
		  }, {
		    key: "_subscribeToResponse",
		    value: function _subscribeToResponse(id, callback) {
		      this.on("response:".concat(id), callback);
		    }
		  }, {
		    key: "_subscribeToSessionResponse",
		    value: function _subscribeToSessionResponse(id, errorMsg) {
		      var _this4 = this;
		      this._subscribeToResponse(id, function (error, payload) {
		        if (error) {
		          _this4._handleSessionResponse(error.message);
		          return;
		        }
		        if ((0, utils_1.isJsonRpcResponseSuccess)(payload)) {
		          _this4._handleSessionResponse(errorMsg, payload.result);
		        } else if (payload.error && payload.error.message) {
		          _this4._handleSessionResponse(payload.error.message);
		        } else {
		          _this4._handleSessionResponse(errorMsg);
		        }
		      });
		    }
		  }, {
		    key: "_subscribeToCallResponse",
		    value: function _subscribeToCallResponse(id) {
		      var _this5 = this;
		      return new Promise(function (resolve, reject) {
		        _this5._subscribeToResponse(id, function (error, payload) {
		          if (error) {
		            reject(error);
		            return;
		          }
		          if ((0, utils_1.isJsonRpcResponseSuccess)(payload)) {
		            resolve(payload.result);
		          } else if (payload.error && payload.error.message) {
		            reject(payload.error);
		          } else {
		            reject(new Error(errors_1.ERROR_INVALID_RESPONSE));
		          }
		        });
		      });
		    }
		  }, {
		    key: "_subscribeToInternalEvents",
		    value: function _subscribeToInternalEvents() {
		      var _this6 = this;
		      this.on("display_uri", function () {
		        if (_this6._qrcodeModal) {
		          _this6._qrcodeModal.open(_this6.uri, function () {
		            _this6._eventManager.trigger({
		              event: "modal_closed",
		              params: []
		            });
		          }, _this6._qrcodeModalOptions);
		        }
		      });
		      this.on("connect", function () {
		        if (_this6._qrcodeModal) {
		          _this6._qrcodeModal.close();
		        }
		      });
		      this.on("call_request_sent", function (error, payload) {
		        var request = payload.params[0].request;
		        if ((0, utils_1.isMobile)() && _this6._signingMethods.includes(request.method)) {
		          var mobileLinkUrl = (0, utils_1.getLocal)(utils_1.mobileLinkChoiceKey);
		          if (mobileLinkUrl) {
		            window.location.href = mobileLinkUrl.href;
		          }
		        }
		      });
		      this.on("wc_sessionRequest", function (error, payload) {
		        if (error) {
		          _this6._eventManager.trigger({
		            event: "error",
		            params: [{
		              code: "SESSION_REQUEST_ERROR",
		              message: error.toString()
		            }]
		          });
		        }
		        _this6.handshakeId = payload.id;
		        _this6.peerId = payload.params[0].peerId;
		        _this6.peerMeta = payload.params[0].peerMeta;
		        var internalPayload = Object.assign(Object.assign({}, payload), {
		          method: "session_request"
		        });
		        _this6._eventManager.trigger(internalPayload);
		      });
		      this.on("wc_sessionUpdate", function (error, payload) {
		        if (error) {
		          _this6._handleSessionResponse(error.message);
		        }
		        _this6._handleSessionResponse("Session disconnected", payload.params[0]);
		      });
		    }
		  }, {
		    key: "_initTransport",
		    value: function _initTransport() {
		      var _this7 = this;
		      this._transport.on("message", function (socketMessage) {
		        return _this7._handleIncomingMessages(socketMessage);
		      });
		      this._transport.on("open", function () {
		        return _this7._eventManager.trigger({
		          event: "transport_open",
		          params: []
		        });
		      });
		      this._transport.on("close", function () {
		        return _this7._eventManager.trigger({
		          event: "transport_close",
		          params: []
		        });
		      });
		      this._transport.on("error", function () {
		        return _this7._eventManager.trigger({
		          event: "transport_error",
		          params: ["Websocket connection failed"]
		        });
		      });
		      this._transport.open();
		    }
		  }, {
		    key: "_formatUri",
		    value: function _formatUri() {
		      var protocol = this.protocol;
		      var handshakeTopic = this.handshakeTopic;
		      var version = this.version;
		      var bridge = encodeURIComponent(this.bridge);
		      var key = this.key;
		      var uri = "".concat(protocol, ":").concat(handshakeTopic, "@").concat(version, "?bridge=").concat(bridge, "&key=").concat(key);
		      return uri;
		    }
		  }, {
		    key: "_parseUri",
		    value: function _parseUri(uri) {
		      var result = (0, utils_1.parseWalletConnectUri)(uri);
		      if (result.protocol === this.protocol) {
		        if (!result.handshakeTopic) {
		          throw Error("Invalid or missing handshakeTopic parameter value");
		        }
		        var handshakeTopic = result.handshakeTopic;
		        if (!result.bridge) {
		          throw Error("Invalid or missing bridge url parameter value");
		        }
		        var bridge = decodeURIComponent(result.bridge);
		        if (!result.key) {
		          throw Error("Invalid or missing key parameter value");
		        }
		        var key = result.key;
		        return {
		          handshakeTopic: handshakeTopic,
		          bridge: bridge,
		          key: key
		        };
		      } else {
		        throw new Error(errors_1.ERROR_INVALID_URI);
		      }
		    }
		  }, {
		    key: "_generateKey",
		    value: function _generateKey() {
		      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {
		        var result;
		        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
		          while (1) {
		            switch (_context17.prev = _context17.next) {
		              case 0:
		                if (!this._cryptoLib) {
		                  _context17.next = 5;
		                  break;
		                }
		                _context17.next = 3;
		                return this._cryptoLib.generateKey();
		              case 3:
		                result = _context17.sent;
		                return _context17.abrupt("return", result);
		              case 5:
		                return _context17.abrupt("return", null);
		              case 6:
		              case "end":
		                return _context17.stop();
		            }
		          }
		        }, _callee17, this);
		      }));
		    }
		  }, {
		    key: "_encrypt",
		    value: function _encrypt(data) {
		      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {
		        var key, result;
		        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
		          while (1) {
		            switch (_context18.prev = _context18.next) {
		              case 0:
		                key = this._key;
		                if (!(this._cryptoLib && key)) {
		                  _context18.next = 6;
		                  break;
		                }
		                _context18.next = 4;
		                return this._cryptoLib.encrypt(data, key);
		              case 4:
		                result = _context18.sent;
		                return _context18.abrupt("return", result);
		              case 6:
		                return _context18.abrupt("return", null);
		              case 7:
		              case "end":
		                return _context18.stop();
		            }
		          }
		        }, _callee18, this);
		      }));
		    }
		  }, {
		    key: "_decrypt",
		    value: function _decrypt(payload) {
		      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {
		        var key, result;
		        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
		          while (1) {
		            switch (_context19.prev = _context19.next) {
		              case 0:
		                key = this._key;
		                if (!(this._cryptoLib && key)) {
		                  _context19.next = 6;
		                  break;
		                }
		                _context19.next = 4;
		                return this._cryptoLib.decrypt(payload, key);
		              case 4:
		                result = _context19.sent;
		                return _context19.abrupt("return", result);
		              case 6:
		                return _context19.abrupt("return", null);
		              case 7:
		              case "end":
		                return _context19.stop();
		            }
		          }
		        }, _callee19, this);
		      }));
		    }
		  }, {
		    key: "_getStorageSession",
		    value: function _getStorageSession() {
		      var result = null;
		      if (this._sessionStorage) {
		        result = this._sessionStorage.getSession();
		      }
		      return result;
		    }
		  }, {
		    key: "_setStorageSession",
		    value: function _setStorageSession() {
		      if (this._sessionStorage) {
		        this._sessionStorage.setSession(this.session);
		      }
		    }
		  }, {
		    key: "_removeStorageSession",
		    value: function _removeStorageSession() {
		      if (this._sessionStorage) {
		        this._sessionStorage.removeSession();
		      }
		    }
		  }, {
		    key: "_manageStorageSession",
		    value: function _manageStorageSession() {
		      if (this._connected) {
		        this._setStorageSession();
		      } else {
		        this._removeStorageSession();
		      }
		    }
		  }, {
		    key: "_registerPushServer",
		    value: function _registerPushServer(pushServerOpts) {
		      var _this8 = this;
		      if (!pushServerOpts.url || typeof pushServerOpts.url !== "string") {
		        throw Error("Invalid or missing pushServerOpts.url parameter value");
		      }
		      if (!pushServerOpts.type || typeof pushServerOpts.type !== "string") {
		        throw Error("Invalid or missing pushServerOpts.type parameter value");
		      }
		      if (!pushServerOpts.token || typeof pushServerOpts.token !== "string") {
		        throw Error("Invalid or missing pushServerOpts.token parameter value");
		      }
		      var pushSubscription = {
		        bridge: this.bridge,
		        topic: this.clientId,
		        type: pushServerOpts.type,
		        token: pushServerOpts.token,
		        peerName: "",
		        language: pushServerOpts.language || ""
		      };
		      this.on("connect", function (error, payload) {
		        return tslib_1.__awaiter(_this8, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {
		          var peerName, response, json;
		          return _regeneratorRuntime.wrap(function _callee20$(_context20) {
		            while (1) {
		              switch (_context20.prev = _context20.next) {
		                case 0:
		                  if (!error) {
		                    _context20.next = 2;
		                    break;
		                  }
		                  throw error;
		                case 2:
		                  if (pushServerOpts.peerMeta) {
		                    peerName = payload.params[0].peerMeta.name;
		                    pushSubscription.peerName = peerName;
		                  }
		                  _context20.prev = 3;
		                  _context20.next = 6;
		                  return fetch("".concat(pushServerOpts.url, "/new"), {
		                    method: "POST",
		                    headers: {
		                      Accept: "application/json",
		                      "Content-Type": "application/json"
		                    },
		                    body: JSON.stringify(pushSubscription)
		                  });
		                case 6:
		                  response = _context20.sent;
		                  _context20.next = 9;
		                  return response.json();
		                case 9:
		                  json = _context20.sent;
		                  if (json.success) {
		                    _context20.next = 12;
		                    break;
		                  }
		                  throw Error("Failed to register in Push Server");
		                case 12:
		                  _context20.next = 17;
		                  break;
		                case 14:
		                  _context20.prev = 14;
		                  _context20.t0 = _context20["catch"](3);
		                  throw Error("Failed to register in Push Server");
		                case 17:
		                case "end":
		                  return _context20.stop();
		              }
		            }
		          }, _callee20, null, [[3, 14]]);
		        }));
		      });
		    }
		  }]);
		  return Connector;
		}();
		exports["default"] = Connector;
} (cjs$9));
	return cjs$9;
}

var cjs$2 = {};

var node$3 = {};

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var _extendStatics$1 = function extendStatics(d, b) {
  _extendStatics$1 = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) {
      if (b.hasOwnProperty(p)) d[p] = b[p];
    }
  };
  return _extendStatics$1(d, b);
};
function __extends$1(d, b) {
  _extendStatics$1(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var _assign$1 = function __assign() {
  _assign$1 = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return _assign$1.apply(this, arguments);
};
function __rest$1(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __decorate$1(decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param$1(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata$1(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter$1(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator$1(thisArg, body) {
  var _ = {
      label: 0,
      sent: function sent() {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
    f,
    y,
    t,
    g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;
  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}
function __createBinding$1(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
}
function __exportStar$1(m, exports) {
  for (var p in m) {
    if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
  }
}
function __values$1(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
    m = s && o[s],
    i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function next() {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read$1(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
    r,
    ar = [],
    e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}
function __spread$1() {
  for (var ar = [], i = 0; i < arguments.length; i++) {
    ar = ar.concat(__read$1(arguments[i]));
  }
  return ar;
}
function __spreadArrays$1() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }
  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }
  return r;
}
function __await$1(v) {
  return this instanceof __await$1 ? (this.v = v, this) : new __await$1(v);
}
function __asyncGenerator$1(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
    i,
    q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;
  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await$1 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator$1(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await$1(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues$1(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
    i;
  return m ? m.call(o) : (o = typeof __values$1 === "function" ? __values$1(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}
function __makeTemplateObject$1(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar$1(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
}
function __importDefault$1(mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
}
function __classPrivateFieldGet$1(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet$1(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}

var tslib_es6$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  __extends: __extends$1,
  get __assign () { return _assign$1; },
  __rest: __rest$1,
  __decorate: __decorate$1,
  __param: __param$1,
  __metadata: __metadata$1,
  __awaiter: __awaiter$1,
  __generator: __generator$1,
  __createBinding: __createBinding$1,
  __exportStar: __exportStar$1,
  __values: __values$1,
  __read: __read$1,
  __spread: __spread$1,
  __spreadArrays: __spreadArrays$1,
  __await: __await$1,
  __asyncGenerator: __asyncGenerator$1,
  __asyncDelegator: __asyncDelegator$1,
  __asyncValues: __asyncValues$1,
  __makeTemplateObject: __makeTemplateObject$1,
  __importStar: __importStar$1,
  __importDefault: __importDefault$1,
  __classPrivateFieldGet: __classPrivateFieldGet$1,
  __classPrivateFieldSet: __classPrivateFieldSet$1
});

var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(tslib_es6$1);

var node$2 = {};

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var _extendStatics = function extendStatics(d, b) {
  _extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) {
      if (b.hasOwnProperty(p)) d[p] = b[p];
    }
  };
  return _extendStatics(d, b);
};
function __extends(d, b) {
  _extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var _assign = function __assign() {
  _assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return _assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = {
      label: 0,
      sent: function sent() {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
    f,
    y,
    t,
    g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;
  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}
function __createBinding(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
}
function __exportStar(m, exports) {
  for (var p in m) {
    if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
  }
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
    m = s && o[s],
    i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function next() {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
    r,
    ar = [],
    e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) {
    ar = ar.concat(__read(arguments[i]));
  }
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }
  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }
  return r;
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
    i,
    q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;
  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
    i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
}
function __classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}

var tslib_es6 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  __extends: __extends,
  get __assign () { return _assign; },
  __rest: __rest,
  __decorate: __decorate,
  __param: __param,
  __metadata: __metadata,
  __awaiter: __awaiter,
  __generator: __generator,
  __createBinding: __createBinding,
  __exportStar: __exportStar,
  __values: __values,
  __read: __read,
  __spread: __spread,
  __spreadArrays: __spreadArrays,
  __await: __await,
  __asyncGenerator: __asyncGenerator,
  __asyncDelegator: __asyncDelegator,
  __asyncValues: __asyncValues,
  __makeTemplateObject: __makeTemplateObject,
  __importStar: __importStar,
  __importDefault: __importDefault,
  __classPrivateFieldGet: __classPrivateFieldGet,
  __classPrivateFieldSet: __classPrivateFieldSet
});

var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(tslib_es6);

var hasRequiredNode$3;

function requireNode$3 () {
	if (hasRequiredNode$3) return node$2;
	hasRequiredNode$3 = 1;

	Object.defineProperty(node$2, "__esModule", {
	  value: true
	});
	node$2.randomBytes = void 0;
	var tslib_1 = require$$0$1;
	var crypto_1 = tslib_1.__importDefault(require$$12__default["default"]);
	var encoding_1 = require$$3;
	function randomBytes(length) {
	  var buf = crypto_1["default"].randomBytes(length);
	  return encoding_1.bufferToArray(buf);
	}
	node$2.randomBytes = randomBytes;
	return node$2;
}

var aes = {};

var node$1 = {};

var constants$2 = {};

var _default = {};

var length = {};

var hasRequiredLength;

function requireLength () {
	if (hasRequiredLength) return length;
	hasRequiredLength = 1;

	Object.defineProperty(length, "__esModule", {
	  value: true
	});
	length.LENGTH_1024 = length.LENGTH_512 = length.LENGTH_256 = length.LENGTH_128 = length.LENGTH_64 = length.LENGTH_32 = length.LENGTH_16 = length.LENGTH_1 = length.LENGTH_0 = void 0;
	length.LENGTH_0 = 0;
	length.LENGTH_1 = 1;
	length.LENGTH_16 = 16;
	length.LENGTH_32 = 32;
	length.LENGTH_64 = 64;
	length.LENGTH_128 = 128;
	length.LENGTH_256 = 256;
	length.LENGTH_512 = 512;
	length.LENGTH_1024 = 1024;
	return length;
}

var hasRequired_default;

function require_default () {
	if (hasRequired_default) return _default;
	hasRequired_default = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.MAC_LENGTH = exports.IV_LENGTH = exports.KEY_LENGTH = exports.PREFIX_LENGTH = exports.RIPEMD160_NODE_ALGO = exports.SHA512_NODE_ALGO = exports.SHA256_NODE_ALGO = exports.HMAC_NODE_ALGO = exports.AES_NODE_ALGO = exports.SHA512_BROWSER_ALGO = exports.SHA256_BROWSER_ALGO = exports.HMAC_BROWSER = exports.HMAC_BROWSER_ALGO = exports.AES_BROWSER_ALGO = exports.HMAC_LENGTH = exports.AES_LENGTH = void 0;
		var length_1 = requireLength();
		exports.AES_LENGTH = length_1.LENGTH_256;
		exports.HMAC_LENGTH = length_1.LENGTH_256;
		exports.AES_BROWSER_ALGO = "AES-CBC";
		exports.HMAC_BROWSER_ALGO = "SHA-".concat(exports.AES_LENGTH);
		exports.HMAC_BROWSER = "HMAC";
		exports.SHA256_BROWSER_ALGO = "SHA-256";
		exports.SHA512_BROWSER_ALGO = "SHA-512";
		exports.AES_NODE_ALGO = "aes-".concat(exports.AES_LENGTH, "-cbc");
		exports.HMAC_NODE_ALGO = "sha".concat(exports.HMAC_LENGTH);
		exports.SHA256_NODE_ALGO = "sha256";
		exports.SHA512_NODE_ALGO = "sha512";
		exports.RIPEMD160_NODE_ALGO = "ripemd160";
		exports.PREFIX_LENGTH = length_1.LENGTH_1;
		exports.KEY_LENGTH = length_1.LENGTH_32;
		exports.IV_LENGTH = length_1.LENGTH_16;
		exports.MAC_LENGTH = length_1.LENGTH_32;
} (_default));
	return _default;
}

var encoding = {};

var hasRequiredEncoding;

function requireEncoding () {
	if (hasRequiredEncoding) return encoding;
	hasRequiredEncoding = 1;

	Object.defineProperty(encoding, "__esModule", {
	  value: true
	});
	encoding.UTF8_ENC = encoding.HEX_ENC = void 0;
	encoding.HEX_ENC = "hex";
	encoding.UTF8_ENC = "utf8";
	return encoding;
}

var error = {};

var hasRequiredError;

function requireError () {
	if (hasRequiredError) return error;
	hasRequiredError = 1;

	Object.defineProperty(error, "__esModule", {
	  value: true
	});
	error.ERROR_BAD_MAC = void 0;
	error.ERROR_BAD_MAC = "Bad MAC";
	return error;
}

var operations = {};

var hasRequiredOperations;

function requireOperations () {
	if (hasRequiredOperations) return operations;
	hasRequiredOperations = 1;

	Object.defineProperty(operations, "__esModule", {
	  value: true
	});
	operations.VERIFY_OP = operations.SIGN_OP = operations.DECRYPT_OP = operations.ENCRYPT_OP = void 0;
	operations.ENCRYPT_OP = "encrypt";
	operations.DECRYPT_OP = "decrypt";
	operations.SIGN_OP = "sign";
	operations.VERIFY_OP = "verify";
	return operations;
}

var hasRequiredConstants$2;

function requireConstants$2 () {
	if (hasRequiredConstants$2) return constants$2;
	hasRequiredConstants$2 = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var tslib_1 = require$$0$2;
		tslib_1.__exportStar(require_default(), exports);
		tslib_1.__exportStar(requireEncoding(), exports);
		tslib_1.__exportStar(requireError(), exports);
		tslib_1.__exportStar(requireLength(), exports);
		tslib_1.__exportStar(requireOperations(), exports);
} (constants$2));
	return constants$2;
}

var hasRequiredNode$2;

function requireNode$2 () {
	if (hasRequiredNode$2) return node$1;
	hasRequiredNode$2 = 1;

	Object.defineProperty(node$1, "__esModule", {
	  value: true
	});
	node$1.nodeRipemd160 = node$1.nodeSha512 = node$1.nodeSha256 = node$1.nodeHmacSha512Sign = node$1.nodeHmacSha256Sign = node$1.nodeAesDecrypt = node$1.nodeAesEncrypt = void 0;
	var tslib_1 = require$$0$2;
	var crypto_1 = tslib_1.__importDefault(require$$12__default["default"]);
	var encoding_1 = require$$3;
	var constants_1 = requireConstants$2();
	function nodeAesEncrypt(iv, key, data) {
	  var cipher = crypto_1["default"].createCipheriv(constants_1.AES_NODE_ALGO, Buffer.from(key), Buffer.from(iv));
	  return encoding_1.bufferToArray(encoding_1.concatBuffers(cipher.update(Buffer.from(data)), cipher["final"]()));
	}
	node$1.nodeAesEncrypt = nodeAesEncrypt;
	function nodeAesDecrypt(iv, key, data) {
	  var decipher = crypto_1["default"].createDecipheriv(constants_1.AES_NODE_ALGO, Buffer.from(key), Buffer.from(iv));
	  return encoding_1.bufferToArray(encoding_1.concatBuffers(decipher.update(Buffer.from(data)), decipher["final"]()));
	}
	node$1.nodeAesDecrypt = nodeAesDecrypt;
	function nodeHmacSha256Sign(key, data) {
	  var buf = crypto_1["default"].createHmac(constants_1.HMAC_NODE_ALGO, Buffer.from(key)).update(Buffer.from(data)).digest();
	  return encoding_1.bufferToArray(buf);
	}
	node$1.nodeHmacSha256Sign = nodeHmacSha256Sign;
	function nodeHmacSha512Sign(key, data) {
	  var buf = crypto_1["default"].createHmac(constants_1.SHA512_NODE_ALGO, Buffer.from(key)).update(Buffer.from(data)).digest();
	  return encoding_1.bufferToArray(buf);
	}
	node$1.nodeHmacSha512Sign = nodeHmacSha512Sign;
	function nodeSha256(data) {
	  var buf = crypto_1["default"].createHash(constants_1.SHA256_NODE_ALGO).update(Buffer.from(data)).digest();
	  return encoding_1.bufferToArray(buf);
	}
	node$1.nodeSha256 = nodeSha256;
	function nodeSha512(data) {
	  var buf = crypto_1["default"].createHash(constants_1.SHA512_NODE_ALGO).update(Buffer.from(data)).digest();
	  return encoding_1.bufferToArray(buf);
	}
	node$1.nodeSha512 = nodeSha512;
	function nodeRipemd160(data) {
	  var buf = crypto_1["default"].createHash(constants_1.RIPEMD160_NODE_ALGO).update(Buffer.from(data)).digest();
	  return encoding_1.bufferToArray(buf);
	}
	node$1.nodeRipemd160 = nodeRipemd160;
	return node$1;
}

var hasRequiredAes;

function requireAes () {
	if (hasRequiredAes) return aes;
	hasRequiredAes = 1;

	var _regeneratorRuntime = regenerator;
	Object.defineProperty(aes, "__esModule", {
	  value: true
	});
	aes.aesCbcDecrypt = aes.aesCbcEncrypt = void 0;
	var tslib_1 = require$$0$2;
	var node_1 = requireNode$2();
	function aesCbcEncrypt(iv, key, data) {
	  return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
	    var result;
	    return _regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            result = node_1.nodeAesEncrypt(iv, key, data);
	            return _context.abrupt("return", result);
	          case 2:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));
	}
	aes.aesCbcEncrypt = aesCbcEncrypt;
	function aesCbcDecrypt(iv, key, data) {
	  return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
	    var result;
	    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            result = node_1.nodeAesDecrypt(iv, key, data);
	            return _context2.abrupt("return", result);
	          case 2:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2);
	  }));
	}
	aes.aesCbcDecrypt = aesCbcDecrypt;
	return aes;
}

var hmac = {};

var helpers = {};

var env = {};

var hasRequiredEnv;

function requireEnv () {
	if (hasRequiredEnv) return env;
	hasRequiredEnv = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var tslib_1 = require$$0$2;
		tslib_1.__exportStar(cjs$4, exports);
} (env));
	return env;
}

var pkcs7 = {};

var hasRequiredPkcs7;

function requirePkcs7 () {
	if (hasRequiredPkcs7) return pkcs7;
	hasRequiredPkcs7 = 1;

	Object.defineProperty(pkcs7, "__esModule", {
	  value: true
	});
	pkcs7.pkcs7 = void 0;
	var PADDING = [[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16], [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15], [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14], [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13], [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12], [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11], [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], [9, 9, 9, 9, 9, 9, 9, 9, 9], [8, 8, 8, 8, 8, 8, 8, 8], [7, 7, 7, 7, 7, 7, 7], [6, 6, 6, 6, 6, 6], [5, 5, 5, 5, 5], [4, 4, 4, 4], [3, 3, 3], [2, 2], [1]];
	pkcs7.pkcs7 = {
	  pad: function pad(plaintext) {
	    var padding = PADDING[plaintext.byteLength % 16 || 0];
	    var result = new Uint8Array(plaintext.byteLength + padding.length);
	    result.set(plaintext);
	    result.set(padding, plaintext.byteLength);
	    return result;
	  },
	  unpad: function unpad(padded) {
	    return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);
	  }
	};
	return pkcs7;
}

var types = {};

var hasRequiredTypes;

function requireTypes () {
	if (hasRequiredTypes) return types;
	hasRequiredTypes = 1;

	Object.defineProperty(types, "__esModule", {
	  value: true
	});
	return types;
}

var validators = {};

var hasRequiredValidators;

function requireValidators () {
	if (hasRequiredValidators) return validators;
	hasRequiredValidators = 1;

	Object.defineProperty(validators, "__esModule", {
	  value: true
	});
	validators.isConstantTime = validators.assert = void 0;
	function assert(condition, message) {
	  if (!condition) {
	    throw new Error(message || "Assertion failed");
	  }
	}
	validators.assert = assert;
	function isConstantTime(arr1, arr2) {
	  if (arr1.length !== arr2.length) {
	    return false;
	  }
	  var res = 0;
	  for (var i = 0; i < arr1.length; i++) {
	    res |= arr1[i] ^ arr2[i];
	  }
	  return res === 0;
	}
	validators.isConstantTime = isConstantTime;
	return validators;
}

var hasRequiredHelpers;

function requireHelpers () {
	if (hasRequiredHelpers) return helpers;
	hasRequiredHelpers = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var tslib_1 = require$$0$2;
		tslib_1.__exportStar(requireEnv(), exports);
		tslib_1.__exportStar(requirePkcs7(), exports);
		tslib_1.__exportStar(requireTypes(), exports);
		tslib_1.__exportStar(requireValidators(), exports);
} (helpers));
	return helpers;
}

var hasRequiredHmac;

function requireHmac () {
	if (hasRequiredHmac) return hmac;
	hasRequiredHmac = 1;

	var _regeneratorRuntime = regenerator;
	Object.defineProperty(hmac, "__esModule", {
	  value: true
	});
	hmac.hmacSha512Verify = hmac.hmacSha512Sign = hmac.hmacSha256Verify = hmac.hmacSha256Sign = void 0;
	var tslib_1 = require$$0$2;
	var helpers_1 = requireHelpers();
	var node_1 = requireNode$2();
	function hmacSha256Sign(key, msg) {
	  return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
	    var result;
	    return _regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            result = node_1.nodeHmacSha256Sign(key, msg);
	            return _context.abrupt("return", result);
	          case 2:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));
	}
	hmac.hmacSha256Sign = hmacSha256Sign;
	function hmacSha256Verify(key, msg, sig) {
	  return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
	    var expectedSig, result;
	    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            expectedSig = node_1.nodeHmacSha256Sign(key, msg);
	            result = helpers_1.isConstantTime(expectedSig, sig);
	            return _context2.abrupt("return", result);
	          case 3:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2);
	  }));
	}
	hmac.hmacSha256Verify = hmacSha256Verify;
	function hmacSha512Sign(key, msg) {
	  return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
	    var result;
	    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
	      while (1) {
	        switch (_context3.prev = _context3.next) {
	          case 0:
	            result = node_1.nodeHmacSha512Sign(key, msg);
	            return _context3.abrupt("return", result);
	          case 2:
	          case "end":
	            return _context3.stop();
	        }
	      }
	    }, _callee3);
	  }));
	}
	hmac.hmacSha512Sign = hmacSha512Sign;
	function hmacSha512Verify(key, msg, sig) {
	  return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
	    var expectedSig, result;
	    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
	      while (1) {
	        switch (_context4.prev = _context4.next) {
	          case 0:
	            expectedSig = node_1.nodeHmacSha512Sign(key, msg);
	            result = helpers_1.isConstantTime(expectedSig, sig);
	            return _context4.abrupt("return", result);
	          case 3:
	          case "end":
	            return _context4.stop();
	        }
	      }
	    }, _callee4);
	  }));
	}
	hmac.hmacSha512Verify = hmacSha512Verify;
	return hmac;
}

var sha2 = {};

var hasRequiredSha2;

function requireSha2 () {
	if (hasRequiredSha2) return sha2;
	hasRequiredSha2 = 1;

	var _regeneratorRuntime = regenerator;
	Object.defineProperty(sha2, "__esModule", {
	  value: true
	});
	sha2.ripemd160 = sha2.sha512 = sha2.sha256 = void 0;
	var tslib_1 = require$$0$2;
	var node_1 = requireNode$2();
	function sha256(msg) {
	  return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
	    var result;
	    return _regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            result = node_1.nodeSha256(msg);
	            return _context.abrupt("return", result);
	          case 2:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));
	}
	sha2.sha256 = sha256;
	function sha512(msg) {
	  return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
	    var result;
	    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            result = node_1.nodeSha512(msg);
	            return _context2.abrupt("return", result);
	          case 2:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2);
	  }));
	}
	sha2.sha512 = sha512;
	function ripemd160(msg) {
	  return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
	    var result;
	    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
	      while (1) {
	        switch (_context3.prev = _context3.next) {
	          case 0:
	            result = node_1.nodeRipemd160(msg);
	            return _context3.abrupt("return", result);
	          case 2:
	          case "end":
	            return _context3.stop();
	        }
	      }
	    }, _callee3);
	  }));
	}
	sha2.ripemd160 = ripemd160;
	return sha2;
}

var hasRequiredNode$1;

function requireNode$1 () {
	if (hasRequiredNode$1) return node$3;
	hasRequiredNode$1 = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var tslib_1 = require$$0$2;
		tslib_1.__exportStar(requireNode$3(), exports);
		tslib_1.__exportStar(requireAes(), exports);
		tslib_1.__exportStar(requireHmac(), exports);
		tslib_1.__exportStar(requireSha2(), exports);
		tslib_1.__exportStar(requireHelpers(), exports);
		tslib_1.__exportStar(requireConstants$2(), exports);
} (node$3));
	return node$3;
}

var hasRequiredCjs$3;

function requireCjs$3 () {
	if (hasRequiredCjs$3) return cjs$2;
	hasRequiredCjs$3 = 1;

	var _regeneratorRuntime = regenerator;
	Object.defineProperty(cjs$2, "__esModule", {
	  value: true
	});
	cjs$2.decrypt = cjs$2.encrypt = cjs$2.verifyHmac = cjs$2.generateKey = void 0;
	var tslib_1 = require$$7;
	var crypto = tslib_1.__importStar(requireNode$1());
	var encoding = tslib_1.__importStar(require$$3);
	var utils_1 = requireCjs$6();
	function generateKey(length) {
	  return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
	    var _length, bytes, result;
	    return _regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _length = (length || 256) / 8;
	            bytes = crypto.randomBytes(_length);
	            result = (0, utils_1.convertBufferToArrayBuffer)(encoding.arrayToBuffer(bytes));
	            return _context.abrupt("return", result);
	          case 4:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));
	}
	cjs$2.generateKey = generateKey;
	function verifyHmac(payload, key) {
	  return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
	    var cipherText, iv, hmac, hmacHex, unsigned, chmac, chmacHex;
	    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            cipherText = encoding.hexToArray(payload.data);
	            iv = encoding.hexToArray(payload.iv);
	            hmac = encoding.hexToArray(payload.hmac);
	            hmacHex = encoding.arrayToHex(hmac, false);
	            unsigned = encoding.concatArrays(cipherText, iv);
	            _context2.next = 7;
	            return crypto.hmacSha256Sign(key, unsigned);
	          case 7:
	            chmac = _context2.sent;
	            chmacHex = encoding.arrayToHex(chmac, false);
	            if (!(encoding.removeHexPrefix(hmacHex) === encoding.removeHexPrefix(chmacHex))) {
	              _context2.next = 11;
	              break;
	            }
	            return _context2.abrupt("return", true);
	          case 11:
	            return _context2.abrupt("return", false);
	          case 12:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2);
	  }));
	}
	cjs$2.verifyHmac = verifyHmac;
	function encrypt(data, key, providedIv) {
	  return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
	    var _key, ivArrayBuffer, iv, ivHex, contentString, content, cipherText, cipherTextHex, unsigned, hmac, hmacHex;
	    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
	      while (1) {
	        switch (_context3.prev = _context3.next) {
	          case 0:
	            _key = encoding.bufferToArray((0, utils_1.convertArrayBufferToBuffer)(key));
	            _context3.t0 = providedIv;
	            if (_context3.t0) {
	              _context3.next = 6;
	              break;
	            }
	            _context3.next = 5;
	            return generateKey(128);
	          case 5:
	            _context3.t0 = _context3.sent;
	          case 6:
	            ivArrayBuffer = _context3.t0;
	            iv = encoding.bufferToArray((0, utils_1.convertArrayBufferToBuffer)(ivArrayBuffer));
	            ivHex = encoding.arrayToHex(iv, false);
	            contentString = JSON.stringify(data);
	            content = encoding.utf8ToArray(contentString);
	            _context3.next = 13;
	            return crypto.aesCbcEncrypt(iv, _key, content);
	          case 13:
	            cipherText = _context3.sent;
	            cipherTextHex = encoding.arrayToHex(cipherText, false);
	            unsigned = encoding.concatArrays(cipherText, iv);
	            _context3.next = 18;
	            return crypto.hmacSha256Sign(_key, unsigned);
	          case 18:
	            hmac = _context3.sent;
	            hmacHex = encoding.arrayToHex(hmac, false);
	            return _context3.abrupt("return", {
	              data: cipherTextHex,
	              hmac: hmacHex,
	              iv: ivHex
	            });
	          case 21:
	          case "end":
	            return _context3.stop();
	        }
	      }
	    }, _callee3);
	  }));
	}
	cjs$2.encrypt = encrypt;
	function decrypt(payload, key) {
	  return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
	    var _key, verified, cipherText, iv, buffer, utf8, data;
	    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
	      while (1) {
	        switch (_context4.prev = _context4.next) {
	          case 0:
	            _key = encoding.bufferToArray((0, utils_1.convertArrayBufferToBuffer)(key));
	            if (_key) {
	              _context4.next = 3;
	              break;
	            }
	            throw new Error("Missing key: required for decryption");
	          case 3:
	            _context4.next = 5;
	            return verifyHmac(payload, _key);
	          case 5:
	            verified = _context4.sent;
	            if (verified) {
	              _context4.next = 8;
	              break;
	            }
	            return _context4.abrupt("return", null);
	          case 8:
	            cipherText = encoding.hexToArray(payload.data);
	            iv = encoding.hexToArray(payload.iv);
	            _context4.next = 12;
	            return crypto.aesCbcDecrypt(iv, _key, cipherText);
	          case 12:
	            buffer = _context4.sent;
	            utf8 = encoding.arrayToUtf8(buffer);
	            _context4.prev = 14;
	            data = JSON.parse(utf8);
	            _context4.next = 21;
	            break;
	          case 18:
	            _context4.prev = 18;
	            _context4.t0 = _context4["catch"](14);
	            return _context4.abrupt("return", null);
	          case 21:
	            return _context4.abrupt("return", data);
	          case 22:
	          case "end":
	            return _context4.stop();
	        }
	      }
	    }, _callee4, null, [[14, 18]]);
	  }));
	}
	cjs$2.decrypt = decrypt;
	return cjs$2;
}

var hasRequiredCjs$2;

function requireCjs$2 () {
	if (hasRequiredCjs$2) return cjs$a;
	hasRequiredCjs$2 = 1;
	(function (exports) {

		var _createClass = createClass.exports;
		var _classCallCheck = classCallCheck.exports;
		var _inherits = inherits.exports;
		var _possibleConstructorReturn = possibleConstructorReturn.exports;
		var _getPrototypeOf = getPrototypeOf.exports;
		function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
		function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var tslib_1 = require$$7;
		var core_1 = tslib_1.__importDefault(requireCjs$4());
		var cryptoLib = tslib_1.__importStar(requireCjs$3());
		var WalletConnect = /*#__PURE__*/function (_core_1$default) {
		  _inherits(WalletConnect, _core_1$default);
		  var _super = _createSuper(WalletConnect);
		  function WalletConnect(connectorOpts, pushServerOpts) {
		    _classCallCheck(this, WalletConnect);
		    return _super.call(this, {
		      cryptoLib: cryptoLib,
		      connectorOpts: connectorOpts,
		      pushServerOpts: pushServerOpts
		    });
		  }
		  return _createClass(WalletConnect);
		}(core_1["default"]);
		exports["default"] = WalletConnect;
} (cjs$a));
	return cjs$a;
}

var lib$4 = {exports: {}};

var server = {};

var canPromise;
var hasRequiredCanPromise;

function requireCanPromise () {
	if (hasRequiredCanPromise) return canPromise;
	hasRequiredCanPromise = 1;
	// can-promise has a crash in some versions of react native that dont have
	// standard global objects
	// https://github.com/soldair/node-qrcode/issues/157

	canPromise = function () {
	  return typeof Promise === 'function' && Promise.prototype && Promise.prototype.then;
	};
	return canPromise;
}

var qrcode = {};

var buffer = {};

/* Node.js 6.4.0 and up has full support */

var bufferFill;
var hasRequiredBufferFill;

function requireBufferFill () {
	if (hasRequiredBufferFill) return bufferFill;
	hasRequiredBufferFill = 1;
	var hasFullSupport = function () {
	  try {
	    if (!Buffer.isEncoding('latin1')) {
	      return false;
	    }
	    var buf = Buffer.alloc ? Buffer.alloc(4) : new Buffer(4);
	    buf.fill('ab', 'ucs2');
	    return buf.toString('hex') === '61006200';
	  } catch (_) {
	    return false;
	  }
	}();
	function isSingleByte(val) {
	  return val.length === 1 && val.charCodeAt(0) < 256;
	}
	function fillWithNumber(buffer, val, start, end) {
	  if (start < 0 || end > buffer.length) {
	    throw new RangeError('Out of range index');
	  }
	  start = start >>> 0;
	  end = end === undefined ? buffer.length : end >>> 0;
	  if (end > start) {
	    buffer.fill(val, start, end);
	  }
	  return buffer;
	}
	function fillWithBuffer(buffer, val, start, end) {
	  if (start < 0 || end > buffer.length) {
	    throw new RangeError('Out of range index');
	  }
	  if (end <= start) {
	    return buffer;
	  }
	  start = start >>> 0;
	  end = end === undefined ? buffer.length : end >>> 0;
	  var pos = start;
	  var len = val.length;
	  while (pos <= end - len) {
	    val.copy(buffer, pos);
	    pos += len;
	  }
	  if (pos !== end) {
	    val.copy(buffer, pos, 0, end - pos);
	  }
	  return buffer;
	}
	function fill(buffer, val, start, end, encoding) {
	  if (hasFullSupport) {
	    return buffer.fill(val, start, end, encoding);
	  }
	  if (typeof val === 'number') {
	    return fillWithNumber(buffer, val, start, end);
	  }
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start;
	      start = 0;
	      end = buffer.length;
	    } else if (typeof end === 'string') {
	      encoding = end;
	      end = buffer.length;
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string');
	    }
	    if (encoding === 'latin1') {
	      encoding = 'binary';
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding);
	    }
	    if (val === '') {
	      return fillWithNumber(buffer, 0, start, end);
	    }
	    if (isSingleByte(val)) {
	      return fillWithNumber(buffer, val.charCodeAt(0), start, end);
	    }
	    val = new Buffer(val, encoding);
	  }
	  if (Buffer.isBuffer(val)) {
	    return fillWithBuffer(buffer, val, start, end);
	  }

	  // Other values (e.g. undefined, boolean, object) results in zero-fill
	  return fillWithNumber(buffer, 0, start, end);
	}
	bufferFill = fill;
	return bufferFill;
}

var bufferAllocUnsafe;
var hasRequiredBufferAllocUnsafe;

function requireBufferAllocUnsafe () {
	if (hasRequiredBufferAllocUnsafe) return bufferAllocUnsafe;
	hasRequiredBufferAllocUnsafe = 1;
	function allocUnsafe(size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number');
	  }
	  if (size < 0) {
	    throw new RangeError('"size" argument must not be negative');
	  }
	  if (Buffer.allocUnsafe) {
	    return Buffer.allocUnsafe(size);
	  } else {
	    return new Buffer(size);
	  }
	}
	bufferAllocUnsafe = allocUnsafe;
	return bufferAllocUnsafe;
}

var bufferAlloc;
var hasRequiredBufferAlloc;

function requireBufferAlloc () {
	if (hasRequiredBufferAlloc) return bufferAlloc;
	hasRequiredBufferAlloc = 1;
	var bufferFill = requireBufferFill();
	var allocUnsafe = requireBufferAllocUnsafe();
	bufferAlloc = function alloc(size, fill, encoding) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number');
	  }
	  if (size < 0) {
	    throw new RangeError('"size" argument must not be negative');
	  }
	  if (Buffer.alloc) {
	    return Buffer.alloc(size, fill, encoding);
	  }
	  var buffer = allocUnsafe(size);
	  if (size === 0) {
	    return buffer;
	  }
	  if (fill === undefined) {
	    return bufferFill(buffer, 0);
	  }
	  if (typeof encoding !== 'string') {
	    encoding = undefined;
	  }
	  return bufferFill(buffer, fill, encoding);
	};
	return bufferAlloc;
}

/* eslint-disable node/no-deprecated-api */

var bufferFrom_1;
var hasRequiredBufferFrom;

function requireBufferFrom () {
	if (hasRequiredBufferFrom) return bufferFrom_1;
	hasRequiredBufferFrom = 1;
	var toString = Object.prototype.toString;
	var isModern = typeof Buffer !== 'undefined' && typeof Buffer.alloc === 'function' && typeof Buffer.allocUnsafe === 'function' && typeof Buffer.from === 'function';
	function isArrayBuffer(input) {
	  return toString.call(input).slice(8, -1) === 'ArrayBuffer';
	}
	function fromArrayBuffer(obj, byteOffset, length) {
	  byteOffset >>>= 0;
	  var maxLength = obj.byteLength - byteOffset;
	  if (maxLength < 0) {
	    throw new RangeError("'offset' is out of bounds");
	  }
	  if (length === undefined) {
	    length = maxLength;
	  } else {
	    length >>>= 0;
	    if (length > maxLength) {
	      throw new RangeError("'length' is out of bounds");
	    }
	  }
	  return isModern ? Buffer.from(obj.slice(byteOffset, byteOffset + length)) : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length)));
	}
	function fromString(string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8';
	  }
	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding');
	  }
	  return isModern ? Buffer.from(string, encoding) : new Buffer(string, encoding);
	}
	function bufferFrom(value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number');
	  }
	  if (isArrayBuffer(value)) {
	    return fromArrayBuffer(value, encodingOrOffset, length);
	  }
	  if (typeof value === 'string') {
	    return fromString(value, encodingOrOffset);
	  }
	  return isModern ? Buffer.from(value) : new Buffer(value);
	}
	bufferFrom_1 = bufferFrom;
	return bufferFrom_1;
}

var hasRequiredBuffer;

function requireBuffer () {
	if (hasRequiredBuffer) return buffer;
	hasRequiredBuffer = 1;
	buffer.alloc = requireBufferAlloc();
	buffer.from = requireBufferFrom();
	return buffer;
}

var utils$4 = {};

var hasRequiredUtils$4;

function requireUtils$4 () {
	if (hasRequiredUtils$4) return utils$4;
	hasRequiredUtils$4 = 1;
	var toSJISFunction;
	var CODEWORDS_COUNT = [0,
	// Not used
	26, 44, 70, 100, 134, 172, 196, 242, 292, 346, 404, 466, 532, 581, 655, 733, 815, 901, 991, 1085, 1156, 1258, 1364, 1474, 1588, 1706, 1828, 1921, 2051, 2185, 2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706];

	/**
	 * Returns the QR Code size for the specified version
	 *
	 * @param  {Number} version QR Code version
	 * @return {Number}         size of QR code
	 */
	utils$4.getSymbolSize = function getSymbolSize(version) {
	  if (!version) throw new Error('"version" cannot be null or undefined');
	  if (version < 1 || version > 40) throw new Error('"version" should be in range from 1 to 40');
	  return version * 4 + 17;
	};

	/**
	 * Returns the total number of codewords used to store data and EC information.
	 *
	 * @param  {Number} version QR Code version
	 * @return {Number}         Data length in bits
	 */
	utils$4.getSymbolTotalCodewords = function getSymbolTotalCodewords(version) {
	  return CODEWORDS_COUNT[version];
	};

	/**
	 * Encode data with Bose-Chaudhuri-Hocquenghem
	 *
	 * @param  {Number} data Value to encode
	 * @return {Number}      Encoded value
	 */
	utils$4.getBCHDigit = function (data) {
	  var digit = 0;
	  while (data !== 0) {
	    digit++;
	    data >>>= 1;
	  }
	  return digit;
	};
	utils$4.setToSJISFunction = function setToSJISFunction(f) {
	  if (typeof f !== 'function') {
	    throw new Error('"toSJISFunc" is not a valid function.');
	  }
	  toSJISFunction = f;
	};
	utils$4.isKanjiModeEnabled = function () {
	  return typeof toSJISFunction !== 'undefined';
	};
	utils$4.toSJIS = function toSJIS(kanji) {
	  return toSJISFunction(kanji);
	};
	return utils$4;
}

var errorCorrectionLevel = {};

var hasRequiredErrorCorrectionLevel;

function requireErrorCorrectionLevel () {
	if (hasRequiredErrorCorrectionLevel) return errorCorrectionLevel;
	hasRequiredErrorCorrectionLevel = 1;
	(function (exports) {
		exports.L = {
		  bit: 1
		};
		exports.M = {
		  bit: 0
		};
		exports.Q = {
		  bit: 3
		};
		exports.H = {
		  bit: 2
		};
		function fromString(string) {
		  if (typeof string !== 'string') {
		    throw new Error('Param is not a string');
		  }
		  var lcStr = string.toLowerCase();
		  switch (lcStr) {
		    case 'l':
		    case 'low':
		      return exports.L;
		    case 'm':
		    case 'medium':
		      return exports.M;
		    case 'q':
		    case 'quartile':
		      return exports.Q;
		    case 'h':
		    case 'high':
		      return exports.H;
		    default:
		      throw new Error('Unknown EC Level: ' + string);
		  }
		}
		exports.isValid = function isValid(level) {
		  return level && typeof level.bit !== 'undefined' && level.bit >= 0 && level.bit < 4;
		};
		exports.from = function from(value, defaultValue) {
		  if (exports.isValid(value)) {
		    return value;
		  }
		  try {
		    return fromString(value);
		  } catch (e) {
		    return defaultValue;
		  }
		};
} (errorCorrectionLevel));
	return errorCorrectionLevel;
}

var bitBuffer;
var hasRequiredBitBuffer;

function requireBitBuffer () {
	if (hasRequiredBitBuffer) return bitBuffer;
	hasRequiredBitBuffer = 1;
	function BitBuffer() {
	  this.buffer = [];
	  this.length = 0;
	}
	BitBuffer.prototype = {
	  get: function get(index) {
	    var bufIndex = Math.floor(index / 8);
	    return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) === 1;
	  },
	  put: function put(num, length) {
	    for (var i = 0; i < length; i++) {
	      this.putBit((num >>> length - i - 1 & 1) === 1);
	    }
	  },
	  getLengthInBits: function getLengthInBits() {
	    return this.length;
	  },
	  putBit: function putBit(bit) {
	    var bufIndex = Math.floor(this.length / 8);
	    if (this.buffer.length <= bufIndex) {
	      this.buffer.push(0);
	    }
	    if (bit) {
	      this.buffer[bufIndex] |= 0x80 >>> this.length % 8;
	    }
	    this.length++;
	  }
	};
	bitBuffer = BitBuffer;
	return bitBuffer;
}

var bitMatrix;
var hasRequiredBitMatrix;

function requireBitMatrix () {
	if (hasRequiredBitMatrix) return bitMatrix;
	hasRequiredBitMatrix = 1;
	var BufferUtil = requireBuffer();

	/**
	 * Helper class to handle QR Code symbol modules
	 *
	 * @param {Number} size Symbol size
	 */
	function BitMatrix(size) {
	  if (!size || size < 1) {
	    throw new Error('BitMatrix size must be defined and greater than 0');
	  }
	  this.size = size;
	  this.data = BufferUtil.alloc(size * size);
	  this.reservedBit = BufferUtil.alloc(size * size);
	}

	/**
	 * Set bit value at specified location
	 * If reserved flag is set, this bit will be ignored during masking process
	 *
	 * @param {Number}  row
	 * @param {Number}  col
	 * @param {Boolean} value
	 * @param {Boolean} reserved
	 */
	BitMatrix.prototype.set = function (row, col, value, reserved) {
	  var index = row * this.size + col;
	  this.data[index] = value;
	  if (reserved) this.reservedBit[index] = true;
	};

	/**
	 * Returns bit value at specified location
	 *
	 * @param  {Number}  row
	 * @param  {Number}  col
	 * @return {Boolean}
	 */
	BitMatrix.prototype.get = function (row, col) {
	  return this.data[row * this.size + col];
	};

	/**
	 * Applies xor operator at specified location
	 * (used during masking process)
	 *
	 * @param {Number}  row
	 * @param {Number}  col
	 * @param {Boolean} value
	 */
	BitMatrix.prototype.xor = function (row, col, value) {
	  this.data[row * this.size + col] ^= value;
	};

	/**
	 * Check if bit at specified location is reserved
	 *
	 * @param {Number}   row
	 * @param {Number}   col
	 * @return {Boolean}
	 */
	BitMatrix.prototype.isReserved = function (row, col) {
	  return this.reservedBit[row * this.size + col];
	};
	bitMatrix = BitMatrix;
	return bitMatrix;
}

var alignmentPattern = {};

/**
 * Alignment pattern are fixed reference pattern in defined positions
 * in a matrix symbology, which enables the decode software to re-synchronise
 * the coordinate mapping of the image modules in the event of moderate amounts
 * of distortion of the image.
 *
 * Alignment patterns are present only in QR Code symbols of version 2 or larger
 * and their number depends on the symbol version.
 */

var hasRequiredAlignmentPattern;

function requireAlignmentPattern () {
	if (hasRequiredAlignmentPattern) return alignmentPattern;
	hasRequiredAlignmentPattern = 1;
	(function (exports) {
		var getSymbolSize = requireUtils$4().getSymbolSize;

		/**
		 * Calculate the row/column coordinates of the center module of each alignment pattern
		 * for the specified QR Code version.
		 *
		 * The alignment patterns are positioned symmetrically on either side of the diagonal
		 * running from the top left corner of the symbol to the bottom right corner.
		 *
		 * Since positions are simmetrical only half of the coordinates are returned.
		 * Each item of the array will represent in turn the x and y coordinate.
		 * @see {@link getPositions}
		 *
		 * @param  {Number} version QR Code version
		 * @return {Array}          Array of coordinate
		 */
		exports.getRowColCoords = function getRowColCoords(version) {
		  if (version === 1) return [];
		  var posCount = Math.floor(version / 7) + 2;
		  var size = getSymbolSize(version);
		  var intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2;
		  var positions = [size - 7]; // Last coord is always (size - 7)

		  for (var i = 1; i < posCount - 1; i++) {
		    positions[i] = positions[i - 1] - intervals;
		  }
		  positions.push(6); // First coord is always 6

		  return positions.reverse();
		};

		/**
		 * Returns an array containing the positions of each alignment pattern.
		 * Each array's element represent the center point of the pattern as (x, y) coordinates
		 *
		 * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}
		 * and filtering out the items that overlaps with finder pattern
		 *
		 * @example
		 * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.
		 * The alignment patterns, therefore, are to be centered on (row, column)
		 * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).
		 * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns
		 * and are not therefore used for alignment patterns.
		 *
		 * var pos = getPositions(7)
		 * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]
		 *
		 * @param  {Number} version QR Code version
		 * @return {Array}          Array of coordinates
		 */
		exports.getPositions = function getPositions(version) {
		  var coords = [];
		  var pos = exports.getRowColCoords(version);
		  var posLength = pos.length;
		  for (var i = 0; i < posLength; i++) {
		    for (var j = 0; j < posLength; j++) {
		      // Skip if position is occupied by finder patterns
		      if (i === 0 && j === 0 ||
		      // top-left
		      i === 0 && j === posLength - 1 ||
		      // bottom-left
		      i === posLength - 1 && j === 0) {
		        // top-right
		        continue;
		      }
		      coords.push([pos[i], pos[j]]);
		    }
		  }
		  return coords;
		};
} (alignmentPattern));
	return alignmentPattern;
}

var finderPattern = {};

var hasRequiredFinderPattern;

function requireFinderPattern () {
	if (hasRequiredFinderPattern) return finderPattern;
	hasRequiredFinderPattern = 1;
	var getSymbolSize = requireUtils$4().getSymbolSize;
	var FINDER_PATTERN_SIZE = 7;

	/**
	 * Returns an array containing the positions of each finder pattern.
	 * Each array's element represent the top-left point of the pattern as (x, y) coordinates
	 *
	 * @param  {Number} version QR Code version
	 * @return {Array}          Array of coordinates
	 */
	finderPattern.getPositions = function getPositions(version) {
	  var size = getSymbolSize(version);
	  return [
	  // top-left
	  [0, 0],
	  // top-right
	  [size - FINDER_PATTERN_SIZE, 0],
	  // bottom-left
	  [0, size - FINDER_PATTERN_SIZE]];
	};
	return finderPattern;
}

var maskPattern = {};

/**
 * Data mask pattern reference
 * @type {Object}
 */

var hasRequiredMaskPattern;

function requireMaskPattern () {
	if (hasRequiredMaskPattern) return maskPattern;
	hasRequiredMaskPattern = 1;
	(function (exports) {
		exports.Patterns = {
		  PATTERN000: 0,
		  PATTERN001: 1,
		  PATTERN010: 2,
		  PATTERN011: 3,
		  PATTERN100: 4,
		  PATTERN101: 5,
		  PATTERN110: 6,
		  PATTERN111: 7
		};

		/**
		 * Weighted penalty scores for the undesirable features
		 * @type {Object}
		 */
		var PenaltyScores = {
		  N1: 3,
		  N2: 3,
		  N3: 40,
		  N4: 10
		};

		/**
		 * Check if mask pattern value is valid
		 *
		 * @param  {Number}  mask    Mask pattern
		 * @return {Boolean}         true if valid, false otherwise
		 */
		exports.isValid = function isValid(mask) {
		  return mask != null && mask !== '' && !isNaN(mask) && mask >= 0 && mask <= 7;
		};

		/**
		 * Returns mask pattern from a value.
		 * If value is not valid, returns undefined
		 *
		 * @param  {Number|String} value        Mask pattern value
		 * @return {Number}                     Valid mask pattern or undefined
		 */
		exports.from = function from(value) {
		  return exports.isValid(value) ? parseInt(value, 10) : undefined;
		};

		/**
		* Find adjacent modules in row/column with the same color
		* and assign a penalty value.
		*
		* Points: N1 + i
		* i is the amount by which the number of adjacent modules of the same color exceeds 5
		*/
		exports.getPenaltyN1 = function getPenaltyN1(data) {
		  var size = data.size;
		  var points = 0;
		  var sameCountCol = 0;
		  var sameCountRow = 0;
		  var lastCol = null;
		  var lastRow = null;
		  for (var row = 0; row < size; row++) {
		    sameCountCol = sameCountRow = 0;
		    lastCol = lastRow = null;
		    for (var col = 0; col < size; col++) {
		      var module = data.get(row, col);
		      if (module === lastCol) {
		        sameCountCol++;
		      } else {
		        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
		        lastCol = module;
		        sameCountCol = 1;
		      }
		      module = data.get(col, row);
		      if (module === lastRow) {
		        sameCountRow++;
		      } else {
		        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
		        lastRow = module;
		        sameCountRow = 1;
		      }
		    }
		    if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
		    if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
		  }
		  return points;
		};

		/**
		 * Find 2x2 blocks with the same color and assign a penalty value
		 *
		 * Points: N2 * (m - 1) * (n - 1)
		 */
		exports.getPenaltyN2 = function getPenaltyN2(data) {
		  var size = data.size;
		  var points = 0;
		  for (var row = 0; row < size - 1; row++) {
		    for (var col = 0; col < size - 1; col++) {
		      var last = data.get(row, col) + data.get(row, col + 1) + data.get(row + 1, col) + data.get(row + 1, col + 1);
		      if (last === 4 || last === 0) points++;
		    }
		  }
		  return points * PenaltyScores.N2;
		};

		/**
		 * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,
		 * preceded or followed by light area 4 modules wide
		 *
		 * Points: N3 * number of pattern found
		 */
		exports.getPenaltyN3 = function getPenaltyN3(data) {
		  var size = data.size;
		  var points = 0;
		  var bitsCol = 0;
		  var bitsRow = 0;
		  for (var row = 0; row < size; row++) {
		    bitsCol = bitsRow = 0;
		    for (var col = 0; col < size; col++) {
		      bitsCol = bitsCol << 1 & 0x7FF | data.get(row, col);
		      if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++;
		      bitsRow = bitsRow << 1 & 0x7FF | data.get(col, row);
		      if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++;
		    }
		  }
		  return points * PenaltyScores.N3;
		};

		/**
		 * Calculate proportion of dark modules in entire symbol
		 *
		 * Points: N4 * k
		 *
		 * k is the rating of the deviation of the proportion of dark modules
		 * in the symbol from 50% in steps of 5%
		 */
		exports.getPenaltyN4 = function getPenaltyN4(data) {
		  var darkCount = 0;
		  var modulesCount = data.data.length;
		  for (var i = 0; i < modulesCount; i++) {
		    darkCount += data.data[i];
		  }
		  var k = Math.abs(Math.ceil(darkCount * 100 / modulesCount / 5) - 10);
		  return k * PenaltyScores.N4;
		};

		/**
		 * Return mask value at given position
		 *
		 * @param  {Number} maskPattern Pattern reference value
		 * @param  {Number} i           Row
		 * @param  {Number} j           Column
		 * @return {Boolean}            Mask value
		 */
		function getMaskAt(maskPattern, i, j) {
		  switch (maskPattern) {
		    case exports.Patterns.PATTERN000:
		      return (i + j) % 2 === 0;
		    case exports.Patterns.PATTERN001:
		      return i % 2 === 0;
		    case exports.Patterns.PATTERN010:
		      return j % 3 === 0;
		    case exports.Patterns.PATTERN011:
		      return (i + j) % 3 === 0;
		    case exports.Patterns.PATTERN100:
		      return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0;
		    case exports.Patterns.PATTERN101:
		      return i * j % 2 + i * j % 3 === 0;
		    case exports.Patterns.PATTERN110:
		      return (i * j % 2 + i * j % 3) % 2 === 0;
		    case exports.Patterns.PATTERN111:
		      return (i * j % 3 + (i + j) % 2) % 2 === 0;
		    default:
		      throw new Error('bad maskPattern:' + maskPattern);
		  }
		}

		/**
		 * Apply a mask pattern to a BitMatrix
		 *
		 * @param  {Number}    pattern Pattern reference number
		 * @param  {BitMatrix} data    BitMatrix data
		 */
		exports.applyMask = function applyMask(pattern, data) {
		  var size = data.size;
		  for (var col = 0; col < size; col++) {
		    for (var row = 0; row < size; row++) {
		      if (data.isReserved(row, col)) continue;
		      data.xor(row, col, getMaskAt(pattern, row, col));
		    }
		  }
		};

		/**
		 * Returns the best mask pattern for data
		 *
		 * @param  {BitMatrix} data
		 * @return {Number} Mask pattern reference number
		 */
		exports.getBestMask = function getBestMask(data, setupFormatFunc) {
		  var numPatterns = Object.keys(exports.Patterns).length;
		  var bestPattern = 0;
		  var lowerPenalty = Infinity;
		  for (var p = 0; p < numPatterns; p++) {
		    setupFormatFunc(p);
		    exports.applyMask(p, data);

		    // Calculate penalty
		    var penalty = exports.getPenaltyN1(data) + exports.getPenaltyN2(data) + exports.getPenaltyN3(data) + exports.getPenaltyN4(data);

		    // Undo previously applied mask
		    exports.applyMask(p, data);
		    if (penalty < lowerPenalty) {
		      lowerPenalty = penalty;
		      bestPattern = p;
		    }
		  }
		  return bestPattern;
		};
} (maskPattern));
	return maskPattern;
}

var errorCorrectionCode = {};

var hasRequiredErrorCorrectionCode;

function requireErrorCorrectionCode () {
	if (hasRequiredErrorCorrectionCode) return errorCorrectionCode;
	hasRequiredErrorCorrectionCode = 1;
	var ECLevel = requireErrorCorrectionLevel();
	var EC_BLOCKS_TABLE = [
	// L  M  Q  H
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 4, 1, 2, 4, 4, 2, 4, 4, 4, 2, 4, 6, 5, 2, 4, 6, 6, 2, 5, 8, 8, 4, 5, 8, 8, 4, 5, 8, 11, 4, 8, 10, 11, 4, 9, 12, 16, 4, 9, 16, 16, 6, 10, 12, 18, 6, 10, 17, 16, 6, 11, 16, 19, 6, 13, 18, 21, 7, 14, 21, 25, 8, 16, 20, 25, 8, 17, 23, 25, 9, 17, 23, 34, 9, 18, 25, 30, 10, 20, 27, 32, 12, 21, 29, 35, 12, 23, 34, 37, 12, 25, 34, 40, 13, 26, 35, 42, 14, 28, 38, 45, 15, 29, 40, 48, 16, 31, 43, 51, 17, 33, 45, 54, 18, 35, 48, 57, 19, 37, 51, 60, 19, 38, 53, 63, 20, 40, 56, 66, 21, 43, 59, 70, 22, 45, 62, 74, 24, 47, 65, 77, 25, 49, 68, 81];
	var EC_CODEWORDS_TABLE = [
	// L  M  Q  H
	7, 10, 13, 17, 10, 16, 22, 28, 15, 26, 36, 44, 20, 36, 52, 64, 26, 48, 72, 88, 36, 64, 96, 112, 40, 72, 108, 130, 48, 88, 132, 156, 60, 110, 160, 192, 72, 130, 192, 224, 80, 150, 224, 264, 96, 176, 260, 308, 104, 198, 288, 352, 120, 216, 320, 384, 132, 240, 360, 432, 144, 280, 408, 480, 168, 308, 448, 532, 180, 338, 504, 588, 196, 364, 546, 650, 224, 416, 600, 700, 224, 442, 644, 750, 252, 476, 690, 816, 270, 504, 750, 900, 300, 560, 810, 960, 312, 588, 870, 1050, 336, 644, 952, 1110, 360, 700, 1020, 1200, 390, 728, 1050, 1260, 420, 784, 1140, 1350, 450, 812, 1200, 1440, 480, 868, 1290, 1530, 510, 924, 1350, 1620, 540, 980, 1440, 1710, 570, 1036, 1530, 1800, 570, 1064, 1590, 1890, 600, 1120, 1680, 1980, 630, 1204, 1770, 2100, 660, 1260, 1860, 2220, 720, 1316, 1950, 2310, 750, 1372, 2040, 2430];

	/**
	 * Returns the number of error correction block that the QR Code should contain
	 * for the specified version and error correction level.
	 *
	 * @param  {Number} version              QR Code version
	 * @param  {Number} errorCorrectionLevel Error correction level
	 * @return {Number}                      Number of error correction blocks
	 */
	errorCorrectionCode.getBlocksCount = function getBlocksCount(version, errorCorrectionLevel) {
	  switch (errorCorrectionLevel) {
	    case ECLevel.L:
	      return EC_BLOCKS_TABLE[(version - 1) * 4 + 0];
	    case ECLevel.M:
	      return EC_BLOCKS_TABLE[(version - 1) * 4 + 1];
	    case ECLevel.Q:
	      return EC_BLOCKS_TABLE[(version - 1) * 4 + 2];
	    case ECLevel.H:
	      return EC_BLOCKS_TABLE[(version - 1) * 4 + 3];
	    default:
	      return undefined;
	  }
	};

	/**
	 * Returns the number of error correction codewords to use for the specified
	 * version and error correction level.
	 *
	 * @param  {Number} version              QR Code version
	 * @param  {Number} errorCorrectionLevel Error correction level
	 * @return {Number}                      Number of error correction codewords
	 */
	errorCorrectionCode.getTotalCodewordsCount = function getTotalCodewordsCount(version, errorCorrectionLevel) {
	  switch (errorCorrectionLevel) {
	    case ECLevel.L:
	      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 0];
	    case ECLevel.M:
	      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 1];
	    case ECLevel.Q:
	      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 2];
	    case ECLevel.H:
	      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 3];
	    default:
	      return undefined;
	  }
	};
	return errorCorrectionCode;
}

var polynomial = {};

var galoisField = {};

var hasRequiredGaloisField;

function requireGaloisField () {
	if (hasRequiredGaloisField) return galoisField;
	hasRequiredGaloisField = 1;
	var BufferUtil = requireBuffer();
	var EXP_TABLE = BufferUtil.alloc(512);
	var LOG_TABLE = BufferUtil.alloc(256)
	/**
	 * Precompute the log and anti-log tables for faster computation later
	 *
	 * For each possible value in the galois field 2^8, we will pre-compute
	 * the logarithm and anti-logarithm (exponential) of this value
	 *
	 * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}
	 */;
	(function initTables() {
	  var x = 1;
	  for (var i = 0; i < 255; i++) {
	    EXP_TABLE[i] = x;
	    LOG_TABLE[x] = i;
	    x <<= 1; // multiply by 2

	    // The QR code specification says to use byte-wise modulo 100011101 arithmetic.
	    // This means that when a number is 256 or larger, it should be XORed with 0x11D.
	    if (x & 0x100) {
	      // similar to x >= 256, but a lot faster (because 0x100 == 256)
	      x ^= 0x11D;
	    }
	  }

	  // Optimization: double the size of the anti-log table so that we don't need to mod 255 to
	  // stay inside the bounds (because we will mainly use this table for the multiplication of
	  // two GF numbers, no more).
	  // @see {@link mul}
	  for (i = 255; i < 512; i++) {
	    EXP_TABLE[i] = EXP_TABLE[i - 255];
	  }
	})();

	/**
	 * Returns log value of n inside Galois Field
	 *
	 * @param  {Number} n
	 * @return {Number}
	 */
	galoisField.log = function log(n) {
	  if (n < 1) throw new Error('log(' + n + ')');
	  return LOG_TABLE[n];
	};

	/**
	 * Returns anti-log value of n inside Galois Field
	 *
	 * @param  {Number} n
	 * @return {Number}
	 */
	galoisField.exp = function exp(n) {
	  return EXP_TABLE[n];
	};

	/**
	 * Multiplies two number inside Galois Field
	 *
	 * @param  {Number} x
	 * @param  {Number} y
	 * @return {Number}
	 */
	galoisField.mul = function mul(x, y) {
	  if (x === 0 || y === 0) return 0;

	  // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized
	  // @see {@link initTables}
	  return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]];
	};
	return galoisField;
}

var hasRequiredPolynomial;

function requirePolynomial () {
	if (hasRequiredPolynomial) return polynomial;
	hasRequiredPolynomial = 1;
	(function (exports) {
		var BufferUtil = requireBuffer();
		var GF = requireGaloisField();

		/**
		 * Multiplies two polynomials inside Galois Field
		 *
		 * @param  {Buffer} p1 Polynomial
		 * @param  {Buffer} p2 Polynomial
		 * @return {Buffer}    Product of p1 and p2
		 */
		exports.mul = function mul(p1, p2) {
		  var coeff = BufferUtil.alloc(p1.length + p2.length - 1);
		  for (var i = 0; i < p1.length; i++) {
		    for (var j = 0; j < p2.length; j++) {
		      coeff[i + j] ^= GF.mul(p1[i], p2[j]);
		    }
		  }
		  return coeff;
		};

		/**
		 * Calculate the remainder of polynomials division
		 *
		 * @param  {Buffer} divident Polynomial
		 * @param  {Buffer} divisor  Polynomial
		 * @return {Buffer}          Remainder
		 */
		exports.mod = function mod(divident, divisor) {
		  var result = BufferUtil.from(divident);
		  while (result.length - divisor.length >= 0) {
		    var coeff = result[0];
		    for (var i = 0; i < divisor.length; i++) {
		      result[i] ^= GF.mul(divisor[i], coeff);
		    }

		    // remove all zeros from buffer head
		    var offset = 0;
		    while (offset < result.length && result[offset] === 0) {
		      offset++;
		    }
		    result = result.slice(offset);
		  }
		  return result;
		};

		/**
		 * Generate an irreducible generator polynomial of specified degree
		 * (used by Reed-Solomon encoder)
		 *
		 * @param  {Number} degree Degree of the generator polynomial
		 * @return {Buffer}        Buffer containing polynomial coefficients
		 */
		exports.generateECPolynomial = function generateECPolynomial(degree) {
		  var poly = BufferUtil.from([1]);
		  for (var i = 0; i < degree; i++) {
		    poly = exports.mul(poly, [1, GF.exp(i)]);
		  }
		  return poly;
		};
} (polynomial));
	return polynomial;
}

var reedSolomonEncoder;
var hasRequiredReedSolomonEncoder;

function requireReedSolomonEncoder () {
	if (hasRequiredReedSolomonEncoder) return reedSolomonEncoder;
	hasRequiredReedSolomonEncoder = 1;
	var BufferUtil = requireBuffer();
	var Polynomial = requirePolynomial();
	var Buffer = require$$2__default["default"].Buffer;
	function ReedSolomonEncoder(degree) {
	  this.genPoly = undefined;
	  this.degree = degree;
	  if (this.degree) this.initialize(this.degree);
	}

	/**
	 * Initialize the encoder.
	 * The input param should correspond to the number of error correction codewords.
	 *
	 * @param  {Number} degree
	 */
	ReedSolomonEncoder.prototype.initialize = function initialize(degree) {
	  // create an irreducible generator polynomial
	  this.degree = degree;
	  this.genPoly = Polynomial.generateECPolynomial(this.degree);
	};

	/**
	 * Encodes a chunk of data
	 *
	 * @param  {Buffer} data Buffer containing input data
	 * @return {Buffer}      Buffer containing encoded data
	 */
	ReedSolomonEncoder.prototype.encode = function encode(data) {
	  if (!this.genPoly) {
	    throw new Error('Encoder not initialized');
	  }

	  // Calculate EC for this data block
	  // extends data size to data+genPoly size
	  var pad = BufferUtil.alloc(this.degree);
	  var paddedData = Buffer.concat([data, pad], data.length + this.degree);

	  // The error correction codewords are the remainder after dividing the data codewords
	  // by a generator polynomial
	  var remainder = Polynomial.mod(paddedData, this.genPoly);

	  // return EC data blocks (last n byte, where n is the degree of genPoly)
	  // If coefficients number in remainder are less than genPoly degree,
	  // pad with 0s to the left to reach the needed number of coefficients
	  var start = this.degree - remainder.length;
	  if (start > 0) {
	    var buff = BufferUtil.alloc(this.degree);
	    remainder.copy(buff, start);
	    return buff;
	  }
	  return remainder;
	};
	reedSolomonEncoder = ReedSolomonEncoder;
	return reedSolomonEncoder;
}

var version$1 = {};

var mode = {};

var versionCheck = {};

/**
 * Check if QR Code version is valid
 *
 * @param  {Number}  version QR Code version
 * @return {Boolean}         true if valid version, false otherwise
 */

var hasRequiredVersionCheck;

function requireVersionCheck () {
	if (hasRequiredVersionCheck) return versionCheck;
	hasRequiredVersionCheck = 1;
	versionCheck.isValid = function isValid(version) {
	  return !isNaN(version) && version >= 1 && version <= 40;
	};
	return versionCheck;
}

var regex = {};

var hasRequiredRegex;

function requireRegex () {
	if (hasRequiredRegex) return regex;
	hasRequiredRegex = 1;
	var numeric = '[0-9]+';
	var alphanumeric = '[A-Z $%*+\\-./:]+';
	var kanji = '(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|' + '[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|' + '[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|' + '[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+';
	kanji = kanji.replace(/u/g, "\\u");
	var _byte = '(?:(?![A-Z0-9 $%*+\\-./:]|' + kanji + ')(?:.|[\r\n]))+';
	regex.KANJI = new RegExp(kanji, 'g');
	regex.BYTE_KANJI = new RegExp('[^A-Z0-9 $%*+\\-./:]+', 'g');
	regex.BYTE = new RegExp(_byte, 'g');
	regex.NUMERIC = new RegExp(numeric, 'g');
	regex.ALPHANUMERIC = new RegExp(alphanumeric, 'g');
	var TEST_KANJI = new RegExp('^' + kanji + '$');
	var TEST_NUMERIC = new RegExp('^' + numeric + '$');
	var TEST_ALPHANUMERIC = new RegExp('^[A-Z0-9 $%*+\\-./:]+$');
	regex.testKanji = function testKanji(str) {
	  return TEST_KANJI.test(str);
	};
	regex.testNumeric = function testNumeric(str) {
	  return TEST_NUMERIC.test(str);
	};
	regex.testAlphanumeric = function testAlphanumeric(str) {
	  return TEST_ALPHANUMERIC.test(str);
	};
	return regex;
}

var hasRequiredMode;

function requireMode () {
	if (hasRequiredMode) return mode;
	hasRequiredMode = 1;
	(function (exports) {
		var VersionCheck = requireVersionCheck();
		var Regex = requireRegex();

		/**
		 * Numeric mode encodes data from the decimal digit set (0 - 9)
		 * (byte values 30HEX to 39HEX).
		 * Normally, 3 data characters are represented by 10 bits.
		 *
		 * @type {Object}
		 */
		exports.NUMERIC = {
		  id: 'Numeric',
		  bit: 1 << 0,
		  ccBits: [10, 12, 14]
		};

		/**
		 * Alphanumeric mode encodes data from a set of 45 characters,
		 * i.e. 10 numeric digits (0 - 9),
		 *      26 alphabetic characters (A - Z),
		 *   and 9 symbols (SP, $, %, *, +, -, ., /, :).
		 * Normally, two input characters are represented by 11 bits.
		 *
		 * @type {Object}
		 */
		exports.ALPHANUMERIC = {
		  id: 'Alphanumeric',
		  bit: 1 << 1,
		  ccBits: [9, 11, 13]
		};

		/**
		 * In byte mode, data is encoded at 8 bits per character.
		 *
		 * @type {Object}
		 */
		exports.BYTE = {
		  id: 'Byte',
		  bit: 1 << 2,
		  ccBits: [8, 16, 16]
		};

		/**
		 * The Kanji mode efficiently encodes Kanji characters in accordance with
		 * the Shift JIS system based on JIS X 0208.
		 * The Shift JIS values are shifted from the JIS X 0208 values.
		 * JIS X 0208 gives details of the shift coded representation.
		 * Each two-byte character value is compacted to a 13-bit binary codeword.
		 *
		 * @type {Object}
		 */
		exports.KANJI = {
		  id: 'Kanji',
		  bit: 1 << 3,
		  ccBits: [8, 10, 12]
		};

		/**
		 * Mixed mode will contain a sequences of data in a combination of any of
		 * the modes described above
		 *
		 * @type {Object}
		 */
		exports.MIXED = {
		  bit: -1
		};

		/**
		 * Returns the number of bits needed to store the data length
		 * according to QR Code specifications.
		 *
		 * @param  {Mode}   mode    Data mode
		 * @param  {Number} version QR Code version
		 * @return {Number}         Number of bits
		 */
		exports.getCharCountIndicator = function getCharCountIndicator(mode, version) {
		  if (!mode.ccBits) throw new Error('Invalid mode: ' + mode);
		  if (!VersionCheck.isValid(version)) {
		    throw new Error('Invalid version: ' + version);
		  }
		  if (version >= 1 && version < 10) return mode.ccBits[0];else if (version < 27) return mode.ccBits[1];
		  return mode.ccBits[2];
		};

		/**
		 * Returns the most efficient mode to store the specified data
		 *
		 * @param  {String} dataStr Input data string
		 * @return {Mode}           Best mode
		 */
		exports.getBestModeForData = function getBestModeForData(dataStr) {
		  if (Regex.testNumeric(dataStr)) return exports.NUMERIC;else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC;else if (Regex.testKanji(dataStr)) return exports.KANJI;else return exports.BYTE;
		};

		/**
		 * Return mode name as string
		 *
		 * @param {Mode} mode Mode object
		 * @returns {String}  Mode name
		 */
		exports.toString = function toString(mode) {
		  if (mode && mode.id) return mode.id;
		  throw new Error('Invalid mode');
		};

		/**
		 * Check if input param is a valid mode object
		 *
		 * @param   {Mode}    mode Mode object
		 * @returns {Boolean} True if valid mode, false otherwise
		 */
		exports.isValid = function isValid(mode) {
		  return mode && mode.bit && mode.ccBits;
		};

		/**
		 * Get mode object from its name
		 *
		 * @param   {String} string Mode name
		 * @returns {Mode}          Mode object
		 */
		function fromString(string) {
		  if (typeof string !== 'string') {
		    throw new Error('Param is not a string');
		  }
		  var lcStr = string.toLowerCase();
		  switch (lcStr) {
		    case 'numeric':
		      return exports.NUMERIC;
		    case 'alphanumeric':
		      return exports.ALPHANUMERIC;
		    case 'kanji':
		      return exports.KANJI;
		    case 'byte':
		      return exports.BYTE;
		    default:
		      throw new Error('Unknown mode: ' + string);
		  }
		}

		/**
		 * Returns mode from a value.
		 * If value is not a valid mode, returns defaultValue
		 *
		 * @param  {Mode|String} value        Encoding mode
		 * @param  {Mode}        defaultValue Fallback value
		 * @return {Mode}                     Encoding mode
		 */
		exports.from = function from(value, defaultValue) {
		  if (exports.isValid(value)) {
		    return value;
		  }
		  try {
		    return fromString(value);
		  } catch (e) {
		    return defaultValue;
		  }
		};
} (mode));
	return mode;
}

var isarray;
var hasRequiredIsarray;

function requireIsarray () {
	if (hasRequiredIsarray) return isarray;
	hasRequiredIsarray = 1;
	var toString = {}.toString;
	isarray = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};
	return isarray;
}

var hasRequiredVersion;

function requireVersion () {
	if (hasRequiredVersion) return version$1;
	hasRequiredVersion = 1;
	(function (exports) {
		var Utils = requireUtils$4();
		var ECCode = requireErrorCorrectionCode();
		var ECLevel = requireErrorCorrectionLevel();
		var Mode = requireMode();
		var VersionCheck = requireVersionCheck();
		var isArray = requireIsarray();

		// Generator polynomial used to encode version information
		var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;
		var G18_BCH = Utils.getBCHDigit(G18);
		function getBestVersionForDataLength(mode, length, errorCorrectionLevel) {
		  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
		    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {
		      return currentVersion;
		    }
		  }
		  return undefined;
		}
		function getReservedBitsCount(mode, version) {
		  // Character count indicator + mode indicator bits
		  return Mode.getCharCountIndicator(mode, version) + 4;
		}
		function getTotalBitsFromDataArray(segments, version) {
		  var totalBits = 0;
		  segments.forEach(function (data) {
		    var reservedBits = getReservedBitsCount(data.mode, version);
		    totalBits += reservedBits + data.getBitsLength();
		  });
		  return totalBits;
		}
		function getBestVersionForMixedData(segments, errorCorrectionLevel) {
		  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
		    var length = getTotalBitsFromDataArray(segments, currentVersion);
		    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {
		      return currentVersion;
		    }
		  }
		  return undefined;
		}

		/**
		 * Returns version number from a value.
		 * If value is not a valid version, returns defaultValue
		 *
		 * @param  {Number|String} value        QR Code version
		 * @param  {Number}        defaultValue Fallback value
		 * @return {Number}                     QR Code version number
		 */
		exports.from = function from(value, defaultValue) {
		  if (VersionCheck.isValid(value)) {
		    return parseInt(value, 10);
		  }
		  return defaultValue;
		};

		/**
		 * Returns how much data can be stored with the specified QR code version
		 * and error correction level
		 *
		 * @param  {Number} version              QR Code version (1-40)
		 * @param  {Number} errorCorrectionLevel Error correction level
		 * @param  {Mode}   mode                 Data mode
		 * @return {Number}                      Quantity of storable data
		 */
		exports.getCapacity = function getCapacity(version, errorCorrectionLevel, mode) {
		  if (!VersionCheck.isValid(version)) {
		    throw new Error('Invalid QR Code version');
		  }

		  // Use Byte mode as default
		  if (typeof mode === 'undefined') mode = Mode.BYTE;

		  // Total codewords for this QR code version (Data + Error correction)
		  var totalCodewords = Utils.getSymbolTotalCodewords(version);

		  // Total number of error correction codewords
		  var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);

		  // Total number of data codewords
		  var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;
		  if (mode === Mode.MIXED) return dataTotalCodewordsBits;
		  var usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version);

		  // Return max number of storable codewords
		  switch (mode) {
		    case Mode.NUMERIC:
		      return Math.floor(usableBits / 10 * 3);
		    case Mode.ALPHANUMERIC:
		      return Math.floor(usableBits / 11 * 2);
		    case Mode.KANJI:
		      return Math.floor(usableBits / 13);
		    case Mode.BYTE:
		    default:
		      return Math.floor(usableBits / 8);
		  }
		};

		/**
		 * Returns the minimum version needed to contain the amount of data
		 *
		 * @param  {Segment} data                    Segment of data
		 * @param  {Number} [errorCorrectionLevel=H] Error correction level
		 * @param  {Mode} mode                       Data mode
		 * @return {Number}                          QR Code version
		 */
		exports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {
		  var seg;
		  var ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M);
		  if (isArray(data)) {
		    if (data.length > 1) {
		      return getBestVersionForMixedData(data, ecl);
		    }
		    if (data.length === 0) {
		      return 1;
		    }
		    seg = data[0];
		  } else {
		    seg = data;
		  }
		  return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl);
		};

		/**
		 * Returns version information with relative error correction bits
		 *
		 * The version information is included in QR Code symbols of version 7 or larger.
		 * It consists of an 18-bit sequence containing 6 data bits,
		 * with 12 error correction bits calculated using the (18, 6) Golay code.
		 *
		 * @param  {Number} version QR Code version
		 * @return {Number}         Encoded version info bits
		 */
		exports.getEncodedBits = function getEncodedBits(version) {
		  if (!VersionCheck.isValid(version) || version < 7) {
		    throw new Error('Invalid QR Code version');
		  }
		  var d = version << 12;
		  while (Utils.getBCHDigit(d) - G18_BCH >= 0) {
		    d ^= G18 << Utils.getBCHDigit(d) - G18_BCH;
		  }
		  return version << 12 | d;
		};
} (version$1));
	return version$1;
}

var formatInfo = {};

var hasRequiredFormatInfo;

function requireFormatInfo () {
	if (hasRequiredFormatInfo) return formatInfo;
	hasRequiredFormatInfo = 1;
	var Utils = requireUtils$4();
	var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;
	var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;
	var G15_BCH = Utils.getBCHDigit(G15);

	/**
	 * Returns format information with relative error correction bits
	 *
	 * The format information is a 15-bit sequence containing 5 data bits,
	 * with 10 error correction bits calculated using the (15, 5) BCH code.
	 *
	 * @param  {Number} errorCorrectionLevel Error correction level
	 * @param  {Number} mask                 Mask pattern
	 * @return {Number}                      Encoded format information bits
	 */
	formatInfo.getEncodedBits = function getEncodedBits(errorCorrectionLevel, mask) {
	  var data = errorCorrectionLevel.bit << 3 | mask;
	  var d = data << 10;
	  while (Utils.getBCHDigit(d) - G15_BCH >= 0) {
	    d ^= G15 << Utils.getBCHDigit(d) - G15_BCH;
	  }

	  // xor final data with mask pattern in order to ensure that
	  // no combination of Error Correction Level and data mask pattern
	  // will result in an all-zero data string
	  return (data << 10 | d) ^ G15_MASK;
	};
	return formatInfo;
}

var segments = {};

var numericData;
var hasRequiredNumericData;

function requireNumericData () {
	if (hasRequiredNumericData) return numericData;
	hasRequiredNumericData = 1;
	var Mode = requireMode();
	function NumericData(data) {
	  this.mode = Mode.NUMERIC;
	  this.data = data.toString();
	}
	NumericData.getBitsLength = function getBitsLength(length) {
	  return 10 * Math.floor(length / 3) + (length % 3 ? length % 3 * 3 + 1 : 0);
	};
	NumericData.prototype.getLength = function getLength() {
	  return this.data.length;
	};
	NumericData.prototype.getBitsLength = function getBitsLength() {
	  return NumericData.getBitsLength(this.data.length);
	};
	NumericData.prototype.write = function write(bitBuffer) {
	  var i, group, value;

	  // The input data string is divided into groups of three digits,
	  // and each group is converted to its 10-bit binary equivalent.
	  for (i = 0; i + 3 <= this.data.length; i += 3) {
	    group = this.data.substr(i, 3);
	    value = parseInt(group, 10);
	    bitBuffer.put(value, 10);
	  }

	  // If the number of input digits is not an exact multiple of three,
	  // the final one or two digits are converted to 4 or 7 bits respectively.
	  var remainingNum = this.data.length - i;
	  if (remainingNum > 0) {
	    group = this.data.substr(i);
	    value = parseInt(group, 10);
	    bitBuffer.put(value, remainingNum * 3 + 1);
	  }
	};
	numericData = NumericData;
	return numericData;
}

var alphanumericData;
var hasRequiredAlphanumericData;

function requireAlphanumericData () {
	if (hasRequiredAlphanumericData) return alphanumericData;
	hasRequiredAlphanumericData = 1;
	var Mode = requireMode();

	/**
	 * Array of characters available in alphanumeric mode
	 *
	 * As per QR Code specification, to each character
	 * is assigned a value from 0 to 44 which in this case coincides
	 * with the array index
	 *
	 * @type {Array}
	 */
	var ALPHA_NUM_CHARS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '$', '%', '*', '+', '-', '.', '/', ':'];
	function AlphanumericData(data) {
	  this.mode = Mode.ALPHANUMERIC;
	  this.data = data;
	}
	AlphanumericData.getBitsLength = function getBitsLength(length) {
	  return 11 * Math.floor(length / 2) + 6 * (length % 2);
	};
	AlphanumericData.prototype.getLength = function getLength() {
	  return this.data.length;
	};
	AlphanumericData.prototype.getBitsLength = function getBitsLength() {
	  return AlphanumericData.getBitsLength(this.data.length);
	};
	AlphanumericData.prototype.write = function write(bitBuffer) {
	  var i;

	  // Input data characters are divided into groups of two characters
	  // and encoded as 11-bit binary codes.
	  for (i = 0; i + 2 <= this.data.length; i += 2) {
	    // The character value of the first character is multiplied by 45
	    var value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45;

	    // The character value of the second digit is added to the product
	    value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1]);

	    // The sum is then stored as 11-bit binary number
	    bitBuffer.put(value, 11);
	  }

	  // If the number of input data characters is not a multiple of two,
	  // the character value of the final character is encoded as a 6-bit binary number.
	  if (this.data.length % 2) {
	    bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6);
	  }
	};
	alphanumericData = AlphanumericData;
	return alphanumericData;
}

var byteData;
var hasRequiredByteData;

function requireByteData () {
	if (hasRequiredByteData) return byteData;
	hasRequiredByteData = 1;
	var BufferUtil = requireBuffer();
	var Mode = requireMode();
	function ByteData(data) {
	  this.mode = Mode.BYTE;
	  this.data = BufferUtil.from(data);
	}
	ByteData.getBitsLength = function getBitsLength(length) {
	  return length * 8;
	};
	ByteData.prototype.getLength = function getLength() {
	  return this.data.length;
	};
	ByteData.prototype.getBitsLength = function getBitsLength() {
	  return ByteData.getBitsLength(this.data.length);
	};
	ByteData.prototype.write = function (bitBuffer) {
	  for (var i = 0, l = this.data.length; i < l; i++) {
	    bitBuffer.put(this.data[i], 8);
	  }
	};
	byteData = ByteData;
	return byteData;
}

var kanjiData;
var hasRequiredKanjiData;

function requireKanjiData () {
	if (hasRequiredKanjiData) return kanjiData;
	hasRequiredKanjiData = 1;
	var Mode = requireMode();
	var Utils = requireUtils$4();
	function KanjiData(data) {
	  this.mode = Mode.KANJI;
	  this.data = data;
	}
	KanjiData.getBitsLength = function getBitsLength(length) {
	  return length * 13;
	};
	KanjiData.prototype.getLength = function getLength() {
	  return this.data.length;
	};
	KanjiData.prototype.getBitsLength = function getBitsLength() {
	  return KanjiData.getBitsLength(this.data.length);
	};
	KanjiData.prototype.write = function (bitBuffer) {
	  var i;

	  // In the Shift JIS system, Kanji characters are represented by a two byte combination.
	  // These byte values are shifted from the JIS X 0208 values.
	  // JIS X 0208 gives details of the shift coded representation.
	  for (i = 0; i < this.data.length; i++) {
	    var value = Utils.toSJIS(this.data[i]);

	    // For characters with Shift JIS values from 0x8140 to 0x9FFC:
	    if (value >= 0x8140 && value <= 0x9FFC) {
	      // Subtract 0x8140 from Shift JIS value
	      value -= 0x8140;

	      // For characters with Shift JIS values from 0xE040 to 0xEBBF
	    } else if (value >= 0xE040 && value <= 0xEBBF) {
	      // Subtract 0xC140 from Shift JIS value
	      value -= 0xC140;
	    } else {
	      throw new Error('Invalid SJIS character: ' + this.data[i] + '\n' + 'Make sure your charset is UTF-8');
	    }

	    // Multiply most significant byte of result by 0xC0
	    // and add least significant byte to product
	    value = (value >>> 8 & 0xff) * 0xC0 + (value & 0xff);

	    // Convert result to a 13-bit binary string
	    bitBuffer.put(value, 13);
	  }
	};
	kanjiData = KanjiData;
	return kanjiData;
}

var dijkstra = {exports: {}};

var hasRequiredDijkstra;

function requireDijkstra () {
	if (hasRequiredDijkstra) return dijkstra.exports;
	hasRequiredDijkstra = 1;
	(function (module) {

		/******************************************************************************
		 * Created 2008-08-19.
		 *
		 * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.
		 *
		 * Copyright (C) 2008
		 *   Wyatt Baldwin <self@wyattbaldwin.com>
		 *   All rights reserved
		 *
		 * Licensed under the MIT license.
		 *
		 *   http://www.opensource.org/licenses/mit-license.php
		 *
		 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
		 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
		 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
		 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
		 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
		 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
		 * THE SOFTWARE.
		 *****************************************************************************/
		var dijkstra = {
		  single_source_shortest_paths: function single_source_shortest_paths(graph, s, d) {
		    // Predecessor map for each node that has been encountered.
		    // node ID => predecessor node ID
		    var predecessors = {};

		    // Costs of shortest paths from s to all nodes encountered.
		    // node ID => cost
		    var costs = {};
		    costs[s] = 0;

		    // Costs of shortest paths from s to all nodes encountered; differs from
		    // `costs` in that it provides easy access to the node that currently has
		    // the known shortest path from s.
		    // XXX: Do we actually need both `costs` and `open`?
		    var open = dijkstra.PriorityQueue.make();
		    open.push(s, 0);
		    var closest, u, v, cost_of_s_to_u, adjacent_nodes, cost_of_e, cost_of_s_to_u_plus_cost_of_e, cost_of_s_to_v, first_visit;
		    while (!open.empty()) {
		      // In the nodes remaining in graph that have a known cost from s,
		      // find the node, u, that currently has the shortest path from s.
		      closest = open.pop();
		      u = closest.value;
		      cost_of_s_to_u = closest.cost;

		      // Get nodes adjacent to u...
		      adjacent_nodes = graph[u] || {};

		      // ...and explore the edges that connect u to those nodes, updating
		      // the cost of the shortest paths to any or all of those nodes as
		      // necessary. v is the node across the current edge from u.
		      for (v in adjacent_nodes) {
		        if (adjacent_nodes.hasOwnProperty(v)) {
		          // Get the cost of the edge running from u to v.
		          cost_of_e = adjacent_nodes[v];

		          // Cost of s to u plus the cost of u to v across e--this is *a*
		          // cost from s to v that may or may not be less than the current
		          // known cost to v.
		          cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;

		          // If we haven't visited v yet OR if the current known cost from s to
		          // v is greater than the new cost we just found (cost of s to u plus
		          // cost of u to v across e), update v's cost in the cost list and
		          // update v's predecessor in the predecessor list (it's now u).
		          cost_of_s_to_v = costs[v];
		          first_visit = typeof costs[v] === 'undefined';
		          if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {
		            costs[v] = cost_of_s_to_u_plus_cost_of_e;
		            open.push(v, cost_of_s_to_u_plus_cost_of_e);
		            predecessors[v] = u;
		          }
		        }
		      }
		    }
		    if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {
		      var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');
		      throw new Error(msg);
		    }
		    return predecessors;
		  },
		  extract_shortest_path_from_predecessor_list: function extract_shortest_path_from_predecessor_list(predecessors, d) {
		    var nodes = [];
		    var u = d;
		    while (u) {
		      nodes.push(u);
		      predecessors[u];
		      u = predecessors[u];
		    }
		    nodes.reverse();
		    return nodes;
		  },
		  find_path: function find_path(graph, s, d) {
		    var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);
		    return dijkstra.extract_shortest_path_from_predecessor_list(predecessors, d);
		  },
		  /**
		   * A very naive priority queue implementation.
		   */
		  PriorityQueue: {
		    make: function make(opts) {
		      var T = dijkstra.PriorityQueue,
		        t = {},
		        key;
		      opts = opts || {};
		      for (key in T) {
		        if (T.hasOwnProperty(key)) {
		          t[key] = T[key];
		        }
		      }
		      t.queue = [];
		      t.sorter = opts.sorter || T.default_sorter;
		      return t;
		    },
		    default_sorter: function default_sorter(a, b) {
		      return a.cost - b.cost;
		    },
		    /**
		     * Add a new item to the queue and ensure the highest priority element
		     * is at the front of the queue.
		     */
		    push: function push(value, cost) {
		      var item = {
		        value: value,
		        cost: cost
		      };
		      this.queue.push(item);
		      this.queue.sort(this.sorter);
		    },
		    /**
		     * Return the highest priority element in the queue.
		     */
		    pop: function pop() {
		      return this.queue.shift();
		    },
		    empty: function empty() {
		      return this.queue.length === 0;
		    }
		  }
		};

		// node.js module exports
		{
		  module.exports = dijkstra;
		}
} (dijkstra));
	return dijkstra.exports;
}

var hasRequiredSegments;

function requireSegments () {
	if (hasRequiredSegments) return segments;
	hasRequiredSegments = 1;
	(function (exports) {
		var Mode = requireMode();
		var NumericData = requireNumericData();
		var AlphanumericData = requireAlphanumericData();
		var ByteData = requireByteData();
		var KanjiData = requireKanjiData();
		var Regex = requireRegex();
		var Utils = requireUtils$4();
		var dijkstra = requireDijkstra();

		/**
		 * Returns UTF8 byte length
		 *
		 * @param  {String} str Input string
		 * @return {Number}     Number of byte
		 */
		function getStringByteLength(str) {
		  return unescape(encodeURIComponent(str)).length;
		}

		/**
		 * Get a list of segments of the specified mode
		 * from a string
		 *
		 * @param  {Mode}   mode Segment mode
		 * @param  {String} str  String to process
		 * @return {Array}       Array of object with segments data
		 */
		function getSegments(regex, mode, str) {
		  var segments = [];
		  var result;
		  while ((result = regex.exec(str)) !== null) {
		    segments.push({
		      data: result[0],
		      index: result.index,
		      mode: mode,
		      length: result[0].length
		    });
		  }
		  return segments;
		}

		/**
		 * Extracts a series of segments with the appropriate
		 * modes from a string
		 *
		 * @param  {String} dataStr Input string
		 * @return {Array}          Array of object with segments data
		 */
		function getSegmentsFromString(dataStr) {
		  var numSegs = getSegments(Regex.NUMERIC, Mode.NUMERIC, dataStr);
		  var alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode.ALPHANUMERIC, dataStr);
		  var byteSegs;
		  var kanjiSegs;
		  if (Utils.isKanjiModeEnabled()) {
		    byteSegs = getSegments(Regex.BYTE, Mode.BYTE, dataStr);
		    kanjiSegs = getSegments(Regex.KANJI, Mode.KANJI, dataStr);
		  } else {
		    byteSegs = getSegments(Regex.BYTE_KANJI, Mode.BYTE, dataStr);
		    kanjiSegs = [];
		  }
		  var segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);
		  return segs.sort(function (s1, s2) {
		    return s1.index - s2.index;
		  }).map(function (obj) {
		    return {
		      data: obj.data,
		      mode: obj.mode,
		      length: obj.length
		    };
		  });
		}

		/**
		 * Returns how many bits are needed to encode a string of
		 * specified length with the specified mode
		 *
		 * @param  {Number} length String length
		 * @param  {Mode} mode     Segment mode
		 * @return {Number}        Bit length
		 */
		function getSegmentBitsLength(length, mode) {
		  switch (mode) {
		    case Mode.NUMERIC:
		      return NumericData.getBitsLength(length);
		    case Mode.ALPHANUMERIC:
		      return AlphanumericData.getBitsLength(length);
		    case Mode.KANJI:
		      return KanjiData.getBitsLength(length);
		    case Mode.BYTE:
		      return ByteData.getBitsLength(length);
		  }
		}

		/**
		 * Merges adjacent segments which have the same mode
		 *
		 * @param  {Array} segs Array of object with segments data
		 * @return {Array}      Array of object with segments data
		 */
		function mergeSegments(segs) {
		  return segs.reduce(function (acc, curr) {
		    var prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;
		    if (prevSeg && prevSeg.mode === curr.mode) {
		      acc[acc.length - 1].data += curr.data;
		      return acc;
		    }
		    acc.push(curr);
		    return acc;
		  }, []);
		}

		/**
		 * Generates a list of all possible nodes combination which
		 * will be used to build a segments graph.
		 *
		 * Nodes are divided by groups. Each group will contain a list of all the modes
		 * in which is possible to encode the given text.
		 *
		 * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.
		 * The group for '12345' will contain then 3 objects, one for each
		 * possible encoding mode.
		 *
		 * Each node represents a possible segment.
		 *
		 * @param  {Array} segs Array of object with segments data
		 * @return {Array}      Array of object with segments data
		 */
		function buildNodes(segs) {
		  var nodes = [];
		  for (var i = 0; i < segs.length; i++) {
		    var seg = segs[i];
		    switch (seg.mode) {
		      case Mode.NUMERIC:
		        nodes.push([seg, {
		          data: seg.data,
		          mode: Mode.ALPHANUMERIC,
		          length: seg.length
		        }, {
		          data: seg.data,
		          mode: Mode.BYTE,
		          length: seg.length
		        }]);
		        break;
		      case Mode.ALPHANUMERIC:
		        nodes.push([seg, {
		          data: seg.data,
		          mode: Mode.BYTE,
		          length: seg.length
		        }]);
		        break;
		      case Mode.KANJI:
		        nodes.push([seg, {
		          data: seg.data,
		          mode: Mode.BYTE,
		          length: getStringByteLength(seg.data)
		        }]);
		        break;
		      case Mode.BYTE:
		        nodes.push([{
		          data: seg.data,
		          mode: Mode.BYTE,
		          length: getStringByteLength(seg.data)
		        }]);
		    }
		  }
		  return nodes;
		}

		/**
		 * Builds a graph from a list of nodes.
		 * All segments in each node group will be connected with all the segments of
		 * the next group and so on.
		 *
		 * At each connection will be assigned a weight depending on the
		 * segment's byte length.
		 *
		 * @param  {Array} nodes    Array of object with segments data
		 * @param  {Number} version QR Code version
		 * @return {Object}         Graph of all possible segments
		 */
		function buildGraph(nodes, version) {
		  var table = {};
		  var graph = {
		    'start': {}
		  };
		  var prevNodeIds = ['start'];
		  for (var i = 0; i < nodes.length; i++) {
		    var nodeGroup = nodes[i];
		    var currentNodeIds = [];
		    for (var j = 0; j < nodeGroup.length; j++) {
		      var node = nodeGroup[j];
		      var key = '' + i + j;
		      currentNodeIds.push(key);
		      table[key] = {
		        node: node,
		        lastCount: 0
		      };
		      graph[key] = {};
		      for (var n = 0; n < prevNodeIds.length; n++) {
		        var prevNodeId = prevNodeIds[n];
		        if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {
		          graph[prevNodeId][key] = getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) - getSegmentBitsLength(table[prevNodeId].lastCount, node.mode);
		          table[prevNodeId].lastCount += node.length;
		        } else {
		          if (table[prevNodeId]) table[prevNodeId].lastCount = node.length;
		          graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) + 4 + Mode.getCharCountIndicator(node.mode, version); // switch cost
		        }
		      }
		    }

		    prevNodeIds = currentNodeIds;
		  }
		  for (n = 0; n < prevNodeIds.length; n++) {
		    graph[prevNodeIds[n]]['end'] = 0;
		  }
		  return {
		    map: graph,
		    table: table
		  };
		}

		/**
		 * Builds a segment from a specified data and mode.
		 * If a mode is not specified, the more suitable will be used.
		 *
		 * @param  {String} data             Input data
		 * @param  {Mode | String} modesHint Data mode
		 * @return {Segment}                 Segment
		 */
		function buildSingleSegment(data, modesHint) {
		  var mode;
		  var bestMode = Mode.getBestModeForData(data);
		  mode = Mode.from(modesHint, bestMode);

		  // Make sure data can be encoded
		  if (mode !== Mode.BYTE && mode.bit < bestMode.bit) {
		    throw new Error('"' + data + '"' + ' cannot be encoded with mode ' + Mode.toString(mode) + '.\n Suggested mode is: ' + Mode.toString(bestMode));
		  }

		  // Use Mode.BYTE if Kanji support is disabled
		  if (mode === Mode.KANJI && !Utils.isKanjiModeEnabled()) {
		    mode = Mode.BYTE;
		  }
		  switch (mode) {
		    case Mode.NUMERIC:
		      return new NumericData(data);
		    case Mode.ALPHANUMERIC:
		      return new AlphanumericData(data);
		    case Mode.KANJI:
		      return new KanjiData(data);
		    case Mode.BYTE:
		      return new ByteData(data);
		  }
		}

		/**
		 * Builds a list of segments from an array.
		 * Array can contain Strings or Objects with segment's info.
		 *
		 * For each item which is a string, will be generated a segment with the given
		 * string and the more appropriate encoding mode.
		 *
		 * For each item which is an object, will be generated a segment with the given
		 * data and mode.
		 * Objects must contain at least the property "data".
		 * If property "mode" is not present, the more suitable mode will be used.
		 *
		 * @param  {Array} array Array of objects with segments data
		 * @return {Array}       Array of Segments
		 */
		exports.fromArray = function fromArray(array) {
		  return array.reduce(function (acc, seg) {
		    if (typeof seg === 'string') {
		      acc.push(buildSingleSegment(seg, null));
		    } else if (seg.data) {
		      acc.push(buildSingleSegment(seg.data, seg.mode));
		    }
		    return acc;
		  }, []);
		};

		/**
		 * Builds an optimized sequence of segments from a string,
		 * which will produce the shortest possible bitstream.
		 *
		 * @param  {String} data    Input string
		 * @param  {Number} version QR Code version
		 * @return {Array}          Array of segments
		 */
		exports.fromString = function fromString(data, version) {
		  var segs = getSegmentsFromString(data, Utils.isKanjiModeEnabled());
		  var nodes = buildNodes(segs);
		  var graph = buildGraph(nodes, version);
		  var path = dijkstra.find_path(graph.map, 'start', 'end');
		  var optimizedSegs = [];
		  for (var i = 1; i < path.length - 1; i++) {
		    optimizedSegs.push(graph.table[path[i]].node);
		  }
		  return exports.fromArray(mergeSegments(optimizedSegs));
		};

		/**
		 * Splits a string in various segments with the modes which
		 * best represent their content.
		 * The produced segments are far from being optimized.
		 * The output of this function is only used to estimate a QR Code version
		 * which may contain the data.
		 *
		 * @param  {string} data Input string
		 * @return {Array}       Array of segments
		 */
		exports.rawSplit = function rawSplit(data) {
		  return exports.fromArray(getSegmentsFromString(data, Utils.isKanjiModeEnabled()));
		};
} (segments));
	return segments;
}

var hasRequiredQrcode;

function requireQrcode () {
	if (hasRequiredQrcode) return qrcode;
	hasRequiredQrcode = 1;
	var BufferUtil = requireBuffer();
	var Utils = requireUtils$4();
	var ECLevel = requireErrorCorrectionLevel();
	var BitBuffer = requireBitBuffer();
	var BitMatrix = requireBitMatrix();
	var AlignmentPattern = requireAlignmentPattern();
	var FinderPattern = requireFinderPattern();
	var MaskPattern = requireMaskPattern();
	var ECCode = requireErrorCorrectionCode();
	var ReedSolomonEncoder = requireReedSolomonEncoder();
	var Version = requireVersion();
	var FormatInfo = requireFormatInfo();
	var Mode = requireMode();
	var Segments = requireSegments();
	var isArray = requireIsarray();

	/**
	 * QRCode for JavaScript
	 *
	 * modified by Ryan Day for nodejs support
	 * Copyright (c) 2011 Ryan Day
	 *
	 * Licensed under the MIT license:
	 *   http://www.opensource.org/licenses/mit-license.php
	 *
	//---------------------------------------------------------------------
	// QRCode for JavaScript
	//
	// Copyright (c) 2009 Kazuhiko Arase
	//
	// URL: http://www.d-project.com/
	//
	// Licensed under the MIT license:
	//   http://www.opensource.org/licenses/mit-license.php
	//
	// The word "QR Code" is registered trademark of
	// DENSO WAVE INCORPORATED
	//   http://www.denso-wave.com/qrcode/faqpatent-e.html
	//
	//---------------------------------------------------------------------
	*/

	/**
	 * Add finder patterns bits to matrix
	 *
	 * @param  {BitMatrix} matrix  Modules matrix
	 * @param  {Number}    version QR Code version
	 */
	function setupFinderPattern(matrix, version) {
	  var size = matrix.size;
	  var pos = FinderPattern.getPositions(version);
	  for (var i = 0; i < pos.length; i++) {
	    var row = pos[i][0];
	    var col = pos[i][1];
	    for (var r = -1; r <= 7; r++) {
	      if (row + r <= -1 || size <= row + r) continue;
	      for (var c = -1; c <= 7; c++) {
	        if (col + c <= -1 || size <= col + c) continue;
	        if (r >= 0 && r <= 6 && (c === 0 || c === 6) || c >= 0 && c <= 6 && (r === 0 || r === 6) || r >= 2 && r <= 4 && c >= 2 && c <= 4) {
	          matrix.set(row + r, col + c, true, true);
	        } else {
	          matrix.set(row + r, col + c, false, true);
	        }
	      }
	    }
	  }
	}

	/**
	 * Add timing pattern bits to matrix
	 *
	 * Note: this function must be called before {@link setupAlignmentPattern}
	 *
	 * @param  {BitMatrix} matrix Modules matrix
	 */
	function setupTimingPattern(matrix) {
	  var size = matrix.size;
	  for (var r = 8; r < size - 8; r++) {
	    var value = r % 2 === 0;
	    matrix.set(r, 6, value, true);
	    matrix.set(6, r, value, true);
	  }
	}

	/**
	 * Add alignment patterns bits to matrix
	 *
	 * Note: this function must be called after {@link setupTimingPattern}
	 *
	 * @param  {BitMatrix} matrix  Modules matrix
	 * @param  {Number}    version QR Code version
	 */
	function setupAlignmentPattern(matrix, version) {
	  var pos = AlignmentPattern.getPositions(version);
	  for (var i = 0; i < pos.length; i++) {
	    var row = pos[i][0];
	    var col = pos[i][1];
	    for (var r = -2; r <= 2; r++) {
	      for (var c = -2; c <= 2; c++) {
	        if (r === -2 || r === 2 || c === -2 || c === 2 || r === 0 && c === 0) {
	          matrix.set(row + r, col + c, true, true);
	        } else {
	          matrix.set(row + r, col + c, false, true);
	        }
	      }
	    }
	  }
	}

	/**
	 * Add version info bits to matrix
	 *
	 * @param  {BitMatrix} matrix  Modules matrix
	 * @param  {Number}    version QR Code version
	 */
	function setupVersionInfo(matrix, version) {
	  var size = matrix.size;
	  var bits = Version.getEncodedBits(version);
	  var row, col, mod;
	  for (var i = 0; i < 18; i++) {
	    row = Math.floor(i / 3);
	    col = i % 3 + size - 8 - 3;
	    mod = (bits >> i & 1) === 1;
	    matrix.set(row, col, mod, true);
	    matrix.set(col, row, mod, true);
	  }
	}

	/**
	 * Add format info bits to matrix
	 *
	 * @param  {BitMatrix} matrix               Modules matrix
	 * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level
	 * @param  {Number}    maskPattern          Mask pattern reference value
	 */
	function setupFormatInfo(matrix, errorCorrectionLevel, maskPattern) {
	  var size = matrix.size;
	  var bits = FormatInfo.getEncodedBits(errorCorrectionLevel, maskPattern);
	  var i, mod;
	  for (i = 0; i < 15; i++) {
	    mod = (bits >> i & 1) === 1;

	    // vertical
	    if (i < 6) {
	      matrix.set(i, 8, mod, true);
	    } else if (i < 8) {
	      matrix.set(i + 1, 8, mod, true);
	    } else {
	      matrix.set(size - 15 + i, 8, mod, true);
	    }

	    // horizontal
	    if (i < 8) {
	      matrix.set(8, size - i - 1, mod, true);
	    } else if (i < 9) {
	      matrix.set(8, 15 - i - 1 + 1, mod, true);
	    } else {
	      matrix.set(8, 15 - i - 1, mod, true);
	    }
	  }

	  // fixed module
	  matrix.set(size - 8, 8, 1, true);
	}

	/**
	 * Add encoded data bits to matrix
	 *
	 * @param  {BitMatrix} matrix Modules matrix
	 * @param  {Buffer}    data   Data codewords
	 */
	function setupData(matrix, data) {
	  var size = matrix.size;
	  var inc = -1;
	  var row = size - 1;
	  var bitIndex = 7;
	  var byteIndex = 0;
	  for (var col = size - 1; col > 0; col -= 2) {
	    if (col === 6) col--;
	    while (true) {
	      for (var c = 0; c < 2; c++) {
	        if (!matrix.isReserved(row, col - c)) {
	          var dark = false;
	          if (byteIndex < data.length) {
	            dark = (data[byteIndex] >>> bitIndex & 1) === 1;
	          }
	          matrix.set(row, col - c, dark);
	          bitIndex--;
	          if (bitIndex === -1) {
	            byteIndex++;
	            bitIndex = 7;
	          }
	        }
	      }
	      row += inc;
	      if (row < 0 || size <= row) {
	        row -= inc;
	        inc = -inc;
	        break;
	      }
	    }
	  }
	}

	/**
	 * Create encoded codewords from data input
	 *
	 * @param  {Number}   version              QR Code version
	 * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level
	 * @param  {ByteData} data                 Data input
	 * @return {Buffer}                        Buffer containing encoded codewords
	 */
	function createData(version, errorCorrectionLevel, segments) {
	  // Prepare data buffer
	  var buffer = new BitBuffer();
	  segments.forEach(function (data) {
	    // prefix data with mode indicator (4 bits)
	    buffer.put(data.mode.bit, 4);

	    // Prefix data with character count indicator.
	    // The character count indicator is a string of bits that represents the
	    // number of characters that are being encoded.
	    // The character count indicator must be placed after the mode indicator
	    // and must be a certain number of bits long, depending on the QR version
	    // and data mode
	    // @see {@link Mode.getCharCountIndicator}.
	    buffer.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version));

	    // add binary data sequence to buffer
	    data.write(buffer);
	  });

	  // Calculate required number of bits
	  var totalCodewords = Utils.getSymbolTotalCodewords(version);
	  var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);
	  var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;

	  // Add a terminator.
	  // If the bit string is shorter than the total number of required bits,
	  // a terminator of up to four 0s must be added to the right side of the string.
	  // If the bit string is more than four bits shorter than the required number of bits,
	  // add four 0s to the end.
	  if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {
	    buffer.put(0, 4);
	  }

	  // If the bit string is fewer than four bits shorter, add only the number of 0s that
	  // are needed to reach the required number of bits.

	  // After adding the terminator, if the number of bits in the string is not a multiple of 8,
	  // pad the string on the right with 0s to make the string's length a multiple of 8.
	  while (buffer.getLengthInBits() % 8 !== 0) {
	    buffer.putBit(0);
	  }

	  // Add pad bytes if the string is still shorter than the total number of required bits.
	  // Extend the buffer to fill the data capacity of the symbol corresponding to
	  // the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)
	  // and 00010001 (0x11) alternately.
	  var remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8;
	  for (var i = 0; i < remainingByte; i++) {
	    buffer.put(i % 2 ? 0x11 : 0xEC, 8);
	  }
	  return createCodewords(buffer, version, errorCorrectionLevel);
	}

	/**
	 * Encode input data with Reed-Solomon and return codewords with
	 * relative error correction bits
	 *
	 * @param  {BitBuffer} bitBuffer            Data to encode
	 * @param  {Number}    version              QR Code version
	 * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level
	 * @return {Buffer}                         Buffer containing encoded codewords
	 */
	function createCodewords(bitBuffer, version, errorCorrectionLevel) {
	  // Total codewords for this QR code version (Data + Error correction)
	  var totalCodewords = Utils.getSymbolTotalCodewords(version);

	  // Total number of error correction codewords
	  var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);

	  // Total number of data codewords
	  var dataTotalCodewords = totalCodewords - ecTotalCodewords;

	  // Total number of blocks
	  var ecTotalBlocks = ECCode.getBlocksCount(version, errorCorrectionLevel);

	  // Calculate how many blocks each group should contain
	  var blocksInGroup2 = totalCodewords % ecTotalBlocks;
	  var blocksInGroup1 = ecTotalBlocks - blocksInGroup2;
	  var totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);
	  var dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);
	  var dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1;

	  // Number of EC codewords is the same for both groups
	  var ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1;

	  // Initialize a Reed-Solomon encoder with a generator polynomial of degree ecCount
	  var rs = new ReedSolomonEncoder(ecCount);
	  var offset = 0;
	  var dcData = new Array(ecTotalBlocks);
	  var ecData = new Array(ecTotalBlocks);
	  var maxDataSize = 0;
	  var buffer = BufferUtil.from(bitBuffer.buffer);

	  // Divide the buffer into the required number of blocks
	  for (var b = 0; b < ecTotalBlocks; b++) {
	    var dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2;

	    // extract a block of data from buffer
	    dcData[b] = buffer.slice(offset, offset + dataSize);

	    // Calculate EC codewords for this data block
	    ecData[b] = rs.encode(dcData[b]);
	    offset += dataSize;
	    maxDataSize = Math.max(maxDataSize, dataSize);
	  }

	  // Create final data
	  // Interleave the data and error correction codewords from each block
	  var data = BufferUtil.alloc(totalCodewords);
	  var index = 0;
	  var i, r;

	  // Add data codewords
	  for (i = 0; i < maxDataSize; i++) {
	    for (r = 0; r < ecTotalBlocks; r++) {
	      if (i < dcData[r].length) {
	        data[index++] = dcData[r][i];
	      }
	    }
	  }

	  // Apped EC codewords
	  for (i = 0; i < ecCount; i++) {
	    for (r = 0; r < ecTotalBlocks; r++) {
	      data[index++] = ecData[r][i];
	    }
	  }
	  return data;
	}

	/**
	 * Build QR Code symbol
	 *
	 * @param  {String} data                 Input string
	 * @param  {Number} version              QR Code version
	 * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level
	 * @param  {MaskPattern} maskPattern     Mask pattern
	 * @return {Object}                      Object containing symbol data
	 */
	function createSymbol(data, version, errorCorrectionLevel, maskPattern) {
	  var segments;
	  if (isArray(data)) {
	    segments = Segments.fromArray(data);
	  } else if (typeof data === 'string') {
	    var estimatedVersion = version;
	    if (!estimatedVersion) {
	      var rawSegments = Segments.rawSplit(data);

	      // Estimate best version that can contain raw splitted segments
	      estimatedVersion = Version.getBestVersionForData(rawSegments, errorCorrectionLevel);
	    }

	    // Build optimized segments
	    // If estimated version is undefined, try with the highest version
	    segments = Segments.fromString(data, estimatedVersion || 40);
	  } else {
	    throw new Error('Invalid data');
	  }

	  // Get the min version that can contain data
	  var bestVersion = Version.getBestVersionForData(segments, errorCorrectionLevel);

	  // If no version is found, data cannot be stored
	  if (!bestVersion) {
	    throw new Error('The amount of data is too big to be stored in a QR Code');
	  }

	  // If not specified, use min version as default
	  if (!version) {
	    version = bestVersion;

	    // Check if the specified version can contain the data
	  } else if (version < bestVersion) {
	    throw new Error('\n' + 'The chosen QR Code version cannot contain this amount of data.\n' + 'Minimum version required to store current data is: ' + bestVersion + '.\n');
	  }
	  var dataBits = createData(version, errorCorrectionLevel, segments);

	  // Allocate matrix buffer
	  var moduleCount = Utils.getSymbolSize(version);
	  var modules = new BitMatrix(moduleCount);

	  // Add function modules
	  setupFinderPattern(modules, version);
	  setupTimingPattern(modules);
	  setupAlignmentPattern(modules, version);

	  // Add temporary dummy bits for format info just to set them as reserved.
	  // This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}
	  // since the masking operation must be performed only on the encoding region.
	  // These blocks will be replaced with correct values later in code.
	  setupFormatInfo(modules, errorCorrectionLevel, 0);
	  if (version >= 7) {
	    setupVersionInfo(modules, version);
	  }

	  // Add data codewords
	  setupData(modules, dataBits);
	  if (isNaN(maskPattern)) {
	    // Find best mask pattern
	    maskPattern = MaskPattern.getBestMask(modules, setupFormatInfo.bind(null, modules, errorCorrectionLevel));
	  }

	  // Apply mask pattern
	  MaskPattern.applyMask(maskPattern, modules);

	  // Replace format info bits with correct values
	  setupFormatInfo(modules, errorCorrectionLevel, maskPattern);
	  return {
	    modules: modules,
	    version: version,
	    errorCorrectionLevel: errorCorrectionLevel,
	    maskPattern: maskPattern,
	    segments: segments
	  };
	}

	/**
	 * QR Code
	 *
	 * @param {String | Array} data                 Input data
	 * @param {Object} options                      Optional configurations
	 * @param {Number} options.version              QR Code version
	 * @param {String} options.errorCorrectionLevel Error correction level
	 * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis
	 */
	qrcode.create = function create(data, options) {
	  if (typeof data === 'undefined' || data === '') {
	    throw new Error('No input text');
	  }
	  var errorCorrectionLevel = ECLevel.M;
	  var version;
	  var mask;
	  if (typeof options !== 'undefined') {
	    // Use higher error correction level as default
	    errorCorrectionLevel = ECLevel.from(options.errorCorrectionLevel, ECLevel.M);
	    version = Version.from(options.version);
	    mask = MaskPattern.from(options.maskPattern);
	    if (options.toSJISFunc) {
	      Utils.setToSJISFunction(options.toSJISFunc);
	    }
	  }
	  return createSymbol(data, version, errorCorrectionLevel, mask);
	};
	return qrcode;
}

var png$1 = {};

var png = {};

var parserAsync = {exports: {}};

var chunkstream = {exports: {}};

var hasRequiredChunkstream;

function requireChunkstream () {
	if (hasRequiredChunkstream) return chunkstream.exports;
	hasRequiredChunkstream = 1;

	var util = require$$0__default$1["default"];
	var Stream = require$$1__default$1["default"];
	var ChunkStream = chunkstream.exports = function () {
	  Stream.call(this);
	  this._buffers = [];
	  this._buffered = 0;
	  this._reads = [];
	  this._paused = false;
	  this._encoding = 'utf8';
	  this.writable = true;
	};
	util.inherits(ChunkStream, Stream);
	ChunkStream.prototype.read = function (length, callback) {
	  this._reads.push({
	    length: Math.abs(length),
	    // if length < 0 then at most this length
	    allowLess: length < 0,
	    func: callback
	  });
	  process.nextTick(function () {
	    this._process();

	    // its paused and there is not enought data then ask for more
	    if (this._paused && this._reads.length > 0) {
	      this._paused = false;
	      this.emit('drain');
	    }
	  }.bind(this));
	};
	ChunkStream.prototype.write = function (data, encoding) {
	  if (!this.writable) {
	    this.emit('error', new Error('Stream not writable'));
	    return false;
	  }
	  var dataBuffer;
	  if (Buffer.isBuffer(data)) {
	    dataBuffer = data;
	  } else {
	    dataBuffer = new Buffer(data, encoding || this._encoding);
	  }
	  this._buffers.push(dataBuffer);
	  this._buffered += dataBuffer.length;
	  this._process();

	  // ok if there are no more read requests
	  if (this._reads && this._reads.length === 0) {
	    this._paused = true;
	  }
	  return this.writable && !this._paused;
	};
	ChunkStream.prototype.end = function (data, encoding) {
	  if (data) {
	    this.write(data, encoding);
	  }
	  this.writable = false;

	  // already destroyed
	  if (!this._buffers) {
	    return;
	  }

	  // enqueue or handle end
	  if (this._buffers.length === 0) {
	    this._end();
	  } else {
	    this._buffers.push(null);
	    this._process();
	  }
	};
	ChunkStream.prototype.destroySoon = ChunkStream.prototype.end;
	ChunkStream.prototype._end = function () {
	  if (this._reads.length > 0) {
	    this.emit('error', new Error('Unexpected end of input'));
	  }
	  this.destroy();
	};
	ChunkStream.prototype.destroy = function () {
	  if (!this._buffers) {
	    return;
	  }
	  this.writable = false;
	  this._reads = null;
	  this._buffers = null;
	  this.emit('close');
	};
	ChunkStream.prototype._processReadAllowingLess = function (read) {
	  // ok there is any data so that we can satisfy this request
	  this._reads.shift(); // == read

	  // first we need to peek into first buffer
	  var smallerBuf = this._buffers[0];

	  // ok there is more data than we need
	  if (smallerBuf.length > read.length) {
	    this._buffered -= read.length;
	    this._buffers[0] = smallerBuf.slice(read.length);
	    read.func.call(this, smallerBuf.slice(0, read.length));
	  } else {
	    // ok this is less than maximum length so use it all
	    this._buffered -= smallerBuf.length;
	    this._buffers.shift(); // == smallerBuf

	    read.func.call(this, smallerBuf);
	  }
	};
	ChunkStream.prototype._processRead = function (read) {
	  this._reads.shift(); // == read

	  var pos = 0;
	  var count = 0;
	  var data = new Buffer(read.length);

	  // create buffer for all data
	  while (pos < read.length) {
	    var buf = this._buffers[count++];
	    var len = Math.min(buf.length, read.length - pos);
	    buf.copy(data, pos, 0, len);
	    pos += len;

	    // last buffer wasn't used all so just slice it and leave
	    if (len !== buf.length) {
	      this._buffers[--count] = buf.slice(len);
	    }
	  }

	  // remove all used buffers
	  if (count > 0) {
	    this._buffers.splice(0, count);
	  }
	  this._buffered -= read.length;
	  read.func.call(this, data);
	};
	ChunkStream.prototype._process = function () {
	  try {
	    // as long as there is any data and read requests
	    while (this._buffered > 0 && this._reads && this._reads.length > 0) {
	      var read = this._reads[0];

	      // read any data (but no more than length)
	      if (read.allowLess) {
	        this._processReadAllowingLess(read);
	      } else if (this._buffered >= read.length) {
	        // ok we can meet some expectations

	        this._processRead(read);
	      } else {
	        // not enought data to satisfy first request in queue
	        // so we need to wait for more
	        break;
	      }
	    }
	    if (this._buffers && !this.writable) {
	      this._end();
	    }
	  } catch (ex) {
	    this.emit('error', ex);
	  }
	};
	return chunkstream.exports;
}

var filterParseAsync = {exports: {}};

var filterParse = {exports: {}};

var interlace = {};

var hasRequiredInterlace;

function requireInterlace () {
	if (hasRequiredInterlace) return interlace;
	hasRequiredInterlace = 1;

	// Adam 7
	//   0 1 2 3 4 5 6 7
	// 0 x 6 4 6 x 6 4 6
	// 1 7 7 7 7 7 7 7 7
	// 2 5 6 5 6 5 6 5 6
	// 3 7 7 7 7 7 7 7 7
	// 4 3 6 4 6 3 6 4 6
	// 5 7 7 7 7 7 7 7 7
	// 6 5 6 5 6 5 6 5 6
	// 7 7 7 7 7 7 7 7 7
	var imagePasses = [{
	  // pass 1 - 1px
	  x: [0],
	  y: [0]
	}, {
	  // pass 2 - 1px
	  x: [4],
	  y: [0]
	}, {
	  // pass 3 - 2px
	  x: [0, 4],
	  y: [4]
	}, {
	  // pass 4 - 4px
	  x: [2, 6],
	  y: [0, 4]
	}, {
	  // pass 5 - 8px
	  x: [0, 2, 4, 6],
	  y: [2, 6]
	}, {
	  // pass 6 - 16px
	  x: [1, 3, 5, 7],
	  y: [0, 2, 4, 6]
	}, {
	  // pass 7 - 32px
	  x: [0, 1, 2, 3, 4, 5, 6, 7],
	  y: [1, 3, 5, 7]
	}];
	interlace.getImagePasses = function (width, height) {
	  var images = [];
	  var xLeftOver = width % 8;
	  var yLeftOver = height % 8;
	  var xRepeats = (width - xLeftOver) / 8;
	  var yRepeats = (height - yLeftOver) / 8;
	  for (var i = 0; i < imagePasses.length; i++) {
	    var pass = imagePasses[i];
	    var passWidth = xRepeats * pass.x.length;
	    var passHeight = yRepeats * pass.y.length;
	    for (var j = 0; j < pass.x.length; j++) {
	      if (pass.x[j] < xLeftOver) {
	        passWidth++;
	      } else {
	        break;
	      }
	    }
	    for (j = 0; j < pass.y.length; j++) {
	      if (pass.y[j] < yLeftOver) {
	        passHeight++;
	      } else {
	        break;
	      }
	    }
	    if (passWidth > 0 && passHeight > 0) {
	      images.push({
	        width: passWidth,
	        height: passHeight,
	        index: i
	      });
	    }
	  }
	  return images;
	};
	interlace.getInterlaceIterator = function (width) {
	  return function (x, y, pass) {
	    var outerXLeftOver = x % imagePasses[pass].x.length;
	    var outerX = (x - outerXLeftOver) / imagePasses[pass].x.length * 8 + imagePasses[pass].x[outerXLeftOver];
	    var outerYLeftOver = y % imagePasses[pass].y.length;
	    var outerY = (y - outerYLeftOver) / imagePasses[pass].y.length * 8 + imagePasses[pass].y[outerYLeftOver];
	    return outerX * 4 + outerY * width * 4;
	  };
	};
	return interlace;
}

var paethPredictor;
var hasRequiredPaethPredictor;

function requirePaethPredictor () {
	if (hasRequiredPaethPredictor) return paethPredictor;
	hasRequiredPaethPredictor = 1;

	paethPredictor = function paethPredictor(left, above, upLeft) {
	  var paeth = left + above - upLeft;
	  var pLeft = Math.abs(paeth - left);
	  var pAbove = Math.abs(paeth - above);
	  var pUpLeft = Math.abs(paeth - upLeft);
	  if (pLeft <= pAbove && pLeft <= pUpLeft) {
	    return left;
	  }
	  if (pAbove <= pUpLeft) {
	    return above;
	  }
	  return upLeft;
	};
	return paethPredictor;
}

var hasRequiredFilterParse;

function requireFilterParse () {
	if (hasRequiredFilterParse) return filterParse.exports;
	hasRequiredFilterParse = 1;

	var interlaceUtils = requireInterlace();
	var paethPredictor = requirePaethPredictor();
	function getByteWidth(width, bpp, depth) {
	  var byteWidth = width * bpp;
	  if (depth !== 8) {
	    byteWidth = Math.ceil(byteWidth / (8 / depth));
	  }
	  return byteWidth;
	}
	var Filter = filterParse.exports = function (bitmapInfo, dependencies) {
	  var width = bitmapInfo.width;
	  var height = bitmapInfo.height;
	  var interlace = bitmapInfo.interlace;
	  var bpp = bitmapInfo.bpp;
	  var depth = bitmapInfo.depth;
	  this.read = dependencies.read;
	  this.write = dependencies.write;
	  this.complete = dependencies.complete;
	  this._imageIndex = 0;
	  this._images = [];
	  if (interlace) {
	    var passes = interlaceUtils.getImagePasses(width, height);
	    for (var i = 0; i < passes.length; i++) {
	      this._images.push({
	        byteWidth: getByteWidth(passes[i].width, bpp, depth),
	        height: passes[i].height,
	        lineIndex: 0
	      });
	    }
	  } else {
	    this._images.push({
	      byteWidth: getByteWidth(width, bpp, depth),
	      height: height,
	      lineIndex: 0
	    });
	  }

	  // when filtering the line we look at the pixel to the left
	  // the spec also says it is done on a byte level regardless of the number of pixels
	  // so if the depth is byte compatible (8 or 16) we subtract the bpp in order to compare back
	  // a pixel rather than just a different byte part. However if we are sub byte, we ignore.
	  if (depth === 8) {
	    this._xComparison = bpp;
	  } else if (depth === 16) {
	    this._xComparison = bpp * 2;
	  } else {
	    this._xComparison = 1;
	  }
	};
	Filter.prototype.start = function () {
	  this.read(this._images[this._imageIndex].byteWidth + 1, this._reverseFilterLine.bind(this));
	};
	Filter.prototype._unFilterType1 = function (rawData, unfilteredLine, byteWidth) {
	  var xComparison = this._xComparison;
	  var xBiggerThan = xComparison - 1;
	  for (var x = 0; x < byteWidth; x++) {
	    var rawByte = rawData[1 + x];
	    var f1Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;
	    unfilteredLine[x] = rawByte + f1Left;
	  }
	};
	Filter.prototype._unFilterType2 = function (rawData, unfilteredLine, byteWidth) {
	  var lastLine = this._lastLine;
	  for (var x = 0; x < byteWidth; x++) {
	    var rawByte = rawData[1 + x];
	    var f2Up = lastLine ? lastLine[x] : 0;
	    unfilteredLine[x] = rawByte + f2Up;
	  }
	};
	Filter.prototype._unFilterType3 = function (rawData, unfilteredLine, byteWidth) {
	  var xComparison = this._xComparison;
	  var xBiggerThan = xComparison - 1;
	  var lastLine = this._lastLine;
	  for (var x = 0; x < byteWidth; x++) {
	    var rawByte = rawData[1 + x];
	    var f3Up = lastLine ? lastLine[x] : 0;
	    var f3Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;
	    var f3Add = Math.floor((f3Left + f3Up) / 2);
	    unfilteredLine[x] = rawByte + f3Add;
	  }
	};
	Filter.prototype._unFilterType4 = function (rawData, unfilteredLine, byteWidth) {
	  var xComparison = this._xComparison;
	  var xBiggerThan = xComparison - 1;
	  var lastLine = this._lastLine;
	  for (var x = 0; x < byteWidth; x++) {
	    var rawByte = rawData[1 + x];
	    var f4Up = lastLine ? lastLine[x] : 0;
	    var f4Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;
	    var f4UpLeft = x > xBiggerThan && lastLine ? lastLine[x - xComparison] : 0;
	    var f4Add = paethPredictor(f4Left, f4Up, f4UpLeft);
	    unfilteredLine[x] = rawByte + f4Add;
	  }
	};
	Filter.prototype._reverseFilterLine = function (rawData) {
	  var filter = rawData[0];
	  var unfilteredLine;
	  var currentImage = this._images[this._imageIndex];
	  var byteWidth = currentImage.byteWidth;
	  if (filter === 0) {
	    unfilteredLine = rawData.slice(1, byteWidth + 1);
	  } else {
	    unfilteredLine = new Buffer(byteWidth);
	    switch (filter) {
	      case 1:
	        this._unFilterType1(rawData, unfilteredLine, byteWidth);
	        break;
	      case 2:
	        this._unFilterType2(rawData, unfilteredLine, byteWidth);
	        break;
	      case 3:
	        this._unFilterType3(rawData, unfilteredLine, byteWidth);
	        break;
	      case 4:
	        this._unFilterType4(rawData, unfilteredLine, byteWidth);
	        break;
	      default:
	        throw new Error('Unrecognised filter type - ' + filter);
	    }
	  }
	  this.write(unfilteredLine);
	  currentImage.lineIndex++;
	  if (currentImage.lineIndex >= currentImage.height) {
	    this._lastLine = null;
	    this._imageIndex++;
	    currentImage = this._images[this._imageIndex];
	  } else {
	    this._lastLine = unfilteredLine;
	  }
	  if (currentImage) {
	    // read, using the byte width that may be from the new current image
	    this.read(currentImage.byteWidth + 1, this._reverseFilterLine.bind(this));
	  } else {
	    this._lastLine = null;
	    this.complete();
	  }
	};
	return filterParse.exports;
}

var hasRequiredFilterParseAsync;

function requireFilterParseAsync () {
	if (hasRequiredFilterParseAsync) return filterParseAsync.exports;
	hasRequiredFilterParseAsync = 1;

	var util = require$$0__default$1["default"];
	var ChunkStream = requireChunkstream();
	var Filter = requireFilterParse();
	var FilterAsync = filterParseAsync.exports = function (bitmapInfo) {
	  ChunkStream.call(this);
	  var buffers = [];
	  var that = this;
	  this._filter = new Filter(bitmapInfo, {
	    read: this.read.bind(this),
	    write: function write(buffer) {
	      buffers.push(buffer);
	    },
	    complete: function complete() {
	      that.emit('complete', Buffer.concat(buffers));
	    }
	  });
	  this._filter.start();
	};
	util.inherits(FilterAsync, ChunkStream);
	return filterParseAsync.exports;
}

var parser = {exports: {}};

var constants$1;
var hasRequiredConstants$1;

function requireConstants$1 () {
	if (hasRequiredConstants$1) return constants$1;
	hasRequiredConstants$1 = 1;

	constants$1 = {
	  PNG_SIGNATURE: [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a],
	  TYPE_IHDR: 0x49484452,
	  TYPE_IEND: 0x49454e44,
	  TYPE_IDAT: 0x49444154,
	  TYPE_PLTE: 0x504c5445,
	  TYPE_tRNS: 0x74524e53,
	  // eslint-disable-line camelcase
	  TYPE_gAMA: 0x67414d41,
	  // eslint-disable-line camelcase

	  // color-type bits
	  COLORTYPE_GRAYSCALE: 0,
	  COLORTYPE_PALETTE: 1,
	  COLORTYPE_COLOR: 2,
	  COLORTYPE_ALPHA: 4,
	  // e.g. grayscale and alpha

	  // color-type combinations
	  COLORTYPE_PALETTE_COLOR: 3,
	  COLORTYPE_COLOR_ALPHA: 6,
	  COLORTYPE_TO_BPP_MAP: {
	    0: 1,
	    2: 3,
	    3: 1,
	    4: 2,
	    6: 4
	  },
	  GAMMA_DIVISION: 100000
	};
	return constants$1;
}

var crc = {exports: {}};

var hasRequiredCrc;

function requireCrc () {
	if (hasRequiredCrc) return crc.exports;
	hasRequiredCrc = 1;

	var crcTable = [];
	(function () {
	  for (var i = 0; i < 256; i++) {
	    var currentCrc = i;
	    for (var j = 0; j < 8; j++) {
	      if (currentCrc & 1) {
	        currentCrc = 0xedb88320 ^ currentCrc >>> 1;
	      } else {
	        currentCrc = currentCrc >>> 1;
	      }
	    }
	    crcTable[i] = currentCrc;
	  }
	})();
	var CrcCalculator = crc.exports = function () {
	  this._crc = -1;
	};
	CrcCalculator.prototype.write = function (data) {
	  for (var i = 0; i < data.length; i++) {
	    this._crc = crcTable[(this._crc ^ data[i]) & 0xff] ^ this._crc >>> 8;
	  }
	  return true;
	};
	CrcCalculator.prototype.crc32 = function () {
	  return this._crc ^ -1;
	};
	CrcCalculator.crc32 = function (buf) {
	  var crc = -1;
	  for (var i = 0; i < buf.length; i++) {
	    crc = crcTable[(crc ^ buf[i]) & 0xff] ^ crc >>> 8;
	  }
	  return crc ^ -1;
	};
	return crc.exports;
}

var hasRequiredParser;

function requireParser () {
	if (hasRequiredParser) return parser.exports;
	hasRequiredParser = 1;

	var constants = requireConstants$1();
	var CrcCalculator = requireCrc();
	var Parser = parser.exports = function (options, dependencies) {
	  this._options = options;
	  options.checkCRC = options.checkCRC !== false;
	  this._hasIHDR = false;
	  this._hasIEND = false;
	  this._emittedHeadersFinished = false;

	  // input flags/metadata
	  this._palette = [];
	  this._colorType = 0;
	  this._chunks = {};
	  this._chunks[constants.TYPE_IHDR] = this._handleIHDR.bind(this);
	  this._chunks[constants.TYPE_IEND] = this._handleIEND.bind(this);
	  this._chunks[constants.TYPE_IDAT] = this._handleIDAT.bind(this);
	  this._chunks[constants.TYPE_PLTE] = this._handlePLTE.bind(this);
	  this._chunks[constants.TYPE_tRNS] = this._handleTRNS.bind(this);
	  this._chunks[constants.TYPE_gAMA] = this._handleGAMA.bind(this);
	  this.read = dependencies.read;
	  this.error = dependencies.error;
	  this.metadata = dependencies.metadata;
	  this.gamma = dependencies.gamma;
	  this.transColor = dependencies.transColor;
	  this.palette = dependencies.palette;
	  this.parsed = dependencies.parsed;
	  this.inflateData = dependencies.inflateData;
	  this.finished = dependencies.finished;
	  this.simpleTransparency = dependencies.simpleTransparency;
	  this.headersFinished = dependencies.headersFinished || function () {};
	};
	Parser.prototype.start = function () {
	  this.read(constants.PNG_SIGNATURE.length, this._parseSignature.bind(this));
	};
	Parser.prototype._parseSignature = function (data) {
	  var signature = constants.PNG_SIGNATURE;
	  for (var i = 0; i < signature.length; i++) {
	    if (data[i] !== signature[i]) {
	      this.error(new Error('Invalid file signature'));
	      return;
	    }
	  }
	  this.read(8, this._parseChunkBegin.bind(this));
	};
	Parser.prototype._parseChunkBegin = function (data) {
	  // chunk content length
	  var length = data.readUInt32BE(0);

	  // chunk type
	  var type = data.readUInt32BE(4);
	  var name = '';
	  for (var i = 4; i < 8; i++) {
	    name += String.fromCharCode(data[i]);
	  }

	  //console.log('chunk ', name, length);

	  // chunk flags
	  var ancillary = Boolean(data[4] & 0x20); // or critical
	  //    priv = Boolean(data[5] & 0x20), // or public
	  //    safeToCopy = Boolean(data[7] & 0x20); // or unsafe

	  if (!this._hasIHDR && type !== constants.TYPE_IHDR) {
	    this.error(new Error('Expected IHDR on beggining'));
	    return;
	  }
	  this._crc = new CrcCalculator();
	  this._crc.write(new Buffer(name));
	  if (this._chunks[type]) {
	    return this._chunks[type](length);
	  }
	  if (!ancillary) {
	    this.error(new Error('Unsupported critical chunk type ' + name));
	    return;
	  }
	  this.read(length + 4, this._skipChunk.bind(this));
	};
	Parser.prototype._skipChunk = function /*data*/
	() {
	  this.read(8, this._parseChunkBegin.bind(this));
	};
	Parser.prototype._handleChunkEnd = function () {
	  this.read(4, this._parseChunkEnd.bind(this));
	};
	Parser.prototype._parseChunkEnd = function (data) {
	  var fileCrc = data.readInt32BE(0);
	  var calcCrc = this._crc.crc32();

	  // check CRC
	  if (this._options.checkCRC && calcCrc !== fileCrc) {
	    this.error(new Error('Crc error - ' + fileCrc + ' - ' + calcCrc));
	    return;
	  }
	  if (!this._hasIEND) {
	    this.read(8, this._parseChunkBegin.bind(this));
	  }
	};
	Parser.prototype._handleIHDR = function (length) {
	  this.read(length, this._parseIHDR.bind(this));
	};
	Parser.prototype._parseIHDR = function (data) {
	  this._crc.write(data);
	  var width = data.readUInt32BE(0);
	  var height = data.readUInt32BE(4);
	  var depth = data[8];
	  var colorType = data[9]; // bits: 1 palette, 2 color, 4 alpha
	  var compr = data[10];
	  var filter = data[11];
	  var interlace = data[12];

	  // console.log('    width', width, 'height', height,
	  //     'depth', depth, 'colorType', colorType,
	  //     'compr', compr, 'filter', filter, 'interlace', interlace
	  // );

	  if (depth !== 8 && depth !== 4 && depth !== 2 && depth !== 1 && depth !== 16) {
	    this.error(new Error('Unsupported bit depth ' + depth));
	    return;
	  }
	  if (!(colorType in constants.COLORTYPE_TO_BPP_MAP)) {
	    this.error(new Error('Unsupported color type'));
	    return;
	  }
	  if (compr !== 0) {
	    this.error(new Error('Unsupported compression method'));
	    return;
	  }
	  if (filter !== 0) {
	    this.error(new Error('Unsupported filter method'));
	    return;
	  }
	  if (interlace !== 0 && interlace !== 1) {
	    this.error(new Error('Unsupported interlace method'));
	    return;
	  }
	  this._colorType = colorType;
	  var bpp = constants.COLORTYPE_TO_BPP_MAP[this._colorType];
	  this._hasIHDR = true;
	  this.metadata({
	    width: width,
	    height: height,
	    depth: depth,
	    interlace: Boolean(interlace),
	    palette: Boolean(colorType & constants.COLORTYPE_PALETTE),
	    color: Boolean(colorType & constants.COLORTYPE_COLOR),
	    alpha: Boolean(colorType & constants.COLORTYPE_ALPHA),
	    bpp: bpp,
	    colorType: colorType
	  });
	  this._handleChunkEnd();
	};
	Parser.prototype._handlePLTE = function (length) {
	  this.read(length, this._parsePLTE.bind(this));
	};
	Parser.prototype._parsePLTE = function (data) {
	  this._crc.write(data);
	  var entries = Math.floor(data.length / 3);
	  // console.log('Palette:', entries);

	  for (var i = 0; i < entries; i++) {
	    this._palette.push([data[i * 3], data[i * 3 + 1], data[i * 3 + 2], 0xff]);
	  }
	  this.palette(this._palette);
	  this._handleChunkEnd();
	};
	Parser.prototype._handleTRNS = function (length) {
	  this.simpleTransparency();
	  this.read(length, this._parseTRNS.bind(this));
	};
	Parser.prototype._parseTRNS = function (data) {
	  this._crc.write(data);

	  // palette
	  if (this._colorType === constants.COLORTYPE_PALETTE_COLOR) {
	    if (this._palette.length === 0) {
	      this.error(new Error('Transparency chunk must be after palette'));
	      return;
	    }
	    if (data.length > this._palette.length) {
	      this.error(new Error('More transparent colors than palette size'));
	      return;
	    }
	    for (var i = 0; i < data.length; i++) {
	      this._palette[i][3] = data[i];
	    }
	    this.palette(this._palette);
	  }

	  // for colorType 0 (grayscale) and 2 (rgb)
	  // there might be one gray/color defined as transparent
	  if (this._colorType === constants.COLORTYPE_GRAYSCALE) {
	    // grey, 2 bytes
	    this.transColor([data.readUInt16BE(0)]);
	  }
	  if (this._colorType === constants.COLORTYPE_COLOR) {
	    this.transColor([data.readUInt16BE(0), data.readUInt16BE(2), data.readUInt16BE(4)]);
	  }
	  this._handleChunkEnd();
	};
	Parser.prototype._handleGAMA = function (length) {
	  this.read(length, this._parseGAMA.bind(this));
	};
	Parser.prototype._parseGAMA = function (data) {
	  this._crc.write(data);
	  this.gamma(data.readUInt32BE(0) / constants.GAMMA_DIVISION);
	  this._handleChunkEnd();
	};
	Parser.prototype._handleIDAT = function (length) {
	  if (!this._emittedHeadersFinished) {
	    this._emittedHeadersFinished = true;
	    this.headersFinished();
	  }
	  this.read(-length, this._parseIDAT.bind(this, length));
	};
	Parser.prototype._parseIDAT = function (length, data) {
	  this._crc.write(data);
	  if (this._colorType === constants.COLORTYPE_PALETTE_COLOR && this._palette.length === 0) {
	    throw new Error('Expected palette not found');
	  }
	  this.inflateData(data);
	  var leftOverLength = length - data.length;
	  if (leftOverLength > 0) {
	    this._handleIDAT(leftOverLength);
	  } else {
	    this._handleChunkEnd();
	  }
	};
	Parser.prototype._handleIEND = function (length) {
	  this.read(length, this._parseIEND.bind(this));
	};
	Parser.prototype._parseIEND = function (data) {
	  this._crc.write(data);
	  this._hasIEND = true;
	  this._handleChunkEnd();
	  if (this.finished) {
	    this.finished();
	  }
	};
	return parser.exports;
}

var bitmapper = {};

var hasRequiredBitmapper;

function requireBitmapper () {
	if (hasRequiredBitmapper) return bitmapper;
	hasRequiredBitmapper = 1;

	var interlaceUtils = requireInterlace();
	var pixelBppMapper = [
	// 0 - dummy entry
	function () {},
	// 1 - L
	// 0: 0, 1: 0, 2: 0, 3: 0xff
	function (pxData, data, pxPos, rawPos) {
	  if (rawPos === data.length) {
	    throw new Error('Ran out of data');
	  }
	  var pixel = data[rawPos];
	  pxData[pxPos] = pixel;
	  pxData[pxPos + 1] = pixel;
	  pxData[pxPos + 2] = pixel;
	  pxData[pxPos + 3] = 0xff;
	},
	// 2 - LA
	// 0: 0, 1: 0, 2: 0, 3: 1
	function (pxData, data, pxPos, rawPos) {
	  if (rawPos + 1 >= data.length) {
	    throw new Error('Ran out of data');
	  }
	  var pixel = data[rawPos];
	  pxData[pxPos] = pixel;
	  pxData[pxPos + 1] = pixel;
	  pxData[pxPos + 2] = pixel;
	  pxData[pxPos + 3] = data[rawPos + 1];
	},
	// 3 - RGB
	// 0: 0, 1: 1, 2: 2, 3: 0xff
	function (pxData, data, pxPos, rawPos) {
	  if (rawPos + 2 >= data.length) {
	    throw new Error('Ran out of data');
	  }
	  pxData[pxPos] = data[rawPos];
	  pxData[pxPos + 1] = data[rawPos + 1];
	  pxData[pxPos + 2] = data[rawPos + 2];
	  pxData[pxPos + 3] = 0xff;
	},
	// 4 - RGBA
	// 0: 0, 1: 1, 2: 2, 3: 3
	function (pxData, data, pxPos, rawPos) {
	  if (rawPos + 3 >= data.length) {
	    throw new Error('Ran out of data');
	  }
	  pxData[pxPos] = data[rawPos];
	  pxData[pxPos + 1] = data[rawPos + 1];
	  pxData[pxPos + 2] = data[rawPos + 2];
	  pxData[pxPos + 3] = data[rawPos + 3];
	}];
	var pixelBppCustomMapper = [
	// 0 - dummy entry
	function () {},
	// 1 - L
	// 0: 0, 1: 0, 2: 0, 3: 0xff
	function (pxData, pixelData, pxPos, maxBit) {
	  var pixel = pixelData[0];
	  pxData[pxPos] = pixel;
	  pxData[pxPos + 1] = pixel;
	  pxData[pxPos + 2] = pixel;
	  pxData[pxPos + 3] = maxBit;
	},
	// 2 - LA
	// 0: 0, 1: 0, 2: 0, 3: 1
	function (pxData, pixelData, pxPos) {
	  var pixel = pixelData[0];
	  pxData[pxPos] = pixel;
	  pxData[pxPos + 1] = pixel;
	  pxData[pxPos + 2] = pixel;
	  pxData[pxPos + 3] = pixelData[1];
	},
	// 3 - RGB
	// 0: 0, 1: 1, 2: 2, 3: 0xff
	function (pxData, pixelData, pxPos, maxBit) {
	  pxData[pxPos] = pixelData[0];
	  pxData[pxPos + 1] = pixelData[1];
	  pxData[pxPos + 2] = pixelData[2];
	  pxData[pxPos + 3] = maxBit;
	},
	// 4 - RGBA
	// 0: 0, 1: 1, 2: 2, 3: 3
	function (pxData, pixelData, pxPos) {
	  pxData[pxPos] = pixelData[0];
	  pxData[pxPos + 1] = pixelData[1];
	  pxData[pxPos + 2] = pixelData[2];
	  pxData[pxPos + 3] = pixelData[3];
	}];
	function bitRetriever(data, depth) {
	  var leftOver = [];
	  var i = 0;
	  function split() {
	    if (i === data.length) {
	      throw new Error('Ran out of data');
	    }
	    var _byte = data[i];
	    i++;
	    var byte8, byte7, byte6, byte5, byte4, byte3, byte2, byte1;
	    switch (depth) {
	      default:
	        throw new Error('unrecognised depth');
	      case 16:
	        byte2 = data[i];
	        i++;
	        leftOver.push((_byte << 8) + byte2);
	        break;
	      case 4:
	        byte2 = _byte & 0x0f;
	        byte1 = _byte >> 4;
	        leftOver.push(byte1, byte2);
	        break;
	      case 2:
	        byte4 = _byte & 3;
	        byte3 = _byte >> 2 & 3;
	        byte2 = _byte >> 4 & 3;
	        byte1 = _byte >> 6 & 3;
	        leftOver.push(byte1, byte2, byte3, byte4);
	        break;
	      case 1:
	        byte8 = _byte & 1;
	        byte7 = _byte >> 1 & 1;
	        byte6 = _byte >> 2 & 1;
	        byte5 = _byte >> 3 & 1;
	        byte4 = _byte >> 4 & 1;
	        byte3 = _byte >> 5 & 1;
	        byte2 = _byte >> 6 & 1;
	        byte1 = _byte >> 7 & 1;
	        leftOver.push(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8);
	        break;
	    }
	  }
	  return {
	    get: function get(count) {
	      while (leftOver.length < count) {
	        split();
	      }
	      var returner = leftOver.slice(0, count);
	      leftOver = leftOver.slice(count);
	      return returner;
	    },
	    resetAfterLine: function resetAfterLine() {
	      leftOver.length = 0;
	    },
	    end: function end() {
	      if (i !== data.length) {
	        throw new Error('extra data found');
	      }
	    }
	  };
	}
	function mapImage8Bit(image, pxData, getPxPos, bpp, data, rawPos) {
	  // eslint-disable-line max-params
	  var imageWidth = image.width;
	  var imageHeight = image.height;
	  var imagePass = image.index;
	  for (var y = 0; y < imageHeight; y++) {
	    for (var x = 0; x < imageWidth; x++) {
	      var pxPos = getPxPos(x, y, imagePass);
	      pixelBppMapper[bpp](pxData, data, pxPos, rawPos);
	      rawPos += bpp; //eslint-disable-line no-param-reassign
	    }
	  }

	  return rawPos;
	}
	function mapImageCustomBit(image, pxData, getPxPos, bpp, bits, maxBit) {
	  // eslint-disable-line max-params
	  var imageWidth = image.width;
	  var imageHeight = image.height;
	  var imagePass = image.index;
	  for (var y = 0; y < imageHeight; y++) {
	    for (var x = 0; x < imageWidth; x++) {
	      var pixelData = bits.get(bpp);
	      var pxPos = getPxPos(x, y, imagePass);
	      pixelBppCustomMapper[bpp](pxData, pixelData, pxPos, maxBit);
	    }
	    bits.resetAfterLine();
	  }
	}
	bitmapper.dataToBitMap = function (data, bitmapInfo) {
	  var width = bitmapInfo.width;
	  var height = bitmapInfo.height;
	  var depth = bitmapInfo.depth;
	  var bpp = bitmapInfo.bpp;
	  var interlace = bitmapInfo.interlace;
	  if (depth !== 8) {
	    var bits = bitRetriever(data, depth);
	  }
	  var pxData;
	  if (depth <= 8) {
	    pxData = new Buffer(width * height * 4);
	  } else {
	    pxData = new Uint16Array(width * height * 4);
	  }
	  var maxBit = Math.pow(2, depth) - 1;
	  var rawPos = 0;
	  var images;
	  var getPxPos;
	  if (interlace) {
	    images = interlaceUtils.getImagePasses(width, height);
	    getPxPos = interlaceUtils.getInterlaceIterator(width, height);
	  } else {
	    var nonInterlacedPxPos = 0;
	    getPxPos = function getPxPos() {
	      var returner = nonInterlacedPxPos;
	      nonInterlacedPxPos += 4;
	      return returner;
	    };
	    images = [{
	      width: width,
	      height: height
	    }];
	  }
	  for (var imageIndex = 0; imageIndex < images.length; imageIndex++) {
	    if (depth === 8) {
	      rawPos = mapImage8Bit(images[imageIndex], pxData, getPxPos, bpp, data, rawPos);
	    } else {
	      mapImageCustomBit(images[imageIndex], pxData, getPxPos, bpp, bits, maxBit);
	    }
	  }
	  if (depth === 8) {
	    if (rawPos !== data.length) {
	      throw new Error('extra data found');
	    }
	  } else {
	    bits.end();
	  }
	  return pxData;
	};
	return bitmapper;
}

var formatNormaliser;
var hasRequiredFormatNormaliser;

function requireFormatNormaliser () {
	if (hasRequiredFormatNormaliser) return formatNormaliser;
	hasRequiredFormatNormaliser = 1;

	function dePalette(indata, outdata, width, height, palette) {
	  var pxPos = 0;
	  // use values from palette
	  for (var y = 0; y < height; y++) {
	    for (var x = 0; x < width; x++) {
	      var color = palette[indata[pxPos]];
	      if (!color) {
	        throw new Error('index ' + indata[pxPos] + ' not in palette');
	      }
	      for (var i = 0; i < 4; i++) {
	        outdata[pxPos + i] = color[i];
	      }
	      pxPos += 4;
	    }
	  }
	}
	function replaceTransparentColor(indata, outdata, width, height, transColor) {
	  var pxPos = 0;
	  for (var y = 0; y < height; y++) {
	    for (var x = 0; x < width; x++) {
	      var makeTrans = false;
	      if (transColor.length === 1) {
	        if (transColor[0] === indata[pxPos]) {
	          makeTrans = true;
	        }
	      } else if (transColor[0] === indata[pxPos] && transColor[1] === indata[pxPos + 1] && transColor[2] === indata[pxPos + 2]) {
	        makeTrans = true;
	      }
	      if (makeTrans) {
	        for (var i = 0; i < 4; i++) {
	          outdata[pxPos + i] = 0;
	        }
	      }
	      pxPos += 4;
	    }
	  }
	}
	function scaleDepth(indata, outdata, width, height, depth) {
	  var maxOutSample = 255;
	  var maxInSample = Math.pow(2, depth) - 1;
	  var pxPos = 0;
	  for (var y = 0; y < height; y++) {
	    for (var x = 0; x < width; x++) {
	      for (var i = 0; i < 4; i++) {
	        outdata[pxPos + i] = Math.floor(indata[pxPos + i] * maxOutSample / maxInSample + 0.5);
	      }
	      pxPos += 4;
	    }
	  }
	}
	formatNormaliser = function (indata, imageData) {
	  var depth = imageData.depth;
	  var width = imageData.width;
	  var height = imageData.height;
	  var colorType = imageData.colorType;
	  var transColor = imageData.transColor;
	  var palette = imageData.palette;
	  var outdata = indata; // only different for 16 bits

	  if (colorType === 3) {
	    // paletted
	    dePalette(indata, outdata, width, height, palette);
	  } else {
	    if (transColor) {
	      replaceTransparentColor(indata, outdata, width, height, transColor);
	    }
	    // if it needs scaling
	    if (depth !== 8) {
	      // if we need to change the buffer size
	      if (depth === 16) {
	        outdata = new Buffer(width * height * 4);
	      }
	      scaleDepth(indata, outdata, width, height, depth);
	    }
	  }
	  return outdata;
	};
	return formatNormaliser;
}

var hasRequiredParserAsync;

function requireParserAsync () {
	if (hasRequiredParserAsync) return parserAsync.exports;
	hasRequiredParserAsync = 1;

	var util = require$$0__default$1["default"];
	var zlib = require$$1__default["default"];
	var ChunkStream = requireChunkstream();
	var FilterAsync = requireFilterParseAsync();
	var Parser = requireParser();
	var bitmapper = requireBitmapper();
	var formatNormaliser = requireFormatNormaliser();
	var ParserAsync = parserAsync.exports = function (options) {
	  ChunkStream.call(this);
	  this._parser = new Parser(options, {
	    read: this.read.bind(this),
	    error: this._handleError.bind(this),
	    metadata: this._handleMetaData.bind(this),
	    gamma: this.emit.bind(this, 'gamma'),
	    palette: this._handlePalette.bind(this),
	    transColor: this._handleTransColor.bind(this),
	    finished: this._finished.bind(this),
	    inflateData: this._inflateData.bind(this),
	    simpleTransparency: this._simpleTransparency.bind(this),
	    headersFinished: this._headersFinished.bind(this)
	  });
	  this._options = options;
	  this.writable = true;
	  this._parser.start();
	};
	util.inherits(ParserAsync, ChunkStream);
	ParserAsync.prototype._handleError = function (err) {
	  this.emit('error', err);
	  this.writable = false;
	  this.destroy();
	  if (this._inflate && this._inflate.destroy) {
	    this._inflate.destroy();
	  }
	  if (this._filter) {
	    this._filter.destroy();
	    // For backward compatibility with Node 7 and below.
	    // Suppress errors due to _inflate calling write() even after
	    // it's destroy()'ed.
	    this._filter.on('error', function () {});
	  }
	  this.errord = true;
	};
	ParserAsync.prototype._inflateData = function (data) {
	  if (!this._inflate) {
	    if (this._bitmapInfo.interlace) {
	      this._inflate = zlib.createInflate();
	      this._inflate.on('error', this.emit.bind(this, 'error'));
	      this._filter.on('complete', this._complete.bind(this));
	      this._inflate.pipe(this._filter);
	    } else {
	      var rowSize = (this._bitmapInfo.width * this._bitmapInfo.bpp * this._bitmapInfo.depth + 7 >> 3) + 1;
	      var imageSize = rowSize * this._bitmapInfo.height;
	      var chunkSize = Math.max(imageSize, zlib.Z_MIN_CHUNK);
	      this._inflate = zlib.createInflate({
	        chunkSize: chunkSize
	      });
	      var leftToInflate = imageSize;
	      var emitError = this.emit.bind(this, 'error');
	      this._inflate.on('error', function (err) {
	        if (!leftToInflate) {
	          return;
	        }
	        emitError(err);
	      });
	      this._filter.on('complete', this._complete.bind(this));
	      var filterWrite = this._filter.write.bind(this._filter);
	      this._inflate.on('data', function (chunk) {
	        if (!leftToInflate) {
	          return;
	        }
	        if (chunk.length > leftToInflate) {
	          chunk = chunk.slice(0, leftToInflate);
	        }
	        leftToInflate -= chunk.length;
	        filterWrite(chunk);
	      });
	      this._inflate.on('end', this._filter.end.bind(this._filter));
	    }
	  }
	  this._inflate.write(data);
	};
	ParserAsync.prototype._handleMetaData = function (metaData) {
	  this._metaData = metaData;
	  this._bitmapInfo = Object.create(metaData);
	  this._filter = new FilterAsync(this._bitmapInfo);
	};
	ParserAsync.prototype._handleTransColor = function (transColor) {
	  this._bitmapInfo.transColor = transColor;
	};
	ParserAsync.prototype._handlePalette = function (palette) {
	  this._bitmapInfo.palette = palette;
	};
	ParserAsync.prototype._simpleTransparency = function () {
	  this._metaData.alpha = true;
	};
	ParserAsync.prototype._headersFinished = function () {
	  // Up until this point, we don't know if we have a tRNS chunk (alpha)
	  // so we can't emit metadata any earlier
	  this.emit('metadata', this._metaData);
	};
	ParserAsync.prototype._finished = function () {
	  if (this.errord) {
	    return;
	  }
	  if (!this._inflate) {
	    this.emit('error', 'No Inflate block');
	  } else {
	    // no more data to inflate
	    this._inflate.end();
	  }
	  this.destroySoon();
	};
	ParserAsync.prototype._complete = function (filteredData) {
	  if (this.errord) {
	    return;
	  }
	  try {
	    var bitmapData = bitmapper.dataToBitMap(filteredData, this._bitmapInfo);
	    var normalisedBitmapData = formatNormaliser(bitmapData, this._bitmapInfo);
	    bitmapData = null;
	  } catch (ex) {
	    this._handleError(ex);
	    return;
	  }
	  this.emit('parsed', normalisedBitmapData);
	};
	return parserAsync.exports;
}

var packerAsync = {exports: {}};

var packer = {exports: {}};

var bitpacker;
var hasRequiredBitpacker;

function requireBitpacker () {
	if (hasRequiredBitpacker) return bitpacker;
	hasRequiredBitpacker = 1;

	var constants = requireConstants$1();
	bitpacker = function (dataIn, width, height, options) {
	  var outHasAlpha = [constants.COLORTYPE_COLOR_ALPHA, constants.COLORTYPE_ALPHA].indexOf(options.colorType) !== -1;
	  if (options.colorType === options.inputColorType) {
	    var bigEndian = function () {
	      var buffer = new ArrayBuffer(2);
	      new DataView(buffer).setInt16(0, 256, true /* littleEndian */);
	      // Int16Array uses the platform's endianness.
	      return new Int16Array(buffer)[0] !== 256;
	    }();
	    // If no need to convert to grayscale and alpha is present/absent in both, take a fast route
	    if (options.bitDepth === 8 || options.bitDepth === 16 && bigEndian) {
	      return dataIn;
	    }
	  }

	  // map to a UInt16 array if data is 16bit, fix endianness below
	  var data = options.bitDepth !== 16 ? dataIn : new Uint16Array(dataIn.buffer);
	  var maxValue = 255;
	  var inBpp = constants.COLORTYPE_TO_BPP_MAP[options.inputColorType];
	  if (inBpp === 4 && !options.inputHasAlpha) {
	    inBpp = 3;
	  }
	  var outBpp = constants.COLORTYPE_TO_BPP_MAP[options.colorType];
	  if (options.bitDepth === 16) {
	    maxValue = 65535;
	    outBpp *= 2;
	  }
	  var outData = new Buffer(width * height * outBpp);
	  var inIndex = 0;
	  var outIndex = 0;
	  var bgColor = options.bgColor || {};
	  if (bgColor.red === undefined) {
	    bgColor.red = maxValue;
	  }
	  if (bgColor.green === undefined) {
	    bgColor.green = maxValue;
	  }
	  if (bgColor.blue === undefined) {
	    bgColor.blue = maxValue;
	  }
	  function getRGBA() {
	    var red;
	    var green;
	    var blue;
	    var alpha = maxValue;
	    switch (options.inputColorType) {
	      case constants.COLORTYPE_COLOR_ALPHA:
	        alpha = data[inIndex + 3];
	        red = data[inIndex];
	        green = data[inIndex + 1];
	        blue = data[inIndex + 2];
	        break;
	      case constants.COLORTYPE_COLOR:
	        red = data[inIndex];
	        green = data[inIndex + 1];
	        blue = data[inIndex + 2];
	        break;
	      case constants.COLORTYPE_ALPHA:
	        alpha = data[inIndex + 1];
	        red = data[inIndex];
	        green = red;
	        blue = red;
	        break;
	      case constants.COLORTYPE_GRAYSCALE:
	        red = data[inIndex];
	        green = red;
	        blue = red;
	        break;
	      default:
	        throw new Error('input color type:' + options.inputColorType + ' is not supported at present');
	    }
	    if (options.inputHasAlpha) {
	      if (!outHasAlpha) {
	        alpha /= maxValue;
	        red = Math.min(Math.max(Math.round((1 - alpha) * bgColor.red + alpha * red), 0), maxValue);
	        green = Math.min(Math.max(Math.round((1 - alpha) * bgColor.green + alpha * green), 0), maxValue);
	        blue = Math.min(Math.max(Math.round((1 - alpha) * bgColor.blue + alpha * blue), 0), maxValue);
	      }
	    }
	    return {
	      red: red,
	      green: green,
	      blue: blue,
	      alpha: alpha
	    };
	  }
	  for (var y = 0; y < height; y++) {
	    for (var x = 0; x < width; x++) {
	      var rgba = getRGBA();
	      switch (options.colorType) {
	        case constants.COLORTYPE_COLOR_ALPHA:
	        case constants.COLORTYPE_COLOR:
	          if (options.bitDepth === 8) {
	            outData[outIndex] = rgba.red;
	            outData[outIndex + 1] = rgba.green;
	            outData[outIndex + 2] = rgba.blue;
	            if (outHasAlpha) {
	              outData[outIndex + 3] = rgba.alpha;
	            }
	          } else {
	            outData.writeUInt16BE(rgba.red, outIndex);
	            outData.writeUInt16BE(rgba.green, outIndex + 2);
	            outData.writeUInt16BE(rgba.blue, outIndex + 4);
	            if (outHasAlpha) {
	              outData.writeUInt16BE(rgba.alpha, outIndex + 6);
	            }
	          }
	          break;
	        case constants.COLORTYPE_ALPHA:
	        case constants.COLORTYPE_GRAYSCALE:
	          // Convert to grayscale and alpha
	          var grayscale = (rgba.red + rgba.green + rgba.blue) / 3;
	          if (options.bitDepth === 8) {
	            outData[outIndex] = grayscale;
	            if (outHasAlpha) {
	              outData[outIndex + 1] = rgba.alpha;
	            }
	          } else {
	            outData.writeUInt16BE(grayscale, outIndex);
	            if (outHasAlpha) {
	              outData.writeUInt16BE(rgba.alpha, outIndex + 2);
	            }
	          }
	          break;
	        default:
	          throw new Error('unrecognised color Type ' + options.colorType);
	      }
	      inIndex += inBpp;
	      outIndex += outBpp;
	    }
	  }
	  return outData;
	};
	return bitpacker;
}

var filterPack;
var hasRequiredFilterPack;

function requireFilterPack () {
	if (hasRequiredFilterPack) return filterPack;
	hasRequiredFilterPack = 1;

	var paethPredictor = requirePaethPredictor();
	function filterNone(pxData, pxPos, byteWidth, rawData, rawPos) {
	  for (var x = 0; x < byteWidth; x++) {
	    rawData[rawPos + x] = pxData[pxPos + x];
	  }
	}
	function filterSumNone(pxData, pxPos, byteWidth) {
	  var sum = 0;
	  var length = pxPos + byteWidth;
	  for (var i = pxPos; i < length; i++) {
	    sum += Math.abs(pxData[i]);
	  }
	  return sum;
	}
	function filterSub(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {
	  for (var x = 0; x < byteWidth; x++) {
	    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
	    var val = pxData[pxPos + x] - left;
	    rawData[rawPos + x] = val;
	  }
	}
	function filterSumSub(pxData, pxPos, byteWidth, bpp) {
	  var sum = 0;
	  for (var x = 0; x < byteWidth; x++) {
	    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
	    var val = pxData[pxPos + x] - left;
	    sum += Math.abs(val);
	  }
	  return sum;
	}
	function filterUp(pxData, pxPos, byteWidth, rawData, rawPos) {
	  for (var x = 0; x < byteWidth; x++) {
	    var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
	    var val = pxData[pxPos + x] - up;
	    rawData[rawPos + x] = val;
	  }
	}
	function filterSumUp(pxData, pxPos, byteWidth) {
	  var sum = 0;
	  var length = pxPos + byteWidth;
	  for (var x = pxPos; x < length; x++) {
	    var up = pxPos > 0 ? pxData[x - byteWidth] : 0;
	    var val = pxData[x] - up;
	    sum += Math.abs(val);
	  }
	  return sum;
	}
	function filterAvg(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {
	  for (var x = 0; x < byteWidth; x++) {
	    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
	    var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
	    var val = pxData[pxPos + x] - (left + up >> 1);
	    rawData[rawPos + x] = val;
	  }
	}
	function filterSumAvg(pxData, pxPos, byteWidth, bpp) {
	  var sum = 0;
	  for (var x = 0; x < byteWidth; x++) {
	    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
	    var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
	    var val = pxData[pxPos + x] - (left + up >> 1);
	    sum += Math.abs(val);
	  }
	  return sum;
	}
	function filterPaeth(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {
	  for (var x = 0; x < byteWidth; x++) {
	    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
	    var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
	    var upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;
	    var val = pxData[pxPos + x] - paethPredictor(left, up, upleft);
	    rawData[rawPos + x] = val;
	  }
	}
	function filterSumPaeth(pxData, pxPos, byteWidth, bpp) {
	  var sum = 0;
	  for (var x = 0; x < byteWidth; x++) {
	    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
	    var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
	    var upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;
	    var val = pxData[pxPos + x] - paethPredictor(left, up, upleft);
	    sum += Math.abs(val);
	  }
	  return sum;
	}
	var filters = {
	  0: filterNone,
	  1: filterSub,
	  2: filterUp,
	  3: filterAvg,
	  4: filterPaeth
	};
	var filterSums = {
	  0: filterSumNone,
	  1: filterSumSub,
	  2: filterSumUp,
	  3: filterSumAvg,
	  4: filterSumPaeth
	};
	filterPack = function (pxData, width, height, options, bpp) {
	  var filterTypes;
	  if (!('filterType' in options) || options.filterType === -1) {
	    filterTypes = [0, 1, 2, 3, 4];
	  } else if (typeof options.filterType === 'number') {
	    filterTypes = [options.filterType];
	  } else {
	    throw new Error('unrecognised filter types');
	  }
	  if (options.bitDepth === 16) {
	    bpp *= 2;
	  }
	  var byteWidth = width * bpp;
	  var rawPos = 0;
	  var pxPos = 0;
	  var rawData = new Buffer((byteWidth + 1) * height);
	  var sel = filterTypes[0];
	  for (var y = 0; y < height; y++) {
	    if (filterTypes.length > 1) {
	      // find best filter for this line (with lowest sum of values)
	      var min = Infinity;
	      for (var i = 0; i < filterTypes.length; i++) {
	        var sum = filterSums[filterTypes[i]](pxData, pxPos, byteWidth, bpp);
	        if (sum < min) {
	          sel = filterTypes[i];
	          min = sum;
	        }
	      }
	    }
	    rawData[rawPos] = sel;
	    rawPos++;
	    filters[sel](pxData, pxPos, byteWidth, rawData, rawPos, bpp);
	    rawPos += byteWidth;
	    pxPos += byteWidth;
	  }
	  return rawData;
	};
	return filterPack;
}

var hasRequiredPacker;

function requirePacker () {
	if (hasRequiredPacker) return packer.exports;
	hasRequiredPacker = 1;

	var constants = requireConstants$1();
	var CrcStream = requireCrc();
	var bitPacker = requireBitpacker();
	var filter = requireFilterPack();
	var zlib = require$$1__default["default"];
	var Packer = packer.exports = function (options) {
	  this._options = options;
	  options.deflateChunkSize = options.deflateChunkSize || 32 * 1024;
	  options.deflateLevel = options.deflateLevel != null ? options.deflateLevel : 9;
	  options.deflateStrategy = options.deflateStrategy != null ? options.deflateStrategy : 3;
	  options.inputHasAlpha = options.inputHasAlpha != null ? options.inputHasAlpha : true;
	  options.deflateFactory = options.deflateFactory || zlib.createDeflate;
	  options.bitDepth = options.bitDepth || 8;
	  // This is outputColorType
	  options.colorType = typeof options.colorType === 'number' ? options.colorType : constants.COLORTYPE_COLOR_ALPHA;
	  options.inputColorType = typeof options.inputColorType === 'number' ? options.inputColorType : constants.COLORTYPE_COLOR_ALPHA;
	  if ([constants.COLORTYPE_GRAYSCALE, constants.COLORTYPE_COLOR, constants.COLORTYPE_COLOR_ALPHA, constants.COLORTYPE_ALPHA].indexOf(options.colorType) === -1) {
	    throw new Error('option color type:' + options.colorType + ' is not supported at present');
	  }
	  if ([constants.COLORTYPE_GRAYSCALE, constants.COLORTYPE_COLOR, constants.COLORTYPE_COLOR_ALPHA, constants.COLORTYPE_ALPHA].indexOf(options.inputColorType) === -1) {
	    throw new Error('option input color type:' + options.inputColorType + ' is not supported at present');
	  }
	  if (options.bitDepth !== 8 && options.bitDepth !== 16) {
	    throw new Error('option bit depth:' + options.bitDepth + ' is not supported at present');
	  }
	};
	Packer.prototype.getDeflateOptions = function () {
	  return {
	    chunkSize: this._options.deflateChunkSize,
	    level: this._options.deflateLevel,
	    strategy: this._options.deflateStrategy
	  };
	};
	Packer.prototype.createDeflate = function () {
	  return this._options.deflateFactory(this.getDeflateOptions());
	};
	Packer.prototype.filterData = function (data, width, height) {
	  // convert to correct format for filtering (e.g. right bpp and bit depth)
	  var packedData = bitPacker(data, width, height, this._options);

	  // filter pixel data
	  var bpp = constants.COLORTYPE_TO_BPP_MAP[this._options.colorType];
	  var filteredData = filter(packedData, width, height, this._options, bpp);
	  return filteredData;
	};
	Packer.prototype._packChunk = function (type, data) {
	  var len = data ? data.length : 0;
	  var buf = new Buffer(len + 12);
	  buf.writeUInt32BE(len, 0);
	  buf.writeUInt32BE(type, 4);
	  if (data) {
	    data.copy(buf, 8);
	  }
	  buf.writeInt32BE(CrcStream.crc32(buf.slice(4, buf.length - 4)), buf.length - 4);
	  return buf;
	};
	Packer.prototype.packGAMA = function (gamma) {
	  var buf = new Buffer(4);
	  buf.writeUInt32BE(Math.floor(gamma * constants.GAMMA_DIVISION), 0);
	  return this._packChunk(constants.TYPE_gAMA, buf);
	};
	Packer.prototype.packIHDR = function (width, height) {
	  var buf = new Buffer(13);
	  buf.writeUInt32BE(width, 0);
	  buf.writeUInt32BE(height, 4);
	  buf[8] = this._options.bitDepth; // Bit depth
	  buf[9] = this._options.colorType; // colorType
	  buf[10] = 0; // compression
	  buf[11] = 0; // filter
	  buf[12] = 0; // interlace

	  return this._packChunk(constants.TYPE_IHDR, buf);
	};
	Packer.prototype.packIDAT = function (data) {
	  return this._packChunk(constants.TYPE_IDAT, data);
	};
	Packer.prototype.packIEND = function () {
	  return this._packChunk(constants.TYPE_IEND, null);
	};
	return packer.exports;
}

var hasRequiredPackerAsync;

function requirePackerAsync () {
	if (hasRequiredPackerAsync) return packerAsync.exports;
	hasRequiredPackerAsync = 1;

	var util = require$$0__default$1["default"];
	var Stream = require$$1__default$1["default"];
	var constants = requireConstants$1();
	var Packer = requirePacker();
	var PackerAsync = packerAsync.exports = function (opt) {
	  Stream.call(this);
	  var options = opt || {};
	  this._packer = new Packer(options);
	  this._deflate = this._packer.createDeflate();
	  this.readable = true;
	};
	util.inherits(PackerAsync, Stream);
	PackerAsync.prototype.pack = function (data, width, height, gamma) {
	  // Signature
	  this.emit('data', new Buffer(constants.PNG_SIGNATURE));
	  this.emit('data', this._packer.packIHDR(width, height));
	  if (gamma) {
	    this.emit('data', this._packer.packGAMA(gamma));
	  }
	  var filteredData = this._packer.filterData(data, width, height);

	  // compress it
	  this._deflate.on('error', this.emit.bind(this, 'error'));
	  this._deflate.on('data', function (compressedData) {
	    this.emit('data', this._packer.packIDAT(compressedData));
	  }.bind(this));
	  this._deflate.on('end', function () {
	    this.emit('data', this._packer.packIEND());
	    this.emit('end');
	  }.bind(this));
	  this._deflate.end(filteredData);
	};
	return packerAsync.exports;
}

var pngSync = {};

var syncInflate = {exports: {}};

var hasRequiredSyncInflate;

function requireSyncInflate () {
	if (hasRequiredSyncInflate) return syncInflate.exports;
	hasRequiredSyncInflate = 1;
	(function (module, exports) {

		var assert = require$$0__default$2["default"].ok;
		var zlib = require$$1__default["default"];
		var util = require$$0__default$1["default"];
		var kMaxLength = require$$2__default["default"].kMaxLength;
		function Inflate(opts) {
		  if (!(this instanceof Inflate)) {
		    return new Inflate(opts);
		  }
		  if (opts && opts.chunkSize < zlib.Z_MIN_CHUNK) {
		    opts.chunkSize = zlib.Z_MIN_CHUNK;
		  }
		  zlib.Inflate.call(this, opts);

		  // Node 8 --> 9 compatibility check
		  this._offset = this._offset === undefined ? this._outOffset : this._offset;
		  this._buffer = this._buffer || this._outBuffer;
		  if (opts && opts.maxLength != null) {
		    this._maxLength = opts.maxLength;
		  }
		}
		function createInflate(opts) {
		  return new Inflate(opts);
		}
		function _close(engine, callback) {
		  if (callback) {
		    process.nextTick(callback);
		  }

		  // Caller may invoke .close after a zlib error (which will null _handle).
		  if (!engine._handle) {
		    return;
		  }
		  engine._handle.close();
		  engine._handle = null;
		}
		Inflate.prototype._processChunk = function (chunk, flushFlag, asyncCb) {
		  if (typeof asyncCb === 'function') {
		    return zlib.Inflate._processChunk.call(this, chunk, flushFlag, asyncCb);
		  }
		  var self = this;
		  var availInBefore = chunk && chunk.length;
		  var availOutBefore = this._chunkSize - this._offset;
		  var leftToInflate = this._maxLength;
		  var inOff = 0;
		  var buffers = [];
		  var nread = 0;
		  var error;
		  this.on('error', function (err) {
		    error = err;
		  });
		  function handleChunk(availInAfter, availOutAfter) {
		    if (self._hadError) {
		      return;
		    }
		    var have = availOutBefore - availOutAfter;
		    assert(have >= 0, 'have should not go down');
		    if (have > 0) {
		      var out = self._buffer.slice(self._offset, self._offset + have);
		      self._offset += have;
		      if (out.length > leftToInflate) {
		        out = out.slice(0, leftToInflate);
		      }
		      buffers.push(out);
		      nread += out.length;
		      leftToInflate -= out.length;
		      if (leftToInflate === 0) {
		        return false;
		      }
		    }
		    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
		      availOutBefore = self._chunkSize;
		      self._offset = 0;
		      self._buffer = Buffer.allocUnsafe(self._chunkSize);
		    }
		    if (availOutAfter === 0) {
		      inOff += availInBefore - availInAfter;
		      availInBefore = availInAfter;
		      return true;
		    }
		    return false;
		  }
		  assert(this._handle, 'zlib binding closed');
		  do {
		    var res = this._handle.writeSync(flushFlag, chunk,
		    // in
		    inOff,
		    // in_off
		    availInBefore,
		    // in_len
		    this._buffer,
		    // out
		    this._offset,
		    //out_off
		    availOutBefore); // out_len
		    // Node 8 --> 9 compatibility check
		    res = res || this._writeState;
		  } while (!this._hadError && handleChunk(res[0], res[1]));
		  if (this._hadError) {
		    throw error;
		  }
		  if (nread >= kMaxLength) {
		    _close(this);
		    throw new RangeError('Cannot create final Buffer. It would be larger than 0x' + kMaxLength.toString(16) + ' bytes');
		  }
		  var buf = Buffer.concat(buffers, nread);
		  _close(this);
		  return buf;
		};
		util.inherits(Inflate, zlib.Inflate);
		function zlibBufferSync(engine, buffer) {
		  if (typeof buffer === 'string') {
		    buffer = Buffer.from(buffer);
		  }
		  if (!(buffer instanceof Buffer)) {
		    throw new TypeError('Not a string or buffer');
		  }
		  var flushFlag = engine._finishFlushFlag;
		  if (flushFlag == null) {
		    flushFlag = zlib.Z_FINISH;
		  }
		  return engine._processChunk(buffer, flushFlag);
		}
		function inflateSync(buffer, opts) {
		  return zlibBufferSync(new Inflate(opts), buffer);
		}
		module.exports = exports = inflateSync;
		exports.Inflate = Inflate;
		exports.createInflate = createInflate;
		exports.inflateSync = inflateSync;
} (syncInflate, syncInflate.exports));
	return syncInflate.exports;
}

var syncReader = {exports: {}};

var hasRequiredSyncReader;

function requireSyncReader () {
	if (hasRequiredSyncReader) return syncReader.exports;
	hasRequiredSyncReader = 1;

	var SyncReader = syncReader.exports = function (buffer) {
	  this._buffer = buffer;
	  this._reads = [];
	};
	SyncReader.prototype.read = function (length, callback) {
	  this._reads.push({
	    length: Math.abs(length),
	    // if length < 0 then at most this length
	    allowLess: length < 0,
	    func: callback
	  });
	};
	SyncReader.prototype.process = function () {
	  // as long as there is any data and read requests
	  while (this._reads.length > 0 && this._buffer.length) {
	    var read = this._reads[0];
	    if (this._buffer.length && (this._buffer.length >= read.length || read.allowLess)) {
	      // ok there is any data so that we can satisfy this request
	      this._reads.shift(); // == read

	      var buf = this._buffer;
	      this._buffer = buf.slice(read.length);
	      read.func.call(this, buf.slice(0, read.length));
	    } else {
	      break;
	    }
	  }
	  if (this._reads.length > 0) {
	    return new Error('There are some read requests waitng on finished stream');
	  }
	  if (this._buffer.length > 0) {
	    return new Error('unrecognised content at end of stream');
	  }
	};
	return syncReader.exports;
}

var filterParseSync = {};

var hasRequiredFilterParseSync;

function requireFilterParseSync () {
	if (hasRequiredFilterParseSync) return filterParseSync;
	hasRequiredFilterParseSync = 1;

	var SyncReader = requireSyncReader();
	var Filter = requireFilterParse();
	filterParseSync.process = function (inBuffer, bitmapInfo) {
	  var outBuffers = [];
	  var reader = new SyncReader(inBuffer);
	  var filter = new Filter(bitmapInfo, {
	    read: reader.read.bind(reader),
	    write: function write(bufferPart) {
	      outBuffers.push(bufferPart);
	    },
	    complete: function complete() {}
	  });
	  filter.start();
	  reader.process();
	  return Buffer.concat(outBuffers);
	};
	return filterParseSync;
}

var parserSync;
var hasRequiredParserSync;

function requireParserSync () {
	if (hasRequiredParserSync) return parserSync;
	hasRequiredParserSync = 1;

	var hasSyncZlib = true;
	var zlib = require$$1__default["default"];
	var inflateSync = requireSyncInflate();
	if (!zlib.deflateSync) {
	  hasSyncZlib = false;
	}
	var SyncReader = requireSyncReader();
	var FilterSync = requireFilterParseSync();
	var Parser = requireParser();
	var bitmapper = requireBitmapper();
	var formatNormaliser = requireFormatNormaliser();
	parserSync = function (buffer, options) {
	  if (!hasSyncZlib) {
	    throw new Error('To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0');
	  }
	  var err;
	  function handleError(_err_) {
	    err = _err_;
	  }
	  var metaData;
	  function handleMetaData(_metaData_) {
	    metaData = _metaData_;
	  }
	  function handleTransColor(transColor) {
	    metaData.transColor = transColor;
	  }
	  function handlePalette(palette) {
	    metaData.palette = palette;
	  }
	  function handleSimpleTransparency() {
	    metaData.alpha = true;
	  }
	  var gamma;
	  function handleGamma(_gamma_) {
	    gamma = _gamma_;
	  }
	  var inflateDataList = [];
	  function handleInflateData(inflatedData) {
	    inflateDataList.push(inflatedData);
	  }
	  var reader = new SyncReader(buffer);
	  var parser = new Parser(options, {
	    read: reader.read.bind(reader),
	    error: handleError,
	    metadata: handleMetaData,
	    gamma: handleGamma,
	    palette: handlePalette,
	    transColor: handleTransColor,
	    inflateData: handleInflateData,
	    simpleTransparency: handleSimpleTransparency
	  });
	  parser.start();
	  reader.process();
	  if (err) {
	    throw err;
	  }

	  //join together the inflate datas
	  var inflateData = Buffer.concat(inflateDataList);
	  inflateDataList.length = 0;
	  var inflatedData;
	  if (metaData.interlace) {
	    inflatedData = zlib.inflateSync(inflateData);
	  } else {
	    var rowSize = (metaData.width * metaData.bpp * metaData.depth + 7 >> 3) + 1;
	    var imageSize = rowSize * metaData.height;
	    inflatedData = inflateSync(inflateData, {
	      chunkSize: imageSize,
	      maxLength: imageSize
	    });
	  }
	  inflateData = null;
	  if (!inflatedData || !inflatedData.length) {
	    throw new Error('bad png - invalid inflate data response');
	  }
	  var unfilteredData = FilterSync.process(inflatedData, metaData);
	  inflateData = null;
	  var bitmapData = bitmapper.dataToBitMap(unfilteredData, metaData);
	  unfilteredData = null;
	  var normalisedBitmapData = formatNormaliser(bitmapData, metaData);
	  metaData.data = normalisedBitmapData;
	  metaData.gamma = gamma || 0;
	  return metaData;
	};
	return parserSync;
}

var packerSync;
var hasRequiredPackerSync;

function requirePackerSync () {
	if (hasRequiredPackerSync) return packerSync;
	hasRequiredPackerSync = 1;

	var hasSyncZlib = true;
	var zlib = require$$1__default["default"];
	if (!zlib.deflateSync) {
	  hasSyncZlib = false;
	}
	var constants = requireConstants$1();
	var Packer = requirePacker();
	packerSync = function (metaData, opt) {
	  if (!hasSyncZlib) {
	    throw new Error('To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0');
	  }
	  var options = opt || {};
	  var packer = new Packer(options);
	  var chunks = [];

	  // Signature
	  chunks.push(new Buffer(constants.PNG_SIGNATURE));

	  // Header
	  chunks.push(packer.packIHDR(metaData.width, metaData.height));
	  if (metaData.gamma) {
	    chunks.push(packer.packGAMA(metaData.gamma));
	  }
	  var filteredData = packer.filterData(metaData.data, metaData.width, metaData.height);

	  // compress it
	  var compressedData = zlib.deflateSync(filteredData, packer.getDeflateOptions());
	  filteredData = null;
	  if (!compressedData || !compressedData.length) {
	    throw new Error('bad png - invalid compressed data response');
	  }
	  chunks.push(packer.packIDAT(compressedData));

	  // End
	  chunks.push(packer.packIEND());
	  return Buffer.concat(chunks);
	};
	return packerSync;
}

var hasRequiredPngSync;

function requirePngSync () {
	if (hasRequiredPngSync) return pngSync;
	hasRequiredPngSync = 1;

	var parse = requireParserSync();
	var pack = requirePackerSync();
	pngSync.read = function (buffer, options) {
	  return parse(buffer, options || {});
	};
	pngSync.write = function (png, options) {
	  return pack(png, options);
	};
	return pngSync;
}

var hasRequiredPng$1;

function requirePng$1 () {
	if (hasRequiredPng$1) return png;
	hasRequiredPng$1 = 1;

	var util = require$$0__default$1["default"];
	var Stream = require$$1__default$1["default"];
	var Parser = requireParserAsync();
	var Packer = requirePackerAsync();
	var PNGSync = requirePngSync();
	var PNG = png.PNG = function (options) {
	  Stream.call(this);
	  options = options || {}; // eslint-disable-line no-param-reassign

	  // coerce pixel dimensions to integers (also coerces undefined -> 0):
	  this.width = options.width | 0;
	  this.height = options.height | 0;
	  this.data = this.width > 0 && this.height > 0 ? new Buffer(4 * this.width * this.height) : null;
	  if (options.fill && this.data) {
	    this.data.fill(0);
	  }
	  this.gamma = 0;
	  this.readable = this.writable = true;
	  this._parser = new Parser(options);
	  this._parser.on('error', this.emit.bind(this, 'error'));
	  this._parser.on('close', this._handleClose.bind(this));
	  this._parser.on('metadata', this._metadata.bind(this));
	  this._parser.on('gamma', this._gamma.bind(this));
	  this._parser.on('parsed', function (data) {
	    this.data = data;
	    this.emit('parsed', data);
	  }.bind(this));
	  this._packer = new Packer(options);
	  this._packer.on('data', this.emit.bind(this, 'data'));
	  this._packer.on('end', this.emit.bind(this, 'end'));
	  this._parser.on('close', this._handleClose.bind(this));
	  this._packer.on('error', this.emit.bind(this, 'error'));
	};
	util.inherits(PNG, Stream);
	PNG.sync = PNGSync;
	PNG.prototype.pack = function () {
	  if (!this.data || !this.data.length) {
	    this.emit('error', 'No data provided');
	    return this;
	  }
	  process.nextTick(function () {
	    this._packer.pack(this.data, this.width, this.height, this.gamma);
	  }.bind(this));
	  return this;
	};
	PNG.prototype.parse = function (data, callback) {
	  if (callback) {
	    var onParsed, onError;
	    onParsed = function (parsedData) {
	      this.removeListener('error', onError);
	      this.data = parsedData;
	      callback(null, this);
	    }.bind(this);
	    onError = function (err) {
	      this.removeListener('parsed', onParsed);
	      callback(err, null);
	    }.bind(this);
	    this.once('parsed', onParsed);
	    this.once('error', onError);
	  }
	  this.end(data);
	  return this;
	};
	PNG.prototype.write = function (data) {
	  this._parser.write(data);
	  return true;
	};
	PNG.prototype.end = function (data) {
	  this._parser.end(data);
	};
	PNG.prototype._metadata = function (metadata) {
	  this.width = metadata.width;
	  this.height = metadata.height;
	  this.emit('metadata', metadata);
	};
	PNG.prototype._gamma = function (gamma) {
	  this.gamma = gamma;
	};
	PNG.prototype._handleClose = function () {
	  if (!this._parser.writable && !this._packer.readable) {
	    this.emit('close');
	  }
	};
	PNG.bitblt = function (src, dst, srcX, srcY, width, height, deltaX, deltaY) {
	  // eslint-disable-line max-params
	  // coerce pixel dimensions to integers (also coerces undefined -> 0):
	  /* eslint-disable no-param-reassign */
	  srcX |= 0;
	  srcY |= 0;
	  width |= 0;
	  height |= 0;
	  deltaX |= 0;
	  deltaY |= 0;
	  /* eslint-enable no-param-reassign */

	  if (srcX > src.width || srcY > src.height || srcX + width > src.width || srcY + height > src.height) {
	    throw new Error('bitblt reading outside image');
	  }
	  if (deltaX > dst.width || deltaY > dst.height || deltaX + width > dst.width || deltaY + height > dst.height) {
	    throw new Error('bitblt writing outside image');
	  }
	  for (var y = 0; y < height; y++) {
	    src.data.copy(dst.data, (deltaY + y) * dst.width + deltaX << 2, (srcY + y) * src.width + srcX << 2, (srcY + y) * src.width + srcX + width << 2);
	  }
	};
	PNG.prototype.bitblt = function (dst, srcX, srcY, width, height, deltaX, deltaY) {
	  // eslint-disable-line max-params

	  PNG.bitblt(this, dst, srcX, srcY, width, height, deltaX, deltaY);
	  return this;
	};
	PNG.adjustGamma = function (src) {
	  if (src.gamma) {
	    for (var y = 0; y < src.height; y++) {
	      for (var x = 0; x < src.width; x++) {
	        var idx = src.width * y + x << 2;
	        for (var i = 0; i < 3; i++) {
	          var sample = src.data[idx + i] / 255;
	          sample = Math.pow(sample, 1 / 2.2 / src.gamma);
	          src.data[idx + i] = Math.round(sample * 255);
	        }
	      }
	    }
	    src.gamma = 0;
	  }
	};
	PNG.prototype.adjustGamma = function () {
	  PNG.adjustGamma(this);
	};
	return png;
}

var utils$3 = {};

var hasRequiredUtils$3;

function requireUtils$3 () {
	if (hasRequiredUtils$3) return utils$3;
	hasRequiredUtils$3 = 1;
	(function (exports) {
		function hex2rgba(hex) {
		  if (typeof hex === 'number') {
		    hex = hex.toString();
		  }
		  if (typeof hex !== 'string') {
		    throw new Error('Color should be defined as hex string');
		  }
		  var hexCode = hex.slice().replace('#', '').split('');
		  if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {
		    throw new Error('Invalid hex color: ' + hex);
		  }

		  // Convert from short to long form (fff -> ffffff)
		  if (hexCode.length === 3 || hexCode.length === 4) {
		    hexCode = Array.prototype.concat.apply([], hexCode.map(function (c) {
		      return [c, c];
		    }));
		  }

		  // Add default alpha value
		  if (hexCode.length === 6) hexCode.push('F', 'F');
		  var hexValue = parseInt(hexCode.join(''), 16);
		  return {
		    r: hexValue >> 24 & 255,
		    g: hexValue >> 16 & 255,
		    b: hexValue >> 8 & 255,
		    a: hexValue & 255,
		    hex: '#' + hexCode.slice(0, 6).join('')
		  };
		}
		exports.getOptions = function getOptions(options) {
		  if (!options) options = {};
		  if (!options.color) options.color = {};
		  var margin = typeof options.margin === 'undefined' || options.margin === null || options.margin < 0 ? 4 : options.margin;
		  var width = options.width && options.width >= 21 ? options.width : undefined;
		  var scale = options.scale || 4;
		  return {
		    width: width,
		    scale: width ? 4 : scale,
		    margin: margin,
		    color: {
		      dark: hex2rgba(options.color.dark || '#000000ff'),
		      light: hex2rgba(options.color.light || '#ffffffff')
		    },
		    type: options.type,
		    rendererOpts: options.rendererOpts || {}
		  };
		};
		exports.getScale = function getScale(qrSize, opts) {
		  return opts.width && opts.width >= qrSize + opts.margin * 2 ? opts.width / (qrSize + opts.margin * 2) : opts.scale;
		};
		exports.getImageWidth = function getImageWidth(qrSize, opts) {
		  var scale = exports.getScale(qrSize, opts);
		  return Math.floor((qrSize + opts.margin * 2) * scale);
		};
		exports.qrToImageData = function qrToImageData(imgData, qr, opts) {
		  var size = qr.modules.size;
		  var data = qr.modules.data;
		  var scale = exports.getScale(size, opts);
		  var symbolSize = Math.floor((size + opts.margin * 2) * scale);
		  var scaledMargin = opts.margin * scale;
		  var palette = [opts.color.light, opts.color.dark];
		  for (var i = 0; i < symbolSize; i++) {
		    for (var j = 0; j < symbolSize; j++) {
		      var posDst = (i * symbolSize + j) * 4;
		      var pxColor = opts.color.light;
		      if (i >= scaledMargin && j >= scaledMargin && i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {
		        var iSrc = Math.floor((i - scaledMargin) / scale);
		        var jSrc = Math.floor((j - scaledMargin) / scale);
		        pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0];
		      }
		      imgData[posDst++] = pxColor.r;
		      imgData[posDst++] = pxColor.g;
		      imgData[posDst++] = pxColor.b;
		      imgData[posDst] = pxColor.a;
		    }
		  }
		};
} (utils$3));
	return utils$3;
}

var hasRequiredPng;

function requirePng () {
	if (hasRequiredPng) return png$1;
	hasRequiredPng = 1;
	(function (exports) {
		var fs = require$$1__default$2["default"];
		var PNG = requirePng$1().PNG;
		var Utils = requireUtils$3();
		exports.render = function render(qrData, options) {
		  var opts = Utils.getOptions(options);
		  var pngOpts = opts.rendererOpts;
		  var size = Utils.getImageWidth(qrData.modules.size, opts);
		  pngOpts.width = size;
		  pngOpts.height = size;
		  var pngImage = new PNG(pngOpts);
		  Utils.qrToImageData(pngImage.data, qrData, opts);
		  return pngImage;
		};
		exports.renderToDataURL = function renderToDataURL(qrData, options, cb) {
		  if (typeof cb === 'undefined') {
		    cb = options;
		    options = undefined;
		  }
		  exports.renderToBuffer(qrData, options, function (err, output) {
		    if (err) cb(err);
		    var url = 'data:image/png;base64,';
		    url += output.toString('base64');
		    cb(null, url);
		  });
		};
		exports.renderToBuffer = function renderToBuffer(qrData, options, cb) {
		  if (typeof cb === 'undefined') {
		    cb = options;
		    options = undefined;
		  }
		  var png = exports.render(qrData, options);
		  var buffer = [];
		  png.on('error', cb);
		  png.on('data', function (data) {
		    buffer.push(data);
		  });
		  png.on('end', function () {
		    cb(null, Buffer.concat(buffer));
		  });
		  png.pack();
		};
		exports.renderToFile = function renderToFile(path, qrData, options, cb) {
		  if (typeof cb === 'undefined') {
		    cb = options;
		    options = undefined;
		  }
		  var stream = fs.createWriteStream(path);
		  stream.on('error', cb);
		  stream.on('close', cb);
		  exports.renderToFileStream(stream, qrData, options);
		};
		exports.renderToFileStream = function renderToFileStream(stream, qrData, options) {
		  var png = exports.render(qrData, options);
		  png.pack().pipe(stream);
		};
} (png$1));
	return png$1;
}

var utf8 = {};

var hasRequiredUtf8;

function requireUtf8 () {
	if (hasRequiredUtf8) return utf8;
	hasRequiredUtf8 = 1;
	(function (exports) {
		var Utils = requireUtils$3();
		var BLOCK_CHAR = {
		  WW: ' ',
		  WB: '▄',
		  BB: '█',
		  BW: '▀'
		};
		var INVERTED_BLOCK_CHAR = {
		  BB: ' ',
		  BW: '▄',
		  WW: '█',
		  WB: '▀'
		};
		function getBlockChar(top, bottom, blocks) {
		  if (top && bottom) return blocks.BB;
		  if (top && !bottom) return blocks.BW;
		  if (!top && bottom) return blocks.WB;
		  return blocks.WW;
		}
		exports.render = function (qrData, options, cb) {
		  var opts = Utils.getOptions(options);
		  var blocks = BLOCK_CHAR;
		  if (opts.color.dark.hex === '#ffffff' || opts.color.light.hex === '#000000') {
		    blocks = INVERTED_BLOCK_CHAR;
		  }
		  var size = qrData.modules.size;
		  var data = qrData.modules.data;
		  var output = '';
		  var hMargin = Array(size + opts.margin * 2 + 1).join(blocks.WW);
		  hMargin = Array(opts.margin / 2 + 1).join(hMargin + '\n');
		  var vMargin = Array(opts.margin + 1).join(blocks.WW);
		  output += hMargin;
		  for (var i = 0; i < size; i += 2) {
		    output += vMargin;
		    for (var j = 0; j < size; j++) {
		      var topModule = data[i * size + j];
		      var bottomModule = data[(i + 1) * size + j];
		      output += getBlockChar(topModule, bottomModule, blocks);
		    }
		    output += vMargin + '\n';
		  }
		  output += hMargin.slice(0, -1);
		  if (typeof cb === 'function') {
		    cb(null, output);
		  }
		  return output;
		};
		exports.renderToFile = function renderToFile(path, qrData, options, cb) {
		  if (typeof cb === 'undefined') {
		    cb = options;
		    options = undefined;
		  }
		  var fs = require$$1__default$2["default"];
		  var utf8 = exports.render(qrData, options);
		  fs.writeFile(path, utf8, cb);
		};
} (utf8));
	return utf8;
}

var terminal = {};

var hasRequiredTerminal;

function requireTerminal () {
	if (hasRequiredTerminal) return terminal;
	hasRequiredTerminal = 1;
	// var Utils = require('./utils')

	terminal.render = function (qrData, options, cb) {
	  var size = qrData.modules.size;
	  var data = qrData.modules.data;

	  // var opts = Utils.getOptions(options)

	  // use same scheme as https://github.com/gtanner/qrcode-terminal because it actually works! =)
	  var black = '\x1b[40m  \x1b[0m';
	  var white = '\x1b[47m  \x1b[0m';
	  var output = '';
	  var hMargin = Array(size + 3).join(white);
	  var vMargin = Array(2).join(white);
	  output += hMargin + '\n';
	  for (var i = 0; i < size; ++i) {
	    output += white;
	    for (var j = 0; j < size; j++) {
	      // var topModule = data[i * size + j]
	      // var bottomModule = data[(i + 1) * size + j]

	      output += data[i * size + j] ? black : white; // getBlockChar(topModule, bottomModule)
	    }
	    // output += white+'\n'
	    output += vMargin + '\n';
	  }
	  output += hMargin + '\n';
	  if (typeof cb === 'function') {
	    cb(null, output);
	  }
	  return output;
	};
	/*
	exports.renderToFile = function renderToFile (path, qrData, options, cb) {
	  if (typeof cb === 'undefined') {
	    cb = options
	    options = undefined
	  }

	  var fs = require('fs')
	  var utf8 = exports.render(qrData, options)
	  fs.writeFile(path, utf8, cb)
	}
	*/
	return terminal;
}

var svg = {};

var svgTag = {};

var hasRequiredSvgTag;

function requireSvgTag () {
	if (hasRequiredSvgTag) return svgTag;
	hasRequiredSvgTag = 1;
	var Utils = requireUtils$3();
	function getColorAttrib(color, attrib) {
	  var alpha = color.a / 255;
	  var str = attrib + '="' + color.hex + '"';
	  return alpha < 1 ? str + ' ' + attrib + '-opacity="' + alpha.toFixed(2).slice(1) + '"' : str;
	}
	function svgCmd(cmd, x, y) {
	  var str = cmd + x;
	  if (typeof y !== 'undefined') str += ' ' + y;
	  return str;
	}
	function qrToPath(data, size, margin) {
	  var path = '';
	  var moveBy = 0;
	  var newRow = false;
	  var lineLength = 0;
	  for (var i = 0; i < data.length; i++) {
	    var col = Math.floor(i % size);
	    var row = Math.floor(i / size);
	    if (!col && !newRow) newRow = true;
	    if (data[i]) {
	      lineLength++;
	      if (!(i > 0 && col > 0 && data[i - 1])) {
	        path += newRow ? svgCmd('M', col + margin, 0.5 + row + margin) : svgCmd('m', moveBy, 0);
	        moveBy = 0;
	        newRow = false;
	      }
	      if (!(col + 1 < size && data[i + 1])) {
	        path += svgCmd('h', lineLength);
	        lineLength = 0;
	      }
	    } else {
	      moveBy++;
	    }
	  }
	  return path;
	}
	svgTag.render = function render(qrData, options, cb) {
	  var opts = Utils.getOptions(options);
	  var size = qrData.modules.size;
	  var data = qrData.modules.data;
	  var qrcodesize = size + opts.margin * 2;
	  var bg = !opts.color.light.a ? '' : '<path ' + getColorAttrib(opts.color.light, 'fill') + ' d="M0 0h' + qrcodesize + 'v' + qrcodesize + 'H0z"/>';
	  var path = '<path ' + getColorAttrib(opts.color.dark, 'stroke') + ' d="' + qrToPath(data, size, opts.margin) + '"/>';
	  var viewBox = 'viewBox="' + '0 0 ' + qrcodesize + ' ' + qrcodesize + '"';
	  var width = !opts.width ? '' : 'width="' + opts.width + '" height="' + opts.width + '" ';
	  var svgTag = '<svg xmlns="http://www.w3.org/2000/svg" ' + width + viewBox + ' shape-rendering="crispEdges">' + bg + path + '</svg>\n';
	  if (typeof cb === 'function') {
	    cb(null, svgTag);
	  }
	  return svgTag;
	};
	return svgTag;
}

var hasRequiredSvg;

function requireSvg () {
	if (hasRequiredSvg) return svg;
	hasRequiredSvg = 1;
	(function (exports) {
		var svgTagRenderer = requireSvgTag();
		exports.render = svgTagRenderer.render;
		exports.renderToFile = function renderToFile(path, qrData, options, cb) {
		  if (typeof cb === 'undefined') {
		    cb = options;
		    options = undefined;
		  }
		  var fs = require$$1__default$2["default"];
		  var svgTag = exports.render(qrData, options);
		  var xmlStr = '<?xml version="1.0" encoding="utf-8"?>' + '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">' + svgTag;
		  fs.writeFile(path, xmlStr, cb);
		};
} (svg));
	return svg;
}

var browser = {};

var canvas = {};

var hasRequiredCanvas;

function requireCanvas () {
	if (hasRequiredCanvas) return canvas;
	hasRequiredCanvas = 1;
	(function (exports) {
		var Utils = requireUtils$3();
		function clearCanvas(ctx, canvas, size) {
		  ctx.clearRect(0, 0, canvas.width, canvas.height);
		  if (!canvas.style) canvas.style = {};
		  canvas.height = size;
		  canvas.width = size;
		  canvas.style.height = size + 'px';
		  canvas.style.width = size + 'px';
		}
		function getCanvasElement() {
		  try {
		    return document.createElement('canvas');
		  } catch (e) {
		    throw new Error('You need to specify a canvas element');
		  }
		}
		exports.render = function render(qrData, canvas, options) {
		  var opts = options;
		  var canvasEl = canvas;
		  if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
		    opts = canvas;
		    canvas = undefined;
		  }
		  if (!canvas) {
		    canvasEl = getCanvasElement();
		  }
		  opts = Utils.getOptions(opts);
		  var size = Utils.getImageWidth(qrData.modules.size, opts);
		  var ctx = canvasEl.getContext('2d');
		  var image = ctx.createImageData(size, size);
		  Utils.qrToImageData(image.data, qrData, opts);
		  clearCanvas(ctx, canvasEl, size);
		  ctx.putImageData(image, 0, 0);
		  return canvasEl;
		};
		exports.renderToDataURL = function renderToDataURL(qrData, canvas, options) {
		  var opts = options;
		  if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
		    opts = canvas;
		    canvas = undefined;
		  }
		  if (!opts) opts = {};
		  var canvasEl = exports.render(qrData, canvas, opts);
		  var type = opts.type || 'image/png';
		  var rendererOpts = opts.rendererOpts || {};
		  return canvasEl.toDataURL(type, rendererOpts.quality);
		};
} (canvas));
	return canvas;
}

var hasRequiredBrowser;

function requireBrowser () {
	if (hasRequiredBrowser) return browser;
	hasRequiredBrowser = 1;
	var canPromise = requireCanPromise();
	var QRCode = requireQrcode();
	var CanvasRenderer = requireCanvas();
	var SvgRenderer = requireSvgTag();
	function renderCanvas(renderFunc, canvas, text, opts, cb) {
	  var args = [].slice.call(arguments, 1);
	  var argsNum = args.length;
	  var isLastArgCb = typeof args[argsNum - 1] === 'function';
	  if (!isLastArgCb && !canPromise()) {
	    throw new Error('Callback required as last argument');
	  }
	  if (isLastArgCb) {
	    if (argsNum < 2) {
	      throw new Error('Too few arguments provided');
	    }
	    if (argsNum === 2) {
	      cb = text;
	      text = canvas;
	      canvas = opts = undefined;
	    } else if (argsNum === 3) {
	      if (canvas.getContext && typeof cb === 'undefined') {
	        cb = opts;
	        opts = undefined;
	      } else {
	        cb = opts;
	        opts = text;
	        text = canvas;
	        canvas = undefined;
	      }
	    }
	  } else {
	    if (argsNum < 1) {
	      throw new Error('Too few arguments provided');
	    }
	    if (argsNum === 1) {
	      text = canvas;
	      canvas = opts = undefined;
	    } else if (argsNum === 2 && !canvas.getContext) {
	      opts = text;
	      text = canvas;
	      canvas = undefined;
	    }
	    return new Promise(function (resolve, reject) {
	      try {
	        var data = QRCode.create(text, opts);
	        resolve(renderFunc(data, canvas, opts));
	      } catch (e) {
	        reject(e);
	      }
	    });
	  }
	  try {
	    var data = QRCode.create(text, opts);
	    cb(null, renderFunc(data, canvas, opts));
	  } catch (e) {
	    cb(e);
	  }
	}
	browser.create = QRCode.create;
	browser.toCanvas = renderCanvas.bind(null, CanvasRenderer.render);
	browser.toDataURL = renderCanvas.bind(null, CanvasRenderer.renderToDataURL);

	// only svg for now.
	browser.toString = renderCanvas.bind(null, function (data, _, opts) {
	  return SvgRenderer.render(data, opts);
	});
	return browser;
}

var hasRequiredServer;

function requireServer () {
	if (hasRequiredServer) return server;
	hasRequiredServer = 1;
	var canPromise = requireCanPromise();
	var QRCode = requireQrcode();
	var PngRenderer = requirePng();
	var Utf8Renderer = requireUtf8();
	var TerminalRenderer = requireTerminal();
	var SvgRenderer = requireSvg();
	function checkParams(text, opts, cb) {
	  if (typeof text === 'undefined') {
	    throw new Error('String required as first argument');
	  }
	  if (typeof cb === 'undefined') {
	    cb = opts;
	    opts = {};
	  }
	  if (typeof cb !== 'function') {
	    if (!canPromise()) {
	      throw new Error('Callback required as last argument');
	    } else {
	      opts = cb || {};
	      cb = null;
	    }
	  }
	  return {
	    opts: opts,
	    cb: cb
	  };
	}
	function getTypeFromFilename(path) {
	  return path.slice((path.lastIndexOf('.') - 1 >>> 0) + 2).toLowerCase();
	}
	function getRendererFromType(type) {
	  switch (type) {
	    case 'svg':
	      return SvgRenderer;
	    case 'txt':
	    case 'utf8':
	      return Utf8Renderer;
	    case 'png':
	    case 'image/png':
	    default:
	      return PngRenderer;
	  }
	}
	function getStringRendererFromType(type) {
	  switch (type) {
	    case 'svg':
	      return SvgRenderer;
	    case 'terminal':
	      return TerminalRenderer;
	    case 'utf8':
	    default:
	      return Utf8Renderer;
	  }
	}
	function render(renderFunc, text, params) {
	  if (!params.cb) {
	    return new Promise(function (resolve, reject) {
	      try {
	        var data = QRCode.create(text, params.opts);
	        return renderFunc(data, params.opts, function (err, data) {
	          return err ? reject(err) : resolve(data);
	        });
	      } catch (e) {
	        reject(e);
	      }
	    });
	  }
	  try {
	    var data = QRCode.create(text, params.opts);
	    return renderFunc(data, params.opts, params.cb);
	  } catch (e) {
	    params.cb(e);
	  }
	}
	server.create = QRCode.create;
	server.toCanvas = requireBrowser().toCanvas;
	server.toString = function toString(text, opts, cb) {
	  var params = checkParams(text, opts, cb);
	  var renderer = getStringRendererFromType(params.opts.type);
	  return render(renderer.render, text, params);
	};
	server.toDataURL = function toDataURL(text, opts, cb) {
	  var params = checkParams(text, opts, cb);
	  var renderer = getRendererFromType(params.opts.type);
	  return render(renderer.renderToDataURL, text, params);
	};
	server.toBuffer = function toBuffer(text, opts, cb) {
	  var params = checkParams(text, opts, cb);
	  var renderer = getRendererFromType(params.opts.type);
	  return render(renderer.renderToBuffer, text, params);
	};
	server.toFile = function toFile(path, text, opts, cb) {
	  if (typeof path !== 'string' || !(typeof text === 'string' || typeof text === 'object')) {
	    throw new Error('Invalid argument');
	  }
	  if (arguments.length < 3 && !canPromise()) {
	    throw new Error('Too few arguments provided');
	  }
	  var params = checkParams(text, opts, cb);
	  var type = params.opts.type || getTypeFromFilename(path);
	  var renderer = getRendererFromType(type);
	  var renderToFile = renderer.renderToFile.bind(null, path);
	  return render(renderToFile, text, params);
	};
	server.toFileStream = function toFileStream(stream, text, opts) {
	  if (arguments.length < 2) {
	    throw new Error('Too few arguments provided');
	  }
	  var params = checkParams(text, opts, stream.emit.bind(stream, 'error'));
	  var renderer = getRendererFromType('png'); // Only png support for now
	  var renderToFileStream = renderer.renderToFileStream.bind(null, stream);
	  render(renderToFileStream, text, params);
	};
	return server;
}

/*
*copyright Ryan Day 2012
*
* Licensed under the MIT license:
*   http://www.opensource.org/licenses/mit-license.php
*
* this is the main server side application file for node-qrcode.
* these exports use serverside canvas api methods for file IO and buffers
*
*/

var hasRequiredLib$4;

function requireLib$4 () {
	if (hasRequiredLib$4) return lib$4.exports;
	hasRequiredLib$4 = 1;
	(function (module) {
		module.exports = requireServer();
} (lib$4));
	return lib$4.exports;
}

var toggleSelection;
var hasRequiredToggleSelection;

function requireToggleSelection () {
	if (hasRequiredToggleSelection) return toggleSelection;
	hasRequiredToggleSelection = 1;
	toggleSelection = function () {
	  var selection = document.getSelection();
	  if (!selection.rangeCount) {
	    return function () {};
	  }
	  var active = document.activeElement;
	  var ranges = [];
	  for (var i = 0; i < selection.rangeCount; i++) {
	    ranges.push(selection.getRangeAt(i));
	  }
	  switch (active.tagName.toUpperCase()) {
	    // .toUpperCase handles XHTML
	    case 'INPUT':
	    case 'TEXTAREA':
	      active.blur();
	      break;
	    default:
	      active = null;
	      break;
	  }
	  selection.removeAllRanges();
	  return function () {
	    selection.type === 'Caret' && selection.removeAllRanges();
	    if (!selection.rangeCount) {
	      ranges.forEach(function (range) {
	        selection.addRange(range);
	      });
	    }
	    active && active.focus();
	  };
	};
	return toggleSelection;
}

var copyToClipboard;
var hasRequiredCopyToClipboard;

function requireCopyToClipboard () {
	if (hasRequiredCopyToClipboard) return copyToClipboard;
	hasRequiredCopyToClipboard = 1;

	var deselectCurrent = requireToggleSelection();
	var clipboardToIE11Formatting = {
	  "text/plain": "Text",
	  "text/html": "Url",
	  "default": "Text"
	};
	var defaultMessage = "Copy to clipboard: #{key}, Enter";
	function format(message) {
	  var copyKey = (/mac os x/i.test(navigator.userAgent) ? "⌘" : "Ctrl") + "+C";
	  return message.replace(/#{\s*key\s*}/g, copyKey);
	}
	function copy(text, options) {
	  var debug,
	    message,
	    reselectPrevious,
	    range,
	    selection,
	    mark,
	    success = false;
	  if (!options) {
	    options = {};
	  }
	  debug = options.debug || false;
	  try {
	    reselectPrevious = deselectCurrent();
	    range = document.createRange();
	    selection = document.getSelection();
	    mark = document.createElement("span");
	    mark.textContent = text;
	    // avoid screen readers from reading out loud the text
	    mark.ariaHidden = "true";
	    // reset user styles for span element
	    mark.style.all = "unset";
	    // prevents scrolling to the end of the page
	    mark.style.position = "fixed";
	    mark.style.top = 0;
	    mark.style.clip = "rect(0, 0, 0, 0)";
	    // used to preserve spaces and line breaks
	    mark.style.whiteSpace = "pre";
	    // do not inherit user-select (it may be `none`)
	    mark.style.webkitUserSelect = "text";
	    mark.style.MozUserSelect = "text";
	    mark.style.msUserSelect = "text";
	    mark.style.userSelect = "text";
	    mark.addEventListener("copy", function (e) {
	      e.stopPropagation();
	      if (options.format) {
	        e.preventDefault();
	        if (typeof e.clipboardData === "undefined") {
	          // IE 11
	          debug && console.warn("unable to use e.clipboardData");
	          debug && console.warn("trying IE specific stuff");
	          window.clipboardData.clearData();
	          var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"];
	          window.clipboardData.setData(format, text);
	        } else {
	          // all other browsers
	          e.clipboardData.clearData();
	          e.clipboardData.setData(options.format, text);
	        }
	      }
	      if (options.onCopy) {
	        e.preventDefault();
	        options.onCopy(e.clipboardData);
	      }
	    });
	    document.body.appendChild(mark);
	    range.selectNodeContents(mark);
	    selection.addRange(range);
	    var successful = document.execCommand("copy");
	    if (!successful) {
	      throw new Error("copy command was unsuccessful");
	    }
	    success = true;
	  } catch (err) {
	    debug && console.error("unable to copy using execCommand: ", err);
	    debug && console.warn("trying IE specific stuff");
	    try {
	      window.clipboardData.setData(options.format || "text", text);
	      options.onCopy && options.onCopy(window.clipboardData);
	      success = true;
	    } catch (err) {
	      debug && console.error("unable to copy using clipboardData: ", err);
	      debug && console.error("falling back to prompt");
	      message = format("message" in options ? options.message : defaultMessage);
	      window.prompt(message, text);
	    }
	  } finally {
	    if (selection) {
	      if (typeof selection.removeRange == "function") {
	        selection.removeRange(range);
	      } else {
	        selection.removeAllRanges();
	      }
	    }
	    if (mark) {
	      document.body.removeChild(mark);
	    }
	    reselectPrevious();
	  }
	  return success;
	}
	copyToClipboard = copy;
	return copyToClipboard;
}

var compat = {};

var hooks = {};

var preact = {};

var hasRequiredPreact;

function requirePreact () {
	if (hasRequiredPreact) return preact;
	hasRequiredPreact = 1;
	var n,
	  l,
	  u,
	  t,
	  i,
	  r,
	  o,
	  f,
	  e = {},
	  c = [],
	  s = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord/i;
	function a(n, l) {
	  for (var u in l) {
	    n[u] = l[u];
	  }
	  return n;
	}
	function p(n) {
	  var l = n.parentNode;
	  l && l.removeChild(n);
	}
	function v(n, l, u) {
	  var t,
	    i = arguments,
	    r = {};
	  for (t in l) {
	    "key" !== t && "ref" !== t && (r[t] = l[t]);
	  }
	  if (arguments.length > 3) for (u = [u], t = 3; t < arguments.length; t++) {
	    u.push(i[t]);
	  }
	  if (null != u && (r.children = u), "function" == typeof n && null != n.defaultProps) for (t in n.defaultProps) {
	    void 0 === r[t] && (r[t] = n.defaultProps[t]);
	  }
	  return h(n, r, l && l.key, l && l.ref, null);
	}
	function h(l, u, t, i, r) {
	  var o = {
	    type: l,
	    props: u,
	    key: t,
	    ref: i,
	    __k: null,
	    __: null,
	    __b: 0,
	    __e: null,
	    __d: void 0,
	    __c: null,
	    constructor: void 0,
	    __v: r
	  };
	  return null == r && (o.__v = o), n.vnode && n.vnode(o), o;
	}
	function y(n) {
	  return n.children;
	}
	function d(n, l) {
	  this.props = n, this.context = l;
	}
	function x(n, l) {
	  if (null == l) return n.__ ? x(n.__, n.__.__k.indexOf(n) + 1) : null;
	  for (var u; l < n.__k.length; l++) {
	    if (null != (u = n.__k[l]) && null != u.__e) return u.__e;
	  }
	  return "function" == typeof n.type ? x(n) : null;
	}
	function m(n) {
	  var l, u;
	  if (null != (n = n.__) && null != n.__c) {
	    for (n.__e = n.__c.base = null, l = 0; l < n.__k.length; l++) {
	      if (null != (u = n.__k[l]) && null != u.__e) {
	        n.__e = n.__c.base = u.__e;
	        break;
	      }
	    }
	    return m(n);
	  }
	}
	function w(l) {
	  (!l.__d && (l.__d = !0) && u.push(l) && !t++ || r !== n.debounceRendering) && ((r = n.debounceRendering) || i)(k);
	}
	function k() {
	  for (var n; t = u.length;) {
	    n = u.sort(function (n, l) {
	      return n.__v.__b - l.__v.__b;
	    }), u = [], n.some(function (n) {
	      var l, u, t, i, r, o, f;
	      n.__d && (o = (r = (l = n).__v).__e, (f = l.__P) && (u = [], (t = a({}, r)).__v = t, i = z(f, r, t, l.__n, void 0 !== f.ownerSVGElement, null, u, null == o ? x(r) : o), A(u, r), i != o && m(r)));
	    });
	  }
	}
	function g(n, l, u, t, i, r, o, f, s) {
	  var a,
	    v,
	    h,
	    y,
	    d,
	    m,
	    w,
	    k = u && u.__k || c,
	    g = k.length;
	  if (f == e && (f = null != r ? r[0] : g ? x(u, 0) : null), a = 0, l.__k = _(l.__k, function (u) {
	    if (null != u) {
	      if (u.__ = l, u.__b = l.__b + 1, null === (h = k[a]) || h && u.key == h.key && u.type === h.type) k[a] = void 0;else for (v = 0; v < g; v++) {
	        if ((h = k[v]) && u.key == h.key && u.type === h.type) {
	          k[v] = void 0;
	          break;
	        }
	        h = null;
	      }
	      if (y = z(n, u, h = h || e, t, i, r, o, f, s), (v = u.ref) && h.ref != v && (w || (w = []), h.ref && w.push(h.ref, null, u), w.push(v, u.__c || y, u)), null != y) {
	        var c;
	        if (null == m && (m = y), void 0 !== u.__d) c = u.__d, u.__d = void 0;else if (r == h || y != f || null == y.parentNode) {
	          n: if (null == f || f.parentNode !== n) n.appendChild(y), c = null;else {
	            for (d = f, v = 0; (d = d.nextSibling) && v < g; v += 2) {
	              if (d == y) break n;
	            }
	            n.insertBefore(y, f), c = f;
	          }
	          "option" == l.type && (n.value = "");
	        }
	        f = void 0 !== c ? c : y.nextSibling, "function" == typeof l.type && (l.__d = f);
	      } else f && h.__e == f && f.parentNode != n && (f = x(h));
	    }
	    return a++, u;
	  }), l.__e = m, null != r && "function" != typeof l.type) for (a = r.length; a--;) {
	    null != r[a] && p(r[a]);
	  }
	  for (a = g; a--;) {
	    null != k[a] && j(k[a], k[a]);
	  }
	  if (w) for (a = 0; a < w.length; a++) {
	    $(w[a], w[++a], w[++a]);
	  }
	}
	function _(n, l, u) {
	  if (null == u && (u = []), null == n || "boolean" == typeof n) l && u.push(l(null));else if (Array.isArray(n)) for (var t = 0; t < n.length; t++) {
	    _(n[t], l, u);
	  } else u.push(l ? l("string" == typeof n || "number" == typeof n ? h(null, n, null, null, n) : null != n.__e || null != n.__c ? h(n.type, n.props, n.key, null, n.__v) : n) : n);
	  return u;
	}
	function b(n, l, u, t, i) {
	  var r;
	  for (r in u) {
	    "children" === r || "key" === r || r in l || C(n, r, null, u[r], t);
	  }
	  for (r in l) {
	    i && "function" != typeof l[r] || "children" === r || "key" === r || "value" === r || "checked" === r || u[r] === l[r] || C(n, r, l[r], u[r], t);
	  }
	}
	function P(n, l, u) {
	  "-" === l[0] ? n.setProperty(l, u) : n[l] = "number" == typeof u && !1 === s.test(l) ? u + "px" : null == u ? "" : u;
	}
	function C(n, l, u, t, i) {
	  var r, o, f, e, c;
	  if (i ? "className" === l && (l = "class") : "class" === l && (l = "className"), "style" === l) {
	    if (r = n.style, "string" == typeof u) r.cssText = u;else {
	      if ("string" == typeof t && (r.cssText = "", t = null), t) for (e in t) {
	        u && e in u || P(r, e, "");
	      }
	      if (u) for (c in u) {
	        t && u[c] === t[c] || P(r, c, u[c]);
	      }
	    }
	  } else "o" === l[0] && "n" === l[1] ? (o = l !== (l = l.replace(/Capture$/, "")), f = l.toLowerCase(), l = (f in n ? f : l).slice(2), u ? (t || n.addEventListener(l, N, o), (n.l || (n.l = {}))[l] = u) : n.removeEventListener(l, N, o)) : "list" !== l && "tagName" !== l && "form" !== l && "type" !== l && "size" !== l && !i && l in n ? n[l] = null == u ? "" : u : "function" != typeof u && "dangerouslySetInnerHTML" !== l && (l !== (l = l.replace(/^xlink:?/, "")) ? null == u || !1 === u ? n.removeAttributeNS("http://www.w3.org/1999/xlink", l.toLowerCase()) : n.setAttributeNS("http://www.w3.org/1999/xlink", l.toLowerCase(), u) : null == u || !1 === u && !/^ar/.test(l) ? n.removeAttribute(l) : n.setAttribute(l, u));
	}
	function N(l) {
	  this.l[l.type](n.event ? n.event(l) : l);
	}
	function z(l, u, t, i, r, o, f, e, c) {
	  var s,
	    p,
	    v,
	    h,
	    x,
	    m,
	    w,
	    k,
	    _,
	    b,
	    P = u.type;
	  if (void 0 !== u.constructor) return null;
	  (s = n.__b) && s(u);
	  try {
	    n: if ("function" == typeof P) {
	      if (k = u.props, _ = (s = P.contextType) && i[s.__c], b = s ? _ ? _.props.value : s.__ : i, t.__c ? w = (p = u.__c = t.__c).__ = p.__E : ("prototype" in P && P.prototype.render ? u.__c = p = new P(k, b) : (u.__c = p = new d(k, b), p.constructor = P, p.render = D), _ && _.sub(p), p.props = k, p.state || (p.state = {}), p.context = b, p.__n = i, v = p.__d = !0, p.__h = []), null == p.__s && (p.__s = p.state), null != P.getDerivedStateFromProps && (p.__s == p.state && (p.__s = a({}, p.__s)), a(p.__s, P.getDerivedStateFromProps(k, p.__s))), h = p.props, x = p.state, v) null == P.getDerivedStateFromProps && null != p.componentWillMount && p.componentWillMount(), null != p.componentDidMount && p.__h.push(p.componentDidMount);else {
	        if (null == P.getDerivedStateFromProps && k !== h && null != p.componentWillReceiveProps && p.componentWillReceiveProps(k, b), !p.__e && null != p.shouldComponentUpdate && !1 === p.shouldComponentUpdate(k, p.__s, b) || u.__v === t.__v && !p.__) {
	          for (p.props = k, p.state = p.__s, u.__v !== t.__v && (p.__d = !1), p.__v = u, u.__e = t.__e, u.__k = t.__k, p.__h.length && f.push(p), s = 0; s < u.__k.length; s++) {
	            u.__k[s] && (u.__k[s].__ = u);
	          }
	          break n;
	        }
	        null != p.componentWillUpdate && p.componentWillUpdate(k, p.__s, b), null != p.componentDidUpdate && p.__h.push(function () {
	          p.componentDidUpdate(h, x, m);
	        });
	      }
	      p.context = b, p.props = k, p.state = p.__s, (s = n.__r) && s(u), p.__d = !1, p.__v = u, p.__P = l, s = p.render(p.props, p.state, p.context), u.__k = null != s && s.type == y && null == s.key ? s.props.children : Array.isArray(s) ? s : [s], null != p.getChildContext && (i = a(a({}, i), p.getChildContext())), v || null == p.getSnapshotBeforeUpdate || (m = p.getSnapshotBeforeUpdate(h, x)), g(l, u, t, i, r, o, f, e, c), p.base = u.__e, p.__h.length && f.push(p), w && (p.__E = p.__ = null), p.__e = !1;
	    } else null == o && u.__v === t.__v ? (u.__k = t.__k, u.__e = t.__e) : u.__e = T(t.__e, u, t, i, r, o, f, c);
	    (s = n.diffed) && s(u);
	  } catch (l) {
	    u.__v = null, n.__e(l, u, t);
	  }
	  return u.__e;
	}
	function A(l, u) {
	  n.__c && n.__c(u, l), l.some(function (u) {
	    try {
	      l = u.__h, u.__h = [], l.some(function (n) {
	        n.call(u);
	      });
	    } catch (l) {
	      n.__e(l, u.__v);
	    }
	  });
	}
	function T(n, l, u, t, i, r, o, f) {
	  var s,
	    a,
	    p,
	    v,
	    h,
	    y = u.props,
	    d = l.props;
	  if (i = "svg" === l.type || i, null != r) for (s = 0; s < r.length; s++) {
	    if (null != (a = r[s]) && ((null === l.type ? 3 === a.nodeType : a.localName === l.type) || n == a)) {
	      n = a, r[s] = null;
	      break;
	    }
	  }
	  if (null == n) {
	    if (null === l.type) return document.createTextNode(d);
	    n = i ? document.createElementNS("http://www.w3.org/2000/svg", l.type) : document.createElement(l.type, d.is && {
	      is: d.is
	    }), r = null, f = !1;
	  }
	  if (null === l.type) y !== d && n.data != d && (n.data = d);else {
	    if (null != r && (r = c.slice.call(n.childNodes)), p = (y = u.props || e).dangerouslySetInnerHTML, v = d.dangerouslySetInnerHTML, !f) {
	      if (y === e) for (y = {}, h = 0; h < n.attributes.length; h++) {
	        y[n.attributes[h].name] = n.attributes[h].value;
	      }
	      (v || p) && (v && p && v.__html == p.__html || (n.innerHTML = v && v.__html || ""));
	    }
	    b(n, d, y, i, f), v ? l.__k = [] : (l.__k = l.props.children, g(n, l, u, t, "foreignObject" !== l.type && i, r, o, e, f)), f || ("value" in d && void 0 !== (s = d.value) && s !== n.value && C(n, "value", s, y.value, !1), "checked" in d && void 0 !== (s = d.checked) && s !== n.checked && C(n, "checked", s, y.checked, !1));
	  }
	  return n;
	}
	function $(l, u, t) {
	  try {
	    "function" == typeof l ? l(u) : l.current = u;
	  } catch (l) {
	    n.__e(l, t);
	  }
	}
	function j(l, u, t) {
	  var i, r, o;
	  if (n.unmount && n.unmount(l), (i = l.ref) && (i.current && i.current !== l.__e || $(i, null, u)), t || "function" == typeof l.type || (t = null != (r = l.__e)), l.__e = l.__d = void 0, null != (i = l.__c)) {
	    if (i.componentWillUnmount) try {
	      i.componentWillUnmount();
	    } catch (l) {
	      n.__e(l, u);
	    }
	    i.base = i.__P = null;
	  }
	  if (i = l.__k) for (o = 0; o < i.length; o++) {
	    i[o] && j(i[o], u, t);
	  }
	  null != r && p(r);
	}
	function D(n, l, u) {
	  return this.constructor(n, u);
	}
	function E(l, u, t) {
	  var i, r, f;
	  n.__ && n.__(l, u), r = (i = t === o) ? null : t && t.__k || u.__k, l = v(y, null, [l]), f = [], z(u, (i ? u : t || u).__k = l, r || e, e, void 0 !== u.ownerSVGElement, t && !i ? [t] : r ? null : c.slice.call(u.childNodes), f, t || e, i), A(f, l);
	}
	n = {
	  __e: function __e(n, l) {
	    for (var u, t; l = l.__;) {
	      if ((u = l.__c) && !u.__) try {
	        if (u.constructor && null != u.constructor.getDerivedStateFromError && (t = !0, u.setState(u.constructor.getDerivedStateFromError(n))), null != u.componentDidCatch && (t = !0, u.componentDidCatch(n)), t) return w(u.__E = u);
	      } catch (l) {
	        n = l;
	      }
	    }
	    throw n;
	  }
	}, l = function l(n) {
	  return null != n && void 0 === n.constructor;
	}, d.prototype.setState = function (n, l) {
	  var u;
	  u = this.__s !== this.state ? this.__s : this.__s = a({}, this.state), "function" == typeof n && (n = n(u, this.props)), n && a(u, n), null != n && this.__v && (l && this.__h.push(l), w(this));
	}, d.prototype.forceUpdate = function (n) {
	  this.__v && (this.__e = !0, n && this.__h.push(n), w(this));
	}, d.prototype.render = y, u = [], t = 0, i = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, o = e, f = 0, preact.render = E, preact.hydrate = function (n, l) {
	  E(n, l, o);
	}, preact.createElement = v, preact.h = v, preact.Fragment = y, preact.createRef = function () {
	  return {};
	}, preact.isValidElement = l, preact.Component = d, preact.cloneElement = function (n, l) {
	  var u, t;
	  for (t in l = a(a({}, n.props), l), arguments.length > 2 && (l.children = c.slice.call(arguments, 2)), u = {}, l) {
	    "key" !== t && "ref" !== t && (u[t] = l[t]);
	  }
	  return h(n.type, u, l.key || n.key, l.ref || n.ref, null);
	}, preact.createContext = function (n) {
	  var l = {},
	    u = {
	      __c: "__cC" + f++,
	      __: n,
	      Consumer: function Consumer(n, l) {
	        return n.children(l);
	      },
	      Provider: function Provider(n) {
	        var t,
	          i = this;
	        return this.getChildContext || (t = [], this.getChildContext = function () {
	          return l[u.__c] = i, l;
	        }, this.shouldComponentUpdate = function (n) {
	          i.props.value !== n.value && t.some(function (l) {
	            l.context = n.value, w(l);
	          });
	        }, this.sub = function (n) {
	          t.push(n);
	          var l = n.componentWillUnmount;
	          n.componentWillUnmount = function () {
	            t.splice(t.indexOf(n), 1), l && l.call(n);
	          };
	        }), n.children;
	      }
	    };
	  return u.Consumer.contextType = u, u.Provider.__ = u, u;
	}, preact.toChildArray = _, preact._e = j, preact.options = n;
	return preact;
}

var hasRequiredHooks;

function requireHooks () {
	if (hasRequiredHooks) return hooks;
	hasRequiredHooks = 1;
	var n,
	  t,
	  r,
	  u = requirePreact(),
	  o = 0,
	  i = [],
	  c = u.options.__r,
	  e = u.options.diffed,
	  f = u.options.__c,
	  a = u.options.unmount;
	function p(n, r) {
	  u.options.__h && u.options.__h(t, n, o || r), o = 0;
	  var i = t.__H || (t.__H = {
	    __: [],
	    __h: []
	  });
	  return n >= i.__.length && i.__.push({}), i.__[n];
	}
	function v(n) {
	  return o = 1, s(T, n);
	}
	function s(r, u, o) {
	  var i = p(n++, 2);
	  return i.__c || (i.__c = t, i.__ = [o ? o(u) : T(void 0, u), function (n) {
	    var t = r(i.__[0], n);
	    i.__[0] !== t && (i.__[0] = t, i.__c.setState({}));
	  }]), i.__;
	}
	function x(r, o) {
	  var i = p(n++, 4);
	  !u.options.__s && h(i.__H, o) && (i.__ = r, i.__H = o, t.__h.push(i));
	}
	function l(t, r) {
	  var u = p(n++, 7);
	  return h(u.__H, r) ? (u.__H = r, u.__h = t, u.__ = t()) : u.__;
	}
	function m() {
	  i.some(function (n) {
	    if (n.__P) try {
	      n.__H.__h.forEach(y), n.__H.__h.forEach(d), n.__H.__h = [];
	    } catch (t) {
	      return n.__H.__h = [], u.options.__e(t, n.__v), !0;
	    }
	  }), i = [];
	}
	function y(n) {
	  n.t && n.t();
	}
	function d(n) {
	  var t = n.__();
	  "function" == typeof t && (n.t = t);
	}
	function h(n, t) {
	  return !n || t.some(function (t, r) {
	    return t !== n[r];
	  });
	}
	function T(n, t) {
	  return "function" == typeof t ? t(n) : t;
	}
	u.options.__r = function (r) {
	  c && c(r), n = 0, (t = r.__c).__H && (t.__H.__h.forEach(y), t.__H.__h.forEach(d), t.__H.__h = []);
	}, u.options.diffed = function (n) {
	  e && e(n);
	  var t = n.__c;
	  if (t) {
	    var o = t.__H;
	    o && o.__h.length && (1 !== i.push(t) && r === u.options.requestAnimationFrame || ((r = u.options.requestAnimationFrame) || function (n) {
	      var t,
	        r = function r() {
	          clearTimeout(u), cancelAnimationFrame(t), setTimeout(n);
	        },
	        u = setTimeout(r, 100);
	      "undefined" != typeof window && (t = requestAnimationFrame(r));
	    })(m));
	  }
	}, u.options.__c = function (n, t) {
	  t.some(function (n) {
	    try {
	      n.__h.forEach(y), n.__h = n.__h.filter(function (n) {
	        return !n.__ || d(n);
	      });
	    } catch (r) {
	      t.some(function (n) {
	        n.__h && (n.__h = []);
	      }), t = [], u.options.__e(r, n.__v);
	    }
	  }), f && f(n, t);
	}, u.options.unmount = function (n) {
	  a && a(n);
	  var t = n.__c;
	  if (t) {
	    var r = t.__H;
	    if (r) try {
	      r.__.forEach(function (n) {
	        return n.t && n.t();
	      });
	    } catch (n) {
	      u.options.__e(n, t.__v);
	    }
	  }
	}, hooks.useState = v, hooks.useReducer = s, hooks.useEffect = function (r, o) {
	  var i = p(n++, 3);
	  !u.options.__s && h(i.__H, o) && (i.__ = r, i.__H = o, t.__H.__h.push(i));
	}, hooks.useLayoutEffect = x, hooks.useRef = function (n) {
	  return o = 5, l(function () {
	    return {
	      current: n
	    };
	  }, []);
	}, hooks.useImperativeHandle = function (n, t, r) {
	  o = 6, x(function () {
	    "function" == typeof n ? n(t()) : n && (n.current = t());
	  }, null == r ? r : r.concat(n));
	}, hooks.useMemo = l, hooks.useCallback = function (n, t) {
	  return o = 8, l(function () {
	    return n;
	  }, t);
	}, hooks.useContext = function (r) {
	  var u = t.context[r.__c],
	    o = p(n++, 9);
	  return o.__c = r, u ? (null == o.__ && (o.__ = !0, u.sub(t)), u.props.value) : r.__;
	}, hooks.useDebugValue = function (n, t) {
	  u.options.useDebugValue && u.options.useDebugValue(t ? t(n) : n);
	}, hooks.useErrorBoundary = function (r) {
	  var u = p(n++, 10),
	    o = v();
	  return u.__ = r, t.componentDidCatch || (t.componentDidCatch = function (n) {
	    u.__ && u.__(n), o[1](n);
	  }), [o[0], function () {
	    o[1](void 0);
	  }];
	};
	return hooks;
}

var hasRequiredCompat;

function requireCompat () {
	if (hasRequiredCompat) return compat;
	hasRequiredCompat = 1;
	(function (exports) {
		var n = requireHooks(),
		  t = requirePreact();
		function e(n, t) {
		  for (var e in t) {
		    n[e] = t[e];
		  }
		  return n;
		}
		function r(n, t) {
		  for (var e in n) {
		    if ("__source" !== e && !(e in t)) return !0;
		  }
		  for (var r in t) {
		    if ("__source" !== r && n[r] !== t[r]) return !0;
		  }
		  return !1;
		}
		var o = function (n) {
		  var t, e;
		  function o(t) {
		    var e;
		    return (e = n.call(this, t) || this).isPureReactComponent = !0, e;
		  }
		  return e = n, (t = o).prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e, o.prototype.shouldComponentUpdate = function (n, t) {
		    return r(this.props, n) || r(this.state, t);
		  }, o;
		}(t.Component);
		function u(n, o) {
		  function u(n) {
		    var t = this.props.ref,
		      e = t == n.ref;
		    return !e && t && (t.call ? t(null) : t.current = null), o ? !o(this.props, n) || !e : r(this.props, n);
		  }
		  function i(r) {
		    return this.shouldComponentUpdate = u, t.createElement(n, e({}, r));
		  }
		  return i.prototype.isReactComponent = !0, i.displayName = "Memo(" + (n.displayName || n.name) + ")", i.t = !0, i;
		}
		var i = t.options.__b;
		function f(n) {
		  function t(t) {
		    var r = e({}, t);
		    return delete r.ref, n(r, t.ref);
		  }
		  return t.prototype.isReactComponent = t.t = !0, t.displayName = "ForwardRef(" + (n.displayName || n.name) + ")", t;
		}
		t.options.__b = function (n) {
		  n.type && n.type.t && n.ref && (n.props.ref = n.ref, n.ref = null), i && i(n);
		};
		var c = function c(n, e) {
		    return n ? t.toChildArray(n).reduce(function (n, t, r) {
		      return n.concat(e(t, r));
		    }, []) : null;
		  },
		  l = {
		    map: c,
		    forEach: c,
		    count: function count(n) {
		      return n ? t.toChildArray(n).length : 0;
		    },
		    only: function only(n) {
		      if (1 !== (n = t.toChildArray(n)).length) throw new Error("Children.only() expects only one child.");
		      return n[0];
		    },
		    toArray: t.toChildArray
		  },
		  a = t.options.__e;
		function s(n) {
		  return n && ((n = e({}, n)).__c = null, n.__k = n.__k && n.__k.map(s)), n;
		}
		function p() {
		  this.__u = 0, this.o = null, this.__b = null;
		}
		function v(n) {
		  var t = n.__.__c;
		  return t && t.u && t.u(n);
		}
		function h(n) {
		  var e, r, o;
		  function u(u) {
		    if (e || (e = n()).then(function (n) {
		      r = n["default"] || n;
		    }, function (n) {
		      o = n;
		    }), o) throw o;
		    if (!r) throw e;
		    return t.createElement(r, u);
		  }
		  return u.displayName = "Lazy", u.t = !0, u;
		}
		function d() {
		  this.i = null, this.l = null;
		}
		t.options.__e = function (n, t, e) {
		  if (n.then) for (var r, o = t; o = o.__;) {
		    if ((r = o.__c) && r.__c) return r.__c(n, t.__c);
		  }
		  a(n, t, e);
		}, (p.prototype = new t.Component()).__c = function (n, t) {
		  var e = this;
		  null == e.o && (e.o = []), e.o.push(t);
		  var r = v(e.__v),
		    o = !1,
		    u = function u() {
		      o || (o = !0, r ? r(i) : i());
		    };
		  t.__c = t.componentWillUnmount, t.componentWillUnmount = function () {
		    u(), t.__c && t.__c();
		  };
		  var i = function i() {
		    var n;
		    if (! --e.__u) for (e.__v.__k[0] = e.state.u, e.setState({
		      u: e.__b = null
		    }); n = e.o.pop();) {
		      n.forceUpdate();
		    }
		  };
		  e.__u++ || e.setState({
		    u: e.__b = e.__v.__k[0]
		  }), n.then(u, u);
		}, p.prototype.render = function (n, e) {
		  return this.__b && (this.__v.__k[0] = s(this.__b), this.__b = null), [t.createElement(t.Component, null, e.u ? null : n.children), e.u && n.fallback];
		};
		var x = function x(n, t, e) {
		  if (++e[1] === e[0] && n.l["delete"](t), n.props.revealOrder && ("t" !== n.props.revealOrder[0] || !n.l.size)) for (e = n.i; e;) {
		    for (; e.length > 3;) {
		      e.pop()();
		    }
		    if (e[1] < e[0]) break;
		    n.i = e = e[2];
		  }
		};
		(d.prototype = new t.Component()).u = function (n) {
		  var t = this,
		    e = v(t.__v),
		    r = t.l.get(n);
		  return r[0]++, function (o) {
		    var u = function u() {
		      t.props.revealOrder ? (r.push(o), x(t, n, r)) : o();
		    };
		    e ? e(u) : u();
		  };
		}, d.prototype.render = function (n) {
		  this.i = null, this.l = new Map();
		  var e = t.toChildArray(n.children);
		  n.revealOrder && "b" === n.revealOrder[0] && e.reverse();
		  for (var r = e.length; r--;) {
		    this.l.set(e[r], this.i = [1, 0, this.i]);
		  }
		  return n.children;
		}, d.prototype.componentDidUpdate = d.prototype.componentDidMount = function () {
		  var n = this;
		  n.l.forEach(function (t, e) {
		    x(n, e, t);
		  });
		};
		var m = function () {
		  function n() {}
		  var t = n.prototype;
		  return t.getChildContext = function () {
		    return this.props.context;
		  }, t.render = function (n) {
		    return n.children;
		  }, n;
		}();
		function y(n) {
		  var e = this,
		    r = n.container,
		    o = t.createElement(m, {
		      context: e.context
		    }, n.vnode);
		  return e.s && e.s !== r && (e.p.parentNode && e.s.removeChild(e.p), t._e(e.v), e.h = !1), n.vnode ? e.h ? (r.__k = e.__k, t.render(o, r), e.__k = r.__k) : (e.p = document.createTextNode(""), t.hydrate("", r), r.appendChild(e.p), e.h = !0, e.s = r, t.render(o, r, e.p), e.__k = e.p.__k) : e.h && (e.p.parentNode && e.s.removeChild(e.p), t._e(e.v)), e.v = o, e.componentWillUnmount = function () {
		    e.p.parentNode && e.s.removeChild(e.p), t._e(e.v);
		  }, null;
		}
		function b(n, e) {
		  return t.createElement(y, {
		    vnode: n,
		    container: e
		  });
		}
		var g = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/;
		t.Component.prototype.isReactComponent = {};
		var w = "undefined" != typeof Symbol && Symbol["for"] && Symbol["for"]("react.element") || 60103;
		function E(n, e, r) {
		  if (null == e.__k) for (; e.firstChild;) {
		    e.removeChild(e.firstChild);
		  }
		  return t.render(n, e), "function" == typeof r && r(), n ? n.__c : null;
		}
		var _ = t.options.event;
		function A(n, t) {
		  n["UNSAFE_" + t] && !n[t] && Object.defineProperty(n, t, {
		    configurable: !1,
		    get: function get() {
		      return this["UNSAFE_" + t];
		    },
		    set: function set(n) {
		      this["UNSAFE_" + t] = n;
		    }
		  });
		}
		t.options.event = function (n) {
		  _ && (n = _(n)), n.persist = function () {};
		  var t = !1,
		    e = !1,
		    r = n.stopPropagation;
		  n.stopPropagation = function () {
		    r.call(n), t = !0;
		  };
		  var o = n.preventDefault;
		  return n.preventDefault = function () {
		    o.call(n), e = !0;
		  }, n.isPropagationStopped = function () {
		    return t;
		  }, n.isDefaultPrevented = function () {
		    return e;
		  }, n.nativeEvent = n;
		};
		var C = {
		    configurable: !0,
		    get: function get() {
		      return this["class"];
		    }
		  },
		  S = t.options.vnode;
		function k(n) {
		  return t.createElement.bind(null, n);
		}
		function N(n) {
		  return !!n && n.$$typeof === w;
		}
		function R(n) {
		  return N(n) ? t.cloneElement.apply(null, arguments) : n;
		}
		function U(n) {
		  return !!n.__k && (t.render(null, n), !0);
		}
		function F(n) {
		  return n && (n.base || 1 === n.nodeType && n) || null;
		}
		t.options.vnode = function (n) {
		  n.$$typeof = w;
		  var e = n.type,
		    r = n.props;
		  if (e) {
		    if (r["class"] != r.className && (C.enumerable = "className" in r, null != r.className && (r["class"] = r.className), Object.defineProperty(r, "className", C)), "function" != typeof e) {
		      var o, u, i;
		      for (i in r.defaultValue && void 0 !== r.value && (r.value || 0 === r.value || (r.value = r.defaultValue), delete r.defaultValue), Array.isArray(r.value) && r.multiple && "select" === e && (t.toChildArray(r.children).forEach(function (n) {
		        -1 != r.value.indexOf(n.props.value) && (n.props.selected = !0);
		      }), delete r.value), r) {
		        if (o = g.test(i)) break;
		      }
		      if (o) for (i in u = n.props = {}, r) {
		        u[g.test(i) ? i.replace(/[A-Z0-9]/, "-$&").toLowerCase() : i] = r[i];
		      }
		    }
		    !function (t) {
		      var e = n.type,
		        r = n.props;
		      if (r && "string" == typeof e) {
		        var o = {};
		        for (var u in r) {
		          /^on(Ani|Tra|Tou)/.test(u) && (r[u.toLowerCase()] = r[u], delete r[u]), o[u.toLowerCase()] = u;
		        }
		        if (o.ondoubleclick && (r.ondblclick = r[o.ondoubleclick], delete r[o.ondoubleclick]), o.onbeforeinput && (r.onbeforeinput = r[o.onbeforeinput], delete r[o.onbeforeinput]), o.onchange && ("textarea" === e || "input" === e.toLowerCase() && !/^fil|che|ra/i.test(r.type))) {
		          var i = o.oninput || "oninput";
		          r[i] || (r[i] = r[o.onchange], delete r[o.onchange]);
		        }
		      }
		    }(), "function" == typeof e && !e.m && e.prototype && (A(e.prototype, "componentWillMount"), A(e.prototype, "componentWillReceiveProps"), A(e.prototype, "componentWillUpdate"), e.m = !0);
		  }
		  S && S(n);
		};
		var M = function M(n, t) {
		    return n(t);
		  },
		  O = {
		    useState: n.useState,
		    useReducer: n.useReducer,
		    useEffect: n.useEffect,
		    useLayoutEffect: n.useLayoutEffect,
		    useRef: n.useRef,
		    useImperativeHandle: n.useImperativeHandle,
		    useMemo: n.useMemo,
		    useCallback: n.useCallback,
		    useContext: n.useContext,
		    useDebugValue: n.useDebugValue,
		    version: "16.8.0",
		    Children: l,
		    render: E,
		    hydrate: E,
		    unmountComponentAtNode: U,
		    createPortal: b,
		    createElement: t.createElement,
		    createContext: t.createContext,
		    createFactory: k,
		    cloneElement: R,
		    createRef: t.createRef,
		    Fragment: t.Fragment,
		    isValidElement: N,
		    findDOMNode: F,
		    Component: t.Component,
		    PureComponent: o,
		    memo: u,
		    forwardRef: f,
		    unstable_batchedUpdates: M,
		    Suspense: p,
		    SuspenseList: d,
		    lazy: h
		  };
		Object.keys(n).forEach(function (t) {
		  exports[t] = n[t];
		}), exports.createElement = t.createElement, exports.createContext = t.createContext, exports.createRef = t.createRef, exports.Fragment = t.Fragment, exports.Component = t.Component, exports.version = "16.8.0", exports.Children = l, exports.render = E, exports.hydrate = function (n, e, r) {
		  return t.hydrate(n, e), "function" == typeof r && r(), n ? n.__c : null;
		}, exports.unmountComponentAtNode = U, exports.createPortal = b, exports.createFactory = k, exports.cloneElement = R, exports.isValidElement = N, exports.findDOMNode = F, exports.PureComponent = o, exports.memo = u, exports.forwardRef = f, exports.unstable_batchedUpdates = M, exports.Suspense = p, exports.SuspenseList = d, exports.lazy = h, exports["default"] = O;
} (compat));
	return compat;
}

var cjs$1;
var hasRequiredCjs$1;

function requireCjs$1 () {
	if (hasRequiredCjs$1) return cjs$1;
	hasRequiredCjs$1 = 1;
	function _interopDefault(ex) {
	  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
	}
	var browserUtils = requireCjs$7();
	var QRCode = _interopDefault(requireLib$4());
	var copy = _interopDefault(requireCopyToClipboard());
	var React = requireCompat();
	function open(uri) {
	  QRCode.toString(uri, {
	    type: "terminal"
	  }).then(console.log);
	}
	var WALLETCONNECT_STYLE_SHEET = ":root {\n  --animation-duration: 300ms;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.animated {\n  animation-duration: var(--animation-duration);\n  animation-fill-mode: both;\n}\n\n.fadeIn {\n  animation-name: fadeIn;\n}\n\n.fadeOut {\n  animation-name: fadeOut;\n}\n\n#walletconnect-wrapper {\n  -webkit-user-select: none;\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: center;\n  left: 0;\n  pointer-events: none;\n  position: fixed;\n  top: 0;\n  user-select: none;\n  width: 100%;\n  z-index: 99999999999999;\n}\n\n.walletconnect-modal__headerLogo {\n  height: 21px;\n}\n\n.walletconnect-modal__header p {\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0;\n  align-items: flex-start;\n  display: flex;\n  flex: 1;\n  margin-left: 5px;\n}\n\n.walletconnect-modal__close__wrapper {\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  z-index: 10000;\n  background: white;\n  border-radius: 26px;\n  padding: 6px;\n  box-sizing: border-box;\n  width: 26px;\n  height: 26px;\n  cursor: pointer;\n}\n\n.walletconnect-modal__close__icon {\n  position: relative;\n  top: 7px;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transform: rotate(45deg);\n}\n\n.walletconnect-modal__close__line1 {\n  position: absolute;\n  width: 100%;\n  border: 1px solid rgb(48, 52, 59);\n}\n\n.walletconnect-modal__close__line2 {\n  position: absolute;\n  width: 100%;\n  border: 1px solid rgb(48, 52, 59);\n  transform: rotate(90deg);\n}\n\n.walletconnect-qrcode__base {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  background: rgba(37, 41, 46, 0.95);\n  height: 100%;\n  left: 0;\n  pointer-events: auto;\n  position: fixed;\n  top: 0;\n  transition: 0.4s cubic-bezier(0.19, 1, 0.22, 1);\n  width: 100%;\n  will-change: opacity;\n  padding: 40px;\n  box-sizing: border-box;\n}\n\n.walletconnect-qrcode__text {\n  color: rgba(60, 66, 82, 0.6);\n  font-size: 16px;\n  font-weight: 600;\n  letter-spacing: 0;\n  line-height: 1.1875em;\n  margin: 10px 0 20px 0;\n  text-align: center;\n  width: 100%;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-qrcode__text {\n    font-size: 4vw;\n  }\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-qrcode__text {\n    font-size: 14px;\n  }\n}\n\n.walletconnect-qrcode__image {\n  width: calc(100% - 30px);\n  box-sizing: border-box;\n  cursor: none;\n  margin: 0 auto;\n}\n\n.walletconnect-qrcode__notification {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  font-size: 16px;\n  padding: 16px 20px;\n  border-radius: 16px;\n  text-align: center;\n  transition: all 0.1s ease-in-out;\n  background: white;\n  color: black;\n  margin-bottom: -60px;\n  opacity: 0;\n}\n\n.walletconnect-qrcode__notification.notification__show {\n  opacity: 1;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-modal__header {\n    height: 130px;\n  }\n  .walletconnect-modal__base {\n    overflow: auto;\n  }\n}\n\n@media only screen and (min-device-width: 415px) and (max-width: 768px) {\n  #content {\n    max-width: 768px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (min-width: 375px) and (max-width: 415px) {\n  #content {\n    max-width: 414px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (min-width: 320px) and (max-width: 375px) {\n  #content {\n    max-width: 375px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (max-width: 320px) {\n  #content {\n    max-width: 320px;\n    box-sizing: border-box;\n  }\n}\n\n.walletconnect-modal__base {\n  -webkit-font-smoothing: antialiased;\n  background: #ffffff;\n  border-radius: 24px;\n  box-shadow: 0 10px 50px 5px rgba(0, 0, 0, 0.4);\n  font-family: ui-rounded, \"SF Pro Rounded\", \"SF Pro Text\", medium-content-sans-serif-font,\n    -apple-system, BlinkMacSystemFont, ui-sans-serif, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell,\n    \"Open Sans\", \"Helvetica Neue\", sans-serif;\n  margin-top: 41px;\n  padding: 24px 24px 22px;\n  pointer-events: auto;\n  position: relative;\n  text-align: center;\n  transition: 0.4s cubic-bezier(0.19, 1, 0.22, 1);\n  will-change: transform;\n  overflow: visible;\n  transform: translateY(-50%);\n  top: 50%;\n  max-width: 500px;\n  margin: auto;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-modal__base {\n    padding: 24px 12px;\n  }\n}\n\n.walletconnect-modal__base .hidden {\n  transform: translateY(150%);\n  transition: 0.125s cubic-bezier(0.4, 0, 1, 1);\n}\n\n.walletconnect-modal__header {\n  align-items: center;\n  display: flex;\n  height: 26px;\n  left: 0;\n  justify-content: space-between;\n  position: absolute;\n  top: -42px;\n  width: 100%;\n}\n\n.walletconnect-modal__base .wc-logo {\n  align-items: center;\n  display: flex;\n  height: 26px;\n  margin-top: 15px;\n  padding-bottom: 15px;\n  pointer-events: auto;\n}\n\n.walletconnect-modal__base .wc-logo div {\n  background-color: #3399ff;\n  height: 21px;\n  margin-right: 5px;\n  mask-image: url(\"images/wc-logo.svg\") center no-repeat;\n  width: 32px;\n}\n\n.walletconnect-modal__base .wc-logo p {\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0;\n}\n\n.walletconnect-modal__base h2 {\n  color: rgba(60, 66, 82, 0.6);\n  font-size: 16px;\n  font-weight: 600;\n  letter-spacing: 0;\n  line-height: 1.1875em;\n  margin: 0 0 19px 0;\n  text-align: center;\n  width: 100%;\n}\n\n.walletconnect-modal__base__row {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  align-items: center;\n  border-radius: 20px;\n  cursor: pointer;\n  display: flex;\n  height: 56px;\n  justify-content: space-between;\n  padding: 0 15px;\n  position: relative;\n  margin: 0px 0px 8px;\n  text-align: left;\n  transition: 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  will-change: transform;\n  text-decoration: none;\n}\n\n.walletconnect-modal__base__row:hover {\n  background: rgba(60, 66, 82, 0.06);\n}\n\n.walletconnect-modal__base__row:active {\n  background: rgba(60, 66, 82, 0.06);\n  transform: scale(0.975);\n  transition: 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.walletconnect-modal__base__row__h3 {\n  color: #25292e;\n  font-size: 20px;\n  font-weight: 700;\n  margin: 0;\n  padding-bottom: 3px;\n}\n\n.walletconnect-modal__base__row__right {\n  align-items: center;\n  display: flex;\n  justify-content: center;\n}\n\n.walletconnect-modal__base__row__right__app-icon {\n  border-radius: 8px;\n  height: 34px;\n  margin: 0 11px 2px 0;\n  width: 34px;\n  background-size: 100%;\n  box-shadow: 0 4px 12px 0 rgba(37, 41, 46, 0.25);\n}\n\n.walletconnect-modal__base__row__right__caret {\n  height: 18px;\n  opacity: 0.3;\n  transition: 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  width: 8px;\n  will-change: opacity;\n}\n\n.walletconnect-modal__base__row:hover .caret,\n.walletconnect-modal__base__row:active .caret {\n  opacity: 0.6;\n}\n\n.walletconnect-modal__mobile__toggle {\n  width: 80%;\n  display: flex;\n  margin: 0 auto;\n  position: relative;\n  overflow: hidden;\n  border-radius: 8px;\n  margin-bottom: 18px;\n  background: #d4d5d9;\n}\n\n.walletconnect-modal__single_wallet {\n  display: flex;\n  justify-content: center;\n  margin-top: 7px;\n  margin-bottom: 18px;\n}\n\n.walletconnect-modal__single_wallet a {\n  cursor: pointer;\n  color: rgb(64, 153, 255);\n  font-size: 21px;\n  font-weight: 800;\n  text-decoration: none !important;\n  margin: 0 auto;\n}\n\n.walletconnect-modal__mobile__toggle_selector {\n  width: calc(50% - 8px);\n  background: white;\n  position: absolute;\n  border-radius: 5px;\n  height: calc(100% - 8px);\n  top: 4px;\n  transition: all 0.2s ease-in-out;\n  transform: translate3d(4px, 0, 0);\n}\n\n.walletconnect-modal__mobile__toggle.right__selected .walletconnect-modal__mobile__toggle_selector {\n  transform: translate3d(calc(100% + 12px), 0, 0);\n}\n\n.walletconnect-modal__mobile__toggle a {\n  font-size: 12px;\n  width: 50%;\n  text-align: center;\n  padding: 8px;\n  margin: 0;\n  font-weight: 600;\n  z-index: 1;\n}\n\n.walletconnect-modal__footer {\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-modal__footer {\n    margin-top: 5vw;\n  }\n}\n\n.walletconnect-modal__footer a {\n  cursor: pointer;\n  color: #898d97;\n  font-size: 15px;\n  margin: 0 auto;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-modal__footer a {\n    font-size: 14px;\n  }\n}\n\n.walletconnect-connect__buttons__wrapper {\n  max-height: 44vh;\n}\n\n.walletconnect-connect__buttons__wrapper__android {\n  margin: 50% 0;\n}\n\n.walletconnect-connect__buttons__wrapper__wrap {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  margin: 10px 0;\n}\n\n@media only screen and (min-width: 768px) {\n  .walletconnect-connect__buttons__wrapper__wrap {\n    margin-top: 40px;\n  }\n}\n\n.walletconnect-connect__button {\n  background-color: rgb(64, 153, 255);\n  padding: 12px;\n  border-radius: 8px;\n  text-decoration: none;\n  color: rgb(255, 255, 255);\n  font-weight: 500;\n}\n\n.walletconnect-connect__button__icon_anchor {\n  cursor: pointer;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  margin: 8px;\n  width: 42px;\n  justify-self: center;\n  flex-direction: column;\n  text-decoration: none !important;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-connect__button__icon_anchor {\n    margin: 4px;\n  }\n}\n\n.walletconnect-connect__button__icon {\n  border-radius: 10px;\n  height: 42px;\n  margin: 0;\n  width: 42px;\n  background-size: cover !important;\n  box-shadow: 0 4px 12px 0 rgba(37, 41, 46, 0.25);\n}\n\n.walletconnect-connect__button__text {\n  color: #424952;\n  font-size: 2.7vw;\n  text-decoration: none !important;\n  padding: 0;\n  margin-top: 1.8vw;\n  font-weight: 600;\n}\n\n@media only screen and (min-width: 768px) {\n  .walletconnect-connect__button__text {\n    font-size: 16px;\n    margin-top: 12px;\n  }\n}\n\n.walletconnect-search__input {\n  border: none;\n  background: #d4d5d9;\n  border-style: none;\n  padding: 8px 16px;\n  outline: none;\n  font-style: normal;\n  font-stretch: normal;\n  font-size: 16px;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: normal;\n  letter-spacing: normal;\n  text-align: left;\n  border-radius: 8px;\n  width: calc(100% - 16px);\n  margin: 0;\n  margin-bottom: 8px;\n}\n";

	// A type of promise-like that resolves synchronously and supports only one observer
	typeof Symbol !== "undefined" ? Symbol.iterator || (Symbol.iterator = Symbol("Symbol.iterator")) : "@@iterator"; // Asynchronously iterate through an object's values
	typeof Symbol !== "undefined" ? Symbol.asyncIterator || (Symbol.asyncIterator = Symbol("Symbol.asyncIterator")) : "@@asyncIterator"; // Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing

	function _catch(body, recover) {
	  try {
	    var result = body();
	  } catch (e) {
	    return recover(e);
	  }
	  if (result && result.then) {
	    return result.then(void 0, recover);
	  }
	  return result;
	} // Asynchronously await a promise and pass the result to a finally continuation

	var WALLETCONNECT_LOGO_SVG_URL = "data:image/svg+xml,%3Csvg height='185' viewBox='0 0 300 185' width='300' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='m61.4385429 36.2562612c48.9112241-47.8881663 128.2119871-47.8881663 177.1232091 0l5.886545 5.7634174c2.445561 2.3944081 2.445561 6.2765112 0 8.6709204l-20.136695 19.715503c-1.222781 1.1972051-3.2053 1.1972051-4.428081 0l-8.100584-7.9311479c-34.121692-33.4079817-89.443886-33.4079817-123.5655788 0l-8.6750562 8.4936051c-1.2227816 1.1972041-3.205301 1.1972041-4.4280806 0l-20.1366949-19.7155031c-2.4455612-2.3944092-2.4455612-6.2765122 0-8.6709204zm218.7677961 40.7737449 17.921697 17.546897c2.445549 2.3943969 2.445563 6.2764769.000031 8.6708899l-80.810171 79.121134c-2.445544 2.394426-6.410582 2.394453-8.85616.000062-.00001-.00001-.000022-.000022-.000032-.000032l-57.354143-56.154572c-.61139-.598602-1.60265-.598602-2.21404 0-.000004.000004-.000007.000008-.000011.000011l-57.3529212 56.154531c-2.4455368 2.394432-6.4105755 2.394472-8.8561612.000087-.0000143-.000014-.0000296-.000028-.0000449-.000044l-80.81241943-79.122185c-2.44556021-2.394408-2.44556021-6.2765115 0-8.6709197l17.92172963-17.5468673c2.4455602-2.3944082 6.4105989-2.3944082 8.8561602 0l57.3549775 56.155357c.6113908.598602 1.602649.598602 2.2140398 0 .0000092-.000009.0000174-.000017.0000265-.000024l57.3521031-56.155333c2.445505-2.3944633 6.410544-2.3945531 8.856161-.0002.000034.0000336.000068.0000673.000101.000101l57.354902 56.155432c.61139.598601 1.60265.598601 2.21404 0l57.353975-56.1543249c2.445561-2.3944092 6.410599-2.3944092 8.85616 0z' fill='%233b99fc'/%3E%3C/svg%3E";
	var WALLETCONNECT_HEADER_TEXT = "WalletConnect";
	var ANIMATION_DURATION = 300;
	var DEFAULT_BUTTON_COLOR = "rgb(64, 153, 255)";
	var WALLETCONNECT_WRAPPER_ID = "walletconnect-wrapper";
	var WALLETCONNECT_STYLE_ID = "walletconnect-style-sheet";
	var WALLETCONNECT_MODAL_ID = "walletconnect-qrcode-modal";
	var WALLETCONNECT_CLOSE_BUTTON_ID = "walletconnect-qrcode-close";
	var WALLETCONNECT_CTA_TEXT_ID = "walletconnect-qrcode-text";
	var WALLETCONNECT_CONNECT_BUTTON_ID = "walletconnect-connect-button";
	function Header(props) {
	  return React.createElement("div", {
	    className: "walletconnect-modal__header"
	  }, React.createElement("img", {
	    src: WALLETCONNECT_LOGO_SVG_URL,
	    className: "walletconnect-modal__headerLogo"
	  }), React.createElement("p", null, WALLETCONNECT_HEADER_TEXT), React.createElement("div", {
	    className: "walletconnect-modal__close__wrapper",
	    onClick: props.onClose
	  }, React.createElement("div", {
	    id: WALLETCONNECT_CLOSE_BUTTON_ID,
	    className: "walletconnect-modal__close__icon"
	  }, React.createElement("div", {
	    className: "walletconnect-modal__close__line1"
	  }), React.createElement("div", {
	    className: "walletconnect-modal__close__line2"
	  }))));
	}
	function ConnectButton(props) {
	  return React.createElement("a", {
	    className: "walletconnect-connect__button",
	    href: props.href,
	    id: WALLETCONNECT_CONNECT_BUTTON_ID + "-" + props.name,
	    onClick: props.onClick,
	    rel: "noopener noreferrer",
	    style: {
	      backgroundColor: props.color
	    },
	    target: "_blank"
	  }, props.name);
	}
	var CARET_SVG_URL = "data:image/svg+xml,%3Csvg fill='none' height='18' viewBox='0 0 8 18' width='8' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath clip-rule='evenodd' d='m.586301.213898c-.435947.33907-.5144813.967342-.175411 1.403292l4.87831 6.27212c.28087.36111.28087.86677 0 1.22788l-4.878311 6.27211c-.33907.436-.260536 1.0642.175412 1.4033.435949.3391 1.064219.2605 1.403289-.1754l4.87832-6.2721c.84259-1.08336.84259-2.60034 0-3.68367l-4.87832-6.27212c-.33907-.4359474-.96734-.514482-1.403289-.175412z' fill='%233c4252' fill-rule='evenodd'/%3E%3C/svg%3E";
	function WalletButton(props) {
	  var color = props.color;
	  var href = props.href;
	  var name = props.name;
	  var logo = props.logo;
	  var onClick = props.onClick;
	  return React.createElement("a", {
	    className: "walletconnect-modal__base__row",
	    href: href,
	    onClick: onClick,
	    rel: "noopener noreferrer",
	    target: "_blank"
	  }, React.createElement("h3", {
	    className: "walletconnect-modal__base__row__h3"
	  }, name), React.createElement("div", {
	    className: "walletconnect-modal__base__row__right"
	  }, React.createElement("div", {
	    className: "walletconnect-modal__base__row__right__app-icon",
	    style: {
	      background: "url('" + logo + "') " + color,
	      backgroundSize: "100%"
	    }
	  }), React.createElement("img", {
	    src: CARET_SVG_URL,
	    className: "walletconnect-modal__base__row__right__caret"
	  })));
	}
	function WalletIcon(props) {
	  var color = props.color;
	  var href = props.href;
	  var name = props.name;
	  var logo = props.logo;
	  var onClick = props.onClick;
	  var fontSize = window.innerWidth < 768 ? (name.length > 8 ? 2.5 : 2.7) + "vw" : "inherit";
	  return React.createElement("a", {
	    className: "walletconnect-connect__button__icon_anchor",
	    href: href,
	    onClick: onClick,
	    rel: "noopener noreferrer",
	    target: "_blank"
	  }, React.createElement("div", {
	    className: "walletconnect-connect__button__icon",
	    style: {
	      background: "url('" + logo + "') " + color,
	      backgroundSize: "100%"
	    }
	  }), React.createElement("div", {
	    style: {
	      fontSize: fontSize
	    },
	    className: "walletconnect-connect__button__text"
	  }, name));
	}
	var GRID_MIN_COUNT = 5;
	var LINKS_PER_PAGE = 12;
	function LinkDisplay(props) {
	  var android = browserUtils.isAndroid();
	  var ref = React.useState("");
	  var input = ref[0];
	  var setInput = ref[1];
	  var ref$1 = React.useState("");
	  var filter = ref$1[0];
	  var setFilter = ref$1[1];
	  var ref$2 = React.useState(1);
	  var page = ref$2[0];
	  var setPage = ref$2[1];
	  var links = filter ? props.links.filter(function (link) {
	    return link.name.toLowerCase().includes(filter.toLowerCase());
	  }) : props.links;
	  var errorMessage = props.errorMessage;
	  var grid = filter || links.length > GRID_MIN_COUNT;
	  var pages = Math.ceil(links.length / LINKS_PER_PAGE);
	  var range = [(page - 1) * LINKS_PER_PAGE + 1, page * LINKS_PER_PAGE];
	  var pageLinks = links.length ? links.filter(function (_, index) {
	    return index + 1 >= range[0] && index + 1 <= range[1];
	  }) : [];
	  var hasPaging = !!(!android && pages > 1);
	  var filterTimeout = undefined;
	  function handleInput(e) {
	    setInput(e.target.value);
	    clearTimeout(filterTimeout);
	    if (e.target.value) {
	      filterTimeout = setTimeout(function () {
	        setFilter(e.target.value);
	        setPage(1);
	      }, 1000);
	    } else {
	      setInput("");
	      setFilter("");
	      setPage(1);
	    }
	  }
	  return React.createElement("div", null, React.createElement("p", {
	    id: WALLETCONNECT_CTA_TEXT_ID,
	    className: "walletconnect-qrcode__text"
	  }, android ? props.text.connect_mobile_wallet : props.text.choose_preferred_wallet), !android && React.createElement("input", {
	    className: "walletconnect-search__input",
	    placeholder: "Search",
	    value: input,
	    onChange: handleInput
	  }), React.createElement("div", {
	    className: "walletconnect-connect__buttons__wrapper" + (android ? "__android" : grid && links.length ? "__wrap" : "")
	  }, !android ? pageLinks.length ? pageLinks.map(function (entry) {
	    var color = entry.color;
	    var name = entry.name;
	    var shortName = entry.shortName;
	    var logo = entry.logo;
	    var href = browserUtils.formatIOSMobile(props.uri, entry);
	    var handleClickIOS = React.useCallback(function () {
	      browserUtils.saveMobileLinkInfo({
	        name: name,
	        href: href
	      });
	    }, [pageLinks]);
	    return !grid ? React.createElement(WalletButton, {
	      color: color,
	      href: href,
	      name: name,
	      logo: logo,
	      onClick: handleClickIOS
	    }) : React.createElement(WalletIcon, {
	      color: color,
	      href: href,
	      name: shortName || name,
	      logo: logo,
	      onClick: handleClickIOS
	    });
	  }) : React.createElement(React.Fragment, null, React.createElement("p", null, errorMessage.length ? props.errorMessage : !!props.links.length && !links.length ? props.text.no_wallets_found : props.text.loading)) : React.createElement(ConnectButton, {
	    name: props.text.connect,
	    color: DEFAULT_BUTTON_COLOR,
	    href: props.uri,
	    onClick: React.useCallback(function () {
	      browserUtils.saveMobileLinkInfo({
	        name: "Unknown",
	        href: props.uri
	      });
	    }, [])
	  })), hasPaging && React.createElement("div", {
	    className: "walletconnect-modal__footer"
	  }, Array(pages).fill(0).map(function (_, index) {
	    var pageNumber = index + 1;
	    var selected = page === pageNumber;
	    return React.createElement("a", {
	      style: {
	        margin: "auto 10px",
	        fontWeight: selected ? "bold" : "normal"
	      },
	      onClick: function onClick() {
	        return setPage(pageNumber);
	      }
	    }, pageNumber);
	  })));
	}
	function Notification(props) {
	  var show = !!props.message.trim();
	  return React.createElement("div", {
	    className: "walletconnect-qrcode__notification" + (show ? " notification__show" : "")
	  }, props.message);
	}
	var formatQRCodeImage = function formatQRCodeImage(data) {
	  try {
	    var result = "";
	    return Promise.resolve(QRCode.toString(data, {
	      margin: 0,
	      type: "svg"
	    })).then(function (dataString) {
	      if (typeof dataString === "string") {
	        result = dataString.replace("<svg", "<svg class=\"walletconnect-qrcode__image\"");
	      }
	      return result;
	    });
	  } catch (e) {
	    return Promise.reject(e);
	  }
	};
	function QRCodeDisplay(props) {
	  var ref = React.useState("");
	  var notification = ref[0];
	  var setNotification = ref[1];
	  var ref$1 = React.useState("");
	  var svg = ref$1[0];
	  var setSvg = ref$1[1];
	  React.useEffect(function () {
	    try {
	      return Promise.resolve(formatQRCodeImage(props.uri)).then(function (_formatQRCodeImage) {
	        setSvg(_formatQRCodeImage);
	      });
	    } catch (e) {
	      Promise.reject(e);
	    }
	  }, []);
	  var copyToClipboard = function copyToClipboard() {
	    var success = copy(props.uri);
	    if (success) {
	      setNotification(props.text.copied_to_clipboard);
	      setInterval(function () {
	        return setNotification("");
	      }, 1200);
	    } else {
	      setNotification("Error");
	      setInterval(function () {
	        return setNotification("");
	      }, 1200);
	    }
	  };
	  return React.createElement("div", null, React.createElement("p", {
	    id: WALLETCONNECT_CTA_TEXT_ID,
	    className: "walletconnect-qrcode__text"
	  }, props.text.scan_qrcode_with_wallet), React.createElement("div", {
	    dangerouslySetInnerHTML: {
	      __html: svg
	    }
	  }), React.createElement("div", {
	    className: "walletconnect-modal__footer"
	  }, React.createElement("a", {
	    onClick: copyToClipboard
	  }, props.text.copy_to_clipboard)), React.createElement(Notification, {
	    message: notification
	  }));
	}
	function Modal(props) {
	  var android = browserUtils.isAndroid();
	  var mobile = browserUtils.isMobile();
	  var whitelist = mobile ? props.qrcodeModalOptions && props.qrcodeModalOptions.mobileLinks ? props.qrcodeModalOptions.mobileLinks : undefined : props.qrcodeModalOptions && props.qrcodeModalOptions.desktopLinks ? props.qrcodeModalOptions.desktopLinks : undefined;
	  var ref = React.useState(false);
	  var loading = ref[0];
	  var setLoading = ref[1];
	  var ref$1 = React.useState(false);
	  var fetched = ref$1[0];
	  var setFetched = ref$1[1];
	  var ref$2 = React.useState(!mobile);
	  var displayQRCode = ref$2[0];
	  var setDisplayQRCode = ref$2[1];
	  var displayProps = {
	    mobile: mobile,
	    text: props.text,
	    uri: props.uri,
	    qrcodeModalOptions: props.qrcodeModalOptions
	  };
	  var ref$3 = React.useState("");
	  var singleLinkHref = ref$3[0];
	  var setSingleLinkHref = ref$3[1];
	  var ref$4 = React.useState(false);
	  var hasSingleLink = ref$4[0];
	  var setHasSingleLink = ref$4[1];
	  var ref$5 = React.useState([]);
	  var links = ref$5[0];
	  var setLinks = ref$5[1];
	  var ref$6 = React.useState("");
	  var errorMessage = ref$6[0];
	  var setErrorMessage = ref$6[1];
	  var getLinksIfNeeded = function getLinksIfNeeded() {
	    if (fetched || loading || whitelist && !whitelist.length || links.length > 0) {
	      return;
	    }
	    React.useEffect(function () {
	      var initLinks = function initLinks() {
	        try {
	          if (android) {
	            return Promise.resolve();
	          }
	          setLoading(true);
	          var _temp = _catch(function () {
	            var url = props.qrcodeModalOptions && props.qrcodeModalOptions.registryUrl ? props.qrcodeModalOptions.registryUrl : browserUtils.getWalletRegistryUrl();
	            return Promise.resolve(fetch(url)).then(function (registryResponse) {
	              return Promise.resolve(registryResponse.json()).then(function (_registryResponse$jso) {
	                var registry = _registryResponse$jso.listings;
	                var platform = mobile ? "mobile" : "desktop";
	                var _links = browserUtils.getMobileLinkRegistry(browserUtils.formatMobileRegistry(registry, platform), whitelist);
	                setLoading(false);
	                setFetched(true);
	                setErrorMessage(!_links.length ? props.text.no_supported_wallets : "");
	                setLinks(_links);
	                var hasSingleLink = _links.length === 1;
	                if (hasSingleLink) {
	                  setSingleLinkHref(browserUtils.formatIOSMobile(props.uri, _links[0]));
	                  setDisplayQRCode(true);
	                }
	                setHasSingleLink(hasSingleLink);
	              });
	            });
	          }, function (e) {
	            setLoading(false);
	            setFetched(true);
	            setErrorMessage(props.text.something_went_wrong);
	            console.error(e);
	          });
	          return Promise.resolve(_temp && _temp.then ? _temp.then(function () {}) : void 0);
	        } catch (e) {
	          return Promise.reject(e);
	        }
	      };
	      initLinks();
	    });
	  };
	  getLinksIfNeeded();
	  var rightSelected = mobile ? displayQRCode : !displayQRCode;
	  return React.createElement("div", {
	    id: WALLETCONNECT_MODAL_ID,
	    className: "walletconnect-qrcode__base animated fadeIn"
	  }, React.createElement("div", {
	    className: "walletconnect-modal__base"
	  }, React.createElement(Header, {
	    onClose: props.onClose
	  }), hasSingleLink && displayQRCode ? React.createElement("div", {
	    className: "walletconnect-modal__single_wallet"
	  }, React.createElement("a", {
	    onClick: function onClick() {
	      return browserUtils.saveMobileLinkInfo({
	        name: links[0].name,
	        href: singleLinkHref
	      });
	    },
	    href: singleLinkHref,
	    rel: "noopener noreferrer",
	    target: "_blank"
	  }, props.text.connect_with + " " + (hasSingleLink ? links[0].name : "") + " ›")) : android || loading || !loading && links.length ? React.createElement("div", {
	    className: "walletconnect-modal__mobile__toggle" + (rightSelected ? " right__selected" : "")
	  }, React.createElement("div", {
	    className: "walletconnect-modal__mobile__toggle_selector"
	  }), mobile ? React.createElement(React.Fragment, null, React.createElement("a", {
	    onClick: function onClick() {
	      return setDisplayQRCode(false), getLinksIfNeeded();
	    }
	  }, props.text.mobile), React.createElement("a", {
	    onClick: function onClick() {
	      return setDisplayQRCode(true);
	    }
	  }, props.text.qrcode)) : React.createElement(React.Fragment, null, React.createElement("a", {
	    onClick: function onClick() {
	      return setDisplayQRCode(true);
	    }
	  }, props.text.qrcode), React.createElement("a", {
	    onClick: function onClick() {
	      return setDisplayQRCode(false), getLinksIfNeeded();
	    }
	  }, props.text.desktop))) : null, React.createElement("div", null, displayQRCode || !android && !loading && !links.length ? React.createElement(QRCodeDisplay, Object.assign({}, displayProps)) : React.createElement(LinkDisplay, Object.assign({}, displayProps, {
	    links: links,
	    errorMessage: errorMessage
	  })))));
	}
	var de = {
	  choose_preferred_wallet: "Wähle bevorzugte Wallet",
	  connect_mobile_wallet: "Verbinde mit Mobile Wallet",
	  scan_qrcode_with_wallet: "Scanne den QR-code mit einer WalletConnect kompatiblen Wallet",
	  connect: "Verbinden",
	  qrcode: "QR-Code",
	  mobile: "Mobile",
	  desktop: "Desktop",
	  copy_to_clipboard: "In die Zwischenablage kopieren",
	  copied_to_clipboard: "In die Zwischenablage kopiert!",
	  connect_with: "Verbinden mit Hilfe von",
	  loading: "Laden...",
	  something_went_wrong: "Etwas ist schief gelaufen",
	  no_supported_wallets: "Es gibt noch keine unterstützten Wallet",
	  no_wallets_found: "keine Wallet gefunden"
	};
	var en = {
	  choose_preferred_wallet: "Choose your preferred wallet",
	  connect_mobile_wallet: "Connect to Mobile Wallet",
	  scan_qrcode_with_wallet: "Scan QR code with a WalletConnect-compatible wallet",
	  connect: "Connect",
	  qrcode: "QR Code",
	  mobile: "Mobile",
	  desktop: "Desktop",
	  copy_to_clipboard: "Copy to clipboard",
	  copied_to_clipboard: "Copied to clipboard!",
	  connect_with: "Connect with",
	  loading: "Loading...",
	  something_went_wrong: "Something went wrong",
	  no_supported_wallets: "There are no supported wallets yet",
	  no_wallets_found: "No wallets found"
	};
	var es = {
	  choose_preferred_wallet: "Elige tu billetera preferida",
	  connect_mobile_wallet: "Conectar a billetera móvil",
	  scan_qrcode_with_wallet: "Escanea el código QR con una billetera compatible con WalletConnect",
	  connect: "Conectar",
	  qrcode: "Código QR",
	  mobile: "Móvil",
	  desktop: "Desktop",
	  copy_to_clipboard: "Copiar",
	  copied_to_clipboard: "Copiado!",
	  connect_with: "Conectar mediante",
	  loading: "Cargando...",
	  something_went_wrong: "Algo salió mal",
	  no_supported_wallets: "Todavía no hay billeteras compatibles",
	  no_wallets_found: "No se encontraron billeteras"
	};
	var fr = {
	  choose_preferred_wallet: "Choisissez votre portefeuille préféré",
	  connect_mobile_wallet: "Se connecter au portefeuille mobile",
	  scan_qrcode_with_wallet: "Scannez le QR code avec un portefeuille compatible WalletConnect",
	  connect: "Se connecter",
	  qrcode: "QR Code",
	  mobile: "Mobile",
	  desktop: "Desktop",
	  copy_to_clipboard: "Copier",
	  copied_to_clipboard: "Copié!",
	  connect_with: "Connectez-vous à l'aide de",
	  loading: "Chargement...",
	  something_went_wrong: "Quelque chose a mal tourné",
	  no_supported_wallets: "Il n'y a pas encore de portefeuilles pris en charge",
	  no_wallets_found: "Aucun portefeuille trouvé"
	};
	var ko = {
	  choose_preferred_wallet: "원하는 지갑을 선택하세요",
	  connect_mobile_wallet: "모바일 지갑과 연결",
	  scan_qrcode_with_wallet: "WalletConnect 지원 지갑에서 QR코드를 스캔하세요",
	  connect: "연결",
	  qrcode: "QR 코드",
	  mobile: "모바일",
	  desktop: "데스크탑",
	  copy_to_clipboard: "클립보드에 복사",
	  copied_to_clipboard: "클립보드에 복사되었습니다!",
	  connect_with: "와 연결하다",
	  loading: "로드 중...",
	  something_went_wrong: "문제가 발생했습니다.",
	  no_supported_wallets: "아직 지원되는 지갑이 없습니다",
	  no_wallets_found: "지갑을 찾을 수 없습니다"
	};
	var pt = {
	  choose_preferred_wallet: "Escolha sua carteira preferida",
	  connect_mobile_wallet: "Conectar-se à carteira móvel",
	  scan_qrcode_with_wallet: "Ler o código QR com uma carteira compatível com WalletConnect",
	  connect: "Conectar",
	  qrcode: "Código QR",
	  mobile: "Móvel",
	  desktop: "Desktop",
	  copy_to_clipboard: "Copiar",
	  copied_to_clipboard: "Copiado!",
	  connect_with: "Ligar por meio de",
	  loading: "Carregamento...",
	  something_went_wrong: "Algo correu mal",
	  no_supported_wallets: "Ainda não há carteiras suportadas",
	  no_wallets_found: "Nenhuma carteira encontrada"
	};
	var zh = {
	  choose_preferred_wallet: "选择你的钱包",
	  connect_mobile_wallet: "连接至移动端钱包",
	  scan_qrcode_with_wallet: "使用兼容 WalletConnect 的钱包扫描二维码",
	  connect: "连接",
	  qrcode: "二维码",
	  mobile: "移动",
	  desktop: "桌面",
	  copy_to_clipboard: "复制到剪贴板",
	  copied_to_clipboard: "复制到剪贴板成功！",
	  connect_with: "通过以下方式连接",
	  loading: "正在加载...",
	  something_went_wrong: "出了问题",
	  no_supported_wallets: "目前还没有支持的钱包",
	  no_wallets_found: "没有找到钱包"
	};
	var fa = {
	  choose_preferred_wallet: "کیف پول مورد نظر خود را انتخاب کنید",
	  connect_mobile_wallet: "به کیف پول موبایل وصل شوید",
	  scan_qrcode_with_wallet: "کد QR را با یک کیف پول سازگار با WalletConnect اسکن کنید",
	  connect: "اتصال",
	  qrcode: "کد QR",
	  mobile: "سیار",
	  desktop: "دسکتاپ",
	  copy_to_clipboard: "کپی به کلیپ بورد",
	  copied_to_clipboard: "در کلیپ بورد کپی شد!",
	  connect_with: "ارتباط با",
	  loading: "...بارگذاری",
	  something_went_wrong: "مشکلی پیش آمد",
	  no_supported_wallets: "هنوز هیچ کیف پول پشتیبانی شده ای وجود ندارد",
	  no_wallets_found: "هیچ کیف پولی پیدا نشد"
	};
	var languages = {
	  de: de,
	  en: en,
	  es: es,
	  fr: fr,
	  ko: ko,
	  pt: pt,
	  zh: zh,
	  fa: fa
	};
	function injectStyleSheet() {
	  var doc = browserUtils.getDocumentOrThrow();
	  var prev = doc.getElementById(WALLETCONNECT_STYLE_ID);
	  if (prev) {
	    doc.head.removeChild(prev);
	  }
	  var style = doc.createElement("style");
	  style.setAttribute("id", WALLETCONNECT_STYLE_ID);
	  style.innerText = WALLETCONNECT_STYLE_SHEET;
	  doc.head.appendChild(style);
	}
	function renderWrapper() {
	  var doc = browserUtils.getDocumentOrThrow();
	  var wrapper = doc.createElement("div");
	  wrapper.setAttribute("id", WALLETCONNECT_WRAPPER_ID);
	  doc.body.appendChild(wrapper);
	  return wrapper;
	}
	function triggerCloseAnimation() {
	  var doc = browserUtils.getDocumentOrThrow();
	  var modal = doc.getElementById(WALLETCONNECT_MODAL_ID);
	  if (modal) {
	    modal.className = modal.className.replace("fadeIn", "fadeOut");
	    setTimeout(function () {
	      var wrapper = doc.getElementById(WALLETCONNECT_WRAPPER_ID);
	      if (wrapper) {
	        doc.body.removeChild(wrapper);
	      }
	    }, ANIMATION_DURATION);
	  }
	}
	function getWrappedCallback(cb) {
	  return function () {
	    triggerCloseAnimation();
	    if (cb) {
	      cb();
	    }
	  };
	}
	function getText() {
	  var lang = browserUtils.getNavigatorOrThrow().language.split("-")[0] || "en";
	  return languages[lang] || languages["en"];
	}
	function open$1(uri, cb, qrcodeModalOptions) {
	  injectStyleSheet();
	  var wrapper = renderWrapper();
	  React.render(React.createElement(Modal, {
	    text: getText(),
	    uri: uri,
	    onClose: getWrappedCallback(cb),
	    qrcodeModalOptions: qrcodeModalOptions
	  }), wrapper);
	}
	function close$1() {
	  triggerCloseAnimation();
	}
	var isNode = function isNode() {
	  return typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined";
	};
	function open$2(uri, cb, qrcodeModalOptions) {
	  console.log(uri);
	  if (isNode()) {
	    open(uri);
	  } else {
	    open$1(uri, cb, qrcodeModalOptions);
	  }
	}
	function close$2() {
	  if (isNode()) ;else {
	    close$1();
	  }
	}
	var index = {
	  open: open$2,
	  close: close$2
	};
	cjs$1 = index;
	return cjs$1;
}

var cjs = {};

var eventemitter3 = {exports: {}};

var hasRequiredEventemitter3;

function requireEventemitter3 () {
	if (hasRequiredEventemitter3) return eventemitter3.exports;
	hasRequiredEventemitter3 = 1;
	(function (module) {

		var has = Object.prototype.hasOwnProperty,
		  prefix = '~';

		/**
		 * Constructor to create a storage for our `EE` objects.
		 * An `Events` instance is a plain object whose properties are event names.
		 *
		 * @constructor
		 * @private
		 */
		function Events() {}

		//
		// We try to not inherit from `Object.prototype`. In some engines creating an
		// instance in this way is faster than calling `Object.create(null)` directly.
		// If `Object.create(null)` is not supported we prefix the event names with a
		// character to make sure that the built-in object properties are not
		// overridden or used as an attack vector.
		//
		if (Object.create) {
		  Events.prototype = Object.create(null);

		  //
		  // This hack is needed because the `__proto__` property is still inherited in
		  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
		  //
		  if (!new Events().__proto__) prefix = false;
		}

		/**
		 * Representation of a single event listener.
		 *
		 * @param {Function} fn The listener function.
		 * @param {*} context The context to invoke the listener with.
		 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
		 * @constructor
		 * @private
		 */
		function EE(fn, context, once) {
		  this.fn = fn;
		  this.context = context;
		  this.once = once || false;
		}

		/**
		 * Add a listener for a given event.
		 *
		 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
		 * @param {(String|Symbol)} event The event name.
		 * @param {Function} fn The listener function.
		 * @param {*} context The context to invoke the listener with.
		 * @param {Boolean} once Specify if the listener is a one-time listener.
		 * @returns {EventEmitter}
		 * @private
		 */
		function addListener(emitter, event, fn, context, once) {
		  if (typeof fn !== 'function') {
		    throw new TypeError('The listener must be a function');
		  }
		  var listener = new EE(fn, context || emitter, once),
		    evt = prefix ? prefix + event : event;
		  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);else emitter._events[evt] = [emitter._events[evt], listener];
		  return emitter;
		}

		/**
		 * Clear event by name.
		 *
		 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
		 * @param {(String|Symbol)} evt The Event name.
		 * @private
		 */
		function clearEvent(emitter, evt) {
		  if (--emitter._eventsCount === 0) emitter._events = new Events();else delete emitter._events[evt];
		}

		/**
		 * Minimal `EventEmitter` interface that is molded against the Node.js
		 * `EventEmitter` interface.
		 *
		 * @constructor
		 * @public
		 */
		function EventEmitter() {
		  this._events = new Events();
		  this._eventsCount = 0;
		}

		/**
		 * Return an array listing the events for which the emitter has registered
		 * listeners.
		 *
		 * @returns {Array}
		 * @public
		 */
		EventEmitter.prototype.eventNames = function eventNames() {
		  var names = [],
		    events,
		    name;
		  if (this._eventsCount === 0) return names;
		  for (name in events = this._events) {
		    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
		  }
		  if (Object.getOwnPropertySymbols) {
		    return names.concat(Object.getOwnPropertySymbols(events));
		  }
		  return names;
		};

		/**
		 * Return the listeners registered for a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @returns {Array} The registered listeners.
		 * @public
		 */
		EventEmitter.prototype.listeners = function listeners(event) {
		  var evt = prefix ? prefix + event : event,
		    handlers = this._events[evt];
		  if (!handlers) return [];
		  if (handlers.fn) return [handlers.fn];
		  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
		    ee[i] = handlers[i].fn;
		  }
		  return ee;
		};

		/**
		 * Return the number of listeners listening to a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @returns {Number} The number of listeners.
		 * @public
		 */
		EventEmitter.prototype.listenerCount = function listenerCount(event) {
		  var evt = prefix ? prefix + event : event,
		    listeners = this._events[evt];
		  if (!listeners) return 0;
		  if (listeners.fn) return 1;
		  return listeners.length;
		};

		/**
		 * Calls each of the listeners registered for a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @returns {Boolean} `true` if the event had listeners, else `false`.
		 * @public
		 */
		EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
		  var evt = prefix ? prefix + event : event;
		  if (!this._events[evt]) return false;
		  var listeners = this._events[evt],
		    len = arguments.length,
		    args,
		    i;
		  if (listeners.fn) {
		    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);
		    switch (len) {
		      case 1:
		        return listeners.fn.call(listeners.context), true;
		      case 2:
		        return listeners.fn.call(listeners.context, a1), true;
		      case 3:
		        return listeners.fn.call(listeners.context, a1, a2), true;
		      case 4:
		        return listeners.fn.call(listeners.context, a1, a2, a3), true;
		      case 5:
		        return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
		      case 6:
		        return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
		    }
		    for (i = 1, args = new Array(len - 1); i < len; i++) {
		      args[i - 1] = arguments[i];
		    }
		    listeners.fn.apply(listeners.context, args);
		  } else {
		    var length = listeners.length,
		      j;
		    for (i = 0; i < length; i++) {
		      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);
		      switch (len) {
		        case 1:
		          listeners[i].fn.call(listeners[i].context);
		          break;
		        case 2:
		          listeners[i].fn.call(listeners[i].context, a1);
		          break;
		        case 3:
		          listeners[i].fn.call(listeners[i].context, a1, a2);
		          break;
		        case 4:
		          listeners[i].fn.call(listeners[i].context, a1, a2, a3);
		          break;
		        default:
		          if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
		            args[j - 1] = arguments[j];
		          }
		          listeners[i].fn.apply(listeners[i].context, args);
		      }
		    }
		  }
		  return true;
		};

		/**
		 * Add a listener for a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @param {Function} fn The listener function.
		 * @param {*} [context=this] The context to invoke the listener with.
		 * @returns {EventEmitter} `this`.
		 * @public
		 */
		EventEmitter.prototype.on = function on(event, fn, context) {
		  return addListener(this, event, fn, context, false);
		};

		/**
		 * Add a one-time listener for a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @param {Function} fn The listener function.
		 * @param {*} [context=this] The context to invoke the listener with.
		 * @returns {EventEmitter} `this`.
		 * @public
		 */
		EventEmitter.prototype.once = function once(event, fn, context) {
		  return addListener(this, event, fn, context, true);
		};

		/**
		 * Remove the listeners of a given event.
		 *
		 * @param {(String|Symbol)} event The event name.
		 * @param {Function} fn Only remove the listeners that match this function.
		 * @param {*} context Only remove the listeners that have this context.
		 * @param {Boolean} once Only remove one-time listeners.
		 * @returns {EventEmitter} `this`.
		 * @public
		 */
		EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
		  var evt = prefix ? prefix + event : event;
		  if (!this._events[evt]) return this;
		  if (!fn) {
		    clearEvent(this, evt);
		    return this;
		  }
		  var listeners = this._events[evt];
		  if (listeners.fn) {
		    if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
		      clearEvent(this, evt);
		    }
		  } else {
		    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
		      if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
		        events.push(listeners[i]);
		      }
		    }

		    //
		    // Reset the array, or remove it completely if we have no more listeners.
		    //
		    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else clearEvent(this, evt);
		  }
		  return this;
		};

		/**
		 * Remove all listeners, or those of the specified event.
		 *
		 * @param {(String|Symbol)} [event] The event name.
		 * @returns {EventEmitter} `this`.
		 * @public
		 */
		EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
		  var evt;
		  if (event) {
		    evt = prefix ? prefix + event : event;
		    if (this._events[evt]) clearEvent(this, evt);
		  } else {
		    this._events = new Events();
		    this._eventsCount = 0;
		  }
		  return this;
		};

		//
		// Alias methods names because people roll like that.
		//
		EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
		EventEmitter.prototype.addListener = EventEmitter.prototype.on;

		//
		// Expose the prefix.
		//
		EventEmitter.prefixed = prefix;

		//
		// Allow `EventEmitter` to be imported as module namespace.
		//
		EventEmitter.EventEmitter = EventEmitter;

		//
		// Expose the module.
		//
		{
		  module.exports = EventEmitter;
		}
} (eventemitter3));
	return eventemitter3.exports;
}

var dist$5 = {};

var xmlHttpRequest = {};

var progressEvent = {};

var hasRequiredProgressEvent;

function requireProgressEvent () {
	if (hasRequiredProgressEvent) return progressEvent;
	hasRequiredProgressEvent = 1;

	Object.defineProperty(progressEvent, "__esModule", {
	  value: true
	});
	var ProgressEvent = /** @class */function () {
	  function ProgressEvent(type) {
	    this.type = type;
	    this.bubbles = false;
	    this.cancelable = false;
	    this.loaded = 0;
	    this.lengthComputable = false;
	    this.total = 0;
	  }
	  return ProgressEvent;
	}();
	progressEvent.ProgressEvent = ProgressEvent;
	return progressEvent;
}

var errors$2 = {};

var hasRequiredErrors$2;

function requireErrors$2 () {
	if (hasRequiredErrors$2) return errors$2;
	hasRequiredErrors$2 = 1;

	var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {
	  var extendStatics = Object.setPrototypeOf || {
	    __proto__: []
	  } instanceof Array && function (d, b) {
	    d.__proto__ = b;
	  } || function (d, b) {
	    for (var p in b) {
	      if (b.hasOwnProperty(p)) d[p] = b[p];
	    }
	  };
	  return function (d, b) {
	    extendStatics(d, b);
	    function __() {
	      this.constructor = d;
	    }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	}();
	Object.defineProperty(errors$2, "__esModule", {
	  value: true
	});
	var SecurityError = /** @class */function (_super) {
	  __extends(SecurityError, _super);
	  function SecurityError() {
	    return _super !== null && _super.apply(this, arguments) || this;
	  }
	  return SecurityError;
	}(Error);
	errors$2.SecurityError = SecurityError;
	var InvalidStateError = /** @class */function (_super) {
	  __extends(InvalidStateError, _super);
	  function InvalidStateError() {
	    return _super !== null && _super.apply(this, arguments) || this;
	  }
	  return InvalidStateError;
	}(Error);
	errors$2.InvalidStateError = InvalidStateError;
	var NetworkError = /** @class */function (_super) {
	  __extends(NetworkError, _super);
	  function NetworkError() {
	    return _super !== null && _super.apply(this, arguments) || this;
	  }
	  return NetworkError;
	}(Error);
	errors$2.NetworkError = NetworkError;
	var SyntaxError = /** @class */function (_super) {
	  __extends(SyntaxError, _super);
	  function SyntaxError() {
	    return _super !== null && _super.apply(this, arguments) || this;
	  }
	  return SyntaxError;
	}(Error);
	errors$2.SyntaxError = SyntaxError;
	return errors$2;
}

var xmlHttpRequestEventTarget = {};

var hasRequiredXmlHttpRequestEventTarget;

function requireXmlHttpRequestEventTarget () {
	if (hasRequiredXmlHttpRequestEventTarget) return xmlHttpRequestEventTarget;
	hasRequiredXmlHttpRequestEventTarget = 1;

	Object.defineProperty(xmlHttpRequestEventTarget, "__esModule", {
	  value: true
	});
	var XMLHttpRequestEventTarget = /** @class */function () {
	  function XMLHttpRequestEventTarget() {
	    this.listeners = {};
	  }
	  XMLHttpRequestEventTarget.prototype.addEventListener = function (eventType, listener) {
	    eventType = eventType.toLowerCase();
	    this.listeners[eventType] = this.listeners[eventType] || [];
	    this.listeners[eventType].push(listener.handleEvent || listener);
	  };
	  XMLHttpRequestEventTarget.prototype.removeEventListener = function (eventType, listener) {
	    eventType = eventType.toLowerCase();
	    if (!this.listeners[eventType]) {
	      return;
	    }
	    var index = this.listeners[eventType].indexOf(listener.handleEvent || listener);
	    if (index < 0) {
	      return;
	    }
	    this.listeners[eventType].splice(index, 1);
	  };
	  XMLHttpRequestEventTarget.prototype.dispatchEvent = function (event) {
	    var eventType = event.type.toLowerCase();
	    event.target = this; // TODO: set event.currentTarget?
	    if (this.listeners[eventType]) {
	      for (var _i = 0, _a = this.listeners[eventType]; _i < _a.length; _i++) {
	        var listener_1 = _a[_i];
	        listener_1.call(this, event);
	      }
	    }
	    var listener = this["on" + eventType];
	    if (listener) {
	      listener.call(this, event);
	    }
	    return true;
	  };
	  return XMLHttpRequestEventTarget;
	}();
	xmlHttpRequestEventTarget.XMLHttpRequestEventTarget = XMLHttpRequestEventTarget;
	return xmlHttpRequestEventTarget;
}

var xmlHttpRequestUpload = {};

var hasRequiredXmlHttpRequestUpload;

function requireXmlHttpRequestUpload () {
	if (hasRequiredXmlHttpRequestUpload) return xmlHttpRequestUpload;
	hasRequiredXmlHttpRequestUpload = 1;

	var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {
	  var extendStatics = Object.setPrototypeOf || {
	    __proto__: []
	  } instanceof Array && function (d, b) {
	    d.__proto__ = b;
	  } || function (d, b) {
	    for (var p in b) {
	      if (b.hasOwnProperty(p)) d[p] = b[p];
	    }
	  };
	  return function (d, b) {
	    extendStatics(d, b);
	    function __() {
	      this.constructor = d;
	    }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	}();
	Object.defineProperty(xmlHttpRequestUpload, "__esModule", {
	  value: true
	});
	var xml_http_request_event_target_1 = requireXmlHttpRequestEventTarget();
	var XMLHttpRequestUpload = /** @class */function (_super) {
	  __extends(XMLHttpRequestUpload, _super);
	  function XMLHttpRequestUpload() {
	    var _this = _super.call(this) || this;
	    _this._contentType = null;
	    _this._body = null;
	    _this._reset();
	    return _this;
	  }
	  XMLHttpRequestUpload.prototype._reset = function () {
	    this._contentType = null;
	    this._body = null;
	  };
	  XMLHttpRequestUpload.prototype._setData = function (data) {
	    if (data == null) {
	      return;
	    }
	    if (typeof data === 'string') {
	      if (data.length !== 0) {
	        this._contentType = 'text/plain;charset=UTF-8';
	      }
	      this._body = new Buffer(data, 'utf-8');
	    } else if (Buffer.isBuffer(data)) {
	      this._body = data;
	    } else if (data instanceof ArrayBuffer) {
	      var body = new Buffer(data.byteLength);
	      var view = new Uint8Array(data);
	      for (var i = 0; i < data.byteLength; i++) {
	        body[i] = view[i];
	      }
	      this._body = body;
	    } else if (data.buffer && data.buffer instanceof ArrayBuffer) {
	      var body = new Buffer(data.byteLength);
	      var offset = data.byteOffset;
	      var view = new Uint8Array(data.buffer);
	      for (var i = 0; i < data.byteLength; i++) {
	        body[i] = view[i + offset];
	      }
	      this._body = body;
	    } else {
	      throw new Error("Unsupported send() data " + data);
	    }
	  };
	  XMLHttpRequestUpload.prototype._finalizeHeaders = function (headers, loweredHeaders) {
	    if (this._contentType && !loweredHeaders['content-type']) {
	      headers['Content-Type'] = this._contentType;
	    }
	    if (this._body) {
	      headers['Content-Length'] = this._body.length.toString();
	    }
	  };
	  XMLHttpRequestUpload.prototype._startUpload = function (request) {
	    if (this._body) {
	      request.write(this._body);
	    }
	    request.end();
	  };
	  return XMLHttpRequestUpload;
	}(xml_http_request_event_target_1.XMLHttpRequestEventTarget);
	xmlHttpRequestUpload.XMLHttpRequestUpload = XMLHttpRequestUpload;
	return xmlHttpRequestUpload;
}

var cookiejar = {};

/* jshint node: true */

var hasRequiredCookiejar;

function requireCookiejar () {
	if (hasRequiredCookiejar) return cookiejar;
	hasRequiredCookiejar = 1;
	(function () {

	  function CookieAccessInfo(domain, path, secure, script) {
	    if (this instanceof CookieAccessInfo) {
	      this.domain = domain || undefined;
	      this.path = path || "/";
	      this.secure = !!secure;
	      this.script = !!script;
	      return this;
	    }
	    return new CookieAccessInfo(domain, path, secure, script);
	  }
	  CookieAccessInfo.All = Object.freeze(Object.create(null));
	  cookiejar.CookieAccessInfo = CookieAccessInfo;
	  function Cookie(cookiestr, request_domain, request_path) {
	    if (cookiestr instanceof Cookie) {
	      return cookiestr;
	    }
	    if (this instanceof Cookie) {
	      this.name = null;
	      this.value = null;
	      this.expiration_date = Infinity;
	      this.path = String(request_path || "/");
	      this.explicit_path = false;
	      this.domain = request_domain || null;
	      this.explicit_domain = false;
	      this.secure = false; //how to define default?
	      this.noscript = false; //httponly
	      if (cookiestr) {
	        this.parse(cookiestr, request_domain, request_path);
	      }
	      return this;
	    }
	    return new Cookie(cookiestr, request_domain, request_path);
	  }
	  cookiejar.Cookie = Cookie;
	  Cookie.prototype.toString = function toString() {
	    var str = [this.name + "=" + this.value];
	    if (this.expiration_date !== Infinity) {
	      str.push("expires=" + new Date(this.expiration_date).toGMTString());
	    }
	    if (this.domain) {
	      str.push("domain=" + this.domain);
	    }
	    if (this.path) {
	      str.push("path=" + this.path);
	    }
	    if (this.secure) {
	      str.push("secure");
	    }
	    if (this.noscript) {
	      str.push("httponly");
	    }
	    return str.join("; ");
	  };
	  Cookie.prototype.toValueString = function toValueString() {
	    return this.name + "=" + this.value;
	  };
	  var cookie_str_splitter = /[:](?=\s*[a-zA-Z0-9_\-]+\s*[=])/g;
	  Cookie.prototype.parse = function parse(str, request_domain, request_path) {
	    if (this instanceof Cookie) {
	      var parts = str.split(";").filter(function (value) {
	        return !!value;
	      });
	      var i;
	      var pair = parts[0].match(/([^=]+)=([\s\S]*)/);
	      if (!pair) {
	        console.warn("Invalid cookie header encountered. Header: '" + str + "'");
	        return;
	      }
	      var key = pair[1];
	      var value = pair[2];
	      if (typeof key !== 'string' || key.length === 0 || typeof value !== 'string') {
	        console.warn("Unable to extract values from cookie header. Cookie: '" + str + "'");
	        return;
	      }
	      this.name = key;
	      this.value = value;
	      for (i = 1; i < parts.length; i += 1) {
	        pair = parts[i].match(/([^=]+)(?:=([\s\S]*))?/);
	        key = pair[1].trim().toLowerCase();
	        value = pair[2];
	        switch (key) {
	          case "httponly":
	            this.noscript = true;
	            break;
	          case "expires":
	            this.expiration_date = value ? Number(Date.parse(value)) : Infinity;
	            break;
	          case "path":
	            this.path = value ? value.trim() : "";
	            this.explicit_path = true;
	            break;
	          case "domain":
	            this.domain = value ? value.trim() : "";
	            this.explicit_domain = !!this.domain;
	            break;
	          case "secure":
	            this.secure = true;
	            break;
	        }
	      }
	      if (!this.explicit_path) {
	        this.path = request_path || "/";
	      }
	      if (!this.explicit_domain) {
	        this.domain = request_domain;
	      }
	      return this;
	    }
	    return new Cookie().parse(str, request_domain, request_path);
	  };
	  Cookie.prototype.matches = function matches(access_info) {
	    if (access_info === CookieAccessInfo.All) {
	      return true;
	    }
	    if (this.noscript && access_info.script || this.secure && !access_info.secure || !this.collidesWith(access_info)) {
	      return false;
	    }
	    return true;
	  };
	  Cookie.prototype.collidesWith = function collidesWith(access_info) {
	    if (this.path && !access_info.path || this.domain && !access_info.domain) {
	      return false;
	    }
	    if (this.path && access_info.path.indexOf(this.path) !== 0) {
	      return false;
	    }
	    if (this.explicit_path && access_info.path.indexOf(this.path) !== 0) {
	      return false;
	    }
	    var access_domain = access_info.domain && access_info.domain.replace(/^[\.]/, '');
	    var cookie_domain = this.domain && this.domain.replace(/^[\.]/, '');
	    if (cookie_domain === access_domain) {
	      return true;
	    }
	    if (cookie_domain) {
	      if (!this.explicit_domain) {
	        return false; // we already checked if the domains were exactly the same
	      }

	      var wildcard = access_domain.indexOf(cookie_domain);
	      if (wildcard === -1 || wildcard !== access_domain.length - cookie_domain.length) {
	        return false;
	      }
	      return true;
	    }
	    return true;
	  };
	  function CookieJar() {
	    var cookies, cookies_list, collidable_cookie;
	    if (this instanceof CookieJar) {
	      cookies = Object.create(null); //name: [Cookie]

	      this.setCookie = function setCookie(cookie, request_domain, request_path) {
	        var remove, i;
	        cookie = new Cookie(cookie, request_domain, request_path);
	        //Delete the cookie if the set is past the current time
	        remove = cookie.expiration_date <= Date.now();
	        if (cookies[cookie.name] !== undefined) {
	          cookies_list = cookies[cookie.name];
	          for (i = 0; i < cookies_list.length; i += 1) {
	            collidable_cookie = cookies_list[i];
	            if (collidable_cookie.collidesWith(cookie)) {
	              if (remove) {
	                cookies_list.splice(i, 1);
	                if (cookies_list.length === 0) {
	                  delete cookies[cookie.name];
	                }
	                return false;
	              }
	              cookies_list[i] = cookie;
	              return cookie;
	            }
	          }
	          if (remove) {
	            return false;
	          }
	          cookies_list.push(cookie);
	          return cookie;
	        }
	        if (remove) {
	          return false;
	        }
	        cookies[cookie.name] = [cookie];
	        return cookies[cookie.name];
	      };
	      //returns a cookie
	      this.getCookie = function getCookie(cookie_name, access_info) {
	        var cookie, i;
	        cookies_list = cookies[cookie_name];
	        if (!cookies_list) {
	          return;
	        }
	        for (i = 0; i < cookies_list.length; i += 1) {
	          cookie = cookies_list[i];
	          if (cookie.expiration_date <= Date.now()) {
	            if (cookies_list.length === 0) {
	              delete cookies[cookie.name];
	            }
	            continue;
	          }
	          if (cookie.matches(access_info)) {
	            return cookie;
	          }
	        }
	      };
	      //returns a list of cookies
	      this.getCookies = function getCookies(access_info) {
	        var matches = [],
	          cookie_name,
	          cookie;
	        for (cookie_name in cookies) {
	          cookie = this.getCookie(cookie_name, access_info);
	          if (cookie) {
	            matches.push(cookie);
	          }
	        }
	        matches.toString = function toString() {
	          return matches.join(":");
	        };
	        matches.toValueString = function toValueString() {
	          return matches.map(function (c) {
	            return c.toValueString();
	          }).join('; ');
	        };
	        return matches;
	      };
	      return this;
	    }
	    return new CookieJar();
	  }
	  cookiejar.CookieJar = CookieJar;

	  //returns list of cookies that were set correctly. Cookies that are expired and removed are not returned.
	  CookieJar.prototype.setCookies = function setCookies(cookies, request_domain, request_path) {
	    cookies = Array.isArray(cookies) ? cookies : cookies.split(cookie_str_splitter);
	    var successful = [],
	      i,
	      cookie;
	    cookies = cookies.map(function (item) {
	      return new Cookie(item, request_domain, request_path);
	    });
	    for (i = 0; i < cookies.length; i += 1) {
	      cookie = cookies[i];
	      if (this.setCookie(cookie, request_domain, request_path)) {
	        successful.push(cookie);
	      }
	    }
	    return successful;
	  };
	})();
	return cookiejar;
}

var hasRequiredXmlHttpRequest;

function requireXmlHttpRequest () {
	if (hasRequiredXmlHttpRequest) return xmlHttpRequest;
	hasRequiredXmlHttpRequest = 1;

	var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {
	  var extendStatics = Object.setPrototypeOf || {
	    __proto__: []
	  } instanceof Array && function (d, b) {
	    d.__proto__ = b;
	  } || function (d, b) {
	    for (var p in b) {
	      if (b.hasOwnProperty(p)) d[p] = b[p];
	    }
	  };
	  return function (d, b) {
	    extendStatics(d, b);
	    function __() {
	      this.constructor = d;
	    }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	}();
	var __assign = commonjsGlobal && commonjsGlobal.__assign || Object.assign || function (t) {
	  for (var s, i = 1, n = arguments.length; i < n; i++) {
	    s = arguments[i];
	    for (var p in s) {
	      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	    }
	  }
	  return t;
	};
	Object.defineProperty(xmlHttpRequest, "__esModule", {
	  value: true
	});
	var http = require$$9__default["default"];
	var https = require$$8__default["default"];
	var os = require$$2__default$1["default"];
	var url = require$$13__default["default"];
	var progress_event_1 = requireProgressEvent();
	var errors_1 = requireErrors$2();
	var xml_http_request_event_target_1 = requireXmlHttpRequestEventTarget();
	var xml_http_request_upload_1 = requireXmlHttpRequestUpload();
	var Cookie = requireCookiejar();
	var XMLHttpRequest = /** @class */function (_super) {
	  __extends(XMLHttpRequest, _super);
	  function XMLHttpRequest(options) {
	    if (options === void 0) {
	      options = {};
	    }
	    var _this = _super.call(this) || this;
	    _this.UNSENT = XMLHttpRequest.UNSENT;
	    _this.OPENED = XMLHttpRequest.OPENED;
	    _this.HEADERS_RECEIVED = XMLHttpRequest.HEADERS_RECEIVED;
	    _this.LOADING = XMLHttpRequest.LOADING;
	    _this.DONE = XMLHttpRequest.DONE;
	    _this.onreadystatechange = null;
	    _this.readyState = XMLHttpRequest.UNSENT;
	    _this.response = null;
	    _this.responseText = '';
	    _this.responseType = '';
	    _this.status = 0; // TODO: UNSENT?
	    _this.statusText = '';
	    _this.timeout = 0;
	    _this.upload = new xml_http_request_upload_1.XMLHttpRequestUpload();
	    _this.responseUrl = '';
	    _this.withCredentials = false;
	    _this._method = null;
	    _this._url = null;
	    _this._sync = false;
	    _this._headers = {};
	    _this._loweredHeaders = {};
	    _this._mimeOverride = null; // TODO: is type right?
	    _this._request = null;
	    _this._response = null;
	    _this._responseParts = null;
	    _this._responseHeaders = null;
	    _this._aborting = null; // TODO: type?
	    _this._error = null; // TODO: type?
	    _this._loadedBytes = 0;
	    _this._totalBytes = 0;
	    _this._lengthComputable = false;
	    _this._restrictedMethods = {
	      CONNECT: true,
	      TRACE: true,
	      TRACK: true
	    };
	    _this._restrictedHeaders = {
	      'accept-charset': true,
	      'accept-encoding': true,
	      'access-control-request-headers': true,
	      'access-control-request-method': true,
	      connection: true,
	      'content-length': true,
	      cookie: true,
	      cookie2: true,
	      date: true,
	      dnt: true,
	      expect: true,
	      host: true,
	      'keep-alive': true,
	      origin: true,
	      referer: true,
	      te: true,
	      trailer: true,
	      'transfer-encoding': true,
	      upgrade: true,
	      'user-agent': true,
	      via: true
	    };
	    _this._privateHeaders = {
	      'set-cookie': true,
	      'set-cookie2': true
	    };
	    _this._userAgent = "Mozilla/5.0 (" + os.type() + " " + os.arch() + ") node.js/" + process.versions.node + " v8/" + process.versions.v8;
	    _this._anonymous = options.anon || false;
	    return _this;
	  }
	  XMLHttpRequest.prototype.open = function (method, url, async, user, password) {
	    if (async === void 0) {
	      async = true;
	    }
	    method = method.toUpperCase();
	    if (this._restrictedMethods[method]) {
	      throw new XMLHttpRequest.SecurityError("HTTP method " + method + " is not allowed in XHR");
	    }
	    var xhrUrl = this._parseUrl(url, user, password);
	    if (this.readyState === XMLHttpRequest.HEADERS_RECEIVED || this.readyState === XMLHttpRequest.LOADING) ;
	    this._method = method;
	    this._url = xhrUrl;
	    this._sync = !async;
	    this._headers = {};
	    this._loweredHeaders = {};
	    this._mimeOverride = null;
	    this._setReadyState(XMLHttpRequest.OPENED);
	    this._request = null;
	    this._response = null;
	    this.status = 0;
	    this.statusText = '';
	    this._responseParts = [];
	    this._responseHeaders = null;
	    this._loadedBytes = 0;
	    this._totalBytes = 0;
	    this._lengthComputable = false;
	  };
	  XMLHttpRequest.prototype.setRequestHeader = function (name, value) {
	    if (this.readyState !== XMLHttpRequest.OPENED) {
	      throw new XMLHttpRequest.InvalidStateError('XHR readyState must be OPENED');
	    }
	    var loweredName = name.toLowerCase();
	    if (this._restrictedHeaders[loweredName] || /^sec-/.test(loweredName) || /^proxy-/.test(loweredName)) {
	      console.warn("Refused to set unsafe header \"" + name + "\"");
	      return;
	    }
	    value = value.toString();
	    if (this._loweredHeaders[loweredName] != null) {
	      name = this._loweredHeaders[loweredName];
	      this._headers[name] = this._headers[name] + ", " + value;
	    } else {
	      this._loweredHeaders[loweredName] = name;
	      this._headers[name] = value;
	    }
	  };
	  XMLHttpRequest.prototype.send = function (data) {
	    if (this.readyState !== XMLHttpRequest.OPENED) {
	      throw new XMLHttpRequest.InvalidStateError('XHR readyState must be OPENED');
	    }
	    if (this._request) {
	      throw new XMLHttpRequest.InvalidStateError('send() already called');
	    }
	    switch (this._url.protocol) {
	      case 'file:':
	        return this._sendFile(data);
	      case 'http:':
	      case 'https:':
	        return this._sendHttp(data);
	      default:
	        throw new XMLHttpRequest.NetworkError("Unsupported protocol " + this._url.protocol);
	    }
	  };
	  XMLHttpRequest.prototype.abort = function () {
	    if (this._request == null) {
	      return;
	    }
	    this._request.abort();
	    this._setError();
	    this._dispatchProgress('abort');
	    this._dispatchProgress('loadend');
	  };
	  XMLHttpRequest.prototype.getResponseHeader = function (name) {
	    if (this._responseHeaders == null || name == null) {
	      return null;
	    }
	    var loweredName = name.toLowerCase();
	    return this._responseHeaders.hasOwnProperty(loweredName) ? this._responseHeaders[name.toLowerCase()] : null;
	  };
	  XMLHttpRequest.prototype.getAllResponseHeaders = function () {
	    var _this = this;
	    if (this._responseHeaders == null) {
	      return '';
	    }
	    return Object.keys(this._responseHeaders).map(function (key) {
	      return key + ": " + _this._responseHeaders[key];
	    }).join('\r\n');
	  };
	  XMLHttpRequest.prototype.overrideMimeType = function (mimeType) {
	    if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {
	      throw new XMLHttpRequest.InvalidStateError('overrideMimeType() not allowed in LOADING or DONE');
	    }
	    this._mimeOverride = mimeType.toLowerCase();
	  };
	  XMLHttpRequest.prototype.nodejsSet = function (options) {
	    this.nodejsHttpAgent = options.httpAgent || this.nodejsHttpAgent;
	    this.nodejsHttpsAgent = options.httpsAgent || this.nodejsHttpsAgent;
	    if (options.hasOwnProperty('baseUrl')) {
	      if (options.baseUrl != null) {
	        var parsedUrl = url.parse(options.baseUrl, false, true);
	        if (!parsedUrl.protocol) {
	          throw new XMLHttpRequest.SyntaxError("baseUrl must be an absolute URL");
	        }
	      }
	      this.nodejsBaseUrl = options.baseUrl;
	    }
	  };
	  XMLHttpRequest.nodejsSet = function (options) {
	    XMLHttpRequest.prototype.nodejsSet(options);
	  };
	  XMLHttpRequest.prototype._setReadyState = function (readyState) {
	    this.readyState = readyState;
	    this.dispatchEvent(new progress_event_1.ProgressEvent('readystatechange'));
	  };
	  XMLHttpRequest.prototype._sendFile = function (data) {
	    // TODO
	    throw new Error('Protocol file: not implemented');
	  };
	  XMLHttpRequest.prototype._sendHttp = function (data) {
	    if (this._sync) {
	      throw new Error('Synchronous XHR processing not implemented');
	    }
	    if (data && (this._method === 'GET' || this._method === 'HEAD')) {
	      console.warn("Discarding entity body for " + this._method + " requests");
	      data = null;
	    } else {
	      data = data || '';
	    }
	    this.upload._setData(data);
	    this._finalizeHeaders();
	    this._sendHxxpRequest();
	  };
	  XMLHttpRequest.prototype._sendHxxpRequest = function () {
	    var _this = this;
	    if (this.withCredentials) {
	      var cookie = XMLHttpRequest.cookieJar.getCookies(Cookie.CookieAccessInfo(this._url.hostname, this._url.pathname, this._url.protocol === 'https:')).toValueString();
	      this._headers.cookie = this._headers.cookie2 = cookie;
	    }
	    var _a = this._url.protocol === 'http:' ? [http, this.nodejsHttpAgent] : [https, this.nodejsHttpsAgent],
	      hxxp = _a[0],
	      agent = _a[1];
	    var requestMethod = hxxp.request.bind(hxxp);
	    var request = requestMethod({
	      hostname: this._url.hostname,
	      port: +this._url.port,
	      path: this._url.path,
	      auth: this._url.auth,
	      method: this._method,
	      headers: this._headers,
	      agent: agent
	    });
	    this._request = request;
	    if (this.timeout) {
	      request.setTimeout(this.timeout, function () {
	        return _this._onHttpTimeout(request);
	      });
	    }
	    request.on('response', function (response) {
	      return _this._onHttpResponse(request, response);
	    });
	    request.on('error', function (error) {
	      return _this._onHttpRequestError(request, error);
	    });
	    this.upload._startUpload(request);
	    if (this._request === request) {
	      this._dispatchProgress('loadstart');
	    }
	  };
	  XMLHttpRequest.prototype._finalizeHeaders = function () {
	    this._headers = __assign({}, this._headers, {
	      Connection: 'keep-alive',
	      Host: this._url.host,
	      'User-Agent': this._userAgent
	    }, this._anonymous ? {
	      Referer: 'about:blank'
	    } : {});
	    this.upload._finalizeHeaders(this._headers, this._loweredHeaders);
	  };
	  XMLHttpRequest.prototype._onHttpResponse = function (request, response) {
	    var _this = this;
	    if (this._request !== request) {
	      return;
	    }
	    if (this.withCredentials && (response.headers['set-cookie'] || response.headers['set-cookie2'])) {
	      XMLHttpRequest.cookieJar.setCookies(response.headers['set-cookie'] || response.headers['set-cookie2']);
	    }
	    if ([301, 302, 303, 307, 308].indexOf(response.statusCode) >= 0) {
	      this._url = this._parseUrl(response.headers.location);
	      this._method = 'GET';
	      if (this._loweredHeaders['content-type']) {
	        delete this._headers[this._loweredHeaders['content-type']];
	        delete this._loweredHeaders['content-type'];
	      }
	      if (this._headers['Content-Type'] != null) {
	        delete this._headers['Content-Type'];
	      }
	      delete this._headers['Content-Length'];
	      this.upload._reset();
	      this._finalizeHeaders();
	      this._sendHxxpRequest();
	      return;
	    }
	    this._response = response;
	    this._response.on('data', function (data) {
	      return _this._onHttpResponseData(response, data);
	    });
	    this._response.on('end', function () {
	      return _this._onHttpResponseEnd(response);
	    });
	    this._response.on('close', function () {
	      return _this._onHttpResponseClose(response);
	    });
	    this.responseUrl = this._url.href.split('#')[0];
	    this.status = response.statusCode;
	    this.statusText = http.STATUS_CODES[this.status];
	    this._parseResponseHeaders(response);
	    var lengthString = this._responseHeaders['content-length'] || '';
	    this._totalBytes = +lengthString;
	    this._lengthComputable = !!lengthString;
	    this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);
	  };
	  XMLHttpRequest.prototype._onHttpResponseData = function (response, data) {
	    if (this._response !== response) {
	      return;
	    }
	    this._responseParts.push(new Buffer(data));
	    this._loadedBytes += data.length;
	    if (this.readyState !== XMLHttpRequest.LOADING) {
	      this._setReadyState(XMLHttpRequest.LOADING);
	    }
	    this._dispatchProgress('progress');
	  };
	  XMLHttpRequest.prototype._onHttpResponseEnd = function (response) {
	    if (this._response !== response) {
	      return;
	    }
	    this._parseResponse();
	    this._request = null;
	    this._response = null;
	    this._setReadyState(XMLHttpRequest.DONE);
	    this._dispatchProgress('load');
	    this._dispatchProgress('loadend');
	  };
	  XMLHttpRequest.prototype._onHttpResponseClose = function (response) {
	    if (this._response !== response) {
	      return;
	    }
	    var request = this._request;
	    this._setError();
	    request.abort();
	    this._setReadyState(XMLHttpRequest.DONE);
	    this._dispatchProgress('error');
	    this._dispatchProgress('loadend');
	  };
	  XMLHttpRequest.prototype._onHttpTimeout = function (request) {
	    if (this._request !== request) {
	      return;
	    }
	    this._setError();
	    request.abort();
	    this._setReadyState(XMLHttpRequest.DONE);
	    this._dispatchProgress('timeout');
	    this._dispatchProgress('loadend');
	  };
	  XMLHttpRequest.prototype._onHttpRequestError = function (request, error) {
	    if (this._request !== request) {
	      return;
	    }
	    this._setError();
	    request.abort();
	    this._setReadyState(XMLHttpRequest.DONE);
	    this._dispatchProgress('error');
	    this._dispatchProgress('loadend');
	  };
	  XMLHttpRequest.prototype._dispatchProgress = function (eventType) {
	    var event = new XMLHttpRequest.ProgressEvent(eventType);
	    event.lengthComputable = this._lengthComputable;
	    event.loaded = this._loadedBytes;
	    event.total = this._totalBytes;
	    this.dispatchEvent(event);
	  };
	  XMLHttpRequest.prototype._setError = function () {
	    this._request = null;
	    this._response = null;
	    this._responseHeaders = null;
	    this._responseParts = null;
	  };
	  XMLHttpRequest.prototype._parseUrl = function (urlString, user, password) {
	    var absoluteUrl = this.nodejsBaseUrl == null ? urlString : url.resolve(this.nodejsBaseUrl, urlString);
	    var xhrUrl = url.parse(absoluteUrl, false, true);
	    xhrUrl.hash = null;
	    var _a = (xhrUrl.auth || '').split(':'),
	      xhrUser = _a[0],
	      xhrPassword = _a[1];
	    if (xhrUser || xhrPassword || user || password) {
	      xhrUrl.auth = (user || xhrUser || '') + ":" + (password || xhrPassword || '');
	    }
	    return xhrUrl;
	  };
	  XMLHttpRequest.prototype._parseResponseHeaders = function (response) {
	    this._responseHeaders = {};
	    for (var name_1 in response.headers) {
	      var loweredName = name_1.toLowerCase();
	      if (this._privateHeaders[loweredName]) {
	        continue;
	      }
	      this._responseHeaders[loweredName] = response.headers[name_1];
	    }
	    if (this._mimeOverride != null) {
	      this._responseHeaders['content-type'] = this._mimeOverride;
	    }
	  };
	  XMLHttpRequest.prototype._parseResponse = function () {
	    var buffer = Buffer.concat(this._responseParts);
	    this._responseParts = null;
	    switch (this.responseType) {
	      case 'json':
	        this.responseText = null;
	        try {
	          this.response = JSON.parse(buffer.toString('utf-8'));
	        } catch (_a) {
	          this.response = null;
	        }
	        return;
	      case 'buffer':
	        this.responseText = null;
	        this.response = buffer;
	        return;
	      case 'arraybuffer':
	        this.responseText = null;
	        var arrayBuffer = new ArrayBuffer(buffer.length);
	        var view = new Uint8Array(arrayBuffer);
	        for (var i = 0; i < buffer.length; i++) {
	          view[i] = buffer[i];
	        }
	        this.response = arrayBuffer;
	        return;
	      case 'text':
	      default:
	        try {
	          this.responseText = buffer.toString(this._parseResponseEncoding());
	        } catch (_b) {
	          this.responseText = buffer.toString('binary');
	        }
	        this.response = this.responseText;
	    }
	  };
	  XMLHttpRequest.prototype._parseResponseEncoding = function () {
	    return /;\s*charset=(.*)$/.exec(this._responseHeaders['content-type'] || '')[1] || 'utf-8';
	  };
	  XMLHttpRequest.ProgressEvent = progress_event_1.ProgressEvent;
	  XMLHttpRequest.InvalidStateError = errors_1.InvalidStateError;
	  XMLHttpRequest.NetworkError = errors_1.NetworkError;
	  XMLHttpRequest.SecurityError = errors_1.SecurityError;
	  XMLHttpRequest.SyntaxError = errors_1.SyntaxError;
	  XMLHttpRequest.XMLHttpRequestUpload = xml_http_request_upload_1.XMLHttpRequestUpload;
	  XMLHttpRequest.UNSENT = 0;
	  XMLHttpRequest.OPENED = 1;
	  XMLHttpRequest.HEADERS_RECEIVED = 2;
	  XMLHttpRequest.LOADING = 3;
	  XMLHttpRequest.DONE = 4;
	  XMLHttpRequest.cookieJar = Cookie.CookieJar();
	  return XMLHttpRequest;
	}(xml_http_request_event_target_1.XMLHttpRequestEventTarget);
	xmlHttpRequest.XMLHttpRequest = XMLHttpRequest;
	XMLHttpRequest.prototype.nodejsHttpAgent = http.globalAgent;
	XMLHttpRequest.prototype.nodejsHttpsAgent = https.globalAgent;
	XMLHttpRequest.prototype.nodejsBaseUrl = null;
	return xmlHttpRequest;
}

var hasRequiredDist$5;

function requireDist$5 () {
	if (hasRequiredDist$5) return dist$5;
	hasRequiredDist$5 = 1;
	(function (exports) {

		function __export(m) {
		  for (var p in m) {
		    if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		  }
		}
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		__export(requireXmlHttpRequest());
		var xml_http_request_event_target_1 = requireXmlHttpRequestEventTarget();
		exports.XMLHttpRequestEventTarget = xml_http_request_event_target_1.XMLHttpRequestEventTarget;
} (dist$5));
	return dist$5;
}

var hasRequiredCjs;

function requireCjs () {
	if (hasRequiredCjs) return cjs;
	hasRequiredCjs = 1;
	(function (exports) {

		var _classCallCheck = classCallCheck.exports;
		var _createClass = createClass.exports;
		var _inherits = inherits.exports;
		var _possibleConstructorReturn = possibleConstructorReturn.exports;
		var _getPrototypeOf = getPrototypeOf.exports;
		function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
		function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var tslib_1 = require$$7;
		var eventemitter3_1 = tslib_1.__importDefault(requireEventemitter3());
		var xhr2_cookies_1 = requireDist$5();
		var utils_1 = requireCjs$6();
		var XHR = (0, utils_1.getFromWindow)("XMLHttpRequest") || xhr2_cookies_1.XMLHttpRequest;
		var HTTPConnection = /*#__PURE__*/function (_eventemitter3_1$defa) {
		  _inherits(HTTPConnection, _eventemitter3_1$defa);
		  var _super = _createSuper(HTTPConnection);
		  function HTTPConnection(url) {
		    var _this;
		    _classCallCheck(this, HTTPConnection);
		    _this = _super.call(this);
		    _this.url = url;
		    return _this;
		  }
		  _createClass(HTTPConnection, [{
		    key: "formatError",
		    value: function formatError(payload, message) {
		      var code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
		      return {
		        error: {
		          message: message,
		          code: code
		        },
		        id: payload.id,
		        jsonrpc: payload.jsonrpc
		      };
		    }
		  }, {
		    key: "send",
		    value: function send(payload, internal) {
		      var _this2 = this;
		      return new Promise(function (resolve) {
		        if (payload.method === "eth_subscribe") {
		          var error = _this2.formatError(payload, "Subscriptions are not supported by this HTTP endpoint");
		          _this2.emit("error", error);
		          return resolve(error);
		        }
		        var xhr = new XHR();
		        var responded = false;
		        var res = function res(err, result) {
		          if (!responded) {
		            xhr.abort();
		            responded = true;
		            if (internal) {
		              internal(err, result);
		            } else {
		              var id = payload.id,
		                jsonrpc = payload.jsonrpc;
		              var response = err ? {
		                id: id,
		                jsonrpc: jsonrpc,
		                error: {
		                  message: err.message,
		                  code: err.code
		                }
		              } : {
		                id: id,
		                jsonrpc: jsonrpc,
		                result: result
		              };
		              _this2.emit("payload", response);
		              resolve(response);
		            }
		          }
		        };
		        xhr.open("POST", _this2.url, true);
		        xhr.setRequestHeader("Content-Type", "application/json");
		        xhr.timeout = 60 * 1000;
		        xhr.onerror = res;
		        xhr.ontimeout = res;
		        xhr.onreadystatechange = function () {
		          if (xhr.readyState === 4) {
		            try {
		              var response = JSON.parse(xhr.responseText);
		              res(response.error, response.result);
		            } catch (e) {
		              res(e);
		            }
		          }
		        };
		        xhr.send(JSON.stringify(payload));
		      });
		    }
		  }]);
		  return HTTPConnection;
		}(eventemitter3_1["default"]);
		exports["default"] = HTTPConnection;
} (cjs));
	return cjs;
}

var dist$4 = {};

var keccak$3 = {};

var hashUtils = {};

var hasRequiredHashUtils;

function requireHashUtils () {
	if (hasRequiredHashUtils) return hashUtils;
	hasRequiredHashUtils = 1;

	Object.defineProperty(hashUtils, "__esModule", {
	  value: true
	});
	function createHashFunction(hashConstructor) {
	  return function (msg) {
	    var hash = hashConstructor();
	    hash.update(msg);
	    return Buffer.from(hash.digest());
	  };
	}
	hashUtils.createHashFunction = createHashFunction;
	return hashUtils;
}

var keccak$2 = {exports: {}};

var readable = {exports: {}};

var stream = {exports: {}};

var hasRequiredStream;

function requireStream () {
	if (hasRequiredStream) return stream.exports;
	hasRequiredStream = 1;
	(function (module) {
		module.exports = require$$1__default$1["default"];
} (stream));
	return stream.exports;
}

var buffer_list;
var hasRequiredBuffer_list;

function requireBuffer_list () {
	if (hasRequiredBuffer_list) return buffer_list;
	hasRequiredBuffer_list = 1;

	function ownKeys(object, enumerableOnly) {
	  var keys = Object.keys(object);
	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }
	  return keys;
	}
	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};
	    if (i % 2) {
	      ownKeys(Object(source), true).forEach(function (key) {
	        _defineProperty(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }
	  return target;
	}
	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	  return obj;
	}
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}
	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}
	var _require = require$$2__default["default"],
	  Buffer = _require.Buffer;
	var _require2 = require$$0__default$1["default"],
	  inspect = _require2.inspect;
	var custom = inspect && inspect.custom || 'inspect';
	function copyBuffer(src, target, offset) {
	  Buffer.prototype.copy.call(src, target, offset);
	}
	buffer_list = /*#__PURE__*/
	function () {
	  function BufferList() {
	    _classCallCheck(this, BufferList);
	    this.head = null;
	    this.tail = null;
	    this.length = 0;
	  }
	  _createClass(BufferList, [{
	    key: "push",
	    value: function push(v) {
	      var entry = {
	        data: v,
	        next: null
	      };
	      if (this.length > 0) this.tail.next = entry;else this.head = entry;
	      this.tail = entry;
	      ++this.length;
	    }
	  }, {
	    key: "unshift",
	    value: function unshift(v) {
	      var entry = {
	        data: v,
	        next: this.head
	      };
	      if (this.length === 0) this.tail = entry;
	      this.head = entry;
	      ++this.length;
	    }
	  }, {
	    key: "shift",
	    value: function shift() {
	      if (this.length === 0) return;
	      var ret = this.head.data;
	      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	      --this.length;
	      return ret;
	    }
	  }, {
	    key: "clear",
	    value: function clear() {
	      this.head = this.tail = null;
	      this.length = 0;
	    }
	  }, {
	    key: "join",
	    value: function join(s) {
	      if (this.length === 0) return '';
	      var p = this.head;
	      var ret = '' + p.data;
	      while (p = p.next) {
	        ret += s + p.data;
	      }
	      return ret;
	    }
	  }, {
	    key: "concat",
	    value: function concat(n) {
	      if (this.length === 0) return Buffer.alloc(0);
	      var ret = Buffer.allocUnsafe(n >>> 0);
	      var p = this.head;
	      var i = 0;
	      while (p) {
	        copyBuffer(p.data, ret, i);
	        i += p.data.length;
	        p = p.next;
	      }
	      return ret;
	    } // Consumes a specified amount of bytes or characters from the buffered data.
	  }, {
	    key: "consume",
	    value: function consume(n, hasStrings) {
	      var ret;
	      if (n < this.head.data.length) {
	        // `slice` is the same for buffers and strings.
	        ret = this.head.data.slice(0, n);
	        this.head.data = this.head.data.slice(n);
	      } else if (n === this.head.data.length) {
	        // First chunk is a perfect match.
	        ret = this.shift();
	      } else {
	        // Result spans more than one buffer.
	        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
	      }
	      return ret;
	    }
	  }, {
	    key: "first",
	    value: function first() {
	      return this.head.data;
	    } // Consumes a specified amount of characters from the buffered data.
	  }, {
	    key: "_getString",
	    value: function _getString(n) {
	      var p = this.head;
	      var c = 1;
	      var ret = p.data;
	      n -= ret.length;
	      while (p = p.next) {
	        var str = p.data;
	        var nb = n > str.length ? str.length : n;
	        if (nb === str.length) ret += str;else ret += str.slice(0, n);
	        n -= nb;
	        if (n === 0) {
	          if (nb === str.length) {
	            ++c;
	            if (p.next) this.head = p.next;else this.head = this.tail = null;
	          } else {
	            this.head = p;
	            p.data = str.slice(nb);
	          }
	          break;
	        }
	        ++c;
	      }
	      this.length -= c;
	      return ret;
	    } // Consumes a specified amount of bytes from the buffered data.
	  }, {
	    key: "_getBuffer",
	    value: function _getBuffer(n) {
	      var ret = Buffer.allocUnsafe(n);
	      var p = this.head;
	      var c = 1;
	      p.data.copy(ret);
	      n -= p.data.length;
	      while (p = p.next) {
	        var buf = p.data;
	        var nb = n > buf.length ? buf.length : n;
	        buf.copy(ret, ret.length - n, 0, nb);
	        n -= nb;
	        if (n === 0) {
	          if (nb === buf.length) {
	            ++c;
	            if (p.next) this.head = p.next;else this.head = this.tail = null;
	          } else {
	            this.head = p;
	            p.data = buf.slice(nb);
	          }
	          break;
	        }
	        ++c;
	      }
	      this.length -= c;
	      return ret;
	    } // Make sure the linked list only shows the minimal necessary information.
	  }, {
	    key: custom,
	    value: function value(_, options) {
	      return inspect(this, _objectSpread({}, options, {
	        // Only inspect one level.
	        depth: 0,
	        // It should not recurse.
	        customInspect: false
	      }));
	    }
	  }]);
	  return BufferList;
	}();
	return buffer_list;
}

var destroy_1;
var hasRequiredDestroy;

function requireDestroy () {
	if (hasRequiredDestroy) return destroy_1;
	hasRequiredDestroy = 1;

	// undocumented cb() API, needed for core, not for public API
	function destroy(err, cb) {
	  var _this = this;
	  var readableDestroyed = this._readableState && this._readableState.destroyed;
	  var writableDestroyed = this._writableState && this._writableState.destroyed;
	  if (readableDestroyed || writableDestroyed) {
	    if (cb) {
	      cb(err);
	    } else if (err) {
	      if (!this._writableState) {
	        process.nextTick(emitErrorNT, this, err);
	      } else if (!this._writableState.errorEmitted) {
	        this._writableState.errorEmitted = true;
	        process.nextTick(emitErrorNT, this, err);
	      }
	    }
	    return this;
	  } // we set destroyed to true before firing error callbacks in order
	  // to make it re-entrance safe in case destroy() is called within callbacks

	  if (this._readableState) {
	    this._readableState.destroyed = true;
	  } // if this is a duplex stream mark the writable part as destroyed as well

	  if (this._writableState) {
	    this._writableState.destroyed = true;
	  }
	  this._destroy(err || null, function (err) {
	    if (!cb && err) {
	      if (!_this._writableState) {
	        process.nextTick(emitErrorAndCloseNT, _this, err);
	      } else if (!_this._writableState.errorEmitted) {
	        _this._writableState.errorEmitted = true;
	        process.nextTick(emitErrorAndCloseNT, _this, err);
	      } else {
	        process.nextTick(emitCloseNT, _this);
	      }
	    } else if (cb) {
	      process.nextTick(emitCloseNT, _this);
	      cb(err);
	    } else {
	      process.nextTick(emitCloseNT, _this);
	    }
	  });
	  return this;
	}
	function emitErrorAndCloseNT(self, err) {
	  emitErrorNT(self, err);
	  emitCloseNT(self);
	}
	function emitCloseNT(self) {
	  if (self._writableState && !self._writableState.emitClose) return;
	  if (self._readableState && !self._readableState.emitClose) return;
	  self.emit('close');
	}
	function undestroy() {
	  if (this._readableState) {
	    this._readableState.destroyed = false;
	    this._readableState.reading = false;
	    this._readableState.ended = false;
	    this._readableState.endEmitted = false;
	  }
	  if (this._writableState) {
	    this._writableState.destroyed = false;
	    this._writableState.ended = false;
	    this._writableState.ending = false;
	    this._writableState.finalCalled = false;
	    this._writableState.prefinished = false;
	    this._writableState.finished = false;
	    this._writableState.errorEmitted = false;
	  }
	}
	function emitErrorNT(self, err) {
	  self.emit('error', err);
	}
	function errorOrDestroy(stream, err) {
	  // We have tests that rely on errors being emitted
	  // in the same tick, so changing this is semver major.
	  // For now when you opt-in to autoDestroy we allow
	  // the error to be emitted nextTick. In a future
	  // semver major update we should change the default to this.
	  var rState = stream._readableState;
	  var wState = stream._writableState;
	  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
	}
	destroy_1 = {
	  destroy: destroy,
	  undestroy: undestroy,
	  errorOrDestroy: errorOrDestroy
	};
	return destroy_1;
}

var errors$1 = {};

var hasRequiredErrors$1;

function requireErrors$1 () {
	if (hasRequiredErrors$1) return errors$1;
	hasRequiredErrors$1 = 1;

	var _createClass = createClass.exports;
	var _classCallCheck = classCallCheck.exports;
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf.exports;
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	var codes = {};
	function createErrorType(code, message, Base) {
	  if (!Base) {
	    Base = Error;
	  }
	  function getMessage(arg1, arg2, arg3) {
	    if (typeof message === 'string') {
	      return message;
	    } else {
	      return message(arg1, arg2, arg3);
	    }
	  }
	  var NodeError = /*#__PURE__*/function (_Base) {
	    _inherits(NodeError, _Base);
	    var _super = _createSuper(NodeError);
	    function NodeError(arg1, arg2, arg3) {
	      _classCallCheck(this, NodeError);
	      return _super.call(this, getMessage(arg1, arg2, arg3));
	    }
	    return _createClass(NodeError);
	  }(Base);
	  NodeError.prototype.name = Base.name;
	  NodeError.prototype.code = code;
	  codes[code] = NodeError;
	}

	// https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
	function oneOf(expected, thing) {
	  if (Array.isArray(expected)) {
	    var len = expected.length;
	    expected = expected.map(function (i) {
	      return String(i);
	    });
	    if (len > 2) {
	      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
	    } else if (len === 2) {
	      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
	    } else {
	      return "of ".concat(thing, " ").concat(expected[0]);
	    }
	  } else {
	    return "of ".concat(thing, " ").concat(String(expected));
	  }
	}

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
	function startsWith(str, search, pos) {
	  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
	}

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
	function endsWith(str, search, this_len) {
	  if (this_len === undefined || this_len > str.length) {
	    this_len = str.length;
	  }
	  return str.substring(this_len - search.length, this_len) === search;
	}

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
	function includes(str, search, start) {
	  if (typeof start !== 'number') {
	    start = 0;
	  }
	  if (start + search.length > str.length) {
	    return false;
	  } else {
	    return str.indexOf(search, start) !== -1;
	  }
	}
	createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
	  return 'The value "' + value + '" is invalid for option "' + name + '"';
	}, TypeError);
	createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
	  // determiner: 'must be' or 'must not be'
	  var determiner;
	  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
	    determiner = 'must not be';
	    expected = expected.replace(/^not /, '');
	  } else {
	    determiner = 'must be';
	  }
	  var msg;
	  if (endsWith(name, ' argument')) {
	    // For cases like 'first argument'
	    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
	  } else {
	    var type = includes(name, '.') ? 'property' : 'argument';
	    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
	  }
	  msg += ". Received type ".concat(typeof actual);
	  return msg;
	}, TypeError);
	createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
	createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
	  return 'The ' + name + ' method is not implemented';
	});
	createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
	createErrorType('ERR_STREAM_DESTROYED', function (name) {
	  return 'Cannot call ' + name + ' after a stream was destroyed';
	});
	createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
	createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
	createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
	createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
	createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
	  return 'Unknown encoding: ' + arg;
	}, TypeError);
	createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
	errors$1.codes = codes;
	return errors$1;
}

var state;
var hasRequiredState;

function requireState () {
	if (hasRequiredState) return state;
	hasRequiredState = 1;

	var ERR_INVALID_OPT_VALUE = requireErrors$1().codes.ERR_INVALID_OPT_VALUE;
	function highWaterMarkFrom(options, isDuplex, duplexKey) {
	  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
	}
	function getHighWaterMark(state, options, duplexKey, isDuplex) {
	  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
	  if (hwm != null) {
	    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
	      var name = isDuplex ? duplexKey : 'highWaterMark';
	      throw new ERR_INVALID_OPT_VALUE(name, hwm);
	    }
	    return Math.floor(hwm);
	  } // Default value

	  return state.objectMode ? 16 : 16 * 1024;
	}
	state = {
	  getHighWaterMark: getHighWaterMark
	};
	return state;
}

/**
 * For Node.js, simply re-export the core `util.deprecate` function.
 */

var node;
var hasRequiredNode;

function requireNode () {
	if (hasRequiredNode) return node;
	hasRequiredNode = 1;
	node = require$$0__default$1["default"].deprecate;
	return node;
}

var _stream_writable;
var hasRequired_stream_writable;

function require_stream_writable () {
	if (hasRequired_stream_writable) return _stream_writable;
	hasRequired_stream_writable = 1;

	_stream_writable = Writable;
	// there will be only 2 of these for each stream

	function CorkedRequest(state) {
	  var _this = this;
	  this.next = null;
	  this.entry = null;
	  this.finish = function () {
	    onCorkedFinish(_this, state);
	  };
	}
	/* </replacement> */

	/*<replacement>*/

	var Duplex;
	/*</replacement>*/

	Writable.WritableState = WritableState;
	/*<replacement>*/

	var internalUtil = {
	  deprecate: requireNode()
	};
	/*</replacement>*/

	/*<replacement>*/

	var Stream = requireStream();
	/*</replacement>*/

	var Buffer = require$$2__default["default"].Buffer;
	var OurUint8Array = commonjsGlobal.Uint8Array || function () {};
	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}
	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}
	var destroyImpl = requireDestroy();
	var _require = requireState(),
	  getHighWaterMark = _require.getHighWaterMark;
	var _require$codes = requireErrors$1().codes,
	  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
	  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
	  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
	  ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
	  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
	  ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
	  ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
	  ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
	var errorOrDestroy = destroyImpl.errorOrDestroy;
	inherits$2.exports(Writable, Stream);
	function nop() {}
	function WritableState(options, stream, isDuplex) {
	  Duplex = Duplex || require_stream_duplex();
	  options = options || {}; // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream,
	  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.

	  this.objectMode = !!options.objectMode;
	  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()

	  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

	  this.finalCalled = false; // drain event flag.

	  this.needDrain = false; // at the start of calling end()

	  this.ending = false; // when end() has been called, and returned

	  this.ended = false; // when 'finish' is emitted

	  this.finished = false; // has it been destroyed

	  this.destroyed = false; // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.

	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.

	  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.

	  this.length = 0; // a flag to see when we're in the middle of a write.

	  this.writing = false; // when true all writes will be buffered until .uncork() call

	  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.

	  this.sync = true; // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.

	  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  }; // the callback that the user supplies to write(chunk,encoding,cb)

	  this.writecb = null; // the amount that is being written when _write is called.

	  this.writelen = 0;
	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted

	  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams

	  this.prefinished = false; // True if the error was already emitted and should not be thrown again

	  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

	  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

	  this.autoDestroy = !!options.autoDestroy; // count buffered requests

	  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two

	  this.corkedRequestsFree = new CorkedRequest(this);
	}
	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};
	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function writableStateBufferGetter() {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
	    });
	  } catch (_) {}
	})(); // Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.

	var realHasInstance;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function value(object) {
	      if (realHasInstance.call(this, object)) return true;
	      if (this !== Writable) return false;
	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function realHasInstance(object) {
	    return object instanceof this;
	  };
	}
	function Writable(options) {
	  Duplex = Duplex || require_stream_duplex(); // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.
	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  // Checking for a Stream.Duplex instance is faster here instead of inside
	  // the WritableState constructor, at least with V8 6.5

	  var isDuplex = this instanceof Duplex;
	  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
	  this._writableState = new WritableState(options, this, isDuplex); // legacy.

	  this.writable = true;
	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;
	    if (typeof options.writev === 'function') this._writev = options.writev;
	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	    if (typeof options["final"] === 'function') this._final = options["final"];
	  }
	  Stream.call(this);
	} // Otherwise people can pipe Writable streams, which is just wrong.

	Writable.prototype.pipe = function () {
	  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
	};
	function writeAfterEnd(stream, cb) {
	  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

	  errorOrDestroy(stream, er);
	  process.nextTick(cb, er);
	} // Checks that a user-supplied chunk is valid, especially for the particular
	// mode the stream is in. Currently this means that `null` is never accepted
	// and undefined/non-string values are only allowed in object mode.

	function validChunk(stream, state, chunk, cb) {
	  var er;
	  if (chunk === null) {
	    er = new ERR_STREAM_NULL_VALUES();
	  } else if (typeof chunk !== 'string' && !state.objectMode) {
	    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
	  }
	  if (er) {
	    errorOrDestroy(stream, er);
	    process.nextTick(cb, er);
	    return false;
	  }
	  return true;
	}
	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	  var isBuf = !state.objectMode && _isUint8Array(chunk);
	  if (isBuf && !Buffer.isBuffer(chunk)) {
	    chunk = _uint8ArrayToBuffer(chunk);
	  }
	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
	  if (typeof cb !== 'function') cb = nop;
	  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
	  }
	  return ret;
	};
	Writable.prototype.cork = function () {
	  this._writableState.corked++;
	};
	Writable.prototype.uncork = function () {
	  var state = this._writableState;
	  if (state.corked) {
	    state.corked--;
	    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};
	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};
	Object.defineProperty(Writable.prototype, 'writableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState && this._writableState.getBuffer();
	  }
	});
	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = Buffer.from(chunk, encoding);
	  }
	  return chunk;
	}
	Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.highWaterMark;
	  }
	}); // if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.

	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
	  if (!isBuf) {
	    var newChunk = decodeChunk(state, chunk, encoding);
	    if (chunk !== newChunk) {
	      isBuf = true;
	      encoding = 'buffer';
	      chunk = newChunk;
	    }
	  }
	  var len = state.objectMode ? 1 : chunk.length;
	  state.length += len;
	  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

	  if (!ret) state.needDrain = true;
	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = {
	      chunk: chunk,
	      encoding: encoding,
	      isBuf: isBuf,
	      callback: cb,
	      next: null
	    };
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }
	  return ret;
	}
	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}
	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) {
	    // defer the callback if we are being called synchronously
	    // to avoid piling up things on the stack
	    process.nextTick(cb, er); // this can emit finish, and it will always happen
	    // after error

	    process.nextTick(finishMaybe, stream, state);
	    stream._writableState.errorEmitted = true;
	    errorOrDestroy(stream, er);
	  } else {
	    // the caller expect this to happen before if
	    // it is async
	    cb(er);
	    stream._writableState.errorEmitted = true;
	    errorOrDestroy(stream, er); // this can emit finish, but finish must
	    // always follow error

	    finishMaybe(stream, state);
	  }
	}
	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}
	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
	  onwriteStateUpdate(state);
	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state) || stream.destroyed;
	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }
	    if (sync) {
	      process.nextTick(afterWrite, stream, state, finished, cb);
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}
	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	} // Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.

	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	} // if there's something in the buffer waiting, then process it

	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;
	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;
	    var count = 0;
	    var allBuffers = true;
	    while (entry) {
	      buffer[count] = entry;
	      if (!entry.isBuf) allBuffers = false;
	      entry = entry.next;
	      count += 1;
	    }
	    buffer.allBuffers = allBuffers;
	    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite

	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	    state.bufferedRequestCount = 0;
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;
	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.

	      if (state.writing) {
	        break;
	      }
	    }
	    if (entry === null) state.lastBufferedRequest = null;
	  }
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}
	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
	};
	Writable.prototype._writev = null;
	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  } // ignore unnecessary end() calls.

	  if (!state.ending) endWritable(this, state, cb);
	  return this;
	};
	Object.defineProperty(Writable.prototype, 'writableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.length;
	  }
	});
	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}
	function callFinal(stream, state) {
	  stream._final(function (err) {
	    state.pendingcb--;
	    if (err) {
	      errorOrDestroy(stream, err);
	    }
	    state.prefinished = true;
	    stream.emit('prefinish');
	    finishMaybe(stream, state);
	  });
	}
	function prefinish(stream, state) {
	  if (!state.prefinished && !state.finalCalled) {
	    if (typeof stream._final === 'function' && !state.destroyed) {
	      state.pendingcb++;
	      state.finalCalled = true;
	      process.nextTick(callFinal, stream, state);
	    } else {
	      state.prefinished = true;
	      stream.emit('prefinish');
	    }
	  }
	}
	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    prefinish(stream, state);
	    if (state.pendingcb === 0) {
	      state.finished = true;
	      stream.emit('finish');
	      if (state.autoDestroy) {
	        // In case of duplex streams we need a way to detect
	        // if the readable side is ready for autoDestroy as well
	        var rState = stream._readableState;
	        if (!rState || rState.autoDestroy && rState.endEmitted) {
	          stream.destroy();
	        }
	      }
	    }
	  }
	  return need;
	}
	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}
	function onCorkedFinish(corkReq, state, err) {
	  var entry = corkReq.entry;
	  corkReq.entry = null;
	  while (entry) {
	    var cb = entry.callback;
	    state.pendingcb--;
	    cb(err);
	    entry = entry.next;
	  } // reuse the free corkReq.

	  state.corkedRequestsFree.next = corkReq;
	}
	Object.defineProperty(Writable.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    if (this._writableState === undefined) {
	      return false;
	    }
	    return this._writableState.destroyed;
	  },
	  set: function set(value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._writableState) {
	      return;
	    } // backward compatibility, the user is explicitly
	    // managing destroyed

	    this._writableState.destroyed = value;
	  }
	});
	Writable.prototype.destroy = destroyImpl.destroy;
	Writable.prototype._undestroy = destroyImpl.undestroy;
	Writable.prototype._destroy = function (err, cb) {
	  cb(err);
	};
	return _stream_writable;
}

var _stream_duplex;
var hasRequired_stream_duplex;

function require_stream_duplex () {
	if (hasRequired_stream_duplex) return _stream_duplex;
	hasRequired_stream_duplex = 1;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }
	  return keys;
	};
	/*</replacement>*/

	_stream_duplex = Duplex;
	var Readable = require_stream_readable();
	var Writable = require_stream_writable();
	inherits$2.exports(Duplex, Readable);
	{
	  // Allow the keys array to be GC'ed.
	  var keys = objectKeys(Writable.prototype);
	  for (var v = 0; v < keys.length; v++) {
	    var method = keys[v];
	    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	  }
	}
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);
	  Readable.call(this, options);
	  Writable.call(this, options);
	  this.allowHalfOpen = true;
	  if (options) {
	    if (options.readable === false) this.readable = false;
	    if (options.writable === false) this.writable = false;
	    if (options.allowHalfOpen === false) {
	      this.allowHalfOpen = false;
	      this.once('end', onend);
	    }
	  }
	}
	Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.highWaterMark;
	  }
	});
	Object.defineProperty(Duplex.prototype, 'writableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState && this._writableState.getBuffer();
	  }
	});
	Object.defineProperty(Duplex.prototype, 'writableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.length;
	  }
	}); // the no-half-open enforcer

	function onend() {
	  // If the writable side ended, then we're ok.
	  if (this._writableState.ended) return; // no more data can be written.
	  // But allow more writes to happen in this tick.

	  process.nextTick(onEndNT, this);
	}
	function onEndNT(self) {
	  self.end();
	}
	Object.defineProperty(Duplex.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return false;
	    }
	    return this._readableState.destroyed && this._writableState.destroyed;
	  },
	  set: function set(value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return;
	    } // backward compatibility, the user is explicitly
	    // managing destroyed

	    this._readableState.destroyed = value;
	    this._writableState.destroyed = value;
	  }
	});
	return _stream_duplex;
}

var endOfStream;
var hasRequiredEndOfStream;

function requireEndOfStream () {
	if (hasRequiredEndOfStream) return endOfStream;
	hasRequiredEndOfStream = 1;

	var ERR_STREAM_PREMATURE_CLOSE = requireErrors$1().codes.ERR_STREAM_PREMATURE_CLOSE;
	function once(callback) {
	  var called = false;
	  return function () {
	    if (called) return;
	    called = true;
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    callback.apply(this, args);
	  };
	}
	function noop() {}
	function isRequest(stream) {
	  return stream.setHeader && typeof stream.abort === 'function';
	}
	function eos(stream, opts, callback) {
	  if (typeof opts === 'function') return eos(stream, null, opts);
	  if (!opts) opts = {};
	  callback = once(callback || noop);
	  var readable = opts.readable || opts.readable !== false && stream.readable;
	  var writable = opts.writable || opts.writable !== false && stream.writable;
	  var onlegacyfinish = function onlegacyfinish() {
	    if (!stream.writable) onfinish();
	  };
	  var writableEnded = stream._writableState && stream._writableState.finished;
	  var onfinish = function onfinish() {
	    writable = false;
	    writableEnded = true;
	    if (!readable) callback.call(stream);
	  };
	  var readableEnded = stream._readableState && stream._readableState.endEmitted;
	  var onend = function onend() {
	    readable = false;
	    readableEnded = true;
	    if (!writable) callback.call(stream);
	  };
	  var onerror = function onerror(err) {
	    callback.call(stream, err);
	  };
	  var onclose = function onclose() {
	    var err;
	    if (readable && !readableEnded) {
	      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
	      return callback.call(stream, err);
	    }
	    if (writable && !writableEnded) {
	      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
	      return callback.call(stream, err);
	    }
	  };
	  var onrequest = function onrequest() {
	    stream.req.on('finish', onfinish);
	  };
	  if (isRequest(stream)) {
	    stream.on('complete', onfinish);
	    stream.on('abort', onclose);
	    if (stream.req) onrequest();else stream.on('request', onrequest);
	  } else if (writable && !stream._writableState) {
	    // legacy streams
	    stream.on('end', onlegacyfinish);
	    stream.on('close', onlegacyfinish);
	  }
	  stream.on('end', onend);
	  stream.on('finish', onfinish);
	  if (opts.error !== false) stream.on('error', onerror);
	  stream.on('close', onclose);
	  return function () {
	    stream.removeListener('complete', onfinish);
	    stream.removeListener('abort', onclose);
	    stream.removeListener('request', onrequest);
	    if (stream.req) stream.req.removeListener('finish', onfinish);
	    stream.removeListener('end', onlegacyfinish);
	    stream.removeListener('close', onlegacyfinish);
	    stream.removeListener('finish', onfinish);
	    stream.removeListener('end', onend);
	    stream.removeListener('error', onerror);
	    stream.removeListener('close', onclose);
	  };
	}
	endOfStream = eos;
	return endOfStream;
}

var async_iterator;
var hasRequiredAsync_iterator;

function requireAsync_iterator () {
	if (hasRequiredAsync_iterator) return async_iterator;
	hasRequiredAsync_iterator = 1;

	var _Object$setPrototypeO;
	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	  return obj;
	}
	var finished = requireEndOfStream();
	var kLastResolve = Symbol('lastResolve');
	var kLastReject = Symbol('lastReject');
	var kError = Symbol('error');
	var kEnded = Symbol('ended');
	var kLastPromise = Symbol('lastPromise');
	var kHandlePromise = Symbol('handlePromise');
	var kStream = Symbol('stream');
	function createIterResult(value, done) {
	  return {
	    value: value,
	    done: done
	  };
	}
	function readAndResolve(iter) {
	  var resolve = iter[kLastResolve];
	  if (resolve !== null) {
	    var data = iter[kStream].read(); // we defer if data is null
	    // we can be expecting either 'end' or
	    // 'error'

	    if (data !== null) {
	      iter[kLastPromise] = null;
	      iter[kLastResolve] = null;
	      iter[kLastReject] = null;
	      resolve(createIterResult(data, false));
	    }
	  }
	}
	function onReadable(iter) {
	  // we wait for the next tick, because it might
	  // emit an error with process.nextTick
	  process.nextTick(readAndResolve, iter);
	}
	function wrapForNext(lastPromise, iter) {
	  return function (resolve, reject) {
	    lastPromise.then(function () {
	      if (iter[kEnded]) {
	        resolve(createIterResult(undefined, true));
	        return;
	      }
	      iter[kHandlePromise](resolve, reject);
	    }, reject);
	  };
	}
	var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
	var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
	  get stream() {
	    return this[kStream];
	  },
	  next: function next() {
	    var _this = this;

	    // if we have detected an error in the meanwhile
	    // reject straight away
	    var error = this[kError];
	    if (error !== null) {
	      return Promise.reject(error);
	    }
	    if (this[kEnded]) {
	      return Promise.resolve(createIterResult(undefined, true));
	    }
	    if (this[kStream].destroyed) {
	      // We need to defer via nextTick because if .destroy(err) is
	      // called, the error will be emitted via nextTick, and
	      // we cannot guarantee that there is no error lingering around
	      // waiting to be emitted.
	      return new Promise(function (resolve, reject) {
	        process.nextTick(function () {
	          if (_this[kError]) {
	            reject(_this[kError]);
	          } else {
	            resolve(createIterResult(undefined, true));
	          }
	        });
	      });
	    } // if we have multiple next() calls
	    // we will wait for the previous Promise to finish
	    // this logic is optimized to support for await loops,
	    // where next() is only called once at a time

	    var lastPromise = this[kLastPromise];
	    var promise;
	    if (lastPromise) {
	      promise = new Promise(wrapForNext(lastPromise, this));
	    } else {
	      // fast path needed to support multiple this.push()
	      // without triggering the next() queue
	      var data = this[kStream].read();
	      if (data !== null) {
	        return Promise.resolve(createIterResult(data, false));
	      }
	      promise = new Promise(this[kHandlePromise]);
	    }
	    this[kLastPromise] = promise;
	    return promise;
	  }
	}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
	  return this;
	}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
	  var _this2 = this;

	  // destroy(err, cb) is a private API
	  // we can guarantee we have that here, because we control the
	  // Readable class this is attached to
	  return new Promise(function (resolve, reject) {
	    _this2[kStream].destroy(null, function (err) {
	      if (err) {
	        reject(err);
	        return;
	      }
	      resolve(createIterResult(undefined, true));
	    });
	  });
	}), _Object$setPrototypeO), AsyncIteratorPrototype);
	var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
	  var _Object$create;
	  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
	    value: stream,
	    writable: true
	  }), _defineProperty(_Object$create, kLastResolve, {
	    value: null,
	    writable: true
	  }), _defineProperty(_Object$create, kLastReject, {
	    value: null,
	    writable: true
	  }), _defineProperty(_Object$create, kError, {
	    value: null,
	    writable: true
	  }), _defineProperty(_Object$create, kEnded, {
	    value: stream._readableState.endEmitted,
	    writable: true
	  }), _defineProperty(_Object$create, kHandlePromise, {
	    value: function value(resolve, reject) {
	      var data = iterator[kStream].read();
	      if (data) {
	        iterator[kLastPromise] = null;
	        iterator[kLastResolve] = null;
	        iterator[kLastReject] = null;
	        resolve(createIterResult(data, false));
	      } else {
	        iterator[kLastResolve] = resolve;
	        iterator[kLastReject] = reject;
	      }
	    },
	    writable: true
	  }), _Object$create));
	  iterator[kLastPromise] = null;
	  finished(stream, function (err) {
	    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
	      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
	      // returned by next() and store the error

	      if (reject !== null) {
	        iterator[kLastPromise] = null;
	        iterator[kLastResolve] = null;
	        iterator[kLastReject] = null;
	        reject(err);
	      }
	      iterator[kError] = err;
	      return;
	    }
	    var resolve = iterator[kLastResolve];
	    if (resolve !== null) {
	      iterator[kLastPromise] = null;
	      iterator[kLastResolve] = null;
	      iterator[kLastReject] = null;
	      resolve(createIterResult(undefined, true));
	    }
	    iterator[kEnded] = true;
	  });
	  stream.on('readable', onReadable.bind(null, iterator));
	  return iterator;
	};
	async_iterator = createReadableStreamAsyncIterator;
	return async_iterator;
}

var from_1;
var hasRequiredFrom;

function requireFrom () {
	if (hasRequiredFrom) return from_1;
	hasRequiredFrom = 1;

	var _regeneratorRuntime = regenerator;
	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }
	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}
	function _asyncToGenerator(fn) {
	  return function () {
	    var self = this,
	      args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);
	      function _next(value) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
	      }
	      function _throw(err) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
	      }
	      _next(undefined);
	    });
	  };
	}
	function ownKeys(object, enumerableOnly) {
	  var keys = Object.keys(object);
	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }
	  return keys;
	}
	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};
	    if (i % 2) {
	      ownKeys(Object(source), true).forEach(function (key) {
	        _defineProperty(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }
	  return target;
	}
	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	  return obj;
	}
	var ERR_INVALID_ARG_TYPE = requireErrors$1().codes.ERR_INVALID_ARG_TYPE;
	function from(Readable, iterable, opts) {
	  var iterator;
	  if (iterable && typeof iterable.next === 'function') {
	    iterator = iterable;
	  } else if (iterable && iterable[Symbol.asyncIterator]) iterator = iterable[Symbol.asyncIterator]();else if (iterable && iterable[Symbol.iterator]) iterator = iterable[Symbol.iterator]();else throw new ERR_INVALID_ARG_TYPE('iterable', ['Iterable'], iterable);
	  var readable = new Readable(_objectSpread({
	    objectMode: true
	  }, opts)); // Reading boolean to protect against _read
	  // being called before last iteration completion.

	  var reading = false;
	  readable._read = function () {
	    if (!reading) {
	      reading = true;
	      next();
	    }
	  };
	  function next() {
	    return _next2.apply(this, arguments);
	  }
	  function _next2() {
	    _next2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
	      var _ref, value, done;
	      return _regeneratorRuntime.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              _context.prev = 0;
	              _context.next = 3;
	              return iterator.next();
	            case 3:
	              _ref = _context.sent;
	              value = _ref.value;
	              done = _ref.done;
	              if (!done) {
	                _context.next = 10;
	                break;
	              }
	              readable.push(null);
	              _context.next = 19;
	              break;
	            case 10:
	              _context.t0 = readable;
	              _context.next = 13;
	              return value;
	            case 13:
	              _context.t1 = _context.sent;
	              if (!_context.t0.push.call(_context.t0, _context.t1)) {
	                _context.next = 18;
	                break;
	              }
	              next();
	              _context.next = 19;
	              break;
	            case 18:
	              reading = false;
	            case 19:
	              _context.next = 24;
	              break;
	            case 21:
	              _context.prev = 21;
	              _context.t2 = _context["catch"](0);
	              readable.destroy(_context.t2);
	            case 24:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee, null, [[0, 21]]);
	    }));
	    return _next2.apply(this, arguments);
	  }
	  return readable;
	}
	from_1 = from;
	return from_1;
}

var _stream_readable;
var hasRequired_stream_readable;

function require_stream_readable () {
	if (hasRequired_stream_readable) return _stream_readable;
	hasRequired_stream_readable = 1;

	_stream_readable = Readable;
	/*<replacement>*/

	var Duplex;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;
	/*<replacement>*/

	require$$0__default["default"].EventEmitter;
	var EElistenerCount = function EElistenerCount(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	/*<replacement>*/

	var Stream = requireStream();
	/*</replacement>*/

	var Buffer = require$$2__default["default"].Buffer;
	var OurUint8Array = commonjsGlobal.Uint8Array || function () {};
	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}
	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}
	/*<replacement>*/

	var debugUtil = require$$0__default$1["default"];
	var debug;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function debug() {};
	}
	/*</replacement>*/

	var BufferList = requireBuffer_list();
	var destroyImpl = requireDestroy();
	var _require = requireState(),
	  getHighWaterMark = _require.getHighWaterMark;
	var _require$codes = requireErrors$1().codes,
	  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
	  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
	  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
	  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.

	var StringDecoder;
	var createReadableStreamAsyncIterator;
	var from;
	inherits$2.exports(Readable, Stream);
	var errorOrDestroy = destroyImpl.errorOrDestroy;
	var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
	  // userland ones.  NEVER DO THIS. This is here only because this code needs
	  // to continue to work with older versions of Node.js that do not include
	  // the prependListener() method. The goal is to eventually remove this hack.

	  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	}
	function ReadableState(options, stream, isDuplex) {
	  Duplex = Duplex || require_stream_duplex();
	  options = options || {}; // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream.
	  // These options can be provided separately as readableXXX and writableXXX.

	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away

	  this.objectMode = !!options.objectMode;
	  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"

	  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()

	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
	  // immediately, or on a later tick.  We set this to true at first, because
	  // any actions that shouldn't happen until "later" should generally also
	  // not happen before the first read call.

	  this.sync = true; // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.

	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;
	  this.paused = true; // Should close be emitted on destroy. Defaults to true.

	  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

	  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

	  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.

	  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

	  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

	  this.readingMore = false;
	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = require$$10__default$1["default"].StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	function Readable(options) {
	  Duplex = Duplex || require_stream_duplex();
	  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
	  // the ReadableState constructor, at least with V8 6.5

	  var isDuplex = this instanceof Duplex;
	  this._readableState = new ReadableState(options, this, isDuplex); // legacy

	  this.readable = true;
	  if (options) {
	    if (typeof options.read === 'function') this._read = options.read;
	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	  }
	  Stream.call(this);
	}
	Object.defineProperty(Readable.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    if (this._readableState === undefined) {
	      return false;
	    }
	    return this._readableState.destroyed;
	  },
	  set: function set(value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._readableState) {
	      return;
	    } // backward compatibility, the user is explicitly
	    // managing destroyed

	    this._readableState.destroyed = value;
	  }
	});
	Readable.prototype.destroy = destroyImpl.destroy;
	Readable.prototype._undestroy = destroyImpl.undestroy;
	Readable.prototype._destroy = function (err, cb) {
	  cb(err);
	}; // Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.

	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	  var skipChunkCheck;
	  if (!state.objectMode) {
	    if (typeof chunk === 'string') {
	      encoding = encoding || state.defaultEncoding;
	      if (encoding !== state.encoding) {
	        chunk = Buffer.from(chunk, encoding);
	        encoding = '';
	      }
	      skipChunkCheck = true;
	    }
	  } else {
	    skipChunkCheck = true;
	  }
	  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
	}; // Unshift should *always* be something directly out of read()

	Readable.prototype.unshift = function (chunk) {
	  return readableAddChunk(this, chunk, null, true, false);
	};
	function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
	  debug('readableAddChunk', chunk);
	  var state = stream._readableState;
	  if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else {
	    var er;
	    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
	    if (er) {
	      errorOrDestroy(stream, er);
	    } else if (state.objectMode || chunk && chunk.length > 0) {
	      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
	        chunk = _uint8ArrayToBuffer(chunk);
	      }
	      if (addToFront) {
	        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
	      } else if (state.ended) {
	        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
	      } else if (state.destroyed) {
	        return false;
	      } else {
	        state.reading = false;
	        if (state.decoder && !encoding) {
	          chunk = state.decoder.write(chunk);
	          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
	        } else {
	          addChunk(stream, state, chunk, false);
	        }
	      }
	    } else if (!addToFront) {
	      state.reading = false;
	      maybeReadMore(stream, state);
	    }
	  } // We can push more data if we are below the highWaterMark.
	  // Also, if we have no data yet, we can stand some more bytes.
	  // This is to work around cases where hwm=0, such as the repl.

	  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
	}
	function addChunk(stream, state, chunk, addToFront) {
	  if (state.flowing && state.length === 0 && !state.sync) {
	    state.awaitDrain = 0;
	    stream.emit('data', chunk);
	  } else {
	    // update the buffer info.
	    state.length += state.objectMode ? 1 : chunk.length;
	    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
	    if (state.needReadable) emitReadable(stream);
	  }
	  maybeReadMore(stream, state);
	}
	function chunkInvalid(state, chunk) {
	  var er;
	  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
	  }
	  return er;
	}
	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	}; // backwards compatibility.

	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = require$$10__default$1["default"].StringDecoder;
	  var decoder = new StringDecoder(enc);
	  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

	  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

	  var p = this._readableState.buffer.head;
	  var content = '';
	  while (p !== null) {
	    content += decoder.write(p.data);
	    p = p.next;
	  }
	  this._readableState.buffer.clear();
	  if (content !== '') this._readableState.buffer.push(content);
	  this._readableState.length = content.length;
	  return this;
	}; // Don't raise the hwm > 1GB

	var MAX_HWM = 0x40000000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	} // This function is designed to be inlinable, so please take care when making
	// changes to the function body.

	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  } // If we're asking for more than the current hwm, then raise the hwm.

	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n; // Don't have enough

	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	} // you can override either this method, or the async _read(n) below.

	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;
	  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.

	  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }
	  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  } // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.
	  // if we need a readable event, then we need to do some reading.

	  var doRead = state.needReadable;
	  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  } // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.

	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true; // if the length is currently zero, then we *need* a readable event.

	    if (state.length === 0) state.needReadable = true; // call internal read method

	    this._read(state.highWaterMark);
	    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.

	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }
	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;
	  if (ret === null) {
	    state.needReadable = state.length <= state.highWaterMark;
	    n = 0;
	  } else {
	    state.length -= n;
	    state.awaitDrain = 0;
	  }
	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

	    if (nOrig !== n && state.ended) endReadable(this);
	  }
	  if (ret !== null) this.emit('data', ret);
	  return ret;
	};
	function onEofChunk(stream, state) {
	  debug('onEofChunk');
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;
	  if (state.sync) {
	    // if we are sync, wait until next tick to emit the data.
	    // Otherwise we risk emitting data in the flow()
	    // the readable code triggers during a read() call
	    emitReadable(stream);
	  } else {
	    // emit 'readable' now to make sure it gets picked up.
	    state.needReadable = false;
	    if (!state.emittedReadable) {
	      state.emittedReadable = true;
	      emitReadable_(stream);
	    }
	  }
	} // Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.

	function emitReadable(stream) {
	  var state = stream._readableState;
	  debug('emitReadable', state.needReadable, state.emittedReadable);
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    process.nextTick(emitReadable_, stream);
	  }
	}
	function emitReadable_(stream) {
	  var state = stream._readableState;
	  debug('emitReadable_', state.destroyed, state.length, state.ended);
	  if (!state.destroyed && (state.length || state.ended)) {
	    stream.emit('readable');
	    state.emittedReadable = false;
	  } // The stream needs another readable event if
	  // 1. It is not flowing, as the flow mechanism will take
	  //    care of it.
	  // 2. It is not ended.
	  // 3. It is below the highWaterMark, so we can schedule
	  //    another readable later.

	  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
	  flow(stream);
	} // at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.

	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(maybeReadMore_, stream, state);
	  }
	}
	function maybeReadMore_(stream, state) {
	  // Attempt to read more data if we should.
	  //
	  // The conditions for reading more data are (one of):
	  // - Not enough data buffered (state.length < state.highWaterMark). The loop
	  //   is responsible for filling the buffer with enough data if such data
	  //   is available. If highWaterMark is 0 and we are not in the flowing mode
	  //   we should _not_ attempt to buffer any extra data. We'll get more data
	  //   when the stream consumer calls read() instead.
	  // - No data in the buffer, and the stream is in flowing mode. In this mode
	  //   the loop below is responsible for ensuring read() is called. Failing to
	  //   call read here would abort the flow and there's no other mechanism for
	  //   continuing the flow if the stream consumer has just subscribed to the
	  //   'data' event.
	  //
	  // In addition to the above conditions to keep reading data, the following
	  // conditions prevent the data from being read:
	  // - The stream has ended (state.ended).
	  // - There is already a pending 'read' operation (state.reading). This is a
	  //   case where the the stream has called the implementation defined _read()
	  //   method, but they are processing the call asynchronously and have _not_
	  //   called push() with new data. In this case we skip performing more
	  //   read()s. The execution ends in this method again after the _read() ends
	  //   up calling push() with more data.
	  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
	    var len = state.length;
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	  }
	  state.readingMore = false;
	} // abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.

	Readable.prototype._read = function (n) {
	  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
	};
	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;
	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
	  var endFn = doEnd ? onend : unpipe;
	  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable, unpipeInfo) {
	    debug('onunpipe');
	    if (readable === src) {
	      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
	        unpipeInfo.hasUnpiped = true;
	        cleanup();
	      }
	    }
	  }
	  function onend() {
	    debug('onend');
	    dest.end();
	  } // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.

	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup'); // cleanup event handlers once the pipe is broken

	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', unpipe);
	    src.removeListener('data', ondata);
	    cleanedUp = true; // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.

	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    debug('dest.write', ret);
	    if (ret === false) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', state.awaitDrain);
	        state.awaitDrain++;
	      }
	      src.pause();
	    }
	  } // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.

	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
	  } // Make sure our error handler is attached before userland ones.

	  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);
	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  } // tell the dest that it's being piped to

	  dest.emit('pipe', src); // start the flow if it hasn't been started already.

	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }
	  return dest;
	};
	function pipeOnDrain(src) {
	  return function pipeOnDrainFunctionResult() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}
	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	  var unpipeInfo = {
	    hasUnpiped: false
	  }; // if we're not piping anywhere, then do nothing.

	  if (state.pipesCount === 0) return this; // just one destination.  most common case.

	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;
	    if (!dest) dest = state.pipes; // got a match.

	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this, unpipeInfo);
	    return this;
	  } // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    for (var i = 0; i < len; i++) {
	      dests[i].emit('unpipe', this, {
	        hasUnpiped: false
	      });
	    }
	    return this;
	  } // try to find the right one.

	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;
	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];
	  dest.emit('unpipe', this, unpipeInfo);
	  return this;
	}; // set up data events if they are asked for
	// Ensure readable listeners eventually get something

	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	  var state = this._readableState;
	  if (ev === 'data') {
	    // update readableListening so that resume() may be a no-op
	    // a few lines down. This is needed to support once('readable').
	    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

	    if (state.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.flowing = false;
	      state.emittedReadable = false;
	      debug('on readable', state.length, state.reading);
	      if (state.length) {
	        emitReadable(this);
	      } else if (!state.reading) {
	        process.nextTick(nReadingNextTick, this);
	      }
	    }
	  }
	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;
	Readable.prototype.removeListener = function (ev, fn) {
	  var res = Stream.prototype.removeListener.call(this, ev, fn);
	  if (ev === 'readable') {
	    // We need to check if there is someone still listening to
	    // readable and reset the state. However this needs to happen
	    // after readable has been emitted but before I/O (nextTick) to
	    // support once('readable', fn) cycles. This means that calling
	    // resume within the same tick will have no
	    // effect.
	    process.nextTick(updateReadableListening, this);
	  }
	  return res;
	};
	Readable.prototype.removeAllListeners = function (ev) {
	  var res = Stream.prototype.removeAllListeners.apply(this, arguments);
	  if (ev === 'readable' || ev === undefined) {
	    // We need to check if there is someone still listening to
	    // readable and reset the state. However this needs to happen
	    // after readable has been emitted but before I/O (nextTick) to
	    // support once('readable', fn) cycles. This means that calling
	    // resume within the same tick will have no
	    // effect.
	    process.nextTick(updateReadableListening, this);
	  }
	  return res;
	};
	function updateReadableListening(self) {
	  var state = self._readableState;
	  state.readableListening = self.listenerCount('readable') > 0;
	  if (state.resumeScheduled && !state.paused) {
	    // flowing needs to be set to true now, otherwise
	    // the upcoming resume will not flow.
	    state.flowing = true; // crude way to check if we should resume
	  } else if (self.listenerCount('data') > 0) {
	    self.resume();
	  }
	}
	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	} // pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.

	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume'); // we flow only if there is no one listening
	    // for readable, but we still have to call
	    // resume()

	    state.flowing = !state.readableListening;
	    resume(this, state);
	  }
	  state.paused = false;
	  return this;
	};
	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(resume_, stream, state);
	  }
	}
	function resume_(stream, state) {
	  debug('resume', state.reading);
	  if (!state.reading) {
	    stream.read(0);
	  }
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}
	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (this._readableState.flowing !== false) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  this._readableState.paused = true;
	  return this;
	};
	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {
	  }
	} // wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.

	Readable.prototype.wrap = function (stream) {
	  var _this = this;
	  var state = this._readableState;
	  var paused = false;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) _this.push(chunk);
	    }
	    _this.push(null);
	  });
	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
	    var ret = _this.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  }); // proxy all the other methods.
	  // important when wrapping filters and duplexes.

	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function methodWrap(method) {
	        return function methodWrapReturnFunction() {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  } // proxy certain important events.

	  for (var n = 0; n < kProxyEvents.length; n++) {
	    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
	  } // when we try to consume some more bytes, simply unpause the
	  // underlying stream.

	  this._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };
	  return this;
	};
	if (typeof Symbol === 'function') {
	  Readable.prototype[Symbol.asyncIterator] = function () {
	    if (createReadableStreamAsyncIterator === undefined) {
	      createReadableStreamAsyncIterator = requireAsync_iterator();
	    }
	    return createReadableStreamAsyncIterator(this);
	  };
	}
	Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState.highWaterMark;
	  }
	});
	Object.defineProperty(Readable.prototype, 'readableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState && this._readableState.buffer;
	  }
	});
	Object.defineProperty(Readable.prototype, 'readableFlowing', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState.flowing;
	  },
	  set: function set(state) {
	    if (this._readableState) {
	      this._readableState.flowing = state;
	    }
	  }
	}); // exposed for testing purposes only.

	Readable._fromList = fromList;
	Object.defineProperty(Readable.prototype, 'readableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState.length;
	  }
	}); // Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.

	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;
	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = state.buffer.consume(n, state.decoder);
	  }
	  return ret;
	}
	function endReadable(stream) {
	  var state = stream._readableState;
	  debug('endReadable', state.endEmitted);
	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(endReadableNT, state, stream);
	  }
	}
	function endReadableNT(state, stream) {
	  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	    if (state.autoDestroy) {
	      // In case of duplex streams we need a way to detect
	      // if the writable side is ready for autoDestroy as well
	      var wState = stream._writableState;
	      if (!wState || wState.autoDestroy && wState.finished) {
	        stream.destroy();
	      }
	    }
	  }
	}
	if (typeof Symbol === 'function') {
	  Readable.from = function (iterable, opts) {
	    if (from === undefined) {
	      from = requireFrom();
	    }
	    return from(Readable, iterable, opts);
	  };
	}
	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	return _stream_readable;
}

var _stream_transform;
var hasRequired_stream_transform;

function require_stream_transform () {
	if (hasRequired_stream_transform) return _stream_transform;
	hasRequired_stream_transform = 1;

	_stream_transform = Transform;
	var _require$codes = requireErrors$1().codes,
	  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
	  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
	  ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
	  ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
	var Duplex = require_stream_duplex();
	inherits$2.exports(Transform, Duplex);
	function afterTransform(er, data) {
	  var ts = this._transformState;
	  ts.transforming = false;
	  var cb = ts.writecb;
	  if (cb === null) {
	    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
	  }
	  ts.writechunk = null;
	  ts.writecb = null;
	  if (data != null)
	    // single equals check for both `null` and `undefined`
	    this.push(data);
	  cb(er);
	  var rs = this._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    this._read(rs.highWaterMark);
	  }
	}
	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);
	  Duplex.call(this, options);
	  this._transformState = {
	    afterTransform: afterTransform.bind(this),
	    needTransform: false,
	    transforming: false,
	    writecb: null,
	    writechunk: null,
	    writeencoding: null
	  }; // start out asking for a readable event once data is transformed.

	  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.

	  this._readableState.sync = false;
	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;
	    if (typeof options.flush === 'function') this._flush = options.flush;
	  } // When the writable side finishes, then flush out anything remaining.

	  this.on('prefinish', prefinish);
	}
	function prefinish() {
	  var _this = this;
	  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
	    this._flush(function (er, data) {
	      done(_this, er, data);
	    });
	  } else {
	    done(this, null, null);
	  }
	}
	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	}; // This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.

	Transform.prototype._transform = function (chunk, encoding, cb) {
	  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
	};
	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	}; // Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.

	Transform.prototype._read = function (n) {
	  var ts = this._transformState;
	  if (ts.writechunk !== null && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};
	Transform.prototype._destroy = function (err, cb) {
	  Duplex.prototype._destroy.call(this, err, function (err2) {
	    cb(err2);
	  });
	};
	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);
	  if (data != null)
	    // single equals check for both `null` and `undefined`
	    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided

	  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
	  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
	  return stream.push(null);
	}
	return _stream_transform;
}

var _stream_passthrough;
var hasRequired_stream_passthrough;

function require_stream_passthrough () {
	if (hasRequired_stream_passthrough) return _stream_passthrough;
	hasRequired_stream_passthrough = 1;

	_stream_passthrough = PassThrough;
	var Transform = require_stream_transform();
	inherits$2.exports(PassThrough, Transform);
	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);
	  Transform.call(this, options);
	}
	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};
	return _stream_passthrough;
}

var pipeline_1;
var hasRequiredPipeline;

function requirePipeline () {
	if (hasRequiredPipeline) return pipeline_1;
	hasRequiredPipeline = 1;

	var eos;
	function once(callback) {
	  var called = false;
	  return function () {
	    if (called) return;
	    called = true;
	    callback.apply(void 0, arguments);
	  };
	}
	var _require$codes = requireErrors$1().codes,
	  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
	  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
	function noop(err) {
	  // Rethrow the error if it exists to avoid swallowing it
	  if (err) throw err;
	}
	function isRequest(stream) {
	  return stream.setHeader && typeof stream.abort === 'function';
	}
	function destroyer(stream, reading, writing, callback) {
	  callback = once(callback);
	  var closed = false;
	  stream.on('close', function () {
	    closed = true;
	  });
	  if (eos === undefined) eos = requireEndOfStream();
	  eos(stream, {
	    readable: reading,
	    writable: writing
	  }, function (err) {
	    if (err) return callback(err);
	    closed = true;
	    callback();
	  });
	  var destroyed = false;
	  return function (err) {
	    if (closed) return;
	    if (destroyed) return;
	    destroyed = true; // request.destroy just do .end - .abort is what we want

	    if (isRequest(stream)) return stream.abort();
	    if (typeof stream.destroy === 'function') return stream.destroy();
	    callback(err || new ERR_STREAM_DESTROYED('pipe'));
	  };
	}
	function call(fn) {
	  fn();
	}
	function pipe(from, to) {
	  return from.pipe(to);
	}
	function popCallback(streams) {
	  if (!streams.length) return noop;
	  if (typeof streams[streams.length - 1] !== 'function') return noop;
	  return streams.pop();
	}
	function pipeline() {
	  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
	    streams[_key] = arguments[_key];
	  }
	  var callback = popCallback(streams);
	  if (Array.isArray(streams[0])) streams = streams[0];
	  if (streams.length < 2) {
	    throw new ERR_MISSING_ARGS('streams');
	  }
	  var error;
	  var destroys = streams.map(function (stream, i) {
	    var reading = i < streams.length - 1;
	    var writing = i > 0;
	    return destroyer(stream, reading, writing, function (err) {
	      if (!error) error = err;
	      if (err) destroys.forEach(call);
	      if (reading) return;
	      destroys.forEach(call);
	      callback(error);
	    });
	  });
	  return streams.reduce(pipe);
	}
	pipeline_1 = pipeline;
	return pipeline_1;
}

var hasRequiredReadable;

function requireReadable () {
	if (hasRequiredReadable) return readable.exports;
	hasRequiredReadable = 1;
	(function (module, exports) {
		var Stream = require$$1__default$1["default"];
		if (process.env.READABLE_STREAM === 'disable' && Stream) {
		  module.exports = Stream.Readable;
		  Object.assign(module.exports, Stream);
		  module.exports.Stream = Stream;
		} else {
		  exports = module.exports = require_stream_readable();
		  exports.Stream = Stream || exports;
		  exports.Readable = exports;
		  exports.Writable = require_stream_writable();
		  exports.Duplex = require_stream_duplex();
		  exports.Transform = require_stream_transform();
		  exports.PassThrough = require_stream_passthrough();
		  exports.finished = requireEndOfStream();
		  exports.pipeline = requirePipeline();
		}
} (readable, readable.exports));
	return readable.exports;
}

var keccak$1;
var hasRequiredKeccak$3;

function requireKeccak$3 () {
	if (hasRequiredKeccak$3) return keccak$1;
	hasRequiredKeccak$3 = 1;
	var _classCallCheck = classCallCheck.exports;
	var _createClass = createClass.exports;
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf.exports;
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	var _require = requireReadable(),
	  Transform = _require.Transform;
	keccak$1 = function (KeccakState) {
	  return /*#__PURE__*/function (_Transform) {

	    _inherits(Keccak, _Transform);
	    var _super = _createSuper(Keccak);
	    function Keccak(rate, capacity, delimitedSuffix, hashBitLength, options) {
	      var _this;
	      _classCallCheck(this, Keccak);
	      _this = _super.call(this, options);
	      _this._rate = rate;
	      _this._capacity = capacity;
	      _this._delimitedSuffix = delimitedSuffix;
	      _this._hashBitLength = hashBitLength;
	      _this._options = options;
	      _this._state = new KeccakState();
	      _this._state.initialize(rate, capacity);
	      _this._finalized = false;
	      return _this;
	    }
	    _createClass(Keccak, [{
	      key: "_transform",
	      value: function _transform(chunk, encoding, callback) {
	        var error = null;
	        try {
	          this.update(chunk, encoding);
	        } catch (err) {
	          error = err;
	        }
	        callback(error);
	      }
	    }, {
	      key: "_flush",
	      value: function _flush(callback) {
	        var error = null;
	        try {
	          this.push(this.digest());
	        } catch (err) {
	          error = err;
	        }
	        callback(error);
	      }
	    }, {
	      key: "update",
	      value: function update(data, encoding) {
	        if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');
	        if (this._finalized) throw new Error('Digest already called');
	        if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);
	        this._state.absorb(data);
	        return this;
	      }
	    }, {
	      key: "digest",
	      value: function digest(encoding) {
	        if (this._finalized) throw new Error('Digest already called');
	        this._finalized = true;
	        if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix);
	        var digest = this._state.squeeze(this._hashBitLength / 8);
	        if (encoding !== undefined) digest = digest.toString(encoding);
	        this._resetState();
	        return digest;
	      }

	      // remove result from memory
	    }, {
	      key: "_resetState",
	      value: function _resetState() {
	        this._state.initialize(this._rate, this._capacity);
	        return this;
	      }

	      // because sometimes we need hash right now and little later
	    }, {
	      key: "_clone",
	      value: function _clone() {
	        var clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);
	        this._state.copy(clone._state);
	        clone._finalized = this._finalized;
	        return clone;
	      }
	    }]);
	    return Keccak;
	  }(Transform);
	};
	return keccak$1;
}

var shake;
var hasRequiredShake;

function requireShake () {
	if (hasRequiredShake) return shake;
	hasRequiredShake = 1;
	var _classCallCheck = classCallCheck.exports;
	var _createClass = createClass.exports;
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf.exports;
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	var _require = requireReadable(),
	  Transform = _require.Transform;
	shake = function (KeccakState) {
	  return /*#__PURE__*/function (_Transform) {

	    _inherits(Shake, _Transform);
	    var _super = _createSuper(Shake);
	    function Shake(rate, capacity, delimitedSuffix, options) {
	      var _this;
	      _classCallCheck(this, Shake);
	      _this = _super.call(this, options);
	      _this._rate = rate;
	      _this._capacity = capacity;
	      _this._delimitedSuffix = delimitedSuffix;
	      _this._options = options;
	      _this._state = new KeccakState();
	      _this._state.initialize(rate, capacity);
	      _this._finalized = false;
	      return _this;
	    }
	    _createClass(Shake, [{
	      key: "_transform",
	      value: function _transform(chunk, encoding, callback) {
	        var error = null;
	        try {
	          this.update(chunk, encoding);
	        } catch (err) {
	          error = err;
	        }
	        callback(error);
	      }
	    }, {
	      key: "_flush",
	      value: function _flush() {}
	    }, {
	      key: "_read",
	      value: function _read(size) {
	        this.push(this.squeeze(size));
	      }
	    }, {
	      key: "update",
	      value: function update(data, encoding) {
	        if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');
	        if (this._finalized) throw new Error('Squeeze already called');
	        if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);
	        this._state.absorb(data);
	        return this;
	      }
	    }, {
	      key: "squeeze",
	      value: function squeeze(dataByteLength, encoding) {
	        if (!this._finalized) {
	          this._finalized = true;
	          this._state.absorbLastFewBits(this._delimitedSuffix);
	        }
	        var data = this._state.squeeze(dataByteLength);
	        if (encoding !== undefined) data = data.toString(encoding);
	        return data;
	      }
	    }, {
	      key: "_resetState",
	      value: function _resetState() {
	        this._state.initialize(this._rate, this._capacity);
	        return this;
	      }
	    }, {
	      key: "_clone",
	      value: function _clone() {
	        var clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options);
	        this._state.copy(clone._state);
	        clone._finalized = this._finalized;
	        return clone;
	      }
	    }]);
	    return Shake;
	  }(Transform);
	};
	return shake;
}

var api;
var hasRequiredApi;

function requireApi () {
	if (hasRequiredApi) return api;
	hasRequiredApi = 1;
	var createKeccak = requireKeccak$3();
	var createShake = requireShake();
	api = function (KeccakState) {
	  var Keccak = createKeccak(KeccakState);
	  var Shake = createShake(KeccakState);
	  return function (algorithm, options) {
	    var hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm;
	    switch (hash) {
	      case 'keccak224':
	        return new Keccak(1152, 448, null, 224, options);
	      case 'keccak256':
	        return new Keccak(1088, 512, null, 256, options);
	      case 'keccak384':
	        return new Keccak(832, 768, null, 384, options);
	      case 'keccak512':
	        return new Keccak(576, 1024, null, 512, options);
	      case 'sha3-224':
	        return new Keccak(1152, 448, 0x06, 224, options);
	      case 'sha3-256':
	        return new Keccak(1088, 512, 0x06, 256, options);
	      case 'sha3-384':
	        return new Keccak(832, 768, 0x06, 384, options);
	      case 'sha3-512':
	        return new Keccak(576, 1024, 0x06, 512, options);
	      case 'shake128':
	        return new Shake(1344, 256, 0x1f, options);
	      case 'shake256':
	        return new Shake(1088, 512, 0x1f, options);
	      default:
	        throw new Error('Invald algorithm: ' + algorithm);
	    }
	  };
	};
	return api;
}

function commonjsRequire(path) {
	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}

var nodeGypBuild;
var hasRequiredNodeGypBuild;

function requireNodeGypBuild () {
	if (hasRequiredNodeGypBuild) return nodeGypBuild;
	hasRequiredNodeGypBuild = 1;
	var fs = require$$1__default$2["default"];
	var path = require$$1__default$3["default"];
	var os = require$$2__default$1["default"];

	// Workaround to fix webpack's build warnings: 'the request of a dependency is an expression'
	var runtimeRequire = typeof __webpack_require__ === 'function' ? __non_webpack_require__ : commonjsRequire; // eslint-disable-line

	var vars = process.config && process.config.variables || {};
	var prebuildsOnly = !!process.env.PREBUILDS_ONLY;
	var abi = process.versions.modules; // TODO: support old node where this is undef
	var runtime = isElectron() ? 'electron' : isNwjs() ? 'node-webkit' : 'node';
	var arch = process.env.npm_config_arch || os.arch();
	var platform = process.env.npm_config_platform || os.platform();
	var libc = process.env.LIBC || (isAlpine(platform) ? 'musl' : 'glibc');
	var armv = process.env.ARM_VERSION || (arch === 'arm64' ? '8' : vars.arm_version) || '';
	var uv = (process.versions.uv || '').split('.')[0];
	nodeGypBuild = load;
	function load(dir) {
	  return runtimeRequire(load.path(dir));
	}
	load.path = function (dir) {
	  dir = path.resolve(dir || '.');
	  try {
	    var name = runtimeRequire(path.join(dir, 'package.json')).name.toUpperCase().replace(/-/g, '_');
	    if (process.env[name + '_PREBUILD']) dir = process.env[name + '_PREBUILD'];
	  } catch (err) {}
	  if (!prebuildsOnly) {
	    var release = getFirst(path.join(dir, 'build/Release'), matchBuild);
	    if (release) return release;
	    var debug = getFirst(path.join(dir, 'build/Debug'), matchBuild);
	    if (debug) return debug;
	  }
	  var prebuild = resolve(dir);
	  if (prebuild) return prebuild;
	  var nearby = resolve(path.dirname(process.execPath));
	  if (nearby) return nearby;
	  var target = ['platform=' + platform, 'arch=' + arch, 'runtime=' + runtime, 'abi=' + abi, 'uv=' + uv, armv ? 'armv=' + armv : '', 'libc=' + libc, 'node=' + process.versions.node, process.versions.electron ? 'electron=' + process.versions.electron : '', typeof __webpack_require__ === 'function' ? 'webpack=true' : '' // eslint-disable-line
	  ].filter(Boolean).join(' ');
	  throw new Error('No native build was found for ' + target + '\n    loaded from: ' + dir + '\n');
	  function resolve(dir) {
	    // Find matching "prebuilds/<platform>-<arch>" directory
	    var tuples = readdirSync(path.join(dir, 'prebuilds')).map(parseTuple);
	    var tuple = tuples.filter(matchTuple(platform, arch)).sort(compareTuples)[0];
	    if (!tuple) return;

	    // Find most specific flavor first
	    var prebuilds = path.join(dir, 'prebuilds', tuple.name);
	    var parsed = readdirSync(prebuilds).map(parseTags);
	    var candidates = parsed.filter(matchTags(runtime, abi));
	    var winner = candidates.sort(compareTags(runtime))[0];
	    if (winner) return path.join(prebuilds, winner.file);
	  }
	};
	function readdirSync(dir) {
	  try {
	    return fs.readdirSync(dir);
	  } catch (err) {
	    return [];
	  }
	}
	function getFirst(dir, filter) {
	  var files = readdirSync(dir).filter(filter);
	  return files[0] && path.join(dir, files[0]);
	}
	function matchBuild(name) {
	  return /\.node$/.test(name);
	}
	function parseTuple(name) {
	  // Example: darwin-x64+arm64
	  var arr = name.split('-');
	  if (arr.length !== 2) return;
	  var platform = arr[0];
	  var architectures = arr[1].split('+');
	  if (!platform) return;
	  if (!architectures.length) return;
	  if (!architectures.every(Boolean)) return;
	  return {
	    name: name,
	    platform: platform,
	    architectures: architectures
	  };
	}
	function matchTuple(platform, arch) {
	  return function (tuple) {
	    if (tuple == null) return false;
	    if (tuple.platform !== platform) return false;
	    return tuple.architectures.includes(arch);
	  };
	}
	function compareTuples(a, b) {
	  // Prefer single-arch prebuilds over multi-arch
	  return a.architectures.length - b.architectures.length;
	}
	function parseTags(file) {
	  var arr = file.split('.');
	  var extension = arr.pop();
	  var tags = {
	    file: file,
	    specificity: 0
	  };
	  if (extension !== 'node') return;
	  for (var i = 0; i < arr.length; i++) {
	    var tag = arr[i];
	    if (tag === 'node' || tag === 'electron' || tag === 'node-webkit') {
	      tags.runtime = tag;
	    } else if (tag === 'napi') {
	      tags.napi = true;
	    } else if (tag.slice(0, 3) === 'abi') {
	      tags.abi = tag.slice(3);
	    } else if (tag.slice(0, 2) === 'uv') {
	      tags.uv = tag.slice(2);
	    } else if (tag.slice(0, 4) === 'armv') {
	      tags.armv = tag.slice(4);
	    } else if (tag === 'glibc' || tag === 'musl') {
	      tags.libc = tag;
	    } else {
	      continue;
	    }
	    tags.specificity++;
	  }
	  return tags;
	}
	function matchTags(runtime, abi) {
	  return function (tags) {
	    if (tags == null) return false;
	    if (tags.runtime !== runtime && !runtimeAgnostic(tags)) return false;
	    if (tags.abi !== abi && !tags.napi) return false;
	    if (tags.uv && tags.uv !== uv) return false;
	    if (tags.armv && tags.armv !== armv) return false;
	    if (tags.libc && tags.libc !== libc) return false;
	    return true;
	  };
	}
	function runtimeAgnostic(tags) {
	  return tags.runtime === 'node' && tags.napi;
	}
	function compareTags(runtime) {
	  // Precedence: non-agnostic runtime, abi over napi, then by specificity.
	  return function (a, b) {
	    if (a.runtime !== b.runtime) {
	      return a.runtime === runtime ? -1 : 1;
	    } else if (a.abi !== b.abi) {
	      return a.abi ? -1 : 1;
	    } else if (a.specificity !== b.specificity) {
	      return a.specificity > b.specificity ? -1 : 1;
	    } else {
	      return 0;
	    }
	  };
	}
	function isNwjs() {
	  return !!(process.versions && process.versions.nw);
	}
	function isElectron() {
	  if (process.versions && process.versions.electron) return true;
	  if (process.env.ELECTRON_RUN_AS_NODE) return true;
	  return typeof window !== 'undefined' && window.process && window.process.type === 'renderer';
	}
	function isAlpine(platform) {
	  return platform === 'linux' && fs.existsSync('/etc/alpine-release');
	}

	// Exposed for unit tests
	// TODO: move to lib
	load.parseTags = parseTags;
	load.matchTags = matchTags;
	load.compareTags = compareTags;
	load.parseTuple = parseTuple;
	load.matchTuple = matchTuple;
	load.compareTuples = compareTuples;
	return nodeGypBuild;
}

var bindings$1;
var hasRequiredBindings$1;

function requireBindings$1 () {
	if (hasRequiredBindings$1) return bindings$1;
	hasRequiredBindings$1 = 1;
	bindings$1 = requireApi()(requireNodeGypBuild()(__dirname));
	return bindings$1;
}

var keccakStateUnroll = {};

var hasRequiredKeccakStateUnroll;

function requireKeccakStateUnroll () {
	if (hasRequiredKeccakStateUnroll) return keccakStateUnroll;
	hasRequiredKeccakStateUnroll = 1;
	var P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
	keccakStateUnroll.p1600 = function (s) {
	  for (var round = 0; round < 24; ++round) {
	    // theta
	    var lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
	    var hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
	    var lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
	    var hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
	    var lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
	    var hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
	    var lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
	    var hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
	    var lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
	    var hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
	    var lo = lo4 ^ (lo1 << 1 | hi1 >>> 31);
	    var hi = hi4 ^ (hi1 << 1 | lo1 >>> 31);
	    var t1slo0 = s[0] ^ lo;
	    var t1shi0 = s[1] ^ hi;
	    var t1slo5 = s[10] ^ lo;
	    var t1shi5 = s[11] ^ hi;
	    var t1slo10 = s[20] ^ lo;
	    var t1shi10 = s[21] ^ hi;
	    var t1slo15 = s[30] ^ lo;
	    var t1shi15 = s[31] ^ hi;
	    var t1slo20 = s[40] ^ lo;
	    var t1shi20 = s[41] ^ hi;
	    lo = lo0 ^ (lo2 << 1 | hi2 >>> 31);
	    hi = hi0 ^ (hi2 << 1 | lo2 >>> 31);
	    var t1slo1 = s[2] ^ lo;
	    var t1shi1 = s[3] ^ hi;
	    var t1slo6 = s[12] ^ lo;
	    var t1shi6 = s[13] ^ hi;
	    var t1slo11 = s[22] ^ lo;
	    var t1shi11 = s[23] ^ hi;
	    var t1slo16 = s[32] ^ lo;
	    var t1shi16 = s[33] ^ hi;
	    var t1slo21 = s[42] ^ lo;
	    var t1shi21 = s[43] ^ hi;
	    lo = lo1 ^ (lo3 << 1 | hi3 >>> 31);
	    hi = hi1 ^ (hi3 << 1 | lo3 >>> 31);
	    var t1slo2 = s[4] ^ lo;
	    var t1shi2 = s[5] ^ hi;
	    var t1slo7 = s[14] ^ lo;
	    var t1shi7 = s[15] ^ hi;
	    var t1slo12 = s[24] ^ lo;
	    var t1shi12 = s[25] ^ hi;
	    var t1slo17 = s[34] ^ lo;
	    var t1shi17 = s[35] ^ hi;
	    var t1slo22 = s[44] ^ lo;
	    var t1shi22 = s[45] ^ hi;
	    lo = lo2 ^ (lo4 << 1 | hi4 >>> 31);
	    hi = hi2 ^ (hi4 << 1 | lo4 >>> 31);
	    var t1slo3 = s[6] ^ lo;
	    var t1shi3 = s[7] ^ hi;
	    var t1slo8 = s[16] ^ lo;
	    var t1shi8 = s[17] ^ hi;
	    var t1slo13 = s[26] ^ lo;
	    var t1shi13 = s[27] ^ hi;
	    var t1slo18 = s[36] ^ lo;
	    var t1shi18 = s[37] ^ hi;
	    var t1slo23 = s[46] ^ lo;
	    var t1shi23 = s[47] ^ hi;
	    lo = lo3 ^ (lo0 << 1 | hi0 >>> 31);
	    hi = hi3 ^ (hi0 << 1 | lo0 >>> 31);
	    var t1slo4 = s[8] ^ lo;
	    var t1shi4 = s[9] ^ hi;
	    var t1slo9 = s[18] ^ lo;
	    var t1shi9 = s[19] ^ hi;
	    var t1slo14 = s[28] ^ lo;
	    var t1shi14 = s[29] ^ hi;
	    var t1slo19 = s[38] ^ lo;
	    var t1shi19 = s[39] ^ hi;
	    var t1slo24 = s[48] ^ lo;
	    var t1shi24 = s[49] ^ hi;

	    // rho & pi
	    var t2slo0 = t1slo0;
	    var t2shi0 = t1shi0;
	    var t2slo16 = t1shi5 << 4 | t1slo5 >>> 28;
	    var t2shi16 = t1slo5 << 4 | t1shi5 >>> 28;
	    var t2slo7 = t1slo10 << 3 | t1shi10 >>> 29;
	    var t2shi7 = t1shi10 << 3 | t1slo10 >>> 29;
	    var t2slo23 = t1shi15 << 9 | t1slo15 >>> 23;
	    var t2shi23 = t1slo15 << 9 | t1shi15 >>> 23;
	    var t2slo14 = t1slo20 << 18 | t1shi20 >>> 14;
	    var t2shi14 = t1shi20 << 18 | t1slo20 >>> 14;
	    var t2slo10 = t1slo1 << 1 | t1shi1 >>> 31;
	    var t2shi10 = t1shi1 << 1 | t1slo1 >>> 31;
	    var t2slo1 = t1shi6 << 12 | t1slo6 >>> 20;
	    var t2shi1 = t1slo6 << 12 | t1shi6 >>> 20;
	    var t2slo17 = t1slo11 << 10 | t1shi11 >>> 22;
	    var t2shi17 = t1shi11 << 10 | t1slo11 >>> 22;
	    var t2slo8 = t1shi16 << 13 | t1slo16 >>> 19;
	    var t2shi8 = t1slo16 << 13 | t1shi16 >>> 19;
	    var t2slo24 = t1slo21 << 2 | t1shi21 >>> 30;
	    var t2shi24 = t1shi21 << 2 | t1slo21 >>> 30;
	    var t2slo20 = t1shi2 << 30 | t1slo2 >>> 2;
	    var t2shi20 = t1slo2 << 30 | t1shi2 >>> 2;
	    var t2slo11 = t1slo7 << 6 | t1shi7 >>> 26;
	    var t2shi11 = t1shi7 << 6 | t1slo7 >>> 26;
	    var t2slo2 = t1shi12 << 11 | t1slo12 >>> 21;
	    var t2shi2 = t1slo12 << 11 | t1shi12 >>> 21;
	    var t2slo18 = t1slo17 << 15 | t1shi17 >>> 17;
	    var t2shi18 = t1shi17 << 15 | t1slo17 >>> 17;
	    var t2slo9 = t1shi22 << 29 | t1slo22 >>> 3;
	    var t2shi9 = t1slo22 << 29 | t1shi22 >>> 3;
	    var t2slo5 = t1slo3 << 28 | t1shi3 >>> 4;
	    var t2shi5 = t1shi3 << 28 | t1slo3 >>> 4;
	    var t2slo21 = t1shi8 << 23 | t1slo8 >>> 9;
	    var t2shi21 = t1slo8 << 23 | t1shi8 >>> 9;
	    var t2slo12 = t1slo13 << 25 | t1shi13 >>> 7;
	    var t2shi12 = t1shi13 << 25 | t1slo13 >>> 7;
	    var t2slo3 = t1slo18 << 21 | t1shi18 >>> 11;
	    var t2shi3 = t1shi18 << 21 | t1slo18 >>> 11;
	    var t2slo19 = t1shi23 << 24 | t1slo23 >>> 8;
	    var t2shi19 = t1slo23 << 24 | t1shi23 >>> 8;
	    var t2slo15 = t1slo4 << 27 | t1shi4 >>> 5;
	    var t2shi15 = t1shi4 << 27 | t1slo4 >>> 5;
	    var t2slo6 = t1slo9 << 20 | t1shi9 >>> 12;
	    var t2shi6 = t1shi9 << 20 | t1slo9 >>> 12;
	    var t2slo22 = t1shi14 << 7 | t1slo14 >>> 25;
	    var t2shi22 = t1slo14 << 7 | t1shi14 >>> 25;
	    var t2slo13 = t1slo19 << 8 | t1shi19 >>> 24;
	    var t2shi13 = t1shi19 << 8 | t1slo19 >>> 24;
	    var t2slo4 = t1slo24 << 14 | t1shi24 >>> 18;
	    var t2shi4 = t1shi24 << 14 | t1slo24 >>> 18;

	    // chi
	    s[0] = t2slo0 ^ ~t2slo1 & t2slo2;
	    s[1] = t2shi0 ^ ~t2shi1 & t2shi2;
	    s[10] = t2slo5 ^ ~t2slo6 & t2slo7;
	    s[11] = t2shi5 ^ ~t2shi6 & t2shi7;
	    s[20] = t2slo10 ^ ~t2slo11 & t2slo12;
	    s[21] = t2shi10 ^ ~t2shi11 & t2shi12;
	    s[30] = t2slo15 ^ ~t2slo16 & t2slo17;
	    s[31] = t2shi15 ^ ~t2shi16 & t2shi17;
	    s[40] = t2slo20 ^ ~t2slo21 & t2slo22;
	    s[41] = t2shi20 ^ ~t2shi21 & t2shi22;
	    s[2] = t2slo1 ^ ~t2slo2 & t2slo3;
	    s[3] = t2shi1 ^ ~t2shi2 & t2shi3;
	    s[12] = t2slo6 ^ ~t2slo7 & t2slo8;
	    s[13] = t2shi6 ^ ~t2shi7 & t2shi8;
	    s[22] = t2slo11 ^ ~t2slo12 & t2slo13;
	    s[23] = t2shi11 ^ ~t2shi12 & t2shi13;
	    s[32] = t2slo16 ^ ~t2slo17 & t2slo18;
	    s[33] = t2shi16 ^ ~t2shi17 & t2shi18;
	    s[42] = t2slo21 ^ ~t2slo22 & t2slo23;
	    s[43] = t2shi21 ^ ~t2shi22 & t2shi23;
	    s[4] = t2slo2 ^ ~t2slo3 & t2slo4;
	    s[5] = t2shi2 ^ ~t2shi3 & t2shi4;
	    s[14] = t2slo7 ^ ~t2slo8 & t2slo9;
	    s[15] = t2shi7 ^ ~t2shi8 & t2shi9;
	    s[24] = t2slo12 ^ ~t2slo13 & t2slo14;
	    s[25] = t2shi12 ^ ~t2shi13 & t2shi14;
	    s[34] = t2slo17 ^ ~t2slo18 & t2slo19;
	    s[35] = t2shi17 ^ ~t2shi18 & t2shi19;
	    s[44] = t2slo22 ^ ~t2slo23 & t2slo24;
	    s[45] = t2shi22 ^ ~t2shi23 & t2shi24;
	    s[6] = t2slo3 ^ ~t2slo4 & t2slo0;
	    s[7] = t2shi3 ^ ~t2shi4 & t2shi0;
	    s[16] = t2slo8 ^ ~t2slo9 & t2slo5;
	    s[17] = t2shi8 ^ ~t2shi9 & t2shi5;
	    s[26] = t2slo13 ^ ~t2slo14 & t2slo10;
	    s[27] = t2shi13 ^ ~t2shi14 & t2shi10;
	    s[36] = t2slo18 ^ ~t2slo19 & t2slo15;
	    s[37] = t2shi18 ^ ~t2shi19 & t2shi15;
	    s[46] = t2slo23 ^ ~t2slo24 & t2slo20;
	    s[47] = t2shi23 ^ ~t2shi24 & t2shi20;
	    s[8] = t2slo4 ^ ~t2slo0 & t2slo1;
	    s[9] = t2shi4 ^ ~t2shi0 & t2shi1;
	    s[18] = t2slo9 ^ ~t2slo5 & t2slo6;
	    s[19] = t2shi9 ^ ~t2shi5 & t2shi6;
	    s[28] = t2slo14 ^ ~t2slo10 & t2slo11;
	    s[29] = t2shi14 ^ ~t2shi10 & t2shi11;
	    s[38] = t2slo19 ^ ~t2slo15 & t2slo16;
	    s[39] = t2shi19 ^ ~t2shi15 & t2shi16;
	    s[48] = t2slo24 ^ ~t2slo20 & t2slo21;
	    s[49] = t2shi24 ^ ~t2shi20 & t2shi21;

	    // iota
	    s[0] ^= P1600_ROUND_CONSTANTS[round * 2];
	    s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1];
	  }
	};
	return keccakStateUnroll;
}

var keccak;
var hasRequiredKeccak$2;

function requireKeccak$2 () {
	if (hasRequiredKeccak$2) return keccak;
	hasRequiredKeccak$2 = 1;
	var keccakState = requireKeccakStateUnroll();
	function Keccak() {
	  // much faster than `new Array(50)`
	  this.state = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	  this.blockSize = null;
	  this.count = 0;
	  this.squeezing = false;
	}
	Keccak.prototype.initialize = function (rate, capacity) {
	  for (var i = 0; i < 50; ++i) {
	    this.state[i] = 0;
	  }
	  this.blockSize = rate / 8;
	  this.count = 0;
	  this.squeezing = false;
	};
	Keccak.prototype.absorb = function (data) {
	  for (var i = 0; i < data.length; ++i) {
	    this.state[~~(this.count / 4)] ^= data[i] << 8 * (this.count % 4);
	    this.count += 1;
	    if (this.count === this.blockSize) {
	      keccakState.p1600(this.state);
	      this.count = 0;
	    }
	  }
	};
	Keccak.prototype.absorbLastFewBits = function (bits) {
	  this.state[~~(this.count / 4)] ^= bits << 8 * (this.count % 4);
	  if ((bits & 0x80) !== 0 && this.count === this.blockSize - 1) keccakState.p1600(this.state);
	  this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << 8 * ((this.blockSize - 1) % 4);
	  keccakState.p1600(this.state);
	  this.count = 0;
	  this.squeezing = true;
	};
	Keccak.prototype.squeeze = function (length) {
	  if (!this.squeezing) this.absorbLastFewBits(0x01);
	  var output = Buffer.alloc(length);
	  for (var i = 0; i < length; ++i) {
	    output[i] = this.state[~~(this.count / 4)] >>> 8 * (this.count % 4) & 0xff;
	    this.count += 1;
	    if (this.count === this.blockSize) {
	      keccakState.p1600(this.state);
	      this.count = 0;
	    }
	  }
	  return output;
	};
	Keccak.prototype.copy = function (dest) {
	  for (var i = 0; i < 50; ++i) {
	    dest.state[i] = this.state[i];
	  }
	  dest.blockSize = this.blockSize;
	  dest.count = this.count;
	  dest.squeezing = this.squeezing;
	};
	keccak = Keccak;
	return keccak;
}

var js;
var hasRequiredJs;

function requireJs () {
	if (hasRequiredJs) return js;
	hasRequiredJs = 1;
	js = requireApi()(requireKeccak$2());
	return js;
}

var hasRequiredKeccak$1;

function requireKeccak$1 () {
	if (hasRequiredKeccak$1) return keccak$2.exports;
	hasRequiredKeccak$1 = 1;
	(function (module) {
		try {
		  module.exports = requireBindings$1();
		} catch (err) {
		  module.exports = requireJs();
		}
} (keccak$2));
	return keccak$2.exports;
}

var hasRequiredKeccak;

function requireKeccak () {
	if (hasRequiredKeccak) return keccak$3;
	hasRequiredKeccak = 1;

	Object.defineProperty(keccak$3, "__esModule", {
	  value: true
	});
	var hash_utils_1 = requireHashUtils();
	var createKeccakHash = requireKeccak$1();
	keccak$3.keccak224 = hash_utils_1.createHashFunction(function () {
	  return createKeccakHash("keccak224");
	});
	keccak$3.keccak256 = hash_utils_1.createHashFunction(function () {
	  return createKeccakHash("keccak256");
	});
	keccak$3.keccak384 = hash_utils_1.createHashFunction(function () {
	  return createKeccakHash("keccak384");
	});
	keccak$3.keccak512 = hash_utils_1.createHashFunction(function () {
	  return createKeccakHash("keccak512");
	});
	return keccak$3;
}

var secp256k1$2 = {};

var secp256k1$1 = {exports: {}};

var lib$3;
var hasRequiredLib$3;

function requireLib$3 () {
	if (hasRequiredLib$3) return lib$3;
	hasRequiredLib$3 = 1;
	function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
	function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
	function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
	var errors = {
	  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',
	  TWEAK_ADD: 'The tweak was out of range or the resulted private key is invalid',
	  TWEAK_MUL: 'The tweak was out of range or equal to zero',
	  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',
	  SECKEY_INVALID: 'Private Key is invalid',
	  PUBKEY_PARSE: 'Public Key could not be parsed',
	  PUBKEY_SERIALIZE: 'Public Key serialization error',
	  PUBKEY_COMBINE: 'The sum of the public keys is not valid',
	  SIG_PARSE: 'Signature could not be parsed',
	  SIGN: 'The nonce generation function failed, or the private key was invalid',
	  RECOVER: 'Public key could not be recover',
	  ECDH: 'Scalar was invalid (zero or overflow)'
	};
	function assert(cond, msg) {
	  if (!cond) throw new Error(msg);
	}
	function isUint8Array(name, value, length) {
	  assert(value instanceof Uint8Array, "Expected ".concat(name, " to be an Uint8Array"));
	  if (length !== undefined) {
	    if (Array.isArray(length)) {
	      var numbers = length.join(', ');
	      var msg = "Expected ".concat(name, " to be an Uint8Array with length [").concat(numbers, "]");
	      assert(length.includes(value.length), msg);
	    } else {
	      var _msg = "Expected ".concat(name, " to be an Uint8Array with length ").concat(length);
	      assert(value.length === length, _msg);
	    }
	  }
	}
	function isCompressed(value) {
	  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean');
	}
	function getAssertedOutput() {
	  var output = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (len) {
	    return new Uint8Array(len);
	  };
	  var length = arguments.length > 1 ? arguments[1] : undefined;
	  if (typeof output === 'function') output = output(length);
	  isUint8Array('output', output, length);
	  return output;
	}
	function toTypeString(value) {
	  return Object.prototype.toString.call(value).slice(8, -1);
	}
	lib$3 = function (secp256k1) {
	  return {
	    contextRandomize: function contextRandomize(seed) {
	      assert(seed === null || seed instanceof Uint8Array, 'Expected seed to be an Uint8Array or null');
	      if (seed !== null) isUint8Array('seed', seed, 32);
	      switch (secp256k1.contextRandomize(seed)) {
	        case 1:
	          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW);
	      }
	    },
	    privateKeyVerify: function privateKeyVerify(seckey) {
	      isUint8Array('private key', seckey, 32);
	      return secp256k1.privateKeyVerify(seckey) === 0;
	    },
	    privateKeyNegate: function privateKeyNegate(seckey) {
	      isUint8Array('private key', seckey, 32);
	      switch (secp256k1.privateKeyNegate(seckey)) {
	        case 0:
	          return seckey;
	        case 1:
	          throw new Error(errors.IMPOSSIBLE_CASE);
	      }
	    },
	    privateKeyTweakAdd: function privateKeyTweakAdd(seckey, tweak) {
	      isUint8Array('private key', seckey, 32);
	      isUint8Array('tweak', tweak, 32);
	      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
	        case 0:
	          return seckey;
	        case 1:
	          throw new Error(errors.TWEAK_ADD);
	      }
	    },
	    privateKeyTweakMul: function privateKeyTweakMul(seckey, tweak) {
	      isUint8Array('private key', seckey, 32);
	      isUint8Array('tweak', tweak, 32);
	      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
	        case 0:
	          return seckey;
	        case 1:
	          throw new Error(errors.TWEAK_MUL);
	      }
	    },
	    publicKeyVerify: function publicKeyVerify(pubkey) {
	      isUint8Array('public key', pubkey, [33, 65]);
	      return secp256k1.publicKeyVerify(pubkey) === 0;
	    },
	    publicKeyCreate: function publicKeyCreate(seckey) {
	      var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	      var output = arguments.length > 2 ? arguments[2] : undefined;
	      isUint8Array('private key', seckey, 32);
	      isCompressed(compressed);
	      output = getAssertedOutput(output, compressed ? 33 : 65);
	      switch (secp256k1.publicKeyCreate(output, seckey)) {
	        case 0:
	          return output;
	        case 1:
	          throw new Error(errors.SECKEY_INVALID);
	        case 2:
	          throw new Error(errors.PUBKEY_SERIALIZE);
	      }
	    },
	    publicKeyConvert: function publicKeyConvert(pubkey) {
	      var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	      var output = arguments.length > 2 ? arguments[2] : undefined;
	      isUint8Array('public key', pubkey, [33, 65]);
	      isCompressed(compressed);
	      output = getAssertedOutput(output, compressed ? 33 : 65);
	      switch (secp256k1.publicKeyConvert(output, pubkey)) {
	        case 0:
	          return output;
	        case 1:
	          throw new Error(errors.PUBKEY_PARSE);
	        case 2:
	          throw new Error(errors.PUBKEY_SERIALIZE);
	      }
	    },
	    publicKeyNegate: function publicKeyNegate(pubkey) {
	      var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	      var output = arguments.length > 2 ? arguments[2] : undefined;
	      isUint8Array('public key', pubkey, [33, 65]);
	      isCompressed(compressed);
	      output = getAssertedOutput(output, compressed ? 33 : 65);
	      switch (secp256k1.publicKeyNegate(output, pubkey)) {
	        case 0:
	          return output;
	        case 1:
	          throw new Error(errors.PUBKEY_PARSE);
	        case 2:
	          throw new Error(errors.IMPOSSIBLE_CASE);
	        case 3:
	          throw new Error(errors.PUBKEY_SERIALIZE);
	      }
	    },
	    publicKeyCombine: function publicKeyCombine(pubkeys) {
	      var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	      var output = arguments.length > 2 ? arguments[2] : undefined;
	      assert(Array.isArray(pubkeys), 'Expected public keys to be an Array');
	      assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items');
	      var _iterator = _createForOfIteratorHelper(pubkeys),
	        _step;
	      try {
	        for (_iterator.s(); !(_step = _iterator.n()).done;) {
	          var pubkey = _step.value;
	          isUint8Array('public key', pubkey, [33, 65]);
	        }
	      } catch (err) {
	        _iterator.e(err);
	      } finally {
	        _iterator.f();
	      }
	      isCompressed(compressed);
	      output = getAssertedOutput(output, compressed ? 33 : 65);
	      switch (secp256k1.publicKeyCombine(output, pubkeys)) {
	        case 0:
	          return output;
	        case 1:
	          throw new Error(errors.PUBKEY_PARSE);
	        case 2:
	          throw new Error(errors.PUBKEY_COMBINE);
	        case 3:
	          throw new Error(errors.PUBKEY_SERIALIZE);
	      }
	    },
	    publicKeyTweakAdd: function publicKeyTweakAdd(pubkey, tweak) {
	      var compressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	      var output = arguments.length > 3 ? arguments[3] : undefined;
	      isUint8Array('public key', pubkey, [33, 65]);
	      isUint8Array('tweak', tweak, 32);
	      isCompressed(compressed);
	      output = getAssertedOutput(output, compressed ? 33 : 65);
	      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
	        case 0:
	          return output;
	        case 1:
	          throw new Error(errors.PUBKEY_PARSE);
	        case 2:
	          throw new Error(errors.TWEAK_ADD);
	      }
	    },
	    publicKeyTweakMul: function publicKeyTweakMul(pubkey, tweak) {
	      var compressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	      var output = arguments.length > 3 ? arguments[3] : undefined;
	      isUint8Array('public key', pubkey, [33, 65]);
	      isUint8Array('tweak', tweak, 32);
	      isCompressed(compressed);
	      output = getAssertedOutput(output, compressed ? 33 : 65);
	      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
	        case 0:
	          return output;
	        case 1:
	          throw new Error(errors.PUBKEY_PARSE);
	        case 2:
	          throw new Error(errors.TWEAK_MUL);
	      }
	    },
	    signatureNormalize: function signatureNormalize(sig) {
	      isUint8Array('signature', sig, 64);
	      switch (secp256k1.signatureNormalize(sig)) {
	        case 0:
	          return sig;
	        case 1:
	          throw new Error(errors.SIG_PARSE);
	      }
	    },
	    signatureExport: function signatureExport(sig, output) {
	      isUint8Array('signature', sig, 64);
	      output = getAssertedOutput(output, 72);
	      var obj = {
	        output: output,
	        outputlen: 72
	      };
	      switch (secp256k1.signatureExport(obj, sig)) {
	        case 0:
	          return output.slice(0, obj.outputlen);
	        case 1:
	          throw new Error(errors.SIG_PARSE);
	        case 2:
	          throw new Error(errors.IMPOSSIBLE_CASE);
	      }
	    },
	    signatureImport: function signatureImport(sig, output) {
	      isUint8Array('signature', sig);
	      output = getAssertedOutput(output, 64);
	      switch (secp256k1.signatureImport(output, sig)) {
	        case 0:
	          return output;
	        case 1:
	          throw new Error(errors.SIG_PARSE);
	        case 2:
	          throw new Error(errors.IMPOSSIBLE_CASE);
	      }
	    },
	    ecdsaSign: function ecdsaSign(msg32, seckey) {
	      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	      var output = arguments.length > 3 ? arguments[3] : undefined;
	      isUint8Array('message', msg32, 32);
	      isUint8Array('private key', seckey, 32);
	      assert(toTypeString(options) === 'Object', 'Expected options to be an Object');
	      if (options.data !== undefined) isUint8Array('options.data', options.data);
	      if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function');
	      output = getAssertedOutput(output, 64);
	      var obj = {
	        signature: output,
	        recid: null
	      };
	      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
	        case 0:
	          return obj;
	        case 1:
	          throw new Error(errors.SIGN);
	        case 2:
	          throw new Error(errors.IMPOSSIBLE_CASE);
	      }
	    },
	    ecdsaVerify: function ecdsaVerify(sig, msg32, pubkey) {
	      isUint8Array('signature', sig, 64);
	      isUint8Array('message', msg32, 32);
	      isUint8Array('public key', pubkey, [33, 65]);
	      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
	        case 0:
	          return true;
	        case 3:
	          return false;
	        case 1:
	          throw new Error(errors.SIG_PARSE);
	        case 2:
	          throw new Error(errors.PUBKEY_PARSE);
	      }
	    },
	    ecdsaRecover: function ecdsaRecover(sig, recid, msg32) {
	      var compressed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
	      var output = arguments.length > 4 ? arguments[4] : undefined;
	      isUint8Array('signature', sig, 64);
	      assert(toTypeString(recid) === 'Number' && recid >= 0 && recid <= 3, 'Expected recovery id to be a Number within interval [0, 3]');
	      isUint8Array('message', msg32, 32);
	      isCompressed(compressed);
	      output = getAssertedOutput(output, compressed ? 33 : 65);
	      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
	        case 0:
	          return output;
	        case 1:
	          throw new Error(errors.SIG_PARSE);
	        case 2:
	          throw new Error(errors.RECOVER);
	        case 3:
	          throw new Error(errors.IMPOSSIBLE_CASE);
	      }
	    },
	    ecdh: function ecdh(pubkey, seckey) {
	      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	      var output = arguments.length > 3 ? arguments[3] : undefined;
	      isUint8Array('public key', pubkey, [33, 65]);
	      isUint8Array('private key', seckey, 32);
	      assert(toTypeString(options) === 'Object', 'Expected options to be an Object');
	      if (options.data !== undefined) isUint8Array('options.data', options.data);
	      if (options.hashfn !== undefined) {
	        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function');
	        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32);
	        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32);
	        isUint8Array('output', output);
	      } else {
	        output = getAssertedOutput(output, 32);
	      }
	      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
	        case 0:
	          return output;
	        case 1:
	          throw new Error(errors.PUBKEY_PARSE);
	        case 2:
	          throw new Error(errors.ECDH);
	      }
	    }
	  };
	};
	return lib$3;
}

var bindings;
var hasRequiredBindings;

function requireBindings () {
	if (hasRequiredBindings) return bindings;
	hasRequiredBindings = 1;
	var addon = requireNodeGypBuild()(__dirname);
	bindings = requireLib$3()(new addon.Secp256k1());
	return bindings;
}

var elliptic$2 = {};

var name = "elliptic";
var version = "6.5.4";
var description = "EC cryptography";
var main = "lib/elliptic.js";
var files = [
	"lib"
];
var scripts = {
	lint: "eslint lib test",
	"lint:fix": "npm run lint -- --fix",
	unit: "istanbul test _mocha --reporter=spec test/index.js",
	test: "npm run lint && npm run unit",
	version: "grunt dist && git add dist/"
};
var repository = {
	type: "git",
	url: "git@github.com:indutny/elliptic"
};
var keywords = [
	"EC",
	"Elliptic",
	"curve",
	"Cryptography"
];
var author = "Fedor Indutny <fedor@indutny.com>";
var license = "MIT";
var bugs = {
	url: "https://github.com/indutny/elliptic/issues"
};
var homepage = "https://github.com/indutny/elliptic";
var devDependencies = {
	brfs: "^2.0.2",
	coveralls: "^3.1.0",
	eslint: "^7.6.0",
	grunt: "^1.2.1",
	"grunt-browserify": "^5.3.0",
	"grunt-cli": "^1.3.2",
	"grunt-contrib-connect": "^3.0.0",
	"grunt-contrib-copy": "^1.0.0",
	"grunt-contrib-uglify": "^5.0.0",
	"grunt-mocha-istanbul": "^5.0.2",
	"grunt-saucelabs": "^9.0.1",
	istanbul: "^0.4.5",
	mocha: "^8.0.1"
};
var dependencies = {
	"bn.js": "^4.11.9",
	brorand: "^1.1.0",
	"hash.js": "^1.0.0",
	"hmac-drbg": "^1.0.1",
	inherits: "^2.0.4",
	"minimalistic-assert": "^1.0.1",
	"minimalistic-crypto-utils": "^1.0.1"
};
var require$$0 = {
	name: name,
	version: version,
	description: description,
	main: main,
	files: files,
	scripts: scripts,
	repository: repository,
	keywords: keywords,
	author: author,
	license: license,
	bugs: bugs,
	homepage: homepage,
	devDependencies: devDependencies,
	dependencies: dependencies
};

var utils$2 = {};

var bn$1 = {exports: {}};

var hasRequiredBn$1;

function requireBn$1 () {
	if (hasRequiredBn$1) return bn$1.exports;
	hasRequiredBn$1 = 1;
	(function (module) {
		(function (module, exports) {

		  // Utils
		  function assert(val, msg) {
		    if (!val) throw new Error(msg || 'Assertion failed');
		  }

		  // Could use `inherits` module, but don't want to move from single file
		  // architecture yet.
		  function inherits(ctor, superCtor) {
		    ctor.super_ = superCtor;
		    var TempCtor = function TempCtor() {};
		    TempCtor.prototype = superCtor.prototype;
		    ctor.prototype = new TempCtor();
		    ctor.prototype.constructor = ctor;
		  }

		  // BN

		  function BN(number, base, endian) {
		    if (BN.isBN(number)) {
		      return number;
		    }
		    this.negative = 0;
		    this.words = null;
		    this.length = 0;

		    // Reduction context
		    this.red = null;
		    if (number !== null) {
		      if (base === 'le' || base === 'be') {
		        endian = base;
		        base = 10;
		      }
		      this._init(number || 0, base || 10, endian || 'be');
		    }
		  }
		  if (typeof module === 'object') {
		    module.exports = BN;
		  } else {
		    exports.BN = BN;
		  }
		  BN.BN = BN;
		  BN.wordSize = 26;
		  var Buffer;
		  try {
		    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
		      Buffer = window.Buffer;
		    } else {
		      Buffer = require('buffer').Buffer;
		    }
		  } catch (e) {}
		  BN.isBN = function isBN(num) {
		    if (num instanceof BN) {
		      return true;
		    }
		    return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
		  };
		  BN.max = function max(left, right) {
		    if (left.cmp(right) > 0) return left;
		    return right;
		  };
		  BN.min = function min(left, right) {
		    if (left.cmp(right) < 0) return left;
		    return right;
		  };
		  BN.prototype._init = function init(number, base, endian) {
		    if (typeof number === 'number') {
		      return this._initNumber(number, base, endian);
		    }
		    if (typeof number === 'object') {
		      return this._initArray(number, base, endian);
		    }
		    if (base === 'hex') {
		      base = 16;
		    }
		    assert(base === (base | 0) && base >= 2 && base <= 36);
		    number = number.toString().replace(/\s+/g, '');
		    var start = 0;
		    if (number[0] === '-') {
		      start++;
		      this.negative = 1;
		    }
		    if (start < number.length) {
		      if (base === 16) {
		        this._parseHex(number, start, endian);
		      } else {
		        this._parseBase(number, base, start);
		        if (endian === 'le') {
		          this._initArray(this.toArray(), base, endian);
		        }
		      }
		    }
		  };
		  BN.prototype._initNumber = function _initNumber(number, base, endian) {
		    if (number < 0) {
		      this.negative = 1;
		      number = -number;
		    }
		    if (number < 0x4000000) {
		      this.words = [number & 0x3ffffff];
		      this.length = 1;
		    } else if (number < 0x10000000000000) {
		      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
		      this.length = 2;
		    } else {
		      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
		      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
		      this.length = 3;
		    }
		    if (endian !== 'le') return;

		    // Reverse the bytes
		    this._initArray(this.toArray(), base, endian);
		  };
		  BN.prototype._initArray = function _initArray(number, base, endian) {
		    // Perhaps a Uint8Array
		    assert(typeof number.length === 'number');
		    if (number.length <= 0) {
		      this.words = [0];
		      this.length = 1;
		      return this;
		    }
		    this.length = Math.ceil(number.length / 3);
		    this.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      this.words[i] = 0;
		    }
		    var j, w;
		    var off = 0;
		    if (endian === 'be') {
		      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
		        w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
		        this.words[j] |= w << off & 0x3ffffff;
		        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
		        off += 24;
		        if (off >= 26) {
		          off -= 26;
		          j++;
		        }
		      }
		    } else if (endian === 'le') {
		      for (i = 0, j = 0; i < number.length; i += 3) {
		        w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
		        this.words[j] |= w << off & 0x3ffffff;
		        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
		        off += 24;
		        if (off >= 26) {
		          off -= 26;
		          j++;
		        }
		      }
		    }
		    return this.strip();
		  };
		  function parseHex4Bits(string, index) {
		    var c = string.charCodeAt(index);
		    // 'A' - 'F'
		    if (c >= 65 && c <= 70) {
		      return c - 55;
		      // 'a' - 'f'
		    } else if (c >= 97 && c <= 102) {
		      return c - 87;
		      // '0' - '9'
		    } else {
		      return c - 48 & 0xf;
		    }
		  }
		  function parseHexByte(string, lowerBound, index) {
		    var r = parseHex4Bits(string, index);
		    if (index - 1 >= lowerBound) {
		      r |= parseHex4Bits(string, index - 1) << 4;
		    }
		    return r;
		  }
		  BN.prototype._parseHex = function _parseHex(number, start, endian) {
		    // Create possibly bigger array to ensure that it fits the number
		    this.length = Math.ceil((number.length - start) / 6);
		    this.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      this.words[i] = 0;
		    }

		    // 24-bits chunks
		    var off = 0;
		    var j = 0;
		    var w;
		    if (endian === 'be') {
		      for (i = number.length - 1; i >= start; i -= 2) {
		        w = parseHexByte(number, start, i) << off;
		        this.words[j] |= w & 0x3ffffff;
		        if (off >= 18) {
		          off -= 18;
		          j += 1;
		          this.words[j] |= w >>> 26;
		        } else {
		          off += 8;
		        }
		      }
		    } else {
		      var parseLength = number.length - start;
		      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
		        w = parseHexByte(number, start, i) << off;
		        this.words[j] |= w & 0x3ffffff;
		        if (off >= 18) {
		          off -= 18;
		          j += 1;
		          this.words[j] |= w >>> 26;
		        } else {
		          off += 8;
		        }
		      }
		    }
		    this.strip();
		  };
		  function parseBase(str, start, end, mul) {
		    var r = 0;
		    var len = Math.min(str.length, end);
		    for (var i = start; i < len; i++) {
		      var c = str.charCodeAt(i) - 48;
		      r *= mul;

		      // 'a'
		      if (c >= 49) {
		        r += c - 49 + 0xa;

		        // 'A'
		      } else if (c >= 17) {
		        r += c - 17 + 0xa;

		        // '0' - '9'
		      } else {
		        r += c;
		      }
		    }
		    return r;
		  }
		  BN.prototype._parseBase = function _parseBase(number, base, start) {
		    // Initialize as zero
		    this.words = [0];
		    this.length = 1;

		    // Find length of limb in base
		    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
		      limbLen++;
		    }
		    limbLen--;
		    limbPow = limbPow / base | 0;
		    var total = number.length - start;
		    var mod = total % limbLen;
		    var end = Math.min(total, total - mod) + start;
		    var word = 0;
		    for (var i = start; i < end; i += limbLen) {
		      word = parseBase(number, i, i + limbLen, base);
		      this.imuln(limbPow);
		      if (this.words[0] + word < 0x4000000) {
		        this.words[0] += word;
		      } else {
		        this._iaddn(word);
		      }
		    }
		    if (mod !== 0) {
		      var pow = 1;
		      word = parseBase(number, i, number.length, base);
		      for (i = 0; i < mod; i++) {
		        pow *= base;
		      }
		      this.imuln(pow);
		      if (this.words[0] + word < 0x4000000) {
		        this.words[0] += word;
		      } else {
		        this._iaddn(word);
		      }
		    }
		    this.strip();
		  };
		  BN.prototype.copy = function copy(dest) {
		    dest.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      dest.words[i] = this.words[i];
		    }
		    dest.length = this.length;
		    dest.negative = this.negative;
		    dest.red = this.red;
		  };
		  BN.prototype.clone = function clone() {
		    var r = new BN(null);
		    this.copy(r);
		    return r;
		  };
		  BN.prototype._expand = function _expand(size) {
		    while (this.length < size) {
		      this.words[this.length++] = 0;
		    }
		    return this;
		  };

		  // Remove leading `0` from `this`
		  BN.prototype.strip = function strip() {
		    while (this.length > 1 && this.words[this.length - 1] === 0) {
		      this.length--;
		    }
		    return this._normSign();
		  };
		  BN.prototype._normSign = function _normSign() {
		    // -0 = 0
		    if (this.length === 1 && this.words[0] === 0) {
		      this.negative = 0;
		    }
		    return this;
		  };
		  BN.prototype.inspect = function inspect() {
		    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
		  };

		  /*
		   var zeros = [];
		  var groupSizes = [];
		  var groupBases = [];
		   var s = '';
		  var i = -1;
		  while (++i < BN.wordSize) {
		    zeros[i] = s;
		    s += '0';
		  }
		  groupSizes[0] = 0;
		  groupSizes[1] = 0;
		  groupBases[0] = 0;
		  groupBases[1] = 0;
		  var base = 2 - 1;
		  while (++base < 36 + 1) {
		    var groupSize = 0;
		    var groupBase = 1;
		    while (groupBase < (1 << BN.wordSize) / base) {
		      groupBase *= base;
		      groupSize += 1;
		    }
		    groupSizes[base] = groupSize;
		    groupBases[base] = groupBase;
		  }
		   */

		  var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
		  var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
		  var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
		  BN.prototype.toString = function toString(base, padding) {
		    base = base || 10;
		    padding = padding | 0 || 1;
		    var out;
		    if (base === 16 || base === 'hex') {
		      out = '';
		      var off = 0;
		      var carry = 0;
		      for (var i = 0; i < this.length; i++) {
		        var w = this.words[i];
		        var word = ((w << off | carry) & 0xffffff).toString(16);
		        carry = w >>> 24 - off & 0xffffff;
		        if (carry !== 0 || i !== this.length - 1) {
		          out = zeros[6 - word.length] + word + out;
		        } else {
		          out = word + out;
		        }
		        off += 2;
		        if (off >= 26) {
		          off -= 26;
		          i--;
		        }
		      }
		      if (carry !== 0) {
		        out = carry.toString(16) + out;
		      }
		      while (out.length % padding !== 0) {
		        out = '0' + out;
		      }
		      if (this.negative !== 0) {
		        out = '-' + out;
		      }
		      return out;
		    }
		    if (base === (base | 0) && base >= 2 && base <= 36) {
		      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
		      var groupSize = groupSizes[base];
		      // var groupBase = Math.pow(base, groupSize);
		      var groupBase = groupBases[base];
		      out = '';
		      var c = this.clone();
		      c.negative = 0;
		      while (!c.isZero()) {
		        var r = c.modn(groupBase).toString(base);
		        c = c.idivn(groupBase);
		        if (!c.isZero()) {
		          out = zeros[groupSize - r.length] + r + out;
		        } else {
		          out = r + out;
		        }
		      }
		      if (this.isZero()) {
		        out = '0' + out;
		      }
		      while (out.length % padding !== 0) {
		        out = '0' + out;
		      }
		      if (this.negative !== 0) {
		        out = '-' + out;
		      }
		      return out;
		    }
		    assert(false, 'Base should be between 2 and 36');
		  };
		  BN.prototype.toNumber = function toNumber() {
		    var ret = this.words[0];
		    if (this.length === 2) {
		      ret += this.words[1] * 0x4000000;
		    } else if (this.length === 3 && this.words[2] === 0x01) {
		      // NOTE: at this stage it is known that the top bit is set
		      ret += 0x10000000000000 + this.words[1] * 0x4000000;
		    } else if (this.length > 2) {
		      assert(false, 'Number can only safely store up to 53 bits');
		    }
		    return this.negative !== 0 ? -ret : ret;
		  };
		  BN.prototype.toJSON = function toJSON() {
		    return this.toString(16);
		  };
		  BN.prototype.toBuffer = function toBuffer(endian, length) {
		    assert(typeof Buffer !== 'undefined');
		    return this.toArrayLike(Buffer, endian, length);
		  };
		  BN.prototype.toArray = function toArray(endian, length) {
		    return this.toArrayLike(Array, endian, length);
		  };
		  BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
		    var byteLength = this.byteLength();
		    var reqLength = length || Math.max(1, byteLength);
		    assert(byteLength <= reqLength, 'byte array longer than desired length');
		    assert(reqLength > 0, 'Requested array length <= 0');
		    this.strip();
		    var littleEndian = endian === 'le';
		    var res = new ArrayType(reqLength);
		    var b, i;
		    var q = this.clone();
		    if (!littleEndian) {
		      // Assume big-endian
		      for (i = 0; i < reqLength - byteLength; i++) {
		        res[i] = 0;
		      }
		      for (i = 0; !q.isZero(); i++) {
		        b = q.andln(0xff);
		        q.iushrn(8);
		        res[reqLength - i - 1] = b;
		      }
		    } else {
		      for (i = 0; !q.isZero(); i++) {
		        b = q.andln(0xff);
		        q.iushrn(8);
		        res[i] = b;
		      }
		      for (; i < reqLength; i++) {
		        res[i] = 0;
		      }
		    }
		    return res;
		  };
		  if (Math.clz32) {
		    BN.prototype._countBits = function _countBits(w) {
		      return 32 - Math.clz32(w);
		    };
		  } else {
		    BN.prototype._countBits = function _countBits(w) {
		      var t = w;
		      var r = 0;
		      if (t >= 0x1000) {
		        r += 13;
		        t >>>= 13;
		      }
		      if (t >= 0x40) {
		        r += 7;
		        t >>>= 7;
		      }
		      if (t >= 0x8) {
		        r += 4;
		        t >>>= 4;
		      }
		      if (t >= 0x02) {
		        r += 2;
		        t >>>= 2;
		      }
		      return r + t;
		    };
		  }
		  BN.prototype._zeroBits = function _zeroBits(w) {
		    // Short-cut
		    if (w === 0) return 26;
		    var t = w;
		    var r = 0;
		    if ((t & 0x1fff) === 0) {
		      r += 13;
		      t >>>= 13;
		    }
		    if ((t & 0x7f) === 0) {
		      r += 7;
		      t >>>= 7;
		    }
		    if ((t & 0xf) === 0) {
		      r += 4;
		      t >>>= 4;
		    }
		    if ((t & 0x3) === 0) {
		      r += 2;
		      t >>>= 2;
		    }
		    if ((t & 0x1) === 0) {
		      r++;
		    }
		    return r;
		  };

		  // Return number of used bits in a BN
		  BN.prototype.bitLength = function bitLength() {
		    var w = this.words[this.length - 1];
		    var hi = this._countBits(w);
		    return (this.length - 1) * 26 + hi;
		  };
		  function toBitArray(num) {
		    var w = new Array(num.bitLength());
		    for (var bit = 0; bit < w.length; bit++) {
		      var off = bit / 26 | 0;
		      var wbit = bit % 26;
		      w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
		    }
		    return w;
		  }

		  // Number of trailing zero bits
		  BN.prototype.zeroBits = function zeroBits() {
		    if (this.isZero()) return 0;
		    var r = 0;
		    for (var i = 0; i < this.length; i++) {
		      var b = this._zeroBits(this.words[i]);
		      r += b;
		      if (b !== 26) break;
		    }
		    return r;
		  };
		  BN.prototype.byteLength = function byteLength() {
		    return Math.ceil(this.bitLength() / 8);
		  };
		  BN.prototype.toTwos = function toTwos(width) {
		    if (this.negative !== 0) {
		      return this.abs().inotn(width).iaddn(1);
		    }
		    return this.clone();
		  };
		  BN.prototype.fromTwos = function fromTwos(width) {
		    if (this.testn(width - 1)) {
		      return this.notn(width).iaddn(1).ineg();
		    }
		    return this.clone();
		  };
		  BN.prototype.isNeg = function isNeg() {
		    return this.negative !== 0;
		  };

		  // Return negative clone of `this`
		  BN.prototype.neg = function neg() {
		    return this.clone().ineg();
		  };
		  BN.prototype.ineg = function ineg() {
		    if (!this.isZero()) {
		      this.negative ^= 1;
		    }
		    return this;
		  };

		  // Or `num` with `this` in-place
		  BN.prototype.iuor = function iuor(num) {
		    while (this.length < num.length) {
		      this.words[this.length++] = 0;
		    }
		    for (var i = 0; i < num.length; i++) {
		      this.words[i] = this.words[i] | num.words[i];
		    }
		    return this.strip();
		  };
		  BN.prototype.ior = function ior(num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuor(num);
		  };

		  // Or `num` with `this`
		  BN.prototype.or = function or(num) {
		    if (this.length > num.length) return this.clone().ior(num);
		    return num.clone().ior(this);
		  };
		  BN.prototype.uor = function uor(num) {
		    if (this.length > num.length) return this.clone().iuor(num);
		    return num.clone().iuor(this);
		  };

		  // And `num` with `this` in-place
		  BN.prototype.iuand = function iuand(num) {
		    // b = min-length(num, this)
		    var b;
		    if (this.length > num.length) {
		      b = num;
		    } else {
		      b = this;
		    }
		    for (var i = 0; i < b.length; i++) {
		      this.words[i] = this.words[i] & num.words[i];
		    }
		    this.length = b.length;
		    return this.strip();
		  };
		  BN.prototype.iand = function iand(num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuand(num);
		  };

		  // And `num` with `this`
		  BN.prototype.and = function and(num) {
		    if (this.length > num.length) return this.clone().iand(num);
		    return num.clone().iand(this);
		  };
		  BN.prototype.uand = function uand(num) {
		    if (this.length > num.length) return this.clone().iuand(num);
		    return num.clone().iuand(this);
		  };

		  // Xor `num` with `this` in-place
		  BN.prototype.iuxor = function iuxor(num) {
		    // a.length > b.length
		    var a;
		    var b;
		    if (this.length > num.length) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }
		    for (var i = 0; i < b.length; i++) {
		      this.words[i] = a.words[i] ^ b.words[i];
		    }
		    if (this !== a) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }
		    this.length = a.length;
		    return this.strip();
		  };
		  BN.prototype.ixor = function ixor(num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuxor(num);
		  };

		  // Xor `num` with `this`
		  BN.prototype.xor = function xor(num) {
		    if (this.length > num.length) return this.clone().ixor(num);
		    return num.clone().ixor(this);
		  };
		  BN.prototype.uxor = function uxor(num) {
		    if (this.length > num.length) return this.clone().iuxor(num);
		    return num.clone().iuxor(this);
		  };

		  // Not ``this`` with ``width`` bitwidth
		  BN.prototype.inotn = function inotn(width) {
		    assert(typeof width === 'number' && width >= 0);
		    var bytesNeeded = Math.ceil(width / 26) | 0;
		    var bitsLeft = width % 26;

		    // Extend the buffer with leading zeroes
		    this._expand(bytesNeeded);
		    if (bitsLeft > 0) {
		      bytesNeeded--;
		    }

		    // Handle complete words
		    for (var i = 0; i < bytesNeeded; i++) {
		      this.words[i] = ~this.words[i] & 0x3ffffff;
		    }

		    // Handle the residue
		    if (bitsLeft > 0) {
		      this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
		    }

		    // And remove leading zeroes
		    return this.strip();
		  };
		  BN.prototype.notn = function notn(width) {
		    return this.clone().inotn(width);
		  };

		  // Set `bit` of `this`
		  BN.prototype.setn = function setn(bit, val) {
		    assert(typeof bit === 'number' && bit >= 0);
		    var off = bit / 26 | 0;
		    var wbit = bit % 26;
		    this._expand(off + 1);
		    if (val) {
		      this.words[off] = this.words[off] | 1 << wbit;
		    } else {
		      this.words[off] = this.words[off] & ~(1 << wbit);
		    }
		    return this.strip();
		  };

		  // Add `num` to `this` in-place
		  BN.prototype.iadd = function iadd(num) {
		    var r;

		    // negative + positive
		    if (this.negative !== 0 && num.negative === 0) {
		      this.negative = 0;
		      r = this.isub(num);
		      this.negative ^= 1;
		      return this._normSign();

		      // positive + negative
		    } else if (this.negative === 0 && num.negative !== 0) {
		      num.negative = 0;
		      r = this.isub(num);
		      num.negative = 1;
		      return r._normSign();
		    }

		    // a.length > b.length
		    var a, b;
		    if (this.length > num.length) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }
		    var carry = 0;
		    for (var i = 0; i < b.length; i++) {
		      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
		      this.words[i] = r & 0x3ffffff;
		      carry = r >>> 26;
		    }
		    for (; carry !== 0 && i < a.length; i++) {
		      r = (a.words[i] | 0) + carry;
		      this.words[i] = r & 0x3ffffff;
		      carry = r >>> 26;
		    }
		    this.length = a.length;
		    if (carry !== 0) {
		      this.words[this.length] = carry;
		      this.length++;
		      // Copy the rest of the words
		    } else if (a !== this) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }
		    return this;
		  };

		  // Add `num` to `this`
		  BN.prototype.add = function add(num) {
		    var res;
		    if (num.negative !== 0 && this.negative === 0) {
		      num.negative = 0;
		      res = this.sub(num);
		      num.negative ^= 1;
		      return res;
		    } else if (num.negative === 0 && this.negative !== 0) {
		      this.negative = 0;
		      res = num.sub(this);
		      this.negative = 1;
		      return res;
		    }
		    if (this.length > num.length) return this.clone().iadd(num);
		    return num.clone().iadd(this);
		  };

		  // Subtract `num` from `this` in-place
		  BN.prototype.isub = function isub(num) {
		    // this - (-num) = this + num
		    if (num.negative !== 0) {
		      num.negative = 0;
		      var r = this.iadd(num);
		      num.negative = 1;
		      return r._normSign();

		      // -this - num = -(this + num)
		    } else if (this.negative !== 0) {
		      this.negative = 0;
		      this.iadd(num);
		      this.negative = 1;
		      return this._normSign();
		    }

		    // At this point both numbers are positive
		    var cmp = this.cmp(num);

		    // Optimization - zeroify
		    if (cmp === 0) {
		      this.negative = 0;
		      this.length = 1;
		      this.words[0] = 0;
		      return this;
		    }

		    // a > b
		    var a, b;
		    if (cmp > 0) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }
		    var carry = 0;
		    for (var i = 0; i < b.length; i++) {
		      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
		      carry = r >> 26;
		      this.words[i] = r & 0x3ffffff;
		    }
		    for (; carry !== 0 && i < a.length; i++) {
		      r = (a.words[i] | 0) + carry;
		      carry = r >> 26;
		      this.words[i] = r & 0x3ffffff;
		    }

		    // Copy rest of the words
		    if (carry === 0 && i < a.length && a !== this) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }
		    this.length = Math.max(this.length, i);
		    if (a !== this) {
		      this.negative = 1;
		    }
		    return this.strip();
		  };

		  // Subtract `num` from `this`
		  BN.prototype.sub = function sub(num) {
		    return this.clone().isub(num);
		  };
		  function smallMulTo(self, num, out) {
		    out.negative = num.negative ^ self.negative;
		    var len = self.length + num.length | 0;
		    out.length = len;
		    len = len - 1 | 0;

		    // Peel one iteration (compiler can't do it, because of code complexity)
		    var a = self.words[0] | 0;
		    var b = num.words[0] | 0;
		    var r = a * b;
		    var lo = r & 0x3ffffff;
		    var carry = r / 0x4000000 | 0;
		    out.words[0] = lo;
		    for (var k = 1; k < len; k++) {
		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		      // note that ncarry could be >= 0x3ffffff
		      var ncarry = carry >>> 26;
		      var rword = carry & 0x3ffffff;
		      var maxJ = Math.min(k, num.length - 1);
		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
		        var i = k - j | 0;
		        a = self.words[i] | 0;
		        b = num.words[j] | 0;
		        r = a * b + rword;
		        ncarry += r / 0x4000000 | 0;
		        rword = r & 0x3ffffff;
		      }
		      out.words[k] = rword | 0;
		      carry = ncarry | 0;
		    }
		    if (carry !== 0) {
		      out.words[k] = carry | 0;
		    } else {
		      out.length--;
		    }
		    return out.strip();
		  }

		  // TODO(indutny): it may be reasonable to omit it for users who don't need
		  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
		  // multiplication (like elliptic secp256k1).
		  var comb10MulTo = function comb10MulTo(self, num, out) {
		    var a = self.words;
		    var b = num.words;
		    var o = out.words;
		    var c = 0;
		    var lo;
		    var mid;
		    var hi;
		    var a0 = a[0] | 0;
		    var al0 = a0 & 0x1fff;
		    var ah0 = a0 >>> 13;
		    var a1 = a[1] | 0;
		    var al1 = a1 & 0x1fff;
		    var ah1 = a1 >>> 13;
		    var a2 = a[2] | 0;
		    var al2 = a2 & 0x1fff;
		    var ah2 = a2 >>> 13;
		    var a3 = a[3] | 0;
		    var al3 = a3 & 0x1fff;
		    var ah3 = a3 >>> 13;
		    var a4 = a[4] | 0;
		    var al4 = a4 & 0x1fff;
		    var ah4 = a4 >>> 13;
		    var a5 = a[5] | 0;
		    var al5 = a5 & 0x1fff;
		    var ah5 = a5 >>> 13;
		    var a6 = a[6] | 0;
		    var al6 = a6 & 0x1fff;
		    var ah6 = a6 >>> 13;
		    var a7 = a[7] | 0;
		    var al7 = a7 & 0x1fff;
		    var ah7 = a7 >>> 13;
		    var a8 = a[8] | 0;
		    var al8 = a8 & 0x1fff;
		    var ah8 = a8 >>> 13;
		    var a9 = a[9] | 0;
		    var al9 = a9 & 0x1fff;
		    var ah9 = a9 >>> 13;
		    var b0 = b[0] | 0;
		    var bl0 = b0 & 0x1fff;
		    var bh0 = b0 >>> 13;
		    var b1 = b[1] | 0;
		    var bl1 = b1 & 0x1fff;
		    var bh1 = b1 >>> 13;
		    var b2 = b[2] | 0;
		    var bl2 = b2 & 0x1fff;
		    var bh2 = b2 >>> 13;
		    var b3 = b[3] | 0;
		    var bl3 = b3 & 0x1fff;
		    var bh3 = b3 >>> 13;
		    var b4 = b[4] | 0;
		    var bl4 = b4 & 0x1fff;
		    var bh4 = b4 >>> 13;
		    var b5 = b[5] | 0;
		    var bl5 = b5 & 0x1fff;
		    var bh5 = b5 >>> 13;
		    var b6 = b[6] | 0;
		    var bl6 = b6 & 0x1fff;
		    var bh6 = b6 >>> 13;
		    var b7 = b[7] | 0;
		    var bl7 = b7 & 0x1fff;
		    var bh7 = b7 >>> 13;
		    var b8 = b[8] | 0;
		    var bl8 = b8 & 0x1fff;
		    var bh8 = b8 >>> 13;
		    var b9 = b[9] | 0;
		    var bl9 = b9 & 0x1fff;
		    var bh9 = b9 >>> 13;
		    out.negative = self.negative ^ num.negative;
		    out.length = 19;
		    /* k = 0 */
		    lo = Math.imul(al0, bl0);
		    mid = Math.imul(al0, bh0);
		    mid = mid + Math.imul(ah0, bl0) | 0;
		    hi = Math.imul(ah0, bh0);
		    var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
		    w0 &= 0x3ffffff;
		    /* k = 1 */
		    lo = Math.imul(al1, bl0);
		    mid = Math.imul(al1, bh0);
		    mid = mid + Math.imul(ah1, bl0) | 0;
		    hi = Math.imul(ah1, bh0);
		    lo = lo + Math.imul(al0, bl1) | 0;
		    mid = mid + Math.imul(al0, bh1) | 0;
		    mid = mid + Math.imul(ah0, bl1) | 0;
		    hi = hi + Math.imul(ah0, bh1) | 0;
		    var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
		    w1 &= 0x3ffffff;
		    /* k = 2 */
		    lo = Math.imul(al2, bl0);
		    mid = Math.imul(al2, bh0);
		    mid = mid + Math.imul(ah2, bl0) | 0;
		    hi = Math.imul(ah2, bh0);
		    lo = lo + Math.imul(al1, bl1) | 0;
		    mid = mid + Math.imul(al1, bh1) | 0;
		    mid = mid + Math.imul(ah1, bl1) | 0;
		    hi = hi + Math.imul(ah1, bh1) | 0;
		    lo = lo + Math.imul(al0, bl2) | 0;
		    mid = mid + Math.imul(al0, bh2) | 0;
		    mid = mid + Math.imul(ah0, bl2) | 0;
		    hi = hi + Math.imul(ah0, bh2) | 0;
		    var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
		    w2 &= 0x3ffffff;
		    /* k = 3 */
		    lo = Math.imul(al3, bl0);
		    mid = Math.imul(al3, bh0);
		    mid = mid + Math.imul(ah3, bl0) | 0;
		    hi = Math.imul(ah3, bh0);
		    lo = lo + Math.imul(al2, bl1) | 0;
		    mid = mid + Math.imul(al2, bh1) | 0;
		    mid = mid + Math.imul(ah2, bl1) | 0;
		    hi = hi + Math.imul(ah2, bh1) | 0;
		    lo = lo + Math.imul(al1, bl2) | 0;
		    mid = mid + Math.imul(al1, bh2) | 0;
		    mid = mid + Math.imul(ah1, bl2) | 0;
		    hi = hi + Math.imul(ah1, bh2) | 0;
		    lo = lo + Math.imul(al0, bl3) | 0;
		    mid = mid + Math.imul(al0, bh3) | 0;
		    mid = mid + Math.imul(ah0, bl3) | 0;
		    hi = hi + Math.imul(ah0, bh3) | 0;
		    var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
		    w3 &= 0x3ffffff;
		    /* k = 4 */
		    lo = Math.imul(al4, bl0);
		    mid = Math.imul(al4, bh0);
		    mid = mid + Math.imul(ah4, bl0) | 0;
		    hi = Math.imul(ah4, bh0);
		    lo = lo + Math.imul(al3, bl1) | 0;
		    mid = mid + Math.imul(al3, bh1) | 0;
		    mid = mid + Math.imul(ah3, bl1) | 0;
		    hi = hi + Math.imul(ah3, bh1) | 0;
		    lo = lo + Math.imul(al2, bl2) | 0;
		    mid = mid + Math.imul(al2, bh2) | 0;
		    mid = mid + Math.imul(ah2, bl2) | 0;
		    hi = hi + Math.imul(ah2, bh2) | 0;
		    lo = lo + Math.imul(al1, bl3) | 0;
		    mid = mid + Math.imul(al1, bh3) | 0;
		    mid = mid + Math.imul(ah1, bl3) | 0;
		    hi = hi + Math.imul(ah1, bh3) | 0;
		    lo = lo + Math.imul(al0, bl4) | 0;
		    mid = mid + Math.imul(al0, bh4) | 0;
		    mid = mid + Math.imul(ah0, bl4) | 0;
		    hi = hi + Math.imul(ah0, bh4) | 0;
		    var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
		    w4 &= 0x3ffffff;
		    /* k = 5 */
		    lo = Math.imul(al5, bl0);
		    mid = Math.imul(al5, bh0);
		    mid = mid + Math.imul(ah5, bl0) | 0;
		    hi = Math.imul(ah5, bh0);
		    lo = lo + Math.imul(al4, bl1) | 0;
		    mid = mid + Math.imul(al4, bh1) | 0;
		    mid = mid + Math.imul(ah4, bl1) | 0;
		    hi = hi + Math.imul(ah4, bh1) | 0;
		    lo = lo + Math.imul(al3, bl2) | 0;
		    mid = mid + Math.imul(al3, bh2) | 0;
		    mid = mid + Math.imul(ah3, bl2) | 0;
		    hi = hi + Math.imul(ah3, bh2) | 0;
		    lo = lo + Math.imul(al2, bl3) | 0;
		    mid = mid + Math.imul(al2, bh3) | 0;
		    mid = mid + Math.imul(ah2, bl3) | 0;
		    hi = hi + Math.imul(ah2, bh3) | 0;
		    lo = lo + Math.imul(al1, bl4) | 0;
		    mid = mid + Math.imul(al1, bh4) | 0;
		    mid = mid + Math.imul(ah1, bl4) | 0;
		    hi = hi + Math.imul(ah1, bh4) | 0;
		    lo = lo + Math.imul(al0, bl5) | 0;
		    mid = mid + Math.imul(al0, bh5) | 0;
		    mid = mid + Math.imul(ah0, bl5) | 0;
		    hi = hi + Math.imul(ah0, bh5) | 0;
		    var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
		    w5 &= 0x3ffffff;
		    /* k = 6 */
		    lo = Math.imul(al6, bl0);
		    mid = Math.imul(al6, bh0);
		    mid = mid + Math.imul(ah6, bl0) | 0;
		    hi = Math.imul(ah6, bh0);
		    lo = lo + Math.imul(al5, bl1) | 0;
		    mid = mid + Math.imul(al5, bh1) | 0;
		    mid = mid + Math.imul(ah5, bl1) | 0;
		    hi = hi + Math.imul(ah5, bh1) | 0;
		    lo = lo + Math.imul(al4, bl2) | 0;
		    mid = mid + Math.imul(al4, bh2) | 0;
		    mid = mid + Math.imul(ah4, bl2) | 0;
		    hi = hi + Math.imul(ah4, bh2) | 0;
		    lo = lo + Math.imul(al3, bl3) | 0;
		    mid = mid + Math.imul(al3, bh3) | 0;
		    mid = mid + Math.imul(ah3, bl3) | 0;
		    hi = hi + Math.imul(ah3, bh3) | 0;
		    lo = lo + Math.imul(al2, bl4) | 0;
		    mid = mid + Math.imul(al2, bh4) | 0;
		    mid = mid + Math.imul(ah2, bl4) | 0;
		    hi = hi + Math.imul(ah2, bh4) | 0;
		    lo = lo + Math.imul(al1, bl5) | 0;
		    mid = mid + Math.imul(al1, bh5) | 0;
		    mid = mid + Math.imul(ah1, bl5) | 0;
		    hi = hi + Math.imul(ah1, bh5) | 0;
		    lo = lo + Math.imul(al0, bl6) | 0;
		    mid = mid + Math.imul(al0, bh6) | 0;
		    mid = mid + Math.imul(ah0, bl6) | 0;
		    hi = hi + Math.imul(ah0, bh6) | 0;
		    var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
		    w6 &= 0x3ffffff;
		    /* k = 7 */
		    lo = Math.imul(al7, bl0);
		    mid = Math.imul(al7, bh0);
		    mid = mid + Math.imul(ah7, bl0) | 0;
		    hi = Math.imul(ah7, bh0);
		    lo = lo + Math.imul(al6, bl1) | 0;
		    mid = mid + Math.imul(al6, bh1) | 0;
		    mid = mid + Math.imul(ah6, bl1) | 0;
		    hi = hi + Math.imul(ah6, bh1) | 0;
		    lo = lo + Math.imul(al5, bl2) | 0;
		    mid = mid + Math.imul(al5, bh2) | 0;
		    mid = mid + Math.imul(ah5, bl2) | 0;
		    hi = hi + Math.imul(ah5, bh2) | 0;
		    lo = lo + Math.imul(al4, bl3) | 0;
		    mid = mid + Math.imul(al4, bh3) | 0;
		    mid = mid + Math.imul(ah4, bl3) | 0;
		    hi = hi + Math.imul(ah4, bh3) | 0;
		    lo = lo + Math.imul(al3, bl4) | 0;
		    mid = mid + Math.imul(al3, bh4) | 0;
		    mid = mid + Math.imul(ah3, bl4) | 0;
		    hi = hi + Math.imul(ah3, bh4) | 0;
		    lo = lo + Math.imul(al2, bl5) | 0;
		    mid = mid + Math.imul(al2, bh5) | 0;
		    mid = mid + Math.imul(ah2, bl5) | 0;
		    hi = hi + Math.imul(ah2, bh5) | 0;
		    lo = lo + Math.imul(al1, bl6) | 0;
		    mid = mid + Math.imul(al1, bh6) | 0;
		    mid = mid + Math.imul(ah1, bl6) | 0;
		    hi = hi + Math.imul(ah1, bh6) | 0;
		    lo = lo + Math.imul(al0, bl7) | 0;
		    mid = mid + Math.imul(al0, bh7) | 0;
		    mid = mid + Math.imul(ah0, bl7) | 0;
		    hi = hi + Math.imul(ah0, bh7) | 0;
		    var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
		    w7 &= 0x3ffffff;
		    /* k = 8 */
		    lo = Math.imul(al8, bl0);
		    mid = Math.imul(al8, bh0);
		    mid = mid + Math.imul(ah8, bl0) | 0;
		    hi = Math.imul(ah8, bh0);
		    lo = lo + Math.imul(al7, bl1) | 0;
		    mid = mid + Math.imul(al7, bh1) | 0;
		    mid = mid + Math.imul(ah7, bl1) | 0;
		    hi = hi + Math.imul(ah7, bh1) | 0;
		    lo = lo + Math.imul(al6, bl2) | 0;
		    mid = mid + Math.imul(al6, bh2) | 0;
		    mid = mid + Math.imul(ah6, bl2) | 0;
		    hi = hi + Math.imul(ah6, bh2) | 0;
		    lo = lo + Math.imul(al5, bl3) | 0;
		    mid = mid + Math.imul(al5, bh3) | 0;
		    mid = mid + Math.imul(ah5, bl3) | 0;
		    hi = hi + Math.imul(ah5, bh3) | 0;
		    lo = lo + Math.imul(al4, bl4) | 0;
		    mid = mid + Math.imul(al4, bh4) | 0;
		    mid = mid + Math.imul(ah4, bl4) | 0;
		    hi = hi + Math.imul(ah4, bh4) | 0;
		    lo = lo + Math.imul(al3, bl5) | 0;
		    mid = mid + Math.imul(al3, bh5) | 0;
		    mid = mid + Math.imul(ah3, bl5) | 0;
		    hi = hi + Math.imul(ah3, bh5) | 0;
		    lo = lo + Math.imul(al2, bl6) | 0;
		    mid = mid + Math.imul(al2, bh6) | 0;
		    mid = mid + Math.imul(ah2, bl6) | 0;
		    hi = hi + Math.imul(ah2, bh6) | 0;
		    lo = lo + Math.imul(al1, bl7) | 0;
		    mid = mid + Math.imul(al1, bh7) | 0;
		    mid = mid + Math.imul(ah1, bl7) | 0;
		    hi = hi + Math.imul(ah1, bh7) | 0;
		    lo = lo + Math.imul(al0, bl8) | 0;
		    mid = mid + Math.imul(al0, bh8) | 0;
		    mid = mid + Math.imul(ah0, bl8) | 0;
		    hi = hi + Math.imul(ah0, bh8) | 0;
		    var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
		    w8 &= 0x3ffffff;
		    /* k = 9 */
		    lo = Math.imul(al9, bl0);
		    mid = Math.imul(al9, bh0);
		    mid = mid + Math.imul(ah9, bl0) | 0;
		    hi = Math.imul(ah9, bh0);
		    lo = lo + Math.imul(al8, bl1) | 0;
		    mid = mid + Math.imul(al8, bh1) | 0;
		    mid = mid + Math.imul(ah8, bl1) | 0;
		    hi = hi + Math.imul(ah8, bh1) | 0;
		    lo = lo + Math.imul(al7, bl2) | 0;
		    mid = mid + Math.imul(al7, bh2) | 0;
		    mid = mid + Math.imul(ah7, bl2) | 0;
		    hi = hi + Math.imul(ah7, bh2) | 0;
		    lo = lo + Math.imul(al6, bl3) | 0;
		    mid = mid + Math.imul(al6, bh3) | 0;
		    mid = mid + Math.imul(ah6, bl3) | 0;
		    hi = hi + Math.imul(ah6, bh3) | 0;
		    lo = lo + Math.imul(al5, bl4) | 0;
		    mid = mid + Math.imul(al5, bh4) | 0;
		    mid = mid + Math.imul(ah5, bl4) | 0;
		    hi = hi + Math.imul(ah5, bh4) | 0;
		    lo = lo + Math.imul(al4, bl5) | 0;
		    mid = mid + Math.imul(al4, bh5) | 0;
		    mid = mid + Math.imul(ah4, bl5) | 0;
		    hi = hi + Math.imul(ah4, bh5) | 0;
		    lo = lo + Math.imul(al3, bl6) | 0;
		    mid = mid + Math.imul(al3, bh6) | 0;
		    mid = mid + Math.imul(ah3, bl6) | 0;
		    hi = hi + Math.imul(ah3, bh6) | 0;
		    lo = lo + Math.imul(al2, bl7) | 0;
		    mid = mid + Math.imul(al2, bh7) | 0;
		    mid = mid + Math.imul(ah2, bl7) | 0;
		    hi = hi + Math.imul(ah2, bh7) | 0;
		    lo = lo + Math.imul(al1, bl8) | 0;
		    mid = mid + Math.imul(al1, bh8) | 0;
		    mid = mid + Math.imul(ah1, bl8) | 0;
		    hi = hi + Math.imul(ah1, bh8) | 0;
		    lo = lo + Math.imul(al0, bl9) | 0;
		    mid = mid + Math.imul(al0, bh9) | 0;
		    mid = mid + Math.imul(ah0, bl9) | 0;
		    hi = hi + Math.imul(ah0, bh9) | 0;
		    var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
		    w9 &= 0x3ffffff;
		    /* k = 10 */
		    lo = Math.imul(al9, bl1);
		    mid = Math.imul(al9, bh1);
		    mid = mid + Math.imul(ah9, bl1) | 0;
		    hi = Math.imul(ah9, bh1);
		    lo = lo + Math.imul(al8, bl2) | 0;
		    mid = mid + Math.imul(al8, bh2) | 0;
		    mid = mid + Math.imul(ah8, bl2) | 0;
		    hi = hi + Math.imul(ah8, bh2) | 0;
		    lo = lo + Math.imul(al7, bl3) | 0;
		    mid = mid + Math.imul(al7, bh3) | 0;
		    mid = mid + Math.imul(ah7, bl3) | 0;
		    hi = hi + Math.imul(ah7, bh3) | 0;
		    lo = lo + Math.imul(al6, bl4) | 0;
		    mid = mid + Math.imul(al6, bh4) | 0;
		    mid = mid + Math.imul(ah6, bl4) | 0;
		    hi = hi + Math.imul(ah6, bh4) | 0;
		    lo = lo + Math.imul(al5, bl5) | 0;
		    mid = mid + Math.imul(al5, bh5) | 0;
		    mid = mid + Math.imul(ah5, bl5) | 0;
		    hi = hi + Math.imul(ah5, bh5) | 0;
		    lo = lo + Math.imul(al4, bl6) | 0;
		    mid = mid + Math.imul(al4, bh6) | 0;
		    mid = mid + Math.imul(ah4, bl6) | 0;
		    hi = hi + Math.imul(ah4, bh6) | 0;
		    lo = lo + Math.imul(al3, bl7) | 0;
		    mid = mid + Math.imul(al3, bh7) | 0;
		    mid = mid + Math.imul(ah3, bl7) | 0;
		    hi = hi + Math.imul(ah3, bh7) | 0;
		    lo = lo + Math.imul(al2, bl8) | 0;
		    mid = mid + Math.imul(al2, bh8) | 0;
		    mid = mid + Math.imul(ah2, bl8) | 0;
		    hi = hi + Math.imul(ah2, bh8) | 0;
		    lo = lo + Math.imul(al1, bl9) | 0;
		    mid = mid + Math.imul(al1, bh9) | 0;
		    mid = mid + Math.imul(ah1, bl9) | 0;
		    hi = hi + Math.imul(ah1, bh9) | 0;
		    var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
		    w10 &= 0x3ffffff;
		    /* k = 11 */
		    lo = Math.imul(al9, bl2);
		    mid = Math.imul(al9, bh2);
		    mid = mid + Math.imul(ah9, bl2) | 0;
		    hi = Math.imul(ah9, bh2);
		    lo = lo + Math.imul(al8, bl3) | 0;
		    mid = mid + Math.imul(al8, bh3) | 0;
		    mid = mid + Math.imul(ah8, bl3) | 0;
		    hi = hi + Math.imul(ah8, bh3) | 0;
		    lo = lo + Math.imul(al7, bl4) | 0;
		    mid = mid + Math.imul(al7, bh4) | 0;
		    mid = mid + Math.imul(ah7, bl4) | 0;
		    hi = hi + Math.imul(ah7, bh4) | 0;
		    lo = lo + Math.imul(al6, bl5) | 0;
		    mid = mid + Math.imul(al6, bh5) | 0;
		    mid = mid + Math.imul(ah6, bl5) | 0;
		    hi = hi + Math.imul(ah6, bh5) | 0;
		    lo = lo + Math.imul(al5, bl6) | 0;
		    mid = mid + Math.imul(al5, bh6) | 0;
		    mid = mid + Math.imul(ah5, bl6) | 0;
		    hi = hi + Math.imul(ah5, bh6) | 0;
		    lo = lo + Math.imul(al4, bl7) | 0;
		    mid = mid + Math.imul(al4, bh7) | 0;
		    mid = mid + Math.imul(ah4, bl7) | 0;
		    hi = hi + Math.imul(ah4, bh7) | 0;
		    lo = lo + Math.imul(al3, bl8) | 0;
		    mid = mid + Math.imul(al3, bh8) | 0;
		    mid = mid + Math.imul(ah3, bl8) | 0;
		    hi = hi + Math.imul(ah3, bh8) | 0;
		    lo = lo + Math.imul(al2, bl9) | 0;
		    mid = mid + Math.imul(al2, bh9) | 0;
		    mid = mid + Math.imul(ah2, bl9) | 0;
		    hi = hi + Math.imul(ah2, bh9) | 0;
		    var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
		    w11 &= 0x3ffffff;
		    /* k = 12 */
		    lo = Math.imul(al9, bl3);
		    mid = Math.imul(al9, bh3);
		    mid = mid + Math.imul(ah9, bl3) | 0;
		    hi = Math.imul(ah9, bh3);
		    lo = lo + Math.imul(al8, bl4) | 0;
		    mid = mid + Math.imul(al8, bh4) | 0;
		    mid = mid + Math.imul(ah8, bl4) | 0;
		    hi = hi + Math.imul(ah8, bh4) | 0;
		    lo = lo + Math.imul(al7, bl5) | 0;
		    mid = mid + Math.imul(al7, bh5) | 0;
		    mid = mid + Math.imul(ah7, bl5) | 0;
		    hi = hi + Math.imul(ah7, bh5) | 0;
		    lo = lo + Math.imul(al6, bl6) | 0;
		    mid = mid + Math.imul(al6, bh6) | 0;
		    mid = mid + Math.imul(ah6, bl6) | 0;
		    hi = hi + Math.imul(ah6, bh6) | 0;
		    lo = lo + Math.imul(al5, bl7) | 0;
		    mid = mid + Math.imul(al5, bh7) | 0;
		    mid = mid + Math.imul(ah5, bl7) | 0;
		    hi = hi + Math.imul(ah5, bh7) | 0;
		    lo = lo + Math.imul(al4, bl8) | 0;
		    mid = mid + Math.imul(al4, bh8) | 0;
		    mid = mid + Math.imul(ah4, bl8) | 0;
		    hi = hi + Math.imul(ah4, bh8) | 0;
		    lo = lo + Math.imul(al3, bl9) | 0;
		    mid = mid + Math.imul(al3, bh9) | 0;
		    mid = mid + Math.imul(ah3, bl9) | 0;
		    hi = hi + Math.imul(ah3, bh9) | 0;
		    var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
		    w12 &= 0x3ffffff;
		    /* k = 13 */
		    lo = Math.imul(al9, bl4);
		    mid = Math.imul(al9, bh4);
		    mid = mid + Math.imul(ah9, bl4) | 0;
		    hi = Math.imul(ah9, bh4);
		    lo = lo + Math.imul(al8, bl5) | 0;
		    mid = mid + Math.imul(al8, bh5) | 0;
		    mid = mid + Math.imul(ah8, bl5) | 0;
		    hi = hi + Math.imul(ah8, bh5) | 0;
		    lo = lo + Math.imul(al7, bl6) | 0;
		    mid = mid + Math.imul(al7, bh6) | 0;
		    mid = mid + Math.imul(ah7, bl6) | 0;
		    hi = hi + Math.imul(ah7, bh6) | 0;
		    lo = lo + Math.imul(al6, bl7) | 0;
		    mid = mid + Math.imul(al6, bh7) | 0;
		    mid = mid + Math.imul(ah6, bl7) | 0;
		    hi = hi + Math.imul(ah6, bh7) | 0;
		    lo = lo + Math.imul(al5, bl8) | 0;
		    mid = mid + Math.imul(al5, bh8) | 0;
		    mid = mid + Math.imul(ah5, bl8) | 0;
		    hi = hi + Math.imul(ah5, bh8) | 0;
		    lo = lo + Math.imul(al4, bl9) | 0;
		    mid = mid + Math.imul(al4, bh9) | 0;
		    mid = mid + Math.imul(ah4, bl9) | 0;
		    hi = hi + Math.imul(ah4, bh9) | 0;
		    var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
		    w13 &= 0x3ffffff;
		    /* k = 14 */
		    lo = Math.imul(al9, bl5);
		    mid = Math.imul(al9, bh5);
		    mid = mid + Math.imul(ah9, bl5) | 0;
		    hi = Math.imul(ah9, bh5);
		    lo = lo + Math.imul(al8, bl6) | 0;
		    mid = mid + Math.imul(al8, bh6) | 0;
		    mid = mid + Math.imul(ah8, bl6) | 0;
		    hi = hi + Math.imul(ah8, bh6) | 0;
		    lo = lo + Math.imul(al7, bl7) | 0;
		    mid = mid + Math.imul(al7, bh7) | 0;
		    mid = mid + Math.imul(ah7, bl7) | 0;
		    hi = hi + Math.imul(ah7, bh7) | 0;
		    lo = lo + Math.imul(al6, bl8) | 0;
		    mid = mid + Math.imul(al6, bh8) | 0;
		    mid = mid + Math.imul(ah6, bl8) | 0;
		    hi = hi + Math.imul(ah6, bh8) | 0;
		    lo = lo + Math.imul(al5, bl9) | 0;
		    mid = mid + Math.imul(al5, bh9) | 0;
		    mid = mid + Math.imul(ah5, bl9) | 0;
		    hi = hi + Math.imul(ah5, bh9) | 0;
		    var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
		    w14 &= 0x3ffffff;
		    /* k = 15 */
		    lo = Math.imul(al9, bl6);
		    mid = Math.imul(al9, bh6);
		    mid = mid + Math.imul(ah9, bl6) | 0;
		    hi = Math.imul(ah9, bh6);
		    lo = lo + Math.imul(al8, bl7) | 0;
		    mid = mid + Math.imul(al8, bh7) | 0;
		    mid = mid + Math.imul(ah8, bl7) | 0;
		    hi = hi + Math.imul(ah8, bh7) | 0;
		    lo = lo + Math.imul(al7, bl8) | 0;
		    mid = mid + Math.imul(al7, bh8) | 0;
		    mid = mid + Math.imul(ah7, bl8) | 0;
		    hi = hi + Math.imul(ah7, bh8) | 0;
		    lo = lo + Math.imul(al6, bl9) | 0;
		    mid = mid + Math.imul(al6, bh9) | 0;
		    mid = mid + Math.imul(ah6, bl9) | 0;
		    hi = hi + Math.imul(ah6, bh9) | 0;
		    var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
		    w15 &= 0x3ffffff;
		    /* k = 16 */
		    lo = Math.imul(al9, bl7);
		    mid = Math.imul(al9, bh7);
		    mid = mid + Math.imul(ah9, bl7) | 0;
		    hi = Math.imul(ah9, bh7);
		    lo = lo + Math.imul(al8, bl8) | 0;
		    mid = mid + Math.imul(al8, bh8) | 0;
		    mid = mid + Math.imul(ah8, bl8) | 0;
		    hi = hi + Math.imul(ah8, bh8) | 0;
		    lo = lo + Math.imul(al7, bl9) | 0;
		    mid = mid + Math.imul(al7, bh9) | 0;
		    mid = mid + Math.imul(ah7, bl9) | 0;
		    hi = hi + Math.imul(ah7, bh9) | 0;
		    var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
		    w16 &= 0x3ffffff;
		    /* k = 17 */
		    lo = Math.imul(al9, bl8);
		    mid = Math.imul(al9, bh8);
		    mid = mid + Math.imul(ah9, bl8) | 0;
		    hi = Math.imul(ah9, bh8);
		    lo = lo + Math.imul(al8, bl9) | 0;
		    mid = mid + Math.imul(al8, bh9) | 0;
		    mid = mid + Math.imul(ah8, bl9) | 0;
		    hi = hi + Math.imul(ah8, bh9) | 0;
		    var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
		    w17 &= 0x3ffffff;
		    /* k = 18 */
		    lo = Math.imul(al9, bl9);
		    mid = Math.imul(al9, bh9);
		    mid = mid + Math.imul(ah9, bl9) | 0;
		    hi = Math.imul(ah9, bh9);
		    var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
		    w18 &= 0x3ffffff;
		    o[0] = w0;
		    o[1] = w1;
		    o[2] = w2;
		    o[3] = w3;
		    o[4] = w4;
		    o[5] = w5;
		    o[6] = w6;
		    o[7] = w7;
		    o[8] = w8;
		    o[9] = w9;
		    o[10] = w10;
		    o[11] = w11;
		    o[12] = w12;
		    o[13] = w13;
		    o[14] = w14;
		    o[15] = w15;
		    o[16] = w16;
		    o[17] = w17;
		    o[18] = w18;
		    if (c !== 0) {
		      o[19] = c;
		      out.length++;
		    }
		    return out;
		  };

		  // Polyfill comb
		  if (!Math.imul) {
		    comb10MulTo = smallMulTo;
		  }
		  function bigMulTo(self, num, out) {
		    out.negative = num.negative ^ self.negative;
		    out.length = self.length + num.length;
		    var carry = 0;
		    var hncarry = 0;
		    for (var k = 0; k < out.length - 1; k++) {
		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		      // note that ncarry could be >= 0x3ffffff
		      var ncarry = hncarry;
		      hncarry = 0;
		      var rword = carry & 0x3ffffff;
		      var maxJ = Math.min(k, num.length - 1);
		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
		        var i = k - j;
		        var a = self.words[i] | 0;
		        var b = num.words[j] | 0;
		        var r = a * b;
		        var lo = r & 0x3ffffff;
		        ncarry = ncarry + (r / 0x4000000 | 0) | 0;
		        lo = lo + rword | 0;
		        rword = lo & 0x3ffffff;
		        ncarry = ncarry + (lo >>> 26) | 0;
		        hncarry += ncarry >>> 26;
		        ncarry &= 0x3ffffff;
		      }
		      out.words[k] = rword;
		      carry = ncarry;
		      ncarry = hncarry;
		    }
		    if (carry !== 0) {
		      out.words[k] = carry;
		    } else {
		      out.length--;
		    }
		    return out.strip();
		  }
		  function jumboMulTo(self, num, out) {
		    var fftm = new FFTM();
		    return fftm.mulp(self, num, out);
		  }
		  BN.prototype.mulTo = function mulTo(num, out) {
		    var res;
		    var len = this.length + num.length;
		    if (this.length === 10 && num.length === 10) {
		      res = comb10MulTo(this, num, out);
		    } else if (len < 63) {
		      res = smallMulTo(this, num, out);
		    } else if (len < 1024) {
		      res = bigMulTo(this, num, out);
		    } else {
		      res = jumboMulTo(this, num, out);
		    }
		    return res;
		  };

		  // Cooley-Tukey algorithm for FFT
		  // slightly revisited to rely on looping instead of recursion

		  function FFTM(x, y) {
		    this.x = x;
		    this.y = y;
		  }
		  FFTM.prototype.makeRBT = function makeRBT(N) {
		    var t = new Array(N);
		    var l = BN.prototype._countBits(N) - 1;
		    for (var i = 0; i < N; i++) {
		      t[i] = this.revBin(i, l, N);
		    }
		    return t;
		  };

		  // Returns binary-reversed representation of `x`
		  FFTM.prototype.revBin = function revBin(x, l, N) {
		    if (x === 0 || x === N - 1) return x;
		    var rb = 0;
		    for (var i = 0; i < l; i++) {
		      rb |= (x & 1) << l - i - 1;
		      x >>= 1;
		    }
		    return rb;
		  };

		  // Performs "tweedling" phase, therefore 'emulating'
		  // behaviour of the recursive algorithm
		  FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
		    for (var i = 0; i < N; i++) {
		      rtws[i] = rws[rbt[i]];
		      itws[i] = iws[rbt[i]];
		    }
		  };
		  FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
		    this.permute(rbt, rws, iws, rtws, itws, N);
		    for (var s = 1; s < N; s <<= 1) {
		      var l = s << 1;
		      var rtwdf = Math.cos(2 * Math.PI / l);
		      var itwdf = Math.sin(2 * Math.PI / l);
		      for (var p = 0; p < N; p += l) {
		        var rtwdf_ = rtwdf;
		        var itwdf_ = itwdf;
		        for (var j = 0; j < s; j++) {
		          var re = rtws[p + j];
		          var ie = itws[p + j];
		          var ro = rtws[p + j + s];
		          var io = itws[p + j + s];
		          var rx = rtwdf_ * ro - itwdf_ * io;
		          io = rtwdf_ * io + itwdf_ * ro;
		          ro = rx;
		          rtws[p + j] = re + ro;
		          itws[p + j] = ie + io;
		          rtws[p + j + s] = re - ro;
		          itws[p + j + s] = ie - io;

		          /* jshint maxdepth : false */
		          if (j !== l) {
		            rx = rtwdf * rtwdf_ - itwdf * itwdf_;
		            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
		            rtwdf_ = rx;
		          }
		        }
		      }
		    }
		  };
		  FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
		    var N = Math.max(m, n) | 1;
		    var odd = N & 1;
		    var i = 0;
		    for (N = N / 2 | 0; N; N = N >>> 1) {
		      i++;
		    }
		    return 1 << i + 1 + odd;
		  };
		  FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
		    if (N <= 1) return;
		    for (var i = 0; i < N / 2; i++) {
		      var t = rws[i];
		      rws[i] = rws[N - i - 1];
		      rws[N - i - 1] = t;
		      t = iws[i];
		      iws[i] = -iws[N - i - 1];
		      iws[N - i - 1] = -t;
		    }
		  };
		  FFTM.prototype.normalize13b = function normalize13b(ws, N) {
		    var carry = 0;
		    for (var i = 0; i < N / 2; i++) {
		      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
		      ws[i] = w & 0x3ffffff;
		      if (w < 0x4000000) {
		        carry = 0;
		      } else {
		        carry = w / 0x4000000 | 0;
		      }
		    }
		    return ws;
		  };
		  FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
		    var carry = 0;
		    for (var i = 0; i < len; i++) {
		      carry = carry + (ws[i] | 0);
		      rws[2 * i] = carry & 0x1fff;
		      carry = carry >>> 13;
		      rws[2 * i + 1] = carry & 0x1fff;
		      carry = carry >>> 13;
		    }

		    // Pad with zeroes
		    for (i = 2 * len; i < N; ++i) {
		      rws[i] = 0;
		    }
		    assert(carry === 0);
		    assert((carry & ~0x1fff) === 0);
		  };
		  FFTM.prototype.stub = function stub(N) {
		    var ph = new Array(N);
		    for (var i = 0; i < N; i++) {
		      ph[i] = 0;
		    }
		    return ph;
		  };
		  FFTM.prototype.mulp = function mulp(x, y, out) {
		    var N = 2 * this.guessLen13b(x.length, y.length);
		    var rbt = this.makeRBT(N);
		    var _ = this.stub(N);
		    var rws = new Array(N);
		    var rwst = new Array(N);
		    var iwst = new Array(N);
		    var nrws = new Array(N);
		    var nrwst = new Array(N);
		    var niwst = new Array(N);
		    var rmws = out.words;
		    rmws.length = N;
		    this.convert13b(x.words, x.length, rws, N);
		    this.convert13b(y.words, y.length, nrws, N);
		    this.transform(rws, _, rwst, iwst, N, rbt);
		    this.transform(nrws, _, nrwst, niwst, N, rbt);
		    for (var i = 0; i < N; i++) {
		      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
		      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
		      rwst[i] = rx;
		    }
		    this.conjugate(rwst, iwst, N);
		    this.transform(rwst, iwst, rmws, _, N, rbt);
		    this.conjugate(rmws, _, N);
		    this.normalize13b(rmws, N);
		    out.negative = x.negative ^ y.negative;
		    out.length = x.length + y.length;
		    return out.strip();
		  };

		  // Multiply `this` by `num`
		  BN.prototype.mul = function mul(num) {
		    var out = new BN(null);
		    out.words = new Array(this.length + num.length);
		    return this.mulTo(num, out);
		  };

		  // Multiply employing FFT
		  BN.prototype.mulf = function mulf(num) {
		    var out = new BN(null);
		    out.words = new Array(this.length + num.length);
		    return jumboMulTo(this, num, out);
		  };

		  // In-place Multiplication
		  BN.prototype.imul = function imul(num) {
		    return this.clone().mulTo(num, this);
		  };
		  BN.prototype.imuln = function imuln(num) {
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);

		    // Carry
		    var carry = 0;
		    for (var i = 0; i < this.length; i++) {
		      var w = (this.words[i] | 0) * num;
		      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
		      carry >>= 26;
		      carry += w / 0x4000000 | 0;
		      // NOTE: lo is 27bit maximum
		      carry += lo >>> 26;
		      this.words[i] = lo & 0x3ffffff;
		    }
		    if (carry !== 0) {
		      this.words[i] = carry;
		      this.length++;
		    }
		    return this;
		  };
		  BN.prototype.muln = function muln(num) {
		    return this.clone().imuln(num);
		  };

		  // `this` * `this`
		  BN.prototype.sqr = function sqr() {
		    return this.mul(this);
		  };

		  // `this` * `this` in-place
		  BN.prototype.isqr = function isqr() {
		    return this.imul(this.clone());
		  };

		  // Math.pow(`this`, `num`)
		  BN.prototype.pow = function pow(num) {
		    var w = toBitArray(num);
		    if (w.length === 0) return new BN(1);

		    // Skip leading zeroes
		    var res = this;
		    for (var i = 0; i < w.length; i++, res = res.sqr()) {
		      if (w[i] !== 0) break;
		    }
		    if (++i < w.length) {
		      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
		        if (w[i] === 0) continue;
		        res = res.mul(q);
		      }
		    }
		    return res;
		  };

		  // Shift-left in-place
		  BN.prototype.iushln = function iushln(bits) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var r = bits % 26;
		    var s = (bits - r) / 26;
		    var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
		    var i;
		    if (r !== 0) {
		      var carry = 0;
		      for (i = 0; i < this.length; i++) {
		        var newCarry = this.words[i] & carryMask;
		        var c = (this.words[i] | 0) - newCarry << r;
		        this.words[i] = c | carry;
		        carry = newCarry >>> 26 - r;
		      }
		      if (carry) {
		        this.words[i] = carry;
		        this.length++;
		      }
		    }
		    if (s !== 0) {
		      for (i = this.length - 1; i >= 0; i--) {
		        this.words[i + s] = this.words[i];
		      }
		      for (i = 0; i < s; i++) {
		        this.words[i] = 0;
		      }
		      this.length += s;
		    }
		    return this.strip();
		  };
		  BN.prototype.ishln = function ishln(bits) {
		    // TODO(indutny): implement me
		    assert(this.negative === 0);
		    return this.iushln(bits);
		  };

		  // Shift-right in-place
		  // NOTE: `hint` is a lowest bit before trailing zeroes
		  // NOTE: if `extended` is present - it will be filled with destroyed bits
		  BN.prototype.iushrn = function iushrn(bits, hint, extended) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var h;
		    if (hint) {
		      h = (hint - hint % 26) / 26;
		    } else {
		      h = 0;
		    }
		    var r = bits % 26;
		    var s = Math.min((bits - r) / 26, this.length);
		    var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
		    var maskedWords = extended;
		    h -= s;
		    h = Math.max(0, h);

		    // Extended mode, copy masked part
		    if (maskedWords) {
		      for (var i = 0; i < s; i++) {
		        maskedWords.words[i] = this.words[i];
		      }
		      maskedWords.length = s;
		    }
		    if (s === 0) ; else if (this.length > s) {
		      this.length -= s;
		      for (i = 0; i < this.length; i++) {
		        this.words[i] = this.words[i + s];
		      }
		    } else {
		      this.words[0] = 0;
		      this.length = 1;
		    }
		    var carry = 0;
		    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
		      var word = this.words[i] | 0;
		      this.words[i] = carry << 26 - r | word >>> r;
		      carry = word & mask;
		    }

		    // Push carried bits as a mask
		    if (maskedWords && carry !== 0) {
		      maskedWords.words[maskedWords.length++] = carry;
		    }
		    if (this.length === 0) {
		      this.words[0] = 0;
		      this.length = 1;
		    }
		    return this.strip();
		  };
		  BN.prototype.ishrn = function ishrn(bits, hint, extended) {
		    // TODO(indutny): implement me
		    assert(this.negative === 0);
		    return this.iushrn(bits, hint, extended);
		  };

		  // Shift-left
		  BN.prototype.shln = function shln(bits) {
		    return this.clone().ishln(bits);
		  };
		  BN.prototype.ushln = function ushln(bits) {
		    return this.clone().iushln(bits);
		  };

		  // Shift-right
		  BN.prototype.shrn = function shrn(bits) {
		    return this.clone().ishrn(bits);
		  };
		  BN.prototype.ushrn = function ushrn(bits) {
		    return this.clone().iushrn(bits);
		  };

		  // Test if n bit is set
		  BN.prototype.testn = function testn(bit) {
		    assert(typeof bit === 'number' && bit >= 0);
		    var r = bit % 26;
		    var s = (bit - r) / 26;
		    var q = 1 << r;

		    // Fast case: bit is much higher than all existing words
		    if (this.length <= s) return false;

		    // Check bit and return
		    var w = this.words[s];
		    return !!(w & q);
		  };

		  // Return only lowers bits of number (in-place)
		  BN.prototype.imaskn = function imaskn(bits) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var r = bits % 26;
		    var s = (bits - r) / 26;
		    assert(this.negative === 0, 'imaskn works only with positive numbers');
		    if (this.length <= s) {
		      return this;
		    }
		    if (r !== 0) {
		      s++;
		    }
		    this.length = Math.min(s, this.length);
		    if (r !== 0) {
		      var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
		      this.words[this.length - 1] &= mask;
		    }
		    return this.strip();
		  };

		  // Return only lowers bits of number
		  BN.prototype.maskn = function maskn(bits) {
		    return this.clone().imaskn(bits);
		  };

		  // Add plain number `num` to `this`
		  BN.prototype.iaddn = function iaddn(num) {
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);
		    if (num < 0) return this.isubn(-num);

		    // Possible sign change
		    if (this.negative !== 0) {
		      if (this.length === 1 && (this.words[0] | 0) < num) {
		        this.words[0] = num - (this.words[0] | 0);
		        this.negative = 0;
		        return this;
		      }
		      this.negative = 0;
		      this.isubn(num);
		      this.negative = 1;
		      return this;
		    }

		    // Add without checks
		    return this._iaddn(num);
		  };
		  BN.prototype._iaddn = function _iaddn(num) {
		    this.words[0] += num;

		    // Carry
		    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
		      this.words[i] -= 0x4000000;
		      if (i === this.length - 1) {
		        this.words[i + 1] = 1;
		      } else {
		        this.words[i + 1]++;
		      }
		    }
		    this.length = Math.max(this.length, i + 1);
		    return this;
		  };

		  // Subtract plain number `num` from `this`
		  BN.prototype.isubn = function isubn(num) {
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);
		    if (num < 0) return this.iaddn(-num);
		    if (this.negative !== 0) {
		      this.negative = 0;
		      this.iaddn(num);
		      this.negative = 1;
		      return this;
		    }
		    this.words[0] -= num;
		    if (this.length === 1 && this.words[0] < 0) {
		      this.words[0] = -this.words[0];
		      this.negative = 1;
		    } else {
		      // Carry
		      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
		        this.words[i] += 0x4000000;
		        this.words[i + 1] -= 1;
		      }
		    }
		    return this.strip();
		  };
		  BN.prototype.addn = function addn(num) {
		    return this.clone().iaddn(num);
		  };
		  BN.prototype.subn = function subn(num) {
		    return this.clone().isubn(num);
		  };
		  BN.prototype.iabs = function iabs() {
		    this.negative = 0;
		    return this;
		  };
		  BN.prototype.abs = function abs() {
		    return this.clone().iabs();
		  };
		  BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
		    var len = num.length + shift;
		    var i;
		    this._expand(len);
		    var w;
		    var carry = 0;
		    for (i = 0; i < num.length; i++) {
		      w = (this.words[i + shift] | 0) + carry;
		      var right = (num.words[i] | 0) * mul;
		      w -= right & 0x3ffffff;
		      carry = (w >> 26) - (right / 0x4000000 | 0);
		      this.words[i + shift] = w & 0x3ffffff;
		    }
		    for (; i < this.length - shift; i++) {
		      w = (this.words[i + shift] | 0) + carry;
		      carry = w >> 26;
		      this.words[i + shift] = w & 0x3ffffff;
		    }
		    if (carry === 0) return this.strip();

		    // Subtraction overflow
		    assert(carry === -1);
		    carry = 0;
		    for (i = 0; i < this.length; i++) {
		      w = -(this.words[i] | 0) + carry;
		      carry = w >> 26;
		      this.words[i] = w & 0x3ffffff;
		    }
		    this.negative = 1;
		    return this.strip();
		  };
		  BN.prototype._wordDiv = function _wordDiv(num, mode) {
		    var shift = this.length - num.length;
		    var a = this.clone();
		    var b = num;

		    // Normalize
		    var bhi = b.words[b.length - 1] | 0;
		    var bhiBits = this._countBits(bhi);
		    shift = 26 - bhiBits;
		    if (shift !== 0) {
		      b = b.ushln(shift);
		      a.iushln(shift);
		      bhi = b.words[b.length - 1] | 0;
		    }

		    // Initialize quotient
		    var m = a.length - b.length;
		    var q;
		    if (mode !== 'mod') {
		      q = new BN(null);
		      q.length = m + 1;
		      q.words = new Array(q.length);
		      for (var i = 0; i < q.length; i++) {
		        q.words[i] = 0;
		      }
		    }
		    var diff = a.clone()._ishlnsubmul(b, 1, m);
		    if (diff.negative === 0) {
		      a = diff;
		      if (q) {
		        q.words[m] = 1;
		      }
		    }
		    for (var j = m - 1; j >= 0; j--) {
		      var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);

		      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
		      // (0x7ffffff)
		      qj = Math.min(qj / bhi | 0, 0x3ffffff);
		      a._ishlnsubmul(b, qj, j);
		      while (a.negative !== 0) {
		        qj--;
		        a.negative = 0;
		        a._ishlnsubmul(b, 1, j);
		        if (!a.isZero()) {
		          a.negative ^= 1;
		        }
		      }
		      if (q) {
		        q.words[j] = qj;
		      }
		    }
		    if (q) {
		      q.strip();
		    }
		    a.strip();

		    // Denormalize
		    if (mode !== 'div' && shift !== 0) {
		      a.iushrn(shift);
		    }
		    return {
		      div: q || null,
		      mod: a
		    };
		  };

		  // NOTE: 1) `mode` can be set to `mod` to request mod only,
		  //       to `div` to request div only, or be absent to
		  //       request both div & mod
		  //       2) `positive` is true if unsigned mod is requested
		  BN.prototype.divmod = function divmod(num, mode, positive) {
		    assert(!num.isZero());
		    if (this.isZero()) {
		      return {
		        div: new BN(0),
		        mod: new BN(0)
		      };
		    }
		    var div, mod, res;
		    if (this.negative !== 0 && num.negative === 0) {
		      res = this.neg().divmod(num, mode);
		      if (mode !== 'mod') {
		        div = res.div.neg();
		      }
		      if (mode !== 'div') {
		        mod = res.mod.neg();
		        if (positive && mod.negative !== 0) {
		          mod.iadd(num);
		        }
		      }
		      return {
		        div: div,
		        mod: mod
		      };
		    }
		    if (this.negative === 0 && num.negative !== 0) {
		      res = this.divmod(num.neg(), mode);
		      if (mode !== 'mod') {
		        div = res.div.neg();
		      }
		      return {
		        div: div,
		        mod: res.mod
		      };
		    }
		    if ((this.negative & num.negative) !== 0) {
		      res = this.neg().divmod(num.neg(), mode);
		      if (mode !== 'div') {
		        mod = res.mod.neg();
		        if (positive && mod.negative !== 0) {
		          mod.isub(num);
		        }
		      }
		      return {
		        div: res.div,
		        mod: mod
		      };
		    }

		    // Both numbers are positive at this point

		    // Strip both numbers to approximate shift value
		    if (num.length > this.length || this.cmp(num) < 0) {
		      return {
		        div: new BN(0),
		        mod: this
		      };
		    }

		    // Very short reduction
		    if (num.length === 1) {
		      if (mode === 'div') {
		        return {
		          div: this.divn(num.words[0]),
		          mod: null
		        };
		      }
		      if (mode === 'mod') {
		        return {
		          div: null,
		          mod: new BN(this.modn(num.words[0]))
		        };
		      }
		      return {
		        div: this.divn(num.words[0]),
		        mod: new BN(this.modn(num.words[0]))
		      };
		    }
		    return this._wordDiv(num, mode);
		  };

		  // Find `this` / `num`
		  BN.prototype.div = function div(num) {
		    return this.divmod(num, 'div', false).div;
		  };

		  // Find `this` % `num`
		  BN.prototype.mod = function mod(num) {
		    return this.divmod(num, 'mod', false).mod;
		  };
		  BN.prototype.umod = function umod(num) {
		    return this.divmod(num, 'mod', true).mod;
		  };

		  // Find Round(`this` / `num`)
		  BN.prototype.divRound = function divRound(num) {
		    var dm = this.divmod(num);

		    // Fast case - exact division
		    if (dm.mod.isZero()) return dm.div;
		    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
		    var half = num.ushrn(1);
		    var r2 = num.andln(1);
		    var cmp = mod.cmp(half);

		    // Round down
		    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

		    // Round up
		    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
		  };
		  BN.prototype.modn = function modn(num) {
		    assert(num <= 0x3ffffff);
		    var p = (1 << 26) % num;
		    var acc = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      acc = (p * acc + (this.words[i] | 0)) % num;
		    }
		    return acc;
		  };

		  // In-place division by number
		  BN.prototype.idivn = function idivn(num) {
		    assert(num <= 0x3ffffff);
		    var carry = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      var w = (this.words[i] | 0) + carry * 0x4000000;
		      this.words[i] = w / num | 0;
		      carry = w % num;
		    }
		    return this.strip();
		  };
		  BN.prototype.divn = function divn(num) {
		    return this.clone().idivn(num);
		  };
		  BN.prototype.egcd = function egcd(p) {
		    assert(p.negative === 0);
		    assert(!p.isZero());
		    var x = this;
		    var y = p.clone();
		    if (x.negative !== 0) {
		      x = x.umod(p);
		    } else {
		      x = x.clone();
		    }

		    // A * x + B * y = x
		    var A = new BN(1);
		    var B = new BN(0);

		    // C * x + D * y = y
		    var C = new BN(0);
		    var D = new BN(1);
		    var g = 0;
		    while (x.isEven() && y.isEven()) {
		      x.iushrn(1);
		      y.iushrn(1);
		      ++g;
		    }
		    var yp = y.clone();
		    var xp = x.clone();
		    while (!x.isZero()) {
		      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
		      }
		      if (i > 0) {
		        x.iushrn(i);
		        while (i-- > 0) {
		          if (A.isOdd() || B.isOdd()) {
		            A.iadd(yp);
		            B.isub(xp);
		          }
		          A.iushrn(1);
		          B.iushrn(1);
		        }
		      }
		      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
		      }
		      if (j > 0) {
		        y.iushrn(j);
		        while (j-- > 0) {
		          if (C.isOdd() || D.isOdd()) {
		            C.iadd(yp);
		            D.isub(xp);
		          }
		          C.iushrn(1);
		          D.iushrn(1);
		        }
		      }
		      if (x.cmp(y) >= 0) {
		        x.isub(y);
		        A.isub(C);
		        B.isub(D);
		      } else {
		        y.isub(x);
		        C.isub(A);
		        D.isub(B);
		      }
		    }
		    return {
		      a: C,
		      b: D,
		      gcd: y.iushln(g)
		    };
		  };

		  // This is reduced incarnation of the binary EEA
		  // above, designated to invert members of the
		  // _prime_ fields F(p) at a maximal speed
		  BN.prototype._invmp = function _invmp(p) {
		    assert(p.negative === 0);
		    assert(!p.isZero());
		    var a = this;
		    var b = p.clone();
		    if (a.negative !== 0) {
		      a = a.umod(p);
		    } else {
		      a = a.clone();
		    }
		    var x1 = new BN(1);
		    var x2 = new BN(0);
		    var delta = b.clone();
		    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
		      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
		      }
		      if (i > 0) {
		        a.iushrn(i);
		        while (i-- > 0) {
		          if (x1.isOdd()) {
		            x1.iadd(delta);
		          }
		          x1.iushrn(1);
		        }
		      }
		      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
		      }
		      if (j > 0) {
		        b.iushrn(j);
		        while (j-- > 0) {
		          if (x2.isOdd()) {
		            x2.iadd(delta);
		          }
		          x2.iushrn(1);
		        }
		      }
		      if (a.cmp(b) >= 0) {
		        a.isub(b);
		        x1.isub(x2);
		      } else {
		        b.isub(a);
		        x2.isub(x1);
		      }
		    }
		    var res;
		    if (a.cmpn(1) === 0) {
		      res = x1;
		    } else {
		      res = x2;
		    }
		    if (res.cmpn(0) < 0) {
		      res.iadd(p);
		    }
		    return res;
		  };
		  BN.prototype.gcd = function gcd(num) {
		    if (this.isZero()) return num.abs();
		    if (num.isZero()) return this.abs();
		    var a = this.clone();
		    var b = num.clone();
		    a.negative = 0;
		    b.negative = 0;

		    // Remove common factor of two
		    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
		      a.iushrn(1);
		      b.iushrn(1);
		    }
		    do {
		      while (a.isEven()) {
		        a.iushrn(1);
		      }
		      while (b.isEven()) {
		        b.iushrn(1);
		      }
		      var r = a.cmp(b);
		      if (r < 0) {
		        // Swap `a` and `b` to make `a` always bigger than `b`
		        var t = a;
		        a = b;
		        b = t;
		      } else if (r === 0 || b.cmpn(1) === 0) {
		        break;
		      }
		      a.isub(b);
		    } while (true);
		    return b.iushln(shift);
		  };

		  // Invert number in the field F(num)
		  BN.prototype.invm = function invm(num) {
		    return this.egcd(num).a.umod(num);
		  };
		  BN.prototype.isEven = function isEven() {
		    return (this.words[0] & 1) === 0;
		  };
		  BN.prototype.isOdd = function isOdd() {
		    return (this.words[0] & 1) === 1;
		  };

		  // And first word and num
		  BN.prototype.andln = function andln(num) {
		    return this.words[0] & num;
		  };

		  // Increment at the bit position in-line
		  BN.prototype.bincn = function bincn(bit) {
		    assert(typeof bit === 'number');
		    var r = bit % 26;
		    var s = (bit - r) / 26;
		    var q = 1 << r;

		    // Fast case: bit is much higher than all existing words
		    if (this.length <= s) {
		      this._expand(s + 1);
		      this.words[s] |= q;
		      return this;
		    }

		    // Add bit and propagate, if needed
		    var carry = q;
		    for (var i = s; carry !== 0 && i < this.length; i++) {
		      var w = this.words[i] | 0;
		      w += carry;
		      carry = w >>> 26;
		      w &= 0x3ffffff;
		      this.words[i] = w;
		    }
		    if (carry !== 0) {
		      this.words[i] = carry;
		      this.length++;
		    }
		    return this;
		  };
		  BN.prototype.isZero = function isZero() {
		    return this.length === 1 && this.words[0] === 0;
		  };
		  BN.prototype.cmpn = function cmpn(num) {
		    var negative = num < 0;
		    if (this.negative !== 0 && !negative) return -1;
		    if (this.negative === 0 && negative) return 1;
		    this.strip();
		    var res;
		    if (this.length > 1) {
		      res = 1;
		    } else {
		      if (negative) {
		        num = -num;
		      }
		      assert(num <= 0x3ffffff, 'Number is too big');
		      var w = this.words[0] | 0;
		      res = w === num ? 0 : w < num ? -1 : 1;
		    }
		    if (this.negative !== 0) return -res | 0;
		    return res;
		  };

		  // Compare two numbers and return:
		  // 1 - if `this` > `num`
		  // 0 - if `this` == `num`
		  // -1 - if `this` < `num`
		  BN.prototype.cmp = function cmp(num) {
		    if (this.negative !== 0 && num.negative === 0) return -1;
		    if (this.negative === 0 && num.negative !== 0) return 1;
		    var res = this.ucmp(num);
		    if (this.negative !== 0) return -res | 0;
		    return res;
		  };

		  // Unsigned comparison
		  BN.prototype.ucmp = function ucmp(num) {
		    // At this point both numbers have the same sign
		    if (this.length > num.length) return 1;
		    if (this.length < num.length) return -1;
		    var res = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      var a = this.words[i] | 0;
		      var b = num.words[i] | 0;
		      if (a === b) continue;
		      if (a < b) {
		        res = -1;
		      } else if (a > b) {
		        res = 1;
		      }
		      break;
		    }
		    return res;
		  };
		  BN.prototype.gtn = function gtn(num) {
		    return this.cmpn(num) === 1;
		  };
		  BN.prototype.gt = function gt(num) {
		    return this.cmp(num) === 1;
		  };
		  BN.prototype.gten = function gten(num) {
		    return this.cmpn(num) >= 0;
		  };
		  BN.prototype.gte = function gte(num) {
		    return this.cmp(num) >= 0;
		  };
		  BN.prototype.ltn = function ltn(num) {
		    return this.cmpn(num) === -1;
		  };
		  BN.prototype.lt = function lt(num) {
		    return this.cmp(num) === -1;
		  };
		  BN.prototype.lten = function lten(num) {
		    return this.cmpn(num) <= 0;
		  };
		  BN.prototype.lte = function lte(num) {
		    return this.cmp(num) <= 0;
		  };
		  BN.prototype.eqn = function eqn(num) {
		    return this.cmpn(num) === 0;
		  };
		  BN.prototype.eq = function eq(num) {
		    return this.cmp(num) === 0;
		  };

		  //
		  // A reduce context, could be using montgomery or something better, depending
		  // on the `m` itself.
		  //
		  BN.red = function red(num) {
		    return new Red(num);
		  };
		  BN.prototype.toRed = function toRed(ctx) {
		    assert(!this.red, 'Already a number in reduction context');
		    assert(this.negative === 0, 'red works only with positives');
		    return ctx.convertTo(this)._forceRed(ctx);
		  };
		  BN.prototype.fromRed = function fromRed() {
		    assert(this.red, 'fromRed works only with numbers in reduction context');
		    return this.red.convertFrom(this);
		  };
		  BN.prototype._forceRed = function _forceRed(ctx) {
		    this.red = ctx;
		    return this;
		  };
		  BN.prototype.forceRed = function forceRed(ctx) {
		    assert(!this.red, 'Already a number in reduction context');
		    return this._forceRed(ctx);
		  };
		  BN.prototype.redAdd = function redAdd(num) {
		    assert(this.red, 'redAdd works only with red numbers');
		    return this.red.add(this, num);
		  };
		  BN.prototype.redIAdd = function redIAdd(num) {
		    assert(this.red, 'redIAdd works only with red numbers');
		    return this.red.iadd(this, num);
		  };
		  BN.prototype.redSub = function redSub(num) {
		    assert(this.red, 'redSub works only with red numbers');
		    return this.red.sub(this, num);
		  };
		  BN.prototype.redISub = function redISub(num) {
		    assert(this.red, 'redISub works only with red numbers');
		    return this.red.isub(this, num);
		  };
		  BN.prototype.redShl = function redShl(num) {
		    assert(this.red, 'redShl works only with red numbers');
		    return this.red.shl(this, num);
		  };
		  BN.prototype.redMul = function redMul(num) {
		    assert(this.red, 'redMul works only with red numbers');
		    this.red._verify2(this, num);
		    return this.red.mul(this, num);
		  };
		  BN.prototype.redIMul = function redIMul(num) {
		    assert(this.red, 'redMul works only with red numbers');
		    this.red._verify2(this, num);
		    return this.red.imul(this, num);
		  };
		  BN.prototype.redSqr = function redSqr() {
		    assert(this.red, 'redSqr works only with red numbers');
		    this.red._verify1(this);
		    return this.red.sqr(this);
		  };
		  BN.prototype.redISqr = function redISqr() {
		    assert(this.red, 'redISqr works only with red numbers');
		    this.red._verify1(this);
		    return this.red.isqr(this);
		  };

		  // Square root over p
		  BN.prototype.redSqrt = function redSqrt() {
		    assert(this.red, 'redSqrt works only with red numbers');
		    this.red._verify1(this);
		    return this.red.sqrt(this);
		  };
		  BN.prototype.redInvm = function redInvm() {
		    assert(this.red, 'redInvm works only with red numbers');
		    this.red._verify1(this);
		    return this.red.invm(this);
		  };

		  // Return negative clone of `this` % `red modulo`
		  BN.prototype.redNeg = function redNeg() {
		    assert(this.red, 'redNeg works only with red numbers');
		    this.red._verify1(this);
		    return this.red.neg(this);
		  };
		  BN.prototype.redPow = function redPow(num) {
		    assert(this.red && !num.red, 'redPow(normalNum)');
		    this.red._verify1(this);
		    return this.red.pow(this, num);
		  };

		  // Prime numbers with efficient reduction
		  var primes = {
		    k256: null,
		    p224: null,
		    p192: null,
		    p25519: null
		  };

		  // Pseudo-Mersenne prime
		  function MPrime(name, p) {
		    // P = 2 ^ N - K
		    this.name = name;
		    this.p = new BN(p, 16);
		    this.n = this.p.bitLength();
		    this.k = new BN(1).iushln(this.n).isub(this.p);
		    this.tmp = this._tmp();
		  }
		  MPrime.prototype._tmp = function _tmp() {
		    var tmp = new BN(null);
		    tmp.words = new Array(Math.ceil(this.n / 13));
		    return tmp;
		  };
		  MPrime.prototype.ireduce = function ireduce(num) {
		    // Assumes that `num` is less than `P^2`
		    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
		    var r = num;
		    var rlen;
		    do {
		      this.split(r, this.tmp);
		      r = this.imulK(r);
		      r = r.iadd(this.tmp);
		      rlen = r.bitLength();
		    } while (rlen > this.n);
		    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
		    if (cmp === 0) {
		      r.words[0] = 0;
		      r.length = 1;
		    } else if (cmp > 0) {
		      r.isub(this.p);
		    } else {
		      if (r.strip !== undefined) {
		        // r is BN v4 instance
		        r.strip();
		      } else {
		        // r is BN v5 instance
		        r._strip();
		      }
		    }
		    return r;
		  };
		  MPrime.prototype.split = function split(input, out) {
		    input.iushrn(this.n, 0, out);
		  };
		  MPrime.prototype.imulK = function imulK(num) {
		    return num.imul(this.k);
		  };
		  function K256() {
		    MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
		  }
		  inherits(K256, MPrime);
		  K256.prototype.split = function split(input, output) {
		    // 256 = 9 * 26 + 22
		    var mask = 0x3fffff;
		    var outLen = Math.min(input.length, 9);
		    for (var i = 0; i < outLen; i++) {
		      output.words[i] = input.words[i];
		    }
		    output.length = outLen;
		    if (input.length <= 9) {
		      input.words[0] = 0;
		      input.length = 1;
		      return;
		    }

		    // Shift by 9 limbs
		    var prev = input.words[9];
		    output.words[output.length++] = prev & mask;
		    for (i = 10; i < input.length; i++) {
		      var next = input.words[i] | 0;
		      input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
		      prev = next;
		    }
		    prev >>>= 22;
		    input.words[i - 10] = prev;
		    if (prev === 0 && input.length > 10) {
		      input.length -= 10;
		    } else {
		      input.length -= 9;
		    }
		  };
		  K256.prototype.imulK = function imulK(num) {
		    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
		    num.words[num.length] = 0;
		    num.words[num.length + 1] = 0;
		    num.length += 2;

		    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
		    var lo = 0;
		    for (var i = 0; i < num.length; i++) {
		      var w = num.words[i] | 0;
		      lo += w * 0x3d1;
		      num.words[i] = lo & 0x3ffffff;
		      lo = w * 0x40 + (lo / 0x4000000 | 0);
		    }

		    // Fast length reduction
		    if (num.words[num.length - 1] === 0) {
		      num.length--;
		      if (num.words[num.length - 1] === 0) {
		        num.length--;
		      }
		    }
		    return num;
		  };
		  function P224() {
		    MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
		  }
		  inherits(P224, MPrime);
		  function P192() {
		    MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
		  }
		  inherits(P192, MPrime);
		  function P25519() {
		    // 2 ^ 255 - 19
		    MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
		  }
		  inherits(P25519, MPrime);
		  P25519.prototype.imulK = function imulK(num) {
		    // K = 0x13
		    var carry = 0;
		    for (var i = 0; i < num.length; i++) {
		      var hi = (num.words[i] | 0) * 0x13 + carry;
		      var lo = hi & 0x3ffffff;
		      hi >>>= 26;
		      num.words[i] = lo;
		      carry = hi;
		    }
		    if (carry !== 0) {
		      num.words[num.length++] = carry;
		    }
		    return num;
		  };

		  // Exported mostly for testing purposes, use plain name instead
		  BN._prime = function prime(name) {
		    // Cached version of prime
		    if (primes[name]) return primes[name];
		    var prime;
		    if (name === 'k256') {
		      prime = new K256();
		    } else if (name === 'p224') {
		      prime = new P224();
		    } else if (name === 'p192') {
		      prime = new P192();
		    } else if (name === 'p25519') {
		      prime = new P25519();
		    } else {
		      throw new Error('Unknown prime ' + name);
		    }
		    primes[name] = prime;
		    return prime;
		  };

		  //
		  // Base reduction engine
		  //
		  function Red(m) {
		    if (typeof m === 'string') {
		      var prime = BN._prime(m);
		      this.m = prime.p;
		      this.prime = prime;
		    } else {
		      assert(m.gtn(1), 'modulus must be greater than 1');
		      this.m = m;
		      this.prime = null;
		    }
		  }
		  Red.prototype._verify1 = function _verify1(a) {
		    assert(a.negative === 0, 'red works only with positives');
		    assert(a.red, 'red works only with red numbers');
		  };
		  Red.prototype._verify2 = function _verify2(a, b) {
		    assert((a.negative | b.negative) === 0, 'red works only with positives');
		    assert(a.red && a.red === b.red, 'red works only with red numbers');
		  };
		  Red.prototype.imod = function imod(a) {
		    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
		    return a.umod(this.m)._forceRed(this);
		  };
		  Red.prototype.neg = function neg(a) {
		    if (a.isZero()) {
		      return a.clone();
		    }
		    return this.m.sub(a)._forceRed(this);
		  };
		  Red.prototype.add = function add(a, b) {
		    this._verify2(a, b);
		    var res = a.add(b);
		    if (res.cmp(this.m) >= 0) {
		      res.isub(this.m);
		    }
		    return res._forceRed(this);
		  };
		  Red.prototype.iadd = function iadd(a, b) {
		    this._verify2(a, b);
		    var res = a.iadd(b);
		    if (res.cmp(this.m) >= 0) {
		      res.isub(this.m);
		    }
		    return res;
		  };
		  Red.prototype.sub = function sub(a, b) {
		    this._verify2(a, b);
		    var res = a.sub(b);
		    if (res.cmpn(0) < 0) {
		      res.iadd(this.m);
		    }
		    return res._forceRed(this);
		  };
		  Red.prototype.isub = function isub(a, b) {
		    this._verify2(a, b);
		    var res = a.isub(b);
		    if (res.cmpn(0) < 0) {
		      res.iadd(this.m);
		    }
		    return res;
		  };
		  Red.prototype.shl = function shl(a, num) {
		    this._verify1(a);
		    return this.imod(a.ushln(num));
		  };
		  Red.prototype.imul = function imul(a, b) {
		    this._verify2(a, b);
		    return this.imod(a.imul(b));
		  };
		  Red.prototype.mul = function mul(a, b) {
		    this._verify2(a, b);
		    return this.imod(a.mul(b));
		  };
		  Red.prototype.isqr = function isqr(a) {
		    return this.imul(a, a.clone());
		  };
		  Red.prototype.sqr = function sqr(a) {
		    return this.mul(a, a);
		  };
		  Red.prototype.sqrt = function sqrt(a) {
		    if (a.isZero()) return a.clone();
		    var mod3 = this.m.andln(3);
		    assert(mod3 % 2 === 1);

		    // Fast case
		    if (mod3 === 3) {
		      var pow = this.m.add(new BN(1)).iushrn(2);
		      return this.pow(a, pow);
		    }

		    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
		    //
		    // Find Q and S, that Q * 2 ^ S = (P - 1)
		    var q = this.m.subn(1);
		    var s = 0;
		    while (!q.isZero() && q.andln(1) === 0) {
		      s++;
		      q.iushrn(1);
		    }
		    assert(!q.isZero());
		    var one = new BN(1).toRed(this);
		    var nOne = one.redNeg();

		    // Find quadratic non-residue
		    // NOTE: Max is such because of generalized Riemann hypothesis.
		    var lpow = this.m.subn(1).iushrn(1);
		    var z = this.m.bitLength();
		    z = new BN(2 * z * z).toRed(this);
		    while (this.pow(z, lpow).cmp(nOne) !== 0) {
		      z.redIAdd(nOne);
		    }
		    var c = this.pow(z, q);
		    var r = this.pow(a, q.addn(1).iushrn(1));
		    var t = this.pow(a, q);
		    var m = s;
		    while (t.cmp(one) !== 0) {
		      var tmp = t;
		      for (var i = 0; tmp.cmp(one) !== 0; i++) {
		        tmp = tmp.redSqr();
		      }
		      assert(i < m);
		      var b = this.pow(c, new BN(1).iushln(m - i - 1));
		      r = r.redMul(b);
		      c = b.redSqr();
		      t = t.redMul(c);
		      m = i;
		    }
		    return r;
		  };
		  Red.prototype.invm = function invm(a) {
		    var inv = a._invmp(this.m);
		    if (inv.negative !== 0) {
		      inv.negative = 0;
		      return this.imod(inv).redNeg();
		    } else {
		      return this.imod(inv);
		    }
		  };
		  Red.prototype.pow = function pow(a, num) {
		    if (num.isZero()) return new BN(1).toRed(this);
		    if (num.cmpn(1) === 0) return a.clone();
		    var windowSize = 4;
		    var wnd = new Array(1 << windowSize);
		    wnd[0] = new BN(1).toRed(this);
		    wnd[1] = a;
		    for (var i = 2; i < wnd.length; i++) {
		      wnd[i] = this.mul(wnd[i - 1], a);
		    }
		    var res = wnd[0];
		    var current = 0;
		    var currentLen = 0;
		    var start = num.bitLength() % 26;
		    if (start === 0) {
		      start = 26;
		    }
		    for (i = num.length - 1; i >= 0; i--) {
		      var word = num.words[i];
		      for (var j = start - 1; j >= 0; j--) {
		        var bit = word >> j & 1;
		        if (res !== wnd[0]) {
		          res = this.sqr(res);
		        }
		        if (bit === 0 && current === 0) {
		          currentLen = 0;
		          continue;
		        }
		        current <<= 1;
		        current |= bit;
		        currentLen++;
		        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
		        res = this.mul(res, wnd[current]);
		        currentLen = 0;
		        current = 0;
		      }
		      start = 26;
		    }
		    return res;
		  };
		  Red.prototype.convertTo = function convertTo(num) {
		    var r = num.umod(this.m);
		    return r === num ? r.clone() : r;
		  };
		  Red.prototype.convertFrom = function convertFrom(num) {
		    var res = num.clone();
		    res.red = null;
		    return res;
		  };

		  //
		  // Montgomery method engine
		  //

		  BN.mont = function mont(num) {
		    return new Mont(num);
		  };
		  function Mont(m) {
		    Red.call(this, m);
		    this.shift = this.m.bitLength();
		    if (this.shift % 26 !== 0) {
		      this.shift += 26 - this.shift % 26;
		    }
		    this.r = new BN(1).iushln(this.shift);
		    this.r2 = this.imod(this.r.sqr());
		    this.rinv = this.r._invmp(this.m);
		    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
		    this.minv = this.minv.umod(this.r);
		    this.minv = this.r.sub(this.minv);
		  }
		  inherits(Mont, Red);
		  Mont.prototype.convertTo = function convertTo(num) {
		    return this.imod(num.ushln(this.shift));
		  };
		  Mont.prototype.convertFrom = function convertFrom(num) {
		    var r = this.imod(num.mul(this.rinv));
		    r.red = null;
		    return r;
		  };
		  Mont.prototype.imul = function imul(a, b) {
		    if (a.isZero() || b.isZero()) {
		      a.words[0] = 0;
		      a.length = 1;
		      return a;
		    }
		    var t = a.imul(b);
		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		    var u = t.isub(c).iushrn(this.shift);
		    var res = u;
		    if (u.cmp(this.m) >= 0) {
		      res = u.isub(this.m);
		    } else if (u.cmpn(0) < 0) {
		      res = u.iadd(this.m);
		    }
		    return res._forceRed(this);
		  };
		  Mont.prototype.mul = function mul(a, b) {
		    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
		    var t = a.mul(b);
		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		    var u = t.isub(c).iushrn(this.shift);
		    var res = u;
		    if (u.cmp(this.m) >= 0) {
		      res = u.isub(this.m);
		    } else if (u.cmpn(0) < 0) {
		      res = u.iadd(this.m);
		    }
		    return res._forceRed(this);
		  };
		  Mont.prototype.invm = function invm(a) {
		    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
		    var res = this.imod(a._invmp(this.m).mul(this.r2));
		    return res._forceRed(this);
		  };
		})(module, commonjsGlobal);
} (bn$1));
	return bn$1.exports;
}

var utils$1 = {};

var hasRequiredUtils$2;

function requireUtils$2 () {
	if (hasRequiredUtils$2) return utils$1;
	hasRequiredUtils$2 = 1;
	(function (exports) {

		var utils = exports;
		function toArray(msg, enc) {
		  if (Array.isArray(msg)) return msg.slice();
		  if (!msg) return [];
		  var res = [];
		  if (typeof msg !== 'string') {
		    for (var i = 0; i < msg.length; i++) {
		      res[i] = msg[i] | 0;
		    }
		    return res;
		  }
		  if (enc === 'hex') {
		    msg = msg.replace(/[^a-z0-9]+/ig, '');
		    if (msg.length % 2 !== 0) msg = '0' + msg;
		    for (var i = 0; i < msg.length; i += 2) {
		      res.push(parseInt(msg[i] + msg[i + 1], 16));
		    }
		  } else {
		    for (var i = 0; i < msg.length; i++) {
		      var c = msg.charCodeAt(i);
		      var hi = c >> 8;
		      var lo = c & 0xff;
		      if (hi) res.push(hi, lo);else res.push(lo);
		    }
		  }
		  return res;
		}
		utils.toArray = toArray;
		function zero2(word) {
		  if (word.length === 1) return '0' + word;else return word;
		}
		utils.zero2 = zero2;
		function toHex(msg) {
		  var res = '';
		  for (var i = 0; i < msg.length; i++) {
		    res += zero2(msg[i].toString(16));
		  }
		  return res;
		}
		utils.toHex = toHex;
		utils.encode = function encode(arr, enc) {
		  if (enc === 'hex') return toHex(arr);else return arr;
		};
} (utils$1));
	return utils$1;
}

var hasRequiredUtils$1;

function requireUtils$1 () {
	if (hasRequiredUtils$1) return utils$2;
	hasRequiredUtils$1 = 1;
	(function (exports) {

		var utils = exports;
		var BN = requireBn$1();
		var minAssert = minimalisticAssert$1;
		var minUtils = requireUtils$2();
		utils.assert = minAssert;
		utils.toArray = minUtils.toArray;
		utils.zero2 = minUtils.zero2;
		utils.toHex = minUtils.toHex;
		utils.encode = minUtils.encode;

		// Represent num in a w-NAF form
		function getNAF(num, w, bits) {
		  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
		  naf.fill(0);
		  var ws = 1 << w + 1;
		  var k = num.clone();
		  for (var i = 0; i < naf.length; i++) {
		    var z;
		    var mod = k.andln(ws - 1);
		    if (k.isOdd()) {
		      if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;
		      k.isubn(z);
		    } else {
		      z = 0;
		    }
		    naf[i] = z;
		    k.iushrn(1);
		  }
		  return naf;
		}
		utils.getNAF = getNAF;

		// Represent k1, k2 in a Joint Sparse Form
		function getJSF(k1, k2) {
		  var jsf = [[], []];
		  k1 = k1.clone();
		  k2 = k2.clone();
		  var d1 = 0;
		  var d2 = 0;
		  var m8;
		  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
		    // First phase
		    var m14 = k1.andln(3) + d1 & 3;
		    var m24 = k2.andln(3) + d2 & 3;
		    if (m14 === 3) m14 = -1;
		    if (m24 === 3) m24 = -1;
		    var u1;
		    if ((m14 & 1) === 0) {
		      u1 = 0;
		    } else {
		      m8 = k1.andln(7) + d1 & 7;
		      if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;
		    }
		    jsf[0].push(u1);
		    var u2;
		    if ((m24 & 1) === 0) {
		      u2 = 0;
		    } else {
		      m8 = k2.andln(7) + d2 & 7;
		      if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;
		    }
		    jsf[1].push(u2);

		    // Second phase
		    if (2 * d1 === u1 + 1) d1 = 1 - d1;
		    if (2 * d2 === u2 + 1) d2 = 1 - d2;
		    k1.iushrn(1);
		    k2.iushrn(1);
		  }
		  return jsf;
		}
		utils.getJSF = getJSF;
		function cachedProperty(obj, name, computer) {
		  var key = '_' + name;
		  obj.prototype[name] = function cachedProperty() {
		    return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
		  };
		}
		utils.cachedProperty = cachedProperty;
		function parseBytes(bytes) {
		  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;
		}
		utils.parseBytes = parseBytes;
		function intFromLE(bytes) {
		  return new BN(bytes, 'hex', 'le');
		}
		utils.intFromLE = intFromLE;
} (utils$2));
	return utils$2;
}

var brorand = {exports: {}};

var hasRequiredBrorand;

function requireBrorand () {
	if (hasRequiredBrorand) return brorand.exports;
	hasRequiredBrorand = 1;
	var r;
	brorand.exports = function rand(len) {
	  if (!r) r = new Rand(null);
	  return r.generate(len);
	};
	function Rand(rand) {
	  this.rand = rand;
	}
	brorand.exports.Rand = Rand;
	Rand.prototype.generate = function generate(len) {
	  return this._rand(len);
	};

	// Emulate crypto API using randy
	Rand.prototype._rand = function _rand(n) {
	  if (this.rand.getBytes) return this.rand.getBytes(n);
	  var res = new Uint8Array(n);
	  for (var i = 0; i < res.length; i++) {
	    res[i] = this.rand.getByte();
	  }
	  return res;
	};
	if (typeof self === 'object') {
	  if (self.crypto && self.crypto.getRandomValues) {
	    // Modern browsers
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      self.crypto.getRandomValues(arr);
	      return arr;
	    };
	  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
	    // IE
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      self.msCrypto.getRandomValues(arr);
	      return arr;
	    };

	    // Safari's WebWorkers do not have `crypto`
	  } else if (typeof window === 'object') {
	    // Old junk
	    Rand.prototype._rand = function () {
	      throw new Error('Not implemented yet');
	    };
	  }
	} else {
	  // Node.js or Web worker with no crypto support
	  try {
	    var crypto = require('crypto');
	    if (typeof crypto.randomBytes !== 'function') throw new Error('Not supported');
	    Rand.prototype._rand = function _rand(n) {
	      return crypto.randomBytes(n);
	    };
	  } catch (e) {}
	}
	return brorand.exports;
}

var curve = {};

var base$1;
var hasRequiredBase$1;

function requireBase$1 () {
	if (hasRequiredBase$1) return base$1;
	hasRequiredBase$1 = 1;

	var BN = requireBn$1();
	var utils = requireUtils$1();
	var getNAF = utils.getNAF;
	var getJSF = utils.getJSF;
	var assert = utils.assert;
	function BaseCurve(type, conf) {
	  this.type = type;
	  this.p = new BN(conf.p, 16);

	  // Use Montgomery, when there is no fast reduction for the prime
	  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

	  // Useful for many curves
	  this.zero = new BN(0).toRed(this.red);
	  this.one = new BN(1).toRed(this.red);
	  this.two = new BN(2).toRed(this.red);

	  // Curve configuration, optional
	  this.n = conf.n && new BN(conf.n, 16);
	  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

	  // Temporary arrays
	  this._wnafT1 = new Array(4);
	  this._wnafT2 = new Array(4);
	  this._wnafT3 = new Array(4);
	  this._wnafT4 = new Array(4);
	  this._bitLength = this.n ? this.n.bitLength() : 0;

	  // Generalized Greg Maxwell's trick
	  var adjustCount = this.n && this.p.div(this.n);
	  if (!adjustCount || adjustCount.cmpn(100) > 0) {
	    this.redN = null;
	  } else {
	    this._maxwellTrick = true;
	    this.redN = this.n.toRed(this.red);
	  }
	}
	base$1 = BaseCurve;
	BaseCurve.prototype.point = function point() {
	  throw new Error('Not implemented');
	};
	BaseCurve.prototype.validate = function validate() {
	  throw new Error('Not implemented');
	};
	BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
	  assert(p.precomputed);
	  var doubles = p._getDoubles();
	  var naf = getNAF(k, 1, this._bitLength);
	  var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
	  I /= 3;

	  // Translate into more windowed form
	  var repr = [];
	  var j;
	  var nafW;
	  for (j = 0; j < naf.length; j += doubles.step) {
	    nafW = 0;
	    for (var l = j + doubles.step - 1; l >= j; l--) {
	      nafW = (nafW << 1) + naf[l];
	    }
	    repr.push(nafW);
	  }
	  var a = this.jpoint(null, null, null);
	  var b = this.jpoint(null, null, null);
	  for (var i = I; i > 0; i--) {
	    for (j = 0; j < repr.length; j++) {
	      nafW = repr[j];
	      if (nafW === i) b = b.mixedAdd(doubles.points[j]);else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
	    }
	    a = a.add(b);
	  }
	  return a.toP();
	};
	BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
	  var w = 4;

	  // Precompute window
	  var nafPoints = p._getNAFPoints(w);
	  w = nafPoints.wnd;
	  var wnd = nafPoints.points;

	  // Get NAF form
	  var naf = getNAF(k, w, this._bitLength);

	  // Add `this`*(N+1) for every w-NAF index
	  var acc = this.jpoint(null, null, null);
	  for (var i = naf.length - 1; i >= 0; i--) {
	    // Count zeroes
	    for (var l = 0; i >= 0 && naf[i] === 0; i--) {
	      l++;
	    }
	    if (i >= 0) l++;
	    acc = acc.dblp(l);
	    if (i < 0) break;
	    var z = naf[i];
	    assert(z !== 0);
	    if (p.type === 'affine') {
	      // J +- P
	      if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
	    } else {
	      // J +- J
	      if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());
	    }
	  }
	  return p.type === 'affine' ? acc.toP() : acc;
	};
	BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
	  var wndWidth = this._wnafT1;
	  var wnd = this._wnafT2;
	  var naf = this._wnafT3;

	  // Fill all arrays
	  var max = 0;
	  var i;
	  var j;
	  var p;
	  for (i = 0; i < len; i++) {
	    p = points[i];
	    var nafPoints = p._getNAFPoints(defW);
	    wndWidth[i] = nafPoints.wnd;
	    wnd[i] = nafPoints.points;
	  }

	  // Comb small window NAFs
	  for (i = len - 1; i >= 1; i -= 2) {
	    var a = i - 1;
	    var b = i;
	    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
	      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
	      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
	      max = Math.max(naf[a].length, max);
	      max = Math.max(naf[b].length, max);
	      continue;
	    }
	    var comb = [points[a], /* 1 */
	    null, /* 3 */
	    null, /* 5 */
	    points[b] /* 7 */];

	    // Try to avoid Projective points, if possible
	    if (points[a].y.cmp(points[b].y) === 0) {
	      comb[1] = points[a].add(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].add(points[b].neg());
	    } else {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    }
	    var index = [-3, /* -1 -1 */
	    -1, /* -1 0 */
	    -5, /* -1 1 */
	    -7, /* 0 -1 */
	    0, /* 0 0 */
	    7, /* 0 1 */
	    5, /* 1 -1 */
	    1, /* 1 0 */
	    3 /* 1 1 */];

	    var jsf = getJSF(coeffs[a], coeffs[b]);
	    max = Math.max(jsf[0].length, max);
	    naf[a] = new Array(max);
	    naf[b] = new Array(max);
	    for (j = 0; j < max; j++) {
	      var ja = jsf[0][j] | 0;
	      var jb = jsf[1][j] | 0;
	      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
	      naf[b][j] = 0;
	      wnd[a] = comb;
	    }
	  }
	  var acc = this.jpoint(null, null, null);
	  var tmp = this._wnafT4;
	  for (i = max; i >= 0; i--) {
	    var k = 0;
	    while (i >= 0) {
	      var zero = true;
	      for (j = 0; j < len; j++) {
	        tmp[j] = naf[j][i] | 0;
	        if (tmp[j] !== 0) zero = false;
	      }
	      if (!zero) break;
	      k++;
	      i--;
	    }
	    if (i >= 0) k++;
	    acc = acc.dblp(k);
	    if (i < 0) break;
	    for (j = 0; j < len; j++) {
	      var z = tmp[j];
	      if (z === 0) continue;else if (z > 0) p = wnd[j][z - 1 >> 1];else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
	      if (p.type === 'affine') acc = acc.mixedAdd(p);else acc = acc.add(p);
	    }
	  }
	  // Zeroify references
	  for (i = 0; i < len; i++) {
	    wnd[i] = null;
	  }
	  if (jacobianResult) return acc;else return acc.toP();
	};
	function BasePoint(curve, type) {
	  this.curve = curve;
	  this.type = type;
	  this.precomputed = null;
	}
	BaseCurve.BasePoint = BasePoint;
	BasePoint.prototype.eq = function eq( /*other*/
	) {
	  throw new Error('Not implemented');
	};
	BasePoint.prototype.validate = function validate() {
	  return this.curve.validate(this);
	};
	BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  bytes = utils.toArray(bytes, enc);
	  var len = this.p.byteLength();

	  // uncompressed, hybrid-odd, hybrid-even
	  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
	    if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);
	    var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
	    return res;
	  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {
	    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
	  }
	  throw new Error('Unknown point format');
	};
	BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
	  return this.encode(enc, true);
	};
	BasePoint.prototype._encode = function _encode(compact) {
	  var len = this.curve.p.byteLength();
	  var x = this.getX().toArray('be', len);
	  if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);
	  return [0x04].concat(x, this.getY().toArray('be', len));
	};
	BasePoint.prototype.encode = function encode(enc, compact) {
	  return utils.encode(this._encode(compact), enc);
	};
	BasePoint.prototype.precompute = function precompute(power) {
	  if (this.precomputed) return this;
	  var precomputed = {
	    doubles: null,
	    naf: null,
	    beta: null
	  };
	  precomputed.naf = this._getNAFPoints(8);
	  precomputed.doubles = this._getDoubles(4, power);
	  precomputed.beta = this._getBeta();
	  this.precomputed = precomputed;
	  return this;
	};
	BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
	  if (!this.precomputed) return false;
	  var doubles = this.precomputed.doubles;
	  if (!doubles) return false;
	  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
	};
	BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
	  if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
	  var doubles = [this];
	  var acc = this;
	  for (var i = 0; i < power; i += step) {
	    for (var j = 0; j < step; j++) {
	      acc = acc.dbl();
	    }
	    doubles.push(acc);
	  }
	  return {
	    step: step,
	    points: doubles
	  };
	};
	BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
	  if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
	  var res = [this];
	  var max = (1 << wnd) - 1;
	  var dbl = max === 1 ? null : this.dbl();
	  for (var i = 1; i < max; i++) {
	    res[i] = res[i - 1].add(dbl);
	  }
	  return {
	    wnd: wnd,
	    points: res
	  };
	};
	BasePoint.prototype._getBeta = function _getBeta() {
	  return null;
	};
	BasePoint.prototype.dblp = function dblp(k) {
	  var r = this;
	  for (var i = 0; i < k; i++) {
	    r = r.dbl();
	  }
	  return r;
	};
	return base$1;
}

var short;
var hasRequiredShort;

function requireShort () {
	if (hasRequiredShort) return short;
	hasRequiredShort = 1;

	var utils = requireUtils$1();
	var BN = requireBn$1();
	var inherits = inherits$2.exports;
	var Base = requireBase$1();
	var assert = utils.assert;
	function ShortCurve(conf) {
	  Base.call(this, 'short', conf);
	  this.a = new BN(conf.a, 16).toRed(this.red);
	  this.b = new BN(conf.b, 16).toRed(this.red);
	  this.tinv = this.two.redInvm();
	  this.zeroA = this.a.fromRed().cmpn(0) === 0;
	  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

	  // If the curve is endomorphic, precalculate beta and lambda
	  this.endo = this._getEndomorphism(conf);
	  this._endoWnafT1 = new Array(4);
	  this._endoWnafT2 = new Array(4);
	}
	inherits(ShortCurve, Base);
	short = ShortCurve;
	ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
	  // No efficient endomorphism
	  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;

	  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
	  var beta;
	  var lambda;
	  if (conf.beta) {
	    beta = new BN(conf.beta, 16).toRed(this.red);
	  } else {
	    var betas = this._getEndoRoots(this.p);
	    // Choose the smallest beta
	    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
	    beta = beta.toRed(this.red);
	  }
	  if (conf.lambda) {
	    lambda = new BN(conf.lambda, 16);
	  } else {
	    // Choose the lambda that is matching selected beta
	    var lambdas = this._getEndoRoots(this.n);
	    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
	      lambda = lambdas[0];
	    } else {
	      lambda = lambdas[1];
	      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
	    }
	  }

	  // Get basis vectors, used for balanced length-two representation
	  var basis;
	  if (conf.basis) {
	    basis = conf.basis.map(function (vec) {
	      return {
	        a: new BN(vec.a, 16),
	        b: new BN(vec.b, 16)
	      };
	    });
	  } else {
	    basis = this._getEndoBasis(lambda);
	  }
	  return {
	    beta: beta,
	    lambda: lambda,
	    basis: basis
	  };
	};
	ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
	  // Find roots of for x^2 + x + 1 in F
	  // Root = (-1 +- Sqrt(-3)) / 2
	  //
	  var red = num === this.p ? this.red : BN.mont(num);
	  var tinv = new BN(2).toRed(red).redInvm();
	  var ntinv = tinv.redNeg();
	  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
	  var l1 = ntinv.redAdd(s).fromRed();
	  var l2 = ntinv.redSub(s).fromRed();
	  return [l1, l2];
	};
	ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
	  // aprxSqrt >= sqrt(this.n)
	  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

	  // 3.74
	  // Run EGCD, until r(L + 1) < aprxSqrt
	  var u = lambda;
	  var v = this.n.clone();
	  var x1 = new BN(1);
	  var y1 = new BN(0);
	  var x2 = new BN(0);
	  var y2 = new BN(1);

	  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
	  var a0;
	  var b0;
	  // First vector
	  var a1;
	  var b1;
	  // Second vector
	  var a2;
	  var b2;
	  var prevR;
	  var i = 0;
	  var r;
	  var x;
	  while (u.cmpn(0) !== 0) {
	    var q = v.div(u);
	    r = v.sub(q.mul(u));
	    x = x2.sub(q.mul(x1));
	    var y = y2.sub(q.mul(y1));
	    if (!a1 && r.cmp(aprxSqrt) < 0) {
	      a0 = prevR.neg();
	      b0 = x1;
	      a1 = r.neg();
	      b1 = x;
	    } else if (a1 && ++i === 2) {
	      break;
	    }
	    prevR = r;
	    v = u;
	    u = r;
	    x2 = x1;
	    x1 = x;
	    y2 = y1;
	    y1 = y;
	  }
	  a2 = r.neg();
	  b2 = x;
	  var len1 = a1.sqr().add(b1.sqr());
	  var len2 = a2.sqr().add(b2.sqr());
	  if (len2.cmp(len1) >= 0) {
	    a2 = a0;
	    b2 = b0;
	  }

	  // Normalize signs
	  if (a1.negative) {
	    a1 = a1.neg();
	    b1 = b1.neg();
	  }
	  if (a2.negative) {
	    a2 = a2.neg();
	    b2 = b2.neg();
	  }
	  return [{
	    a: a1,
	    b: b1
	  }, {
	    a: a2,
	    b: b2
	  }];
	};
	ShortCurve.prototype._endoSplit = function _endoSplit(k) {
	  var basis = this.endo.basis;
	  var v1 = basis[0];
	  var v2 = basis[1];
	  var c1 = v2.b.mul(k).divRound(this.n);
	  var c2 = v1.b.neg().mul(k).divRound(this.n);
	  var p1 = c1.mul(v1.a);
	  var p2 = c2.mul(v2.a);
	  var q1 = c1.mul(v1.b);
	  var q2 = c2.mul(v2.b);

	  // Calculate answer
	  var k1 = k.sub(p1).sub(p2);
	  var k2 = q1.add(q2).neg();
	  return {
	    k1: k1,
	    k2: k2
	  };
	};
	ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new BN(x, 16);
	  if (!x.red) x = x.toRed(this.red);
	  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');

	  // XXX Is there any way to tell if the number is odd without converting it
	  // to non-red form?
	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
	  return this.point(x, y);
	};
	ShortCurve.prototype.validate = function validate(point) {
	  if (point.inf) return true;
	  var x = point.x;
	  var y = point.y;
	  var ax = this.a.redMul(x);
	  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
	  return y.redSqr().redISub(rhs).cmpn(0) === 0;
	};
	ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
	  var npoints = this._endoWnafT1;
	  var ncoeffs = this._endoWnafT2;
	  for (var i = 0; i < points.length; i++) {
	    var split = this._endoSplit(coeffs[i]);
	    var p = points[i];
	    var beta = p._getBeta();
	    if (split.k1.negative) {
	      split.k1.ineg();
	      p = p.neg(true);
	    }
	    if (split.k2.negative) {
	      split.k2.ineg();
	      beta = beta.neg(true);
	    }
	    npoints[i * 2] = p;
	    npoints[i * 2 + 1] = beta;
	    ncoeffs[i * 2] = split.k1;
	    ncoeffs[i * 2 + 1] = split.k2;
	  }
	  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

	  // Clean-up references to points and coefficients
	  for (var j = 0; j < i * 2; j++) {
	    npoints[j] = null;
	    ncoeffs[j] = null;
	  }
	  return res;
	};
	function Point(curve, x, y, isRed) {
	  Base.BasePoint.call(this, curve, 'affine');
	  if (x === null && y === null) {
	    this.x = null;
	    this.y = null;
	    this.inf = true;
	  } else {
	    this.x = new BN(x, 16);
	    this.y = new BN(y, 16);
	    // Force redgomery representation when loading from JSON
	    if (isRed) {
	      this.x.forceRed(this.curve.red);
	      this.y.forceRed(this.curve.red);
	    }
	    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
	    this.inf = false;
	  }
	}
	inherits(Point, Base.BasePoint);
	ShortCurve.prototype.point = function point(x, y, isRed) {
	  return new Point(this, x, y, isRed);
	};
	ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
	  return Point.fromJSON(this, obj, red);
	};
	Point.prototype._getBeta = function _getBeta() {
	  if (!this.curve.endo) return;
	  var pre = this.precomputed;
	  if (pre && pre.beta) return pre.beta;
	  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
	  if (pre) {
	    var curve = this.curve;
	    var endoMul = function endoMul(p) {
	      return curve.point(p.x.redMul(curve.endo.beta), p.y);
	    };
	    pre.beta = beta;
	    beta.precomputed = {
	      beta: null,
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(endoMul)
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(endoMul)
	      }
	    };
	  }
	  return beta;
	};
	Point.prototype.toJSON = function toJSON() {
	  if (!this.precomputed) return [this.x, this.y];
	  return [this.x, this.y, this.precomputed && {
	    doubles: this.precomputed.doubles && {
	      step: this.precomputed.doubles.step,
	      points: this.precomputed.doubles.points.slice(1)
	    },
	    naf: this.precomputed.naf && {
	      wnd: this.precomputed.naf.wnd,
	      points: this.precomputed.naf.points.slice(1)
	    }
	  }];
	};
	Point.fromJSON = function fromJSON(curve, obj, red) {
	  if (typeof obj === 'string') obj = JSON.parse(obj);
	  var res = curve.point(obj[0], obj[1], red);
	  if (!obj[2]) return res;
	  function obj2point(obj) {
	    return curve.point(obj[0], obj[1], red);
	  }
	  var pre = obj[2];
	  res.precomputed = {
	    beta: null,
	    doubles: pre.doubles && {
	      step: pre.doubles.step,
	      points: [res].concat(pre.doubles.points.map(obj2point))
	    },
	    naf: pre.naf && {
	      wnd: pre.naf.wnd,
	      points: [res].concat(pre.naf.points.map(obj2point))
	    }
	  };
	  return res;
	};
	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity()) return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
	};
	Point.prototype.isInfinity = function isInfinity() {
	  return this.inf;
	};
	Point.prototype.add = function add(p) {
	  // O + P = P
	  if (this.inf) return p;

	  // P + O = P
	  if (p.inf) return this;

	  // P + P = 2P
	  if (this.eq(p)) return this.dbl();

	  // P + (-P) = O
	  if (this.neg().eq(p)) return this.curve.point(null, null);

	  // P + Q = O
	  if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
	  var c = this.y.redSub(p.y);
	  if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
	  var nx = c.redSqr().redISub(this.x).redISub(p.x);
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};
	Point.prototype.dbl = function dbl() {
	  if (this.inf) return this;

	  // 2P = O
	  var ys1 = this.y.redAdd(this.y);
	  if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
	  var a = this.curve.a;
	  var x2 = this.x.redSqr();
	  var dyinv = ys1.redInvm();
	  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
	  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};
	Point.prototype.getX = function getX() {
	  return this.x.fromRed();
	};
	Point.prototype.getY = function getY() {
	  return this.y.fromRed();
	};
	Point.prototype.mul = function mul(k) {
	  k = new BN(k, 16);
	  if (this.isInfinity()) return this;else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);else return this.curve._wnafMul(this, k);
	};
	Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
	  var points = [this, p2];
	  var coeffs = [k1, k2];
	  if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);else return this.curve._wnafMulAdd(1, points, coeffs, 2);
	};
	Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
	  var points = [this, p2];
	  var coeffs = [k1, k2];
	  if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
	};
	Point.prototype.eq = function eq(p) {
	  return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
	};
	Point.prototype.neg = function neg(_precompute) {
	  if (this.inf) return this;
	  var res = this.curve.point(this.x, this.y.redNeg());
	  if (_precompute && this.precomputed) {
	    var pre = this.precomputed;
	    var negate = function negate(p) {
	      return p.neg();
	    };
	    res.precomputed = {
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(negate)
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(negate)
	      }
	    };
	  }
	  return res;
	};
	Point.prototype.toJ = function toJ() {
	  if (this.inf) return this.curve.jpoint(null, null, null);
	  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
	  return res;
	};
	function JPoint(curve, x, y, z) {
	  Base.BasePoint.call(this, curve, 'jacobian');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.one;
	    this.y = this.curve.one;
	    this.z = new BN(0);
	  } else {
	    this.x = new BN(x, 16);
	    this.y = new BN(y, 16);
	    this.z = new BN(z, 16);
	  }
	  if (!this.x.red) this.x = this.x.toRed(this.curve.red);
	  if (!this.y.red) this.y = this.y.toRed(this.curve.red);
	  if (!this.z.red) this.z = this.z.toRed(this.curve.red);
	  this.zOne = this.z === this.curve.one;
	}
	inherits(JPoint, Base.BasePoint);
	ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
	  return new JPoint(this, x, y, z);
	};
	JPoint.prototype.toP = function toP() {
	  if (this.isInfinity()) return this.curve.point(null, null);
	  var zinv = this.z.redInvm();
	  var zinv2 = zinv.redSqr();
	  var ax = this.x.redMul(zinv2);
	  var ay = this.y.redMul(zinv2).redMul(zinv);
	  return this.curve.point(ax, ay);
	};
	JPoint.prototype.neg = function neg() {
	  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
	};
	JPoint.prototype.add = function add(p) {
	  // O + P = P
	  if (this.isInfinity()) return p;

	  // P + O = P
	  if (p.isInfinity()) return this;

	  // 12M + 4S + 7A
	  var pz2 = p.z.redSqr();
	  var z2 = this.z.redSqr();
	  var u1 = this.x.redMul(pz2);
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y.redMul(pz2.redMul(p.z));
	  var s2 = p.y.redMul(z2.redMul(this.z));
	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
	  }
	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);
	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(p.z).redMul(h);
	  return this.curve.jpoint(nx, ny, nz);
	};
	JPoint.prototype.mixedAdd = function mixedAdd(p) {
	  // O + P = P
	  if (this.isInfinity()) return p.toJ();

	  // P + O = P
	  if (p.isInfinity()) return this;

	  // 8M + 3S + 7A
	  var z2 = this.z.redSqr();
	  var u1 = this.x;
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y;
	  var s2 = p.y.redMul(z2).redMul(this.z);
	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
	  }
	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);
	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(h);
	  return this.curve.jpoint(nx, ny, nz);
	};
	JPoint.prototype.dblp = function dblp(pow) {
	  if (pow === 0) return this;
	  if (this.isInfinity()) return this;
	  if (!pow) return this.dbl();
	  var i;
	  if (this.curve.zeroA || this.curve.threeA) {
	    var r = this;
	    for (i = 0; i < pow; i++) {
	      r = r.dbl();
	    }
	    return r;
	  }

	  // 1M + 2S + 1A + N * (4S + 5M + 8A)
	  // N = 1 => 6M + 6S + 9A
	  var a = this.curve.a;
	  var tinv = this.curve.tinv;
	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  // Reuse results
	  var jyd = jy.redAdd(jy);
	  for (i = 0; i < pow; i++) {
	    var jx2 = jx.redSqr();
	    var jyd2 = jyd.redSqr();
	    var jyd4 = jyd2.redSqr();
	    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
	    var t1 = jx.redMul(jyd2);
	    var nx = c.redSqr().redISub(t1.redAdd(t1));
	    var t2 = t1.redISub(nx);
	    var dny = c.redMul(t2);
	    dny = dny.redIAdd(dny).redISub(jyd4);
	    var nz = jyd.redMul(jz);
	    if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
	    jx = nx;
	    jz = nz;
	    jyd = dny;
	  }
	  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
	};
	JPoint.prototype.dbl = function dbl() {
	  if (this.isInfinity()) return this;
	  if (this.curve.zeroA) return this._zeroDbl();else if (this.curve.threeA) return this._threeDbl();else return this._dbl();
	};
	JPoint.prototype._zeroDbl = function _zeroDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 14A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a; a = 0
	    var m = xx.redAdd(xx).redIAdd(xx);
	    // T = M ^ 2 - 2*S
	    var t = m.redSqr().redISub(s).redISub(s);

	    // 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);

	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2*Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-dbl-2009-l
	    // 2M + 5S + 13A

	    // A = X1^2
	    var a = this.x.redSqr();
	    // B = Y1^2
	    var b = this.y.redSqr();
	    // C = B^2
	    var c = b.redSqr();
	    // D = 2 * ((X1 + B)^2 - A - C)
	    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
	    d = d.redIAdd(d);
	    // E = 3 * A
	    var e = a.redAdd(a).redIAdd(a);
	    // F = E^2
	    var f = e.redSqr();

	    // 8 * C
	    var c8 = c.redIAdd(c);
	    c8 = c8.redIAdd(c8);
	    c8 = c8.redIAdd(c8);

	    // X3 = F - 2 * D
	    nx = f.redISub(d).redISub(d);
	    // Y3 = E * (D - X3) - 8 * C
	    ny = e.redMul(d.redISub(nx)).redISub(c8);
	    // Z3 = 2 * Y1 * Z1
	    nz = this.y.redMul(this.z);
	    nz = nz.redIAdd(nz);
	  }
	  return this.curve.jpoint(nx, ny, nz);
	};
	JPoint.prototype._threeDbl = function _threeDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 15A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a
	    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
	    // T = M^2 - 2 * S
	    var t = m.redSqr().redISub(s).redISub(s);
	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2 * Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
	    // 3M + 5S

	    // delta = Z1^2
	    var delta = this.z.redSqr();
	    // gamma = Y1^2
	    var gamma = this.y.redSqr();
	    // beta = X1 * gamma
	    var beta = this.x.redMul(gamma);
	    // alpha = 3 * (X1 - delta) * (X1 + delta)
	    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
	    alpha = alpha.redAdd(alpha).redIAdd(alpha);
	    // X3 = alpha^2 - 8 * beta
	    var beta4 = beta.redIAdd(beta);
	    beta4 = beta4.redIAdd(beta4);
	    var beta8 = beta4.redAdd(beta4);
	    nx = alpha.redSqr().redISub(beta8);
	    // Z3 = (Y1 + Z1)^2 - gamma - delta
	    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
	    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
	    var ggamma8 = gamma.redSqr();
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
	  }
	  return this.curve.jpoint(nx, ny, nz);
	};
	JPoint.prototype._dbl = function _dbl() {
	  var a = this.curve.a;

	  // 4M + 6S + 10A
	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();
	  var jx2 = jx.redSqr();
	  var jy2 = jy.redSqr();
	  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
	  var jxd4 = jx.redAdd(jx);
	  jxd4 = jxd4.redIAdd(jxd4);
	  var t1 = jxd4.redMul(jy2);
	  var nx = c.redSqr().redISub(t1.redAdd(t1));
	  var t2 = t1.redISub(nx);
	  var jyd8 = jy2.redSqr();
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  var ny = c.redMul(t2).redISub(jyd8);
	  var nz = jy.redAdd(jy).redMul(jz);
	  return this.curve.jpoint(nx, ny, nz);
	};
	JPoint.prototype.trpl = function trpl() {
	  if (!this.curve.zeroA) return this.dbl().add(this);

	  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
	  // 5M + 10S + ...

	  // XX = X1^2
	  var xx = this.x.redSqr();
	  // YY = Y1^2
	  var yy = this.y.redSqr();
	  // ZZ = Z1^2
	  var zz = this.z.redSqr();
	  // YYYY = YY^2
	  var yyyy = yy.redSqr();
	  // M = 3 * XX + a * ZZ2; a = 0
	  var m = xx.redAdd(xx).redIAdd(xx);
	  // MM = M^2
	  var mm = m.redSqr();
	  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
	  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	  e = e.redIAdd(e);
	  e = e.redAdd(e).redIAdd(e);
	  e = e.redISub(mm);
	  // EE = E^2
	  var ee = e.redSqr();
	  // T = 16*YYYY
	  var t = yyyy.redIAdd(yyyy);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  // U = (M + E)^2 - MM - EE - T
	  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
	  // X3 = 4 * (X1 * EE - 4 * YY * U)
	  var yyu4 = yy.redMul(u);
	  yyu4 = yyu4.redIAdd(yyu4);
	  yyu4 = yyu4.redIAdd(yyu4);
	  var nx = this.x.redMul(ee).redISub(yyu4);
	  nx = nx.redIAdd(nx);
	  nx = nx.redIAdd(nx);
	  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
	  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  // Z3 = (Z1 + E)^2 - ZZ - EE
	  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
	  return this.curve.jpoint(nx, ny, nz);
	};
	JPoint.prototype.mul = function mul(k, kbase) {
	  k = new BN(k, kbase);
	  return this.curve._wnafMul(this, k);
	};
	JPoint.prototype.eq = function eq(p) {
	  if (p.type === 'affine') return this.eq(p.toJ());
	  if (this === p) return true;

	  // x1 * z2^2 == x2 * z1^2
	  var z2 = this.z.redSqr();
	  var pz2 = p.z.redSqr();
	  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;

	  // y1 * z2^3 == y2 * z1^3
	  var z3 = z2.redMul(this.z);
	  var pz3 = pz2.redMul(p.z);
	  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
	};
	JPoint.prototype.eqXToP = function eqXToP(x) {
	  var zs = this.z.redSqr();
	  var rx = x.toRed(this.curve.red).redMul(zs);
	  if (this.x.cmp(rx) === 0) return true;
	  var xc = x.clone();
	  var t = this.curve.redN.redMul(zs);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0) return false;
	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0) return true;
	  }
	};
	JPoint.prototype.inspect = function inspect() {
	  if (this.isInfinity()) return '<EC JPoint Infinity>';
	  return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
	};
	JPoint.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};
	return short;
}

var mont;
var hasRequiredMont;

function requireMont () {
	if (hasRequiredMont) return mont;
	hasRequiredMont = 1;

	var BN = requireBn$1();
	var inherits = inherits$2.exports;
	var Base = requireBase$1();
	var utils = requireUtils$1();
	function MontCurve(conf) {
	  Base.call(this, 'mont', conf);
	  this.a = new BN(conf.a, 16).toRed(this.red);
	  this.b = new BN(conf.b, 16).toRed(this.red);
	  this.i4 = new BN(4).toRed(this.red).redInvm();
	  this.two = new BN(2).toRed(this.red);
	  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
	}
	inherits(MontCurve, Base);
	mont = MontCurve;
	MontCurve.prototype.validate = function validate(point) {
	  var x = point.normalize().x;
	  var x2 = x.redSqr();
	  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
	  var y = rhs.redSqrt();
	  return y.redSqr().cmp(rhs) === 0;
	};
	function Point(curve, x, z) {
	  Base.BasePoint.call(this, curve, 'projective');
	  if (x === null && z === null) {
	    this.x = this.curve.one;
	    this.z = this.curve.zero;
	  } else {
	    this.x = new BN(x, 16);
	    this.z = new BN(z, 16);
	    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
	    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
	  }
	}
	inherits(Point, Base.BasePoint);
	MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  return this.point(utils.toArray(bytes, enc), 1);
	};
	MontCurve.prototype.point = function point(x, z) {
	  return new Point(this, x, z);
	};
	MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point.fromJSON(this, obj);
	};
	Point.prototype.precompute = function precompute() {
	  // No-op
	};
	Point.prototype._encode = function _encode() {
	  return this.getX().toArray('be', this.curve.p.byteLength());
	};
	Point.fromJSON = function fromJSON(curve, obj) {
	  return new Point(curve, obj[0], obj[1] || curve.one);
	};
	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity()) return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};
	Point.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};
	Point.prototype.dbl = function dbl() {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
	  // 2M + 2S + 4A

	  // A = X1 + Z1
	  var a = this.x.redAdd(this.z);
	  // AA = A^2
	  var aa = a.redSqr();
	  // B = X1 - Z1
	  var b = this.x.redSub(this.z);
	  // BB = B^2
	  var bb = b.redSqr();
	  // C = AA - BB
	  var c = aa.redSub(bb);
	  // X3 = AA * BB
	  var nx = aa.redMul(bb);
	  // Z3 = C * (BB + A24 * C)
	  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
	  return this.curve.point(nx, nz);
	};
	Point.prototype.add = function add() {
	  throw new Error('Not supported on Montgomery curve');
	};
	Point.prototype.diffAdd = function diffAdd(p, diff) {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
	  // 4M + 2S + 6A

	  // A = X2 + Z2
	  var a = this.x.redAdd(this.z);
	  // B = X2 - Z2
	  var b = this.x.redSub(this.z);
	  // C = X3 + Z3
	  var c = p.x.redAdd(p.z);
	  // D = X3 - Z3
	  var d = p.x.redSub(p.z);
	  // DA = D * A
	  var da = d.redMul(a);
	  // CB = C * B
	  var cb = c.redMul(b);
	  // X5 = Z1 * (DA + CB)^2
	  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
	  // Z5 = X1 * (DA - CB)^2
	  var nz = diff.x.redMul(da.redISub(cb).redSqr());
	  return this.curve.point(nx, nz);
	};
	Point.prototype.mul = function mul(k) {
	  var t = k.clone();
	  var a = this; // (N / 2) * Q + Q
	  var b = this.curve.point(null, null); // (N / 2) * Q
	  var c = this; // Q

	  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1)) {
	    bits.push(t.andln(1));
	  }
	  for (var i = bits.length - 1; i >= 0; i--) {
	    if (bits[i] === 0) {
	      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
	      a = a.diffAdd(b, c);
	      // N * Q = 2 * ((N / 2) * Q + Q))
	      b = b.dbl();
	    } else {
	      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
	      b = a.diffAdd(b, c);
	      // N * Q + Q = 2 * ((N / 2) * Q + Q)
	      a = a.dbl();
	    }
	  }
	  return b;
	};
	Point.prototype.mulAdd = function mulAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};
	Point.prototype.jumlAdd = function jumlAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};
	Point.prototype.eq = function eq(other) {
	  return this.getX().cmp(other.getX()) === 0;
	};
	Point.prototype.normalize = function normalize() {
	  this.x = this.x.redMul(this.z.redInvm());
	  this.z = this.curve.one;
	  return this;
	};
	Point.prototype.getX = function getX() {
	  // Normalize coordinates
	  this.normalize();
	  return this.x.fromRed();
	};
	return mont;
}

var edwards;
var hasRequiredEdwards;

function requireEdwards () {
	if (hasRequiredEdwards) return edwards;
	hasRequiredEdwards = 1;

	var utils = requireUtils$1();
	var BN = requireBn$1();
	var inherits = inherits$2.exports;
	var Base = requireBase$1();
	var assert = utils.assert;
	function EdwardsCurve(conf) {
	  // NOTE: Important as we are creating point in Base.call()
	  this.twisted = (conf.a | 0) !== 1;
	  this.mOneA = this.twisted && (conf.a | 0) === -1;
	  this.extended = this.mOneA;
	  Base.call(this, 'edwards', conf);
	  this.a = new BN(conf.a, 16).umod(this.red.m);
	  this.a = this.a.toRed(this.red);
	  this.c = new BN(conf.c, 16).toRed(this.red);
	  this.c2 = this.c.redSqr();
	  this.d = new BN(conf.d, 16).toRed(this.red);
	  this.dd = this.d.redAdd(this.d);
	  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
	  this.oneC = (conf.c | 0) === 1;
	}
	inherits(EdwardsCurve, Base);
	edwards = EdwardsCurve;
	EdwardsCurve.prototype._mulA = function _mulA(num) {
	  if (this.mOneA) return num.redNeg();else return this.a.redMul(num);
	};
	EdwardsCurve.prototype._mulC = function _mulC(num) {
	  if (this.oneC) return num;else return this.c.redMul(num);
	};

	// Just for compatibility with Short curve
	EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
	  return this.point(x, y, z, t);
	};
	EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new BN(x, 16);
	  if (!x.red) x = x.toRed(this.red);
	  var x2 = x.redSqr();
	  var rhs = this.c2.redSub(this.a.redMul(x2));
	  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
	  var y2 = rhs.redMul(lhs.redInvm());
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
	  return this.point(x, y);
	};
	EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
	  y = new BN(y, 16);
	  if (!y.red) y = y.toRed(this.red);

	  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
	  var y2 = y.redSqr();
	  var lhs = y2.redSub(this.c2);
	  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
	  var x2 = lhs.redMul(rhs.redInvm());
	  if (x2.cmp(this.zero) === 0) {
	    if (odd) throw new Error('invalid point');else return this.point(this.zero, y);
	  }
	  var x = x2.redSqrt();
	  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');
	  if (x.fromRed().isOdd() !== odd) x = x.redNeg();
	  return this.point(x, y);
	};
	EdwardsCurve.prototype.validate = function validate(point) {
	  if (point.isInfinity()) return true;

	  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
	  point.normalize();
	  var x2 = point.x.redSqr();
	  var y2 = point.y.redSqr();
	  var lhs = x2.redMul(this.a).redAdd(y2);
	  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
	  return lhs.cmp(rhs) === 0;
	};
	function Point(curve, x, y, z, t) {
	  Base.BasePoint.call(this, curve, 'projective');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.zero;
	    this.y = this.curve.one;
	    this.z = this.curve.one;
	    this.t = this.curve.zero;
	    this.zOne = true;
	  } else {
	    this.x = new BN(x, 16);
	    this.y = new BN(y, 16);
	    this.z = z ? new BN(z, 16) : this.curve.one;
	    this.t = t && new BN(t, 16);
	    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
	    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
	    if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
	    this.zOne = this.z === this.curve.one;

	    // Use extended coordinates
	    if (this.curve.extended && !this.t) {
	      this.t = this.x.redMul(this.y);
	      if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
	    }
	  }
	}
	inherits(Point, Base.BasePoint);
	EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point.fromJSON(this, obj);
	};
	EdwardsCurve.prototype.point = function point(x, y, z, t) {
	  return new Point(this, x, y, z, t);
	};
	Point.fromJSON = function fromJSON(curve, obj) {
	  return new Point(curve, obj[0], obj[1], obj[2]);
	};
	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity()) return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};
	Point.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
	};
	Point.prototype._extDbl = function _extDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #doubling-dbl-2008-hwcd
	  // 4M + 4S

	  // A = X1^2
	  var a = this.x.redSqr();
	  // B = Y1^2
	  var b = this.y.redSqr();
	  // C = 2 * Z1^2
	  var c = this.z.redSqr();
	  c = c.redIAdd(c);
	  // D = a * A
	  var d = this.curve._mulA(a);
	  // E = (X1 + Y1)^2 - A - B
	  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
	  // G = D + B
	  var g = d.redAdd(b);
	  // F = G - C
	  var f = g.redSub(c);
	  // H = D - B
	  var h = d.redSub(b);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};
	Point.prototype._projDbl = function _projDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #doubling-dbl-2008-bbjlp
	  //     #doubling-dbl-2007-bl
	  // and others
	  // Generally 3M + 4S or 2M + 4S

	  // B = (X1 + Y1)^2
	  var b = this.x.redAdd(this.y).redSqr();
	  // C = X1^2
	  var c = this.x.redSqr();
	  // D = Y1^2
	  var d = this.y.redSqr();
	  var nx;
	  var ny;
	  var nz;
	  var e;
	  var h;
	  var j;
	  if (this.curve.twisted) {
	    // E = a * C
	    e = this.curve._mulA(c);
	    // F = E + D
	    var f = e.redAdd(d);
	    if (this.zOne) {
	      // X3 = (B - C - D) * (F - 2)
	      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F^2 - 2 * F
	      nz = f.redSqr().redSub(f).redSub(f);
	    } else {
	      // H = Z1^2
	      h = this.z.redSqr();
	      // J = F - 2 * H
	      j = f.redSub(h).redISub(h);
	      // X3 = (B-C-D)*J
	      nx = b.redSub(c).redISub(d).redMul(j);
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F * J
	      nz = f.redMul(j);
	    }
	  } else {
	    // E = C + D
	    e = c.redAdd(d);
	    // H = (c * Z1)^2
	    h = this.curve._mulC(this.z).redSqr();
	    // J = E - 2 * H
	    j = e.redSub(h).redSub(h);
	    // X3 = c * (B - E) * J
	    nx = this.curve._mulC(b.redISub(e)).redMul(j);
	    // Y3 = c * E * (C - D)
	    ny = this.curve._mulC(e).redMul(c.redISub(d));
	    // Z3 = E * J
	    nz = e.redMul(j);
	  }
	  return this.curve.point(nx, ny, nz);
	};
	Point.prototype.dbl = function dbl() {
	  if (this.isInfinity()) return this;

	  // Double in extended coordinates
	  if (this.curve.extended) return this._extDbl();else return this._projDbl();
	};
	Point.prototype._extAdd = function _extAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #addition-add-2008-hwcd-3
	  // 8M

	  // A = (Y1 - X1) * (Y2 - X2)
	  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
	  // B = (Y1 + X1) * (Y2 + X2)
	  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
	  // C = T1 * k * T2
	  var c = this.t.redMul(this.curve.dd).redMul(p.t);
	  // D = Z1 * 2 * Z2
	  var d = this.z.redMul(p.z.redAdd(p.z));
	  // E = B - A
	  var e = b.redSub(a);
	  // F = D - C
	  var f = d.redSub(c);
	  // G = D + C
	  var g = d.redAdd(c);
	  // H = B + A
	  var h = b.redAdd(a);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};
	Point.prototype._projAdd = function _projAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #addition-add-2008-bbjlp
	  //     #addition-add-2007-bl
	  // 10M + 1S

	  // A = Z1 * Z2
	  var a = this.z.redMul(p.z);
	  // B = A^2
	  var b = a.redSqr();
	  // C = X1 * X2
	  var c = this.x.redMul(p.x);
	  // D = Y1 * Y2
	  var d = this.y.redMul(p.y);
	  // E = d * C * D
	  var e = this.curve.d.redMul(c).redMul(d);
	  // F = B - E
	  var f = b.redSub(e);
	  // G = B + E
	  var g = b.redAdd(e);
	  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
	  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
	  var nx = a.redMul(f).redMul(tmp);
	  var ny;
	  var nz;
	  if (this.curve.twisted) {
	    // Y3 = A * G * (D - a * C)
	    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
	    // Z3 = F * G
	    nz = f.redMul(g);
	  } else {
	    // Y3 = A * G * (D - C)
	    ny = a.redMul(g).redMul(d.redSub(c));
	    // Z3 = c * F * G
	    nz = this.curve._mulC(f).redMul(g);
	  }
	  return this.curve.point(nx, ny, nz);
	};
	Point.prototype.add = function add(p) {
	  if (this.isInfinity()) return p;
	  if (p.isInfinity()) return this;
	  if (this.curve.extended) return this._extAdd(p);else return this._projAdd(p);
	};
	Point.prototype.mul = function mul(k) {
	  if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else return this.curve._wnafMul(this, k);
	};
	Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
	};
	Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
	};
	Point.prototype.normalize = function normalize() {
	  if (this.zOne) return this;

	  // Normalize coordinates
	  var zi = this.z.redInvm();
	  this.x = this.x.redMul(zi);
	  this.y = this.y.redMul(zi);
	  if (this.t) this.t = this.t.redMul(zi);
	  this.z = this.curve.one;
	  this.zOne = true;
	  return this;
	};
	Point.prototype.neg = function neg() {
	  return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
	};
	Point.prototype.getX = function getX() {
	  this.normalize();
	  return this.x.fromRed();
	};
	Point.prototype.getY = function getY() {
	  this.normalize();
	  return this.y.fromRed();
	};
	Point.prototype.eq = function eq(other) {
	  return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
	};
	Point.prototype.eqXToP = function eqXToP(x) {
	  var rx = x.toRed(this.curve.red).redMul(this.z);
	  if (this.x.cmp(rx) === 0) return true;
	  var xc = x.clone();
	  var t = this.curve.redN.redMul(this.z);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0) return false;
	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0) return true;
	  }
	};

	// Compatibility with BaseCurve
	Point.prototype.toP = Point.prototype.normalize;
	Point.prototype.mixedAdd = Point.prototype.add;
	return edwards;
}

var hasRequiredCurve;

function requireCurve () {
	if (hasRequiredCurve) return curve;
	hasRequiredCurve = 1;
	(function (exports) {

		var curve = exports;
		curve.base = requireBase$1();
		curve["short"] = requireShort();
		curve.mont = requireMont();
		curve.edwards = requireEdwards();
} (curve));
	return curve;
}

var curves = {};

var secp256k1;
var hasRequiredSecp256k1$2;

function requireSecp256k1$2 () {
	if (hasRequiredSecp256k1$2) return secp256k1;
	hasRequiredSecp256k1$2 = 1;
	secp256k1 = {
	  doubles: {
	    step: 4,
	    points: [['e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a', 'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'], ['8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508', '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'], ['175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739', 'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'], ['363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640', '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'], ['8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c', '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'], ['723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda', '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'], ['eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa', '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'], ['100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0', 'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'], ['e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d', '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'], ['feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d', 'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'], ['da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1', '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'], ['53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0', '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'], ['8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047', '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'], ['385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862', '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'], ['6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7', '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'], ['3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd', '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'], ['85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83', '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'], ['948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a', '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'], ['6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8', 'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'], ['e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d', '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'], ['e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725', '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'], ['213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754', '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'], ['4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c', '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'], ['fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6', '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'], ['76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39', 'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'], ['c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891', '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'], ['d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b', 'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'], ['b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03', '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'], ['e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d', 'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'], ['a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070', '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'], ['90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4', 'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'], ['8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da', '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'], ['e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11', '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'], ['8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e', 'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'], ['e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41', '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'], ['b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef', '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'], ['d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8', 'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'], ['324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d', '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'], ['4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96', '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'], ['9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd', 'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'], ['6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5', '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'], ['a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266', '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'], ['7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71', '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'], ['928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac', 'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'], ['85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751', '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'], ['ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e', '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'], ['827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241', 'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'], ['eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3', 'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'], ['e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f', '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'], ['1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19', 'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'], ['146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be', 'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'], ['fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9', '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'], ['da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2', '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'], ['a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13', '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'], ['174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c', 'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'], ['959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba', '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'], ['d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151', 'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'], ['64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073', 'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'], ['8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458', '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'], ['13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b', '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'], ['bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366', 'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'], ['8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa', '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'], ['8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0', '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'], ['dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787', '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'], ['f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e', 'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82']]
	  },
	  naf: {
	    wnd: 7,
	    points: [['f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9', '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'], ['2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4', 'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'], ['5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc', '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'], ['acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe', 'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'], ['774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb', 'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'], ['f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8', 'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'], ['d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e', '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'], ['defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34', '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'], ['2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c', '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'], ['352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5', '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'], ['2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f', '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'], ['9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714', '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'], ['daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729', 'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'], ['c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db', '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'], ['6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4', 'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'], ['1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5', 'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'], ['605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479', '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'], ['62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d', '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'], ['80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f', '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'], ['7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb', 'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'], ['d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9', 'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'], ['49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963', '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'], ['77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74', '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'], ['f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530', 'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'], ['463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b', '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'], ['f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247', 'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'], ['caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1', 'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'], ['2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120', '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'], ['7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435', '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'], ['754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18', '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'], ['e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8', '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'], ['186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb', '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'], ['df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f', '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'], ['5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143', 'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'], ['290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba', 'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'], ['af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45', 'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'], ['766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a', '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'], ['59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e', 'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'], ['f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8', 'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'], ['7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c', '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'], ['948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519', 'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'], ['7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab', '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'], ['3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca', 'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'], ['d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf', '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'], ['1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610', '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'], ['733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4', 'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'], ['15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c', 'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'], ['a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940', 'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'], ['e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980', 'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'], ['311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3', '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'], ['34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf', '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'], ['f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63', '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'], ['d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448', 'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'], ['32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf', '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'], ['7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5', '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'], ['ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6', '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'], ['16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5', '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'], ['eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99', 'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'], ['78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51', 'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'], ['494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5', '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'], ['a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5', '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'], ['c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997', '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'], ['841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881', '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'], ['5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5', '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'], ['36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66', 'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'], ['336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726', 'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'], ['8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede', '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'], ['1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94', '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'], ['85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31', '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'], ['29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51', 'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'], ['a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252', 'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'], ['4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5', 'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'], ['d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b', '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'], ['ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4', '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'], ['af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f', '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'], ['e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889', '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'], ['591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246', 'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'], ['11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984', '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'], ['3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a', 'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'], ['cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030', 'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'], ['c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197', '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'], ['c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593', 'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'], ['a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef', '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'], ['347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38', '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'], ['da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a', '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'], ['c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111', '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'], ['4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502', '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'], ['3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea', 'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'], ['cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26', '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'], ['b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986', '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'], ['d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e', '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'], ['48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4', '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'], ['dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda', 'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'], ['6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859', 'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'], ['e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f', 'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'], ['eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c', '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'], ['13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942', 'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'], ['ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a', '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'], ['b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80', '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'], ['ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d', '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'], ['8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1', 'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'], ['52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63', 'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'], ['e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352', '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'], ['7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193', 'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'], ['5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00', '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'], ['32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58', 'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'], ['e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7', 'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'], ['8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8', 'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'], ['4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e', '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'], ['3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d', 'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'], ['674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b', '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'], ['d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f', 'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'], ['30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6', '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'], ['be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297', '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'], ['93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a', '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'], ['b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c', 'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'], ['d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52', '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'], ['d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb', 'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'], ['463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065', 'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'], ['7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917', '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'], ['74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9', 'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'], ['30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3', '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'], ['9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57', '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'], ['176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66', 'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'], ['75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8', '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'], ['809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721', '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'], ['1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180', '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9']]
	  }
	};
	return secp256k1;
}

var hasRequiredCurves;

function requireCurves () {
	if (hasRequiredCurves) return curves;
	hasRequiredCurves = 1;
	(function (exports) {

		var curves = exports;
		var hash = hash$1;
		var curve = requireCurve();
		var utils = requireUtils$1();
		var assert = utils.assert;
		function PresetCurve(options) {
		  if (options.type === 'short') this.curve = new curve["short"](options);else if (options.type === 'edwards') this.curve = new curve.edwards(options);else this.curve = new curve.mont(options);
		  this.g = this.curve.g;
		  this.n = this.curve.n;
		  this.hash = options.hash;
		  assert(this.g.validate(), 'Invalid curve');
		  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
		}
		curves.PresetCurve = PresetCurve;
		function defineCurve(name, options) {
		  Object.defineProperty(curves, name, {
		    configurable: true,
		    enumerable: true,
		    get: function get() {
		      var curve = new PresetCurve(options);
		      Object.defineProperty(curves, name, {
		        configurable: true,
		        enumerable: true,
		        value: curve
		      });
		      return curve;
		    }
		  });
		}
		defineCurve('p192', {
		  type: 'short',
		  prime: 'p192',
		  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
		  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
		  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
		  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
		  hash: hash.sha256,
		  gRed: false,
		  g: ['188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012', '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811']
		});
		defineCurve('p224', {
		  type: 'short',
		  prime: 'p224',
		  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
		  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
		  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
		  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
		  hash: hash.sha256,
		  gRed: false,
		  g: ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21', 'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34']
		});
		defineCurve('p256', {
		  type: 'short',
		  prime: null,
		  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
		  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
		  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
		  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
		  hash: hash.sha256,
		  gRed: false,
		  g: ['6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296', '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5']
		});
		defineCurve('p384', {
		  type: 'short',
		  prime: null,
		  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 ffffffff',
		  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 fffffffc',
		  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' + '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
		  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' + 'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
		  hash: hash.sha384,
		  gRed: false,
		  g: ['aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' + '5502f25d bf55296c 3a545e38 72760ab7', '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' + '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f']
		});
		defineCurve('p521', {
		  type: 'short',
		  prime: null,
		  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff',
		  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff fffffffc',
		  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' + '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' + '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
		  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' + 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
		  hash: hash.sha512,
		  gRed: false,
		  g: ['000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' + '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' + 'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66', '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' + '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' + '3fad0761 353c7086 a272c240 88be9476 9fd16650']
		});
		defineCurve('curve25519', {
		  type: 'mont',
		  prime: 'p25519',
		  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
		  a: '76d06',
		  b: '1',
		  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
		  hash: hash.sha256,
		  gRed: false,
		  g: ['9']
		});
		defineCurve('ed25519', {
		  type: 'edwards',
		  prime: 'p25519',
		  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
		  a: '-1',
		  c: '1',
		  // -121665 * (121666^(-1)) (mod P)
		  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
		  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
		  hash: hash.sha256,
		  gRed: false,
		  g: ['216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
		  // 4/5
		  '6666666666666666666666666666666666666666666666666666666666666658']
		});
		var pre;
		try {
		  pre = requireSecp256k1$2();
		} catch (e) {
		  pre = undefined;
		}
		defineCurve('secp256k1', {
		  type: 'short',
		  prime: 'k256',
		  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
		  a: '0',
		  b: '7',
		  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
		  h: '1',
		  hash: hash.sha256,
		  // Precomputed endomorphism
		  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
		  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
		  basis: [{
		    a: '3086d221a7d46bcde86c90e49284eb15',
		    b: '-e4437ed6010e88286f547fa90abfe4c3'
		  }, {
		    a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
		    b: '3086d221a7d46bcde86c90e49284eb15'
		  }],
		  gRed: false,
		  g: ['79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', pre]
		});
} (curves));
	return curves;
}

var hmacDrbg;
var hasRequiredHmacDrbg;

function requireHmacDrbg () {
	if (hasRequiredHmacDrbg) return hmacDrbg;
	hasRequiredHmacDrbg = 1;

	var hash = hash$1;
	var utils = requireUtils$2();
	var assert = minimalisticAssert$1;
	function HmacDRBG(options) {
	  if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
	  this.hash = options.hash;
	  this.predResist = !!options.predResist;
	  this.outLen = this.hash.outSize;
	  this.minEntropy = options.minEntropy || this.hash.hmacStrength;
	  this._reseed = null;
	  this.reseedInterval = null;
	  this.K = null;
	  this.V = null;
	  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
	  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
	  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
	  assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
	  this._init(entropy, nonce, pers);
	}
	hmacDrbg = HmacDRBG;
	HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
	  var seed = entropy.concat(nonce).concat(pers);
	  this.K = new Array(this.outLen / 8);
	  this.V = new Array(this.outLen / 8);
	  for (var i = 0; i < this.V.length; i++) {
	    this.K[i] = 0x00;
	    this.V[i] = 0x01;
	  }
	  this._update(seed);
	  this._reseed = 1;
	  this.reseedInterval = 0x1000000000000; // 2^48
	};

	HmacDRBG.prototype._hmac = function hmac() {
	  return new hash.hmac(this.hash, this.K);
	};
	HmacDRBG.prototype._update = function update(seed) {
	  var kmac = this._hmac().update(this.V).update([0x00]);
	  if (seed) kmac = kmac.update(seed);
	  this.K = kmac.digest();
	  this.V = this._hmac().update(this.V).digest();
	  if (!seed) return;
	  this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();
	  this.V = this._hmac().update(this.V).digest();
	};
	HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
	  // Optional entropy enc
	  if (typeof entropyEnc !== 'string') {
	    addEnc = add;
	    add = entropyEnc;
	    entropyEnc = null;
	  }
	  entropy = utils.toArray(entropy, entropyEnc);
	  add = utils.toArray(add, addEnc);
	  assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
	  this._update(entropy.concat(add || []));
	  this._reseed = 1;
	};
	HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
	  if (this._reseed > this.reseedInterval) throw new Error('Reseed is required');

	  // Optional encoding
	  if (typeof enc !== 'string') {
	    addEnc = add;
	    add = enc;
	    enc = null;
	  }

	  // Optional additional data
	  if (add) {
	    add = utils.toArray(add, addEnc || 'hex');
	    this._update(add);
	  }
	  var temp = [];
	  while (temp.length < len) {
	    this.V = this._hmac().update(this.V).digest();
	    temp = temp.concat(this.V);
	  }
	  var res = temp.slice(0, len);
	  this._update(add);
	  this._reseed++;
	  return utils.encode(res, enc);
	};
	return hmacDrbg;
}

var key$1;
var hasRequiredKey$1;

function requireKey$1 () {
	if (hasRequiredKey$1) return key$1;
	hasRequiredKey$1 = 1;

	var BN = requireBn$1();
	var utils = requireUtils$1();
	var assert = utils.assert;
	function KeyPair(ec, options) {
	  this.ec = ec;
	  this.priv = null;
	  this.pub = null;

	  // KeyPair(ec, { priv: ..., pub: ... })
	  if (options.priv) this._importPrivate(options.priv, options.privEnc);
	  if (options.pub) this._importPublic(options.pub, options.pubEnc);
	}
	key$1 = KeyPair;
	KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
	  if (pub instanceof KeyPair) return pub;
	  return new KeyPair(ec, {
	    pub: pub,
	    pubEnc: enc
	  });
	};
	KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
	  if (priv instanceof KeyPair) return priv;
	  return new KeyPair(ec, {
	    priv: priv,
	    privEnc: enc
	  });
	};
	KeyPair.prototype.validate = function validate() {
	  var pub = this.getPublic();
	  if (pub.isInfinity()) return {
	    result: false,
	    reason: 'Invalid public key'
	  };
	  if (!pub.validate()) return {
	    result: false,
	    reason: 'Public key is not a point'
	  };
	  if (!pub.mul(this.ec.curve.n).isInfinity()) return {
	    result: false,
	    reason: 'Public key * N != O'
	  };
	  return {
	    result: true,
	    reason: null
	  };
	};
	KeyPair.prototype.getPublic = function getPublic(compact, enc) {
	  // compact is optional argument
	  if (typeof compact === 'string') {
	    enc = compact;
	    compact = null;
	  }
	  if (!this.pub) this.pub = this.ec.g.mul(this.priv);
	  if (!enc) return this.pub;
	  return this.pub.encode(enc, compact);
	};
	KeyPair.prototype.getPrivate = function getPrivate(enc) {
	  if (enc === 'hex') return this.priv.toString(16, 2);else return this.priv;
	};
	KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
	  this.priv = new BN(key, enc || 16);

	  // Ensure that the priv won't be bigger than n, otherwise we may fail
	  // in fixed multiplication method
	  this.priv = this.priv.umod(this.ec.curve.n);
	};
	KeyPair.prototype._importPublic = function _importPublic(key, enc) {
	  if (key.x || key.y) {
	    // Montgomery points only have an `x` coordinate.
	    // Weierstrass/Edwards points on the other hand have both `x` and
	    // `y` coordinates.
	    if (this.ec.curve.type === 'mont') {
	      assert(key.x, 'Need x coordinate');
	    } else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') {
	      assert(key.x && key.y, 'Need both x and y coordinate');
	    }
	    this.pub = this.ec.curve.point(key.x, key.y);
	    return;
	  }
	  this.pub = this.ec.curve.decodePoint(key, enc);
	};

	// ECDH
	KeyPair.prototype.derive = function derive(pub) {
	  if (!pub.validate()) {
	    assert(pub.validate(), 'public point not validated');
	  }
	  return pub.mul(this.priv).getX();
	};

	// ECDSA
	KeyPair.prototype.sign = function sign(msg, enc, options) {
	  return this.ec.sign(msg, this, enc, options);
	};
	KeyPair.prototype.verify = function verify(msg, signature) {
	  return this.ec.verify(msg, signature, this);
	};
	KeyPair.prototype.inspect = function inspect() {
	  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
	};
	return key$1;
}

var signature$2;
var hasRequiredSignature$2;

function requireSignature$2 () {
	if (hasRequiredSignature$2) return signature$2;
	hasRequiredSignature$2 = 1;

	var BN = requireBn$1();
	var utils = requireUtils$1();
	var assert = utils.assert;
	function Signature(options, enc) {
	  if (options instanceof Signature) return options;
	  if (this._importDER(options, enc)) return;
	  assert(options.r && options.s, 'Signature without r or s');
	  this.r = new BN(options.r, 16);
	  this.s = new BN(options.s, 16);
	  if (options.recoveryParam === undefined) this.recoveryParam = null;else this.recoveryParam = options.recoveryParam;
	}
	signature$2 = Signature;
	function Position() {
	  this.place = 0;
	}
	function getLength(buf, p) {
	  var initial = buf[p.place++];
	  if (!(initial & 0x80)) {
	    return initial;
	  }
	  var octetLen = initial & 0xf;

	  // Indefinite length or overflow
	  if (octetLen === 0 || octetLen > 4) {
	    return false;
	  }
	  var val = 0;
	  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
	    val <<= 8;
	    val |= buf[off];
	    val >>>= 0;
	  }

	  // Leading zeroes
	  if (val <= 0x7f) {
	    return false;
	  }
	  p.place = off;
	  return val;
	}
	function rmPadding(buf) {
	  var i = 0;
	  var len = buf.length - 1;
	  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
	    i++;
	  }
	  if (i === 0) {
	    return buf;
	  }
	  return buf.slice(i);
	}
	Signature.prototype._importDER = function _importDER(data, enc) {
	  data = utils.toArray(data, enc);
	  var p = new Position();
	  if (data[p.place++] !== 0x30) {
	    return false;
	  }
	  var len = getLength(data, p);
	  if (len === false) {
	    return false;
	  }
	  if (len + p.place !== data.length) {
	    return false;
	  }
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var rlen = getLength(data, p);
	  if (rlen === false) {
	    return false;
	  }
	  var r = data.slice(p.place, rlen + p.place);
	  p.place += rlen;
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var slen = getLength(data, p);
	  if (slen === false) {
	    return false;
	  }
	  if (data.length !== slen + p.place) {
	    return false;
	  }
	  var s = data.slice(p.place, slen + p.place);
	  if (r[0] === 0) {
	    if (r[1] & 0x80) {
	      r = r.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }
	  if (s[0] === 0) {
	    if (s[1] & 0x80) {
	      s = s.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }
	  this.r = new BN(r);
	  this.s = new BN(s);
	  this.recoveryParam = null;
	  return true;
	};
	function constructLength(arr, len) {
	  if (len < 0x80) {
	    arr.push(len);
	    return;
	  }
	  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
	  arr.push(octets | 0x80);
	  while (--octets) {
	    arr.push(len >>> (octets << 3) & 0xff);
	  }
	  arr.push(len);
	}
	Signature.prototype.toDER = function toDER(enc) {
	  var r = this.r.toArray();
	  var s = this.s.toArray();

	  // Pad values
	  if (r[0] & 0x80) r = [0].concat(r);
	  // Pad values
	  if (s[0] & 0x80) s = [0].concat(s);
	  r = rmPadding(r);
	  s = rmPadding(s);
	  while (!s[0] && !(s[1] & 0x80)) {
	    s = s.slice(1);
	  }
	  var arr = [0x02];
	  constructLength(arr, r.length);
	  arr = arr.concat(r);
	  arr.push(0x02);
	  constructLength(arr, s.length);
	  var backHalf = arr.concat(s);
	  var res = [0x30];
	  constructLength(res, backHalf.length);
	  res = res.concat(backHalf);
	  return utils.encode(res, enc);
	};
	return signature$2;
}

var ec;
var hasRequiredEc;

function requireEc () {
	if (hasRequiredEc) return ec;
	hasRequiredEc = 1;

	var BN = requireBn$1();
	var HmacDRBG = requireHmacDrbg();
	var utils = requireUtils$1();
	var curves = requireCurves();
	var rand = requireBrorand();
	var assert = utils.assert;
	var KeyPair = requireKey$1();
	var Signature = requireSignature$2();
	function EC(options) {
	  if (!(this instanceof EC)) return new EC(options);

	  // Shortcut `elliptic.ec(curve-name)`
	  if (typeof options === 'string') {
	    assert(Object.prototype.hasOwnProperty.call(curves, options), 'Unknown curve ' + options);
	    options = curves[options];
	  }

	  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
	  if (options instanceof curves.PresetCurve) options = {
	    curve: options
	  };
	  this.curve = options.curve.curve;
	  this.n = this.curve.n;
	  this.nh = this.n.ushrn(1);
	  this.g = this.curve.g;

	  // Point on curve
	  this.g = options.curve.g;
	  this.g.precompute(options.curve.n.bitLength() + 1);

	  // Hash for function for DRBG
	  this.hash = options.hash || options.curve.hash;
	}
	ec = EC;
	EC.prototype.keyPair = function keyPair(options) {
	  return new KeyPair(this, options);
	};
	EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
	  return KeyPair.fromPrivate(this, priv, enc);
	};
	EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
	  return KeyPair.fromPublic(this, pub, enc);
	};
	EC.prototype.genKeyPair = function genKeyPair(options) {
	  if (!options) options = {};

	  // Instantiate Hmac_DRBG
	  var drbg = new HmacDRBG({
	    hash: this.hash,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8',
	    entropy: options.entropy || rand(this.hash.hmacStrength),
	    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
	    nonce: this.n.toArray()
	  });
	  var bytes = this.n.byteLength();
	  var ns2 = this.n.sub(new BN(2));
	  for (;;) {
	    var priv = new BN(drbg.generate(bytes));
	    if (priv.cmp(ns2) > 0) continue;
	    priv.iaddn(1);
	    return this.keyFromPrivate(priv);
	  }
	};
	EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
	  var delta = msg.byteLength() * 8 - this.n.bitLength();
	  if (delta > 0) msg = msg.ushrn(delta);
	  if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);else return msg;
	};
	EC.prototype.sign = function sign(msg, key, enc, options) {
	  if (typeof enc === 'object') {
	    options = enc;
	    enc = null;
	  }
	  if (!options) options = {};
	  key = this.keyFromPrivate(key, enc);
	  msg = this._truncateToN(new BN(msg, 16));

	  // Zero-extend key to provide enough entropy
	  var bytes = this.n.byteLength();
	  var bkey = key.getPrivate().toArray('be', bytes);

	  // Zero-extend nonce to have the same byte size as N
	  var nonce = msg.toArray('be', bytes);

	  // Instantiate Hmac_DRBG
	  var drbg = new HmacDRBG({
	    hash: this.hash,
	    entropy: bkey,
	    nonce: nonce,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8'
	  });

	  // Number of bytes to generate
	  var ns1 = this.n.sub(new BN(1));
	  for (var iter = 0;; iter++) {
	    var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
	    k = this._truncateToN(k, true);
	    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
	    var kp = this.g.mul(k);
	    if (kp.isInfinity()) continue;
	    var kpX = kp.getX();
	    var r = kpX.umod(this.n);
	    if (r.cmpn(0) === 0) continue;
	    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
	    s = s.umod(this.n);
	    if (s.cmpn(0) === 0) continue;
	    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);

	    // Use complement of `s`, if it is > `n / 2`
	    if (options.canonical && s.cmp(this.nh) > 0) {
	      s = this.n.sub(s);
	      recoveryParam ^= 1;
	    }
	    return new Signature({
	      r: r,
	      s: s,
	      recoveryParam: recoveryParam
	    });
	  }
	};
	EC.prototype.verify = function verify(msg, signature, key, enc) {
	  msg = this._truncateToN(new BN(msg, 16));
	  key = this.keyFromPublic(key, enc);
	  signature = new Signature(signature, 'hex');

	  // Perform primitive values validation
	  var r = signature.r;
	  var s = signature.s;
	  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
	  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;

	  // Validate signature
	  var sinv = s.invm(this.n);
	  var u1 = sinv.mul(msg).umod(this.n);
	  var u2 = sinv.mul(r).umod(this.n);
	  var p;
	  if (!this.curve._maxwellTrick) {
	    p = this.g.mulAdd(u1, key.getPublic(), u2);
	    if (p.isInfinity()) return false;
	    return p.getX().umod(this.n).cmp(r) === 0;
	  }

	  // NOTE: Greg Maxwell's trick, inspired by:
	  // https://git.io/vad3K

	  p = this.g.jmulAdd(u1, key.getPublic(), u2);
	  if (p.isInfinity()) return false;

	  // Compare `p.x` of Jacobian point with `r`,
	  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
	  // inverse of `p.z^2`
	  return p.eqXToP(r);
	};
	EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
	  assert((3 & j) === j, 'The recovery param is more than two bits');
	  signature = new Signature(signature, enc);
	  var n = this.n;
	  var e = new BN(msg);
	  var r = signature.r;
	  var s = signature.s;

	  // A set LSB signifies that the y-coordinate is odd
	  var isYOdd = j & 1;
	  var isSecondKey = j >> 1;
	  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate');

	  // 1.1. Let x = r + jn.
	  if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);else r = this.curve.pointFromX(r, isYOdd);
	  var rInv = signature.r.invm(n);
	  var s1 = n.sub(e).mul(rInv).umod(n);
	  var s2 = s.mul(rInv).umod(n);

	  // 1.6.1 Compute Q = r^-1 (sR -  eG)
	  //               Q = r^-1 (sR + -eG)
	  return this.g.mulAdd(s1, r, s2);
	};
	EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
	  signature = new Signature(signature, enc);
	  if (signature.recoveryParam !== null) return signature.recoveryParam;
	  for (var i = 0; i < 4; i++) {
	    var Qprime;
	    try {
	      Qprime = this.recoverPubKey(e, signature, i);
	    } catch (e) {
	      continue;
	    }
	    if (Qprime.eq(Q)) return i;
	  }
	  throw new Error('Unable to find valid recovery factor');
	};
	return ec;
}

var key;
var hasRequiredKey;

function requireKey () {
	if (hasRequiredKey) return key;
	hasRequiredKey = 1;

	var utils = requireUtils$1();
	var assert = utils.assert;
	var parseBytes = utils.parseBytes;
	var cachedProperty = utils.cachedProperty;

	/**
	* @param {EDDSA} eddsa - instance
	* @param {Object} params - public/private key parameters
	*
	* @param {Array<Byte>} [params.secret] - secret seed bytes
	* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
	* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
	*
	*/
	function KeyPair(eddsa, params) {
	  this.eddsa = eddsa;
	  this._secret = parseBytes(params.secret);
	  if (eddsa.isPoint(params.pub)) this._pub = params.pub;else this._pubBytes = parseBytes(params.pub);
	}
	KeyPair.fromPublic = function fromPublic(eddsa, pub) {
	  if (pub instanceof KeyPair) return pub;
	  return new KeyPair(eddsa, {
	    pub: pub
	  });
	};
	KeyPair.fromSecret = function fromSecret(eddsa, secret) {
	  if (secret instanceof KeyPair) return secret;
	  return new KeyPair(eddsa, {
	    secret: secret
	  });
	};
	KeyPair.prototype.secret = function secret() {
	  return this._secret;
	};
	cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
	  return this.eddsa.encodePoint(this.pub());
	});
	cachedProperty(KeyPair, 'pub', function pub() {
	  if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
	  return this.eddsa.g.mul(this.priv());
	});
	cachedProperty(KeyPair, 'privBytes', function privBytes() {
	  var eddsa = this.eddsa;
	  var hash = this.hash();
	  var lastIx = eddsa.encodingLength - 1;
	  var a = hash.slice(0, eddsa.encodingLength);
	  a[0] &= 248;
	  a[lastIx] &= 127;
	  a[lastIx] |= 64;
	  return a;
	});
	cachedProperty(KeyPair, 'priv', function priv() {
	  return this.eddsa.decodeInt(this.privBytes());
	});
	cachedProperty(KeyPair, 'hash', function hash() {
	  return this.eddsa.hash().update(this.secret()).digest();
	});
	cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
	  return this.hash().slice(this.eddsa.encodingLength);
	});
	KeyPair.prototype.sign = function sign(message) {
	  assert(this._secret, 'KeyPair can only verify');
	  return this.eddsa.sign(message, this);
	};
	KeyPair.prototype.verify = function verify(message, sig) {
	  return this.eddsa.verify(message, sig, this);
	};
	KeyPair.prototype.getSecret = function getSecret(enc) {
	  assert(this._secret, 'KeyPair is public only');
	  return utils.encode(this.secret(), enc);
	};
	KeyPair.prototype.getPublic = function getPublic(enc) {
	  return utils.encode(this.pubBytes(), enc);
	};
	key = KeyPair;
	return key;
}

var signature$1;
var hasRequiredSignature$1;

function requireSignature$1 () {
	if (hasRequiredSignature$1) return signature$1;
	hasRequiredSignature$1 = 1;

	var BN = requireBn$1();
	var utils = requireUtils$1();
	var assert = utils.assert;
	var cachedProperty = utils.cachedProperty;
	var parseBytes = utils.parseBytes;

	/**
	* @param {EDDSA} eddsa - eddsa instance
	* @param {Array<Bytes>|Object} sig -
	* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
	* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
	* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
	* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
	*/
	function Signature(eddsa, sig) {
	  this.eddsa = eddsa;
	  if (typeof sig !== 'object') sig = parseBytes(sig);
	  if (Array.isArray(sig)) {
	    sig = {
	      R: sig.slice(0, eddsa.encodingLength),
	      S: sig.slice(eddsa.encodingLength)
	    };
	  }
	  assert(sig.R && sig.S, 'Signature without R or S');
	  if (eddsa.isPoint(sig.R)) this._R = sig.R;
	  if (sig.S instanceof BN) this._S = sig.S;
	  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
	  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
	}
	cachedProperty(Signature, 'S', function S() {
	  return this.eddsa.decodeInt(this.Sencoded());
	});
	cachedProperty(Signature, 'R', function R() {
	  return this.eddsa.decodePoint(this.Rencoded());
	});
	cachedProperty(Signature, 'Rencoded', function Rencoded() {
	  return this.eddsa.encodePoint(this.R());
	});
	cachedProperty(Signature, 'Sencoded', function Sencoded() {
	  return this.eddsa.encodeInt(this.S());
	});
	Signature.prototype.toBytes = function toBytes() {
	  return this.Rencoded().concat(this.Sencoded());
	};
	Signature.prototype.toHex = function toHex() {
	  return utils.encode(this.toBytes(), 'hex').toUpperCase();
	};
	signature$1 = Signature;
	return signature$1;
}

var eddsa;
var hasRequiredEddsa;

function requireEddsa () {
	if (hasRequiredEddsa) return eddsa;
	hasRequiredEddsa = 1;

	var hash = hash$1;
	var curves = requireCurves();
	var utils = requireUtils$1();
	var assert = utils.assert;
	var parseBytes = utils.parseBytes;
	var KeyPair = requireKey();
	var Signature = requireSignature$1();
	function EDDSA(curve) {
	  assert(curve === 'ed25519', 'only tested with ed25519 so far');
	  if (!(this instanceof EDDSA)) return new EDDSA(curve);
	  curve = curves[curve].curve;
	  this.curve = curve;
	  this.g = curve.g;
	  this.g.precompute(curve.n.bitLength() + 1);
	  this.pointClass = curve.point().constructor;
	  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
	  this.hash = hash.sha512;
	}
	eddsa = EDDSA;

	/**
	* @param {Array|String} message - message bytes
	* @param {Array|String|KeyPair} secret - secret bytes or a keypair
	* @returns {Signature} - signature
	*/
	EDDSA.prototype.sign = function sign(message, secret) {
	  message = parseBytes(message);
	  var key = this.keyFromSecret(secret);
	  var r = this.hashInt(key.messagePrefix(), message);
	  var R = this.g.mul(r);
	  var Rencoded = this.encodePoint(R);
	  var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
	  var S = r.add(s_).umod(this.curve.n);
	  return this.makeSignature({
	    R: R,
	    S: S,
	    Rencoded: Rencoded
	  });
	};

	/**
	* @param {Array} message - message bytes
	* @param {Array|String|Signature} sig - sig bytes
	* @param {Array|String|Point|KeyPair} pub - public key
	* @returns {Boolean} - true if public key matches sig of message
	*/
	EDDSA.prototype.verify = function verify(message, sig, pub) {
	  message = parseBytes(message);
	  sig = this.makeSignature(sig);
	  var key = this.keyFromPublic(pub);
	  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
	  var SG = this.g.mul(sig.S());
	  var RplusAh = sig.R().add(key.pub().mul(h));
	  return RplusAh.eq(SG);
	};
	EDDSA.prototype.hashInt = function hashInt() {
	  var hash = this.hash();
	  for (var i = 0; i < arguments.length; i++) {
	    hash.update(arguments[i]);
	  }
	  return utils.intFromLE(hash.digest()).umod(this.curve.n);
	};
	EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
	  return KeyPair.fromPublic(this, pub);
	};
	EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
	  return KeyPair.fromSecret(this, secret);
	};
	EDDSA.prototype.makeSignature = function makeSignature(sig) {
	  if (sig instanceof Signature) return sig;
	  return new Signature(this, sig);
	};

	/**
	* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
	*
	* EDDSA defines methods for encoding and decoding points and integers. These are
	* helper convenience methods, that pass along to utility functions implied
	* parameters.
	*
	*/
	EDDSA.prototype.encodePoint = function encodePoint(point) {
	  var enc = point.getY().toArray('le', this.encodingLength);
	  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
	  return enc;
	};
	EDDSA.prototype.decodePoint = function decodePoint(bytes) {
	  bytes = utils.parseBytes(bytes);
	  var lastIx = bytes.length - 1;
	  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
	  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
	  var y = utils.intFromLE(normed);
	  return this.curve.pointFromY(y, xIsOdd);
	};
	EDDSA.prototype.encodeInt = function encodeInt(num) {
	  return num.toArray('le', this.encodingLength);
	};
	EDDSA.prototype.decodeInt = function decodeInt(bytes) {
	  return utils.intFromLE(bytes);
	};
	EDDSA.prototype.isPoint = function isPoint(val) {
	  return val instanceof this.pointClass;
	};
	return eddsa;
}

var hasRequiredElliptic$2;

function requireElliptic$2 () {
	if (hasRequiredElliptic$2) return elliptic$2;
	hasRequiredElliptic$2 = 1;
	(function (exports) {

		var elliptic = exports;
		elliptic.version = require$$0.version;
		elliptic.utils = requireUtils$1();
		elliptic.rand = requireBrorand();
		elliptic.curve = requireCurve();
		elliptic.curves = requireCurves();

		// Protocols
		elliptic.ec = requireEc();
		elliptic.eddsa = requireEddsa();
} (elliptic$2));
	return elliptic$2;
}

var elliptic$1;
var hasRequiredElliptic$1;

function requireElliptic$1 () {
	if (hasRequiredElliptic$1) return elliptic$1;
	hasRequiredElliptic$1 = 1;
	var EC = requireElliptic$2().ec;
	var ec = new EC('secp256k1');
	var ecparams = ec.curve;

	// Hack, we can not use bn.js@5, while elliptic uses bn.js@4
	// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758
	var BN = ecparams.n.constructor;
	function loadCompressedPublicKey(first, xbuf) {
	  var x = new BN(xbuf);

	  // overflow
	  if (x.cmp(ecparams.p) >= 0) return null;
	  x = x.toRed(ecparams.red);

	  // compute corresponding Y
	  var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
	  if (first === 0x03 !== y.isOdd()) y = y.redNeg();
	  return ec.keyPair({
	    pub: {
	      x: x,
	      y: y
	    }
	  });
	}
	function loadUncompressedPublicKey(first, xbuf, ybuf) {
	  var x = new BN(xbuf);
	  var y = new BN(ybuf);

	  // overflow
	  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null;
	  x = x.toRed(ecparams.red);
	  y = y.toRed(ecparams.red);

	  // is odd flag
	  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null;

	  // x*x*x + b = y*y
	  var x3 = x.redSqr().redIMul(x);
	  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;
	  return ec.keyPair({
	    pub: {
	      x: x,
	      y: y
	    }
	  });
	}
	function loadPublicKey(pubkey) {
	  // length should be validated in interface
	  var first = pubkey[0];
	  switch (first) {
	    case 0x02:
	    case 0x03:
	      if (pubkey.length !== 33) return null;
	      return loadCompressedPublicKey(first, pubkey.subarray(1, 33));
	    case 0x04:
	    case 0x06:
	    case 0x07:
	      if (pubkey.length !== 65) return null;
	      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65));
	    default:
	      return null;
	  }
	}
	function savePublicKey(output, point) {
	  var pubkey = point.encode(null, output.length === 33);
	  // Loop should be faster because we do not need create extra Uint8Array
	  // output.set(new Uint8Array(pubkey))
	  for (var i = 0; i < output.length; ++i) {
	    output[i] = pubkey[i];
	  }
	}
	elliptic$1 = {
	  contextRandomize: function contextRandomize() {
	    return 0;
	  },
	  privateKeyVerify: function privateKeyVerify(seckey) {
	    var bn = new BN(seckey);
	    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1;
	  },
	  privateKeyNegate: function privateKeyNegate(seckey) {
	    var bn = new BN(seckey);
	    var negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32);
	    seckey.set(negate);
	    return 0;
	  },
	  privateKeyTweakAdd: function privateKeyTweakAdd(seckey, tweak) {
	    var bn = new BN(tweak);
	    if (bn.cmp(ecparams.n) >= 0) return 1;
	    bn.iadd(new BN(seckey));
	    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n);
	    if (bn.isZero()) return 1;
	    var tweaked = bn.toArrayLike(Uint8Array, 'be', 32);
	    seckey.set(tweaked);
	    return 0;
	  },
	  privateKeyTweakMul: function privateKeyTweakMul(seckey, tweak) {
	    var bn = new BN(tweak);
	    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;
	    bn.imul(new BN(seckey));
	    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n);
	    var tweaked = bn.toArrayLike(Uint8Array, 'be', 32);
	    seckey.set(tweaked);
	    return 0;
	  },
	  publicKeyVerify: function publicKeyVerify(pubkey) {
	    var pair = loadPublicKey(pubkey);
	    return pair === null ? 1 : 0;
	  },
	  publicKeyCreate: function publicKeyCreate(output, seckey) {
	    var bn = new BN(seckey);
	    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;
	    var point = ec.keyFromPrivate(seckey).getPublic();
	    savePublicKey(output, point);
	    return 0;
	  },
	  publicKeyConvert: function publicKeyConvert(output, pubkey) {
	    var pair = loadPublicKey(pubkey);
	    if (pair === null) return 1;
	    var point = pair.getPublic();
	    savePublicKey(output, point);
	    return 0;
	  },
	  publicKeyNegate: function publicKeyNegate(output, pubkey) {
	    var pair = loadPublicKey(pubkey);
	    if (pair === null) return 1;
	    var point = pair.getPublic();
	    point.y = point.y.redNeg();
	    savePublicKey(output, point);
	    return 0;
	  },
	  publicKeyCombine: function publicKeyCombine(output, pubkeys) {
	    var pairs = new Array(pubkeys.length);
	    for (var i = 0; i < pubkeys.length; ++i) {
	      pairs[i] = loadPublicKey(pubkeys[i]);
	      if (pairs[i] === null) return 1;
	    }
	    var point = pairs[0].getPublic();
	    for (var _i = 1; _i < pairs.length; ++_i) {
	      point = point.add(pairs[_i].pub);
	    }
	    if (point.isInfinity()) return 2;
	    savePublicKey(output, point);
	    return 0;
	  },
	  publicKeyTweakAdd: function publicKeyTweakAdd(output, pubkey, tweak) {
	    var pair = loadPublicKey(pubkey);
	    if (pair === null) return 1;
	    tweak = new BN(tweak);
	    if (tweak.cmp(ecparams.n) >= 0) return 2;
	    var point = pair.getPublic().add(ecparams.g.mul(tweak));
	    if (point.isInfinity()) return 2;
	    savePublicKey(output, point);
	    return 0;
	  },
	  publicKeyTweakMul: function publicKeyTweakMul(output, pubkey, tweak) {
	    var pair = loadPublicKey(pubkey);
	    if (pair === null) return 1;
	    tweak = new BN(tweak);
	    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2;
	    var point = pair.getPublic().mul(tweak);
	    savePublicKey(output, point);
	    return 0;
	  },
	  signatureNormalize: function signatureNormalize(sig) {
	    var r = new BN(sig.subarray(0, 32));
	    var s = new BN(sig.subarray(32, 64));
	    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1;
	    if (s.cmp(ec.nh) === 1) {
	      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32);
	    }
	    return 0;
	  },
	  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
	  // Adapted for Uint8Array instead Buffer
	  signatureExport: function signatureExport(obj, sig) {
	    var sigR = sig.subarray(0, 32);
	    var sigS = sig.subarray(32, 64);
	    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1;
	    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1;
	    var output = obj.output;

	    // Prepare R
	    var r = output.subarray(4, 4 + 33);
	    r[0] = 0x00;
	    r.set(sigR, 1);
	    var lenR = 33;
	    var posR = 0;
	    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR) {
	    }
	    r = r.subarray(posR);
	    if (r[0] & 0x80) return 1;
	    if (lenR > 1 && r[0] === 0x00 && !(r[1] & 0x80)) return 1;

	    // Prepare S
	    var s = output.subarray(6 + 33, 6 + 33 + 33);
	    s[0] = 0x00;
	    s.set(sigS, 1);
	    var lenS = 33;
	    var posS = 0;
	    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS) {
	    }
	    s = s.subarray(posS);
	    if (s[0] & 0x80) return 1;
	    if (lenS > 1 && s[0] === 0x00 && !(s[1] & 0x80)) return 1;

	    // Set output length for return
	    obj.outputlen = 6 + lenR + lenS;

	    // Output in specified format
	    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
	    output[0] = 0x30;
	    output[1] = obj.outputlen - 2;
	    output[2] = 0x02;
	    output[3] = r.length;
	    output.set(r, 4);
	    output[4 + lenR] = 0x02;
	    output[5 + lenR] = s.length;
	    output.set(s, 6 + lenR);
	    return 0;
	  },
	  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
	  // Adapted for Uint8Array instead Buffer
	  signatureImport: function signatureImport(output, sig) {
	    if (sig.length < 8) return 1;
	    if (sig.length > 72) return 1;
	    if (sig[0] !== 0x30) return 1;
	    if (sig[1] !== sig.length - 2) return 1;
	    if (sig[2] !== 0x02) return 1;
	    var lenR = sig[3];
	    if (lenR === 0) return 1;
	    if (5 + lenR >= sig.length) return 1;
	    if (sig[4 + lenR] !== 0x02) return 1;
	    var lenS = sig[5 + lenR];
	    if (lenS === 0) return 1;
	    if (6 + lenR + lenS !== sig.length) return 1;
	    if (sig[4] & 0x80) return 1;
	    if (lenR > 1 && sig[4] === 0x00 && !(sig[5] & 0x80)) return 1;
	    if (sig[lenR + 6] & 0x80) return 1;
	    if (lenS > 1 && sig[lenR + 6] === 0x00 && !(sig[lenR + 7] & 0x80)) return 1;
	    var sigR = sig.subarray(4, 4 + lenR);
	    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1);
	    if (sigR.length > 32) return 1;
	    var sigS = sig.subarray(6 + lenR);
	    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1);
	    if (sigS.length > 32) throw new Error('S length is too long');
	    var r = new BN(sigR);
	    if (r.cmp(ecparams.n) >= 0) r = new BN(0);
	    var s = new BN(sig.subarray(6 + lenR));
	    if (s.cmp(ecparams.n) >= 0) s = new BN(0);
	    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0);
	    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32);
	    return 0;
	  },
	  ecdsaSign: function ecdsaSign(obj, message, seckey, data, noncefn) {
	    if (noncefn) {
	      var _noncefn = noncefn;
	      noncefn = function noncefn(counter) {
	        var nonce = _noncefn(message, seckey, null, data, counter);
	        var isValid = nonce instanceof Uint8Array && nonce.length === 32;
	        if (!isValid) throw new Error('This is the way');
	        return new BN(nonce);
	      };
	    }
	    var d = new BN(seckey);
	    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1;
	    var sig;
	    try {
	      sig = ec.sign(message, seckey, {
	        canonical: true,
	        k: noncefn,
	        pers: data
	      });
	    } catch (err) {
	      return 1;
	    }
	    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0);
	    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32);
	    obj.recid = sig.recoveryParam;
	    return 0;
	  },
	  ecdsaVerify: function ecdsaVerify(sig, msg32, pubkey) {
	    var sigObj = {
	      r: sig.subarray(0, 32),
	      s: sig.subarray(32, 64)
	    };
	    var sigr = new BN(sigObj.r);
	    var sigs = new BN(sigObj.s);
	    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;
	    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3;
	    var pair = loadPublicKey(pubkey);
	    if (pair === null) return 2;
	    var point = pair.getPublic();
	    var isValid = ec.verify(msg32, sigObj, point);
	    return isValid ? 0 : 3;
	  },
	  ecdsaRecover: function ecdsaRecover(output, sig, recid, msg32) {
	    var sigObj = {
	      r: sig.slice(0, 32),
	      s: sig.slice(32, 64)
	    };
	    var sigr = new BN(sigObj.r);
	    var sigs = new BN(sigObj.s);
	    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;
	    if (sigr.isZero() || sigs.isZero()) return 2;

	    // Can throw `throw new Error('Unable to find sencond key candinate');`
	    var point;
	    try {
	      point = ec.recoverPubKey(msg32, sigObj, recid);
	    } catch (err) {
	      return 2;
	    }
	    savePublicKey(output, point);
	    return 0;
	  },
	  ecdh: function ecdh(output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
	    var pair = loadPublicKey(pubkey);
	    if (pair === null) return 1;
	    var scalar = new BN(seckey);
	    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2;
	    var point = pair.getPublic().mul(scalar);
	    if (hashfn === undefined) {
	      var _data = point.encode(null, true);
	      var sha256 = ec.hash().update(_data).digest();
	      for (var i = 0; i < 32; ++i) {
	        output[i] = sha256[i];
	      }
	    } else {
	      if (!xbuf) xbuf = new Uint8Array(32);
	      var x = point.getX().toArray('be', 32);
	      for (var _i2 = 0; _i2 < 32; ++_i2) {
	        xbuf[_i2] = x[_i2];
	      }
	      if (!ybuf) ybuf = new Uint8Array(32);
	      var y = point.getY().toArray('be', 32);
	      for (var _i3 = 0; _i3 < 32; ++_i3) {
	        ybuf[_i3] = y[_i3];
	      }
	      var hash = hashfn(xbuf, ybuf, data);
	      var isValid = hash instanceof Uint8Array && hash.length === output.length;
	      if (!isValid) return 2;
	      output.set(hash);
	    }
	    return 0;
	  }
	};
	return elliptic$1;
}

var elliptic;
var hasRequiredElliptic;

function requireElliptic () {
	if (hasRequiredElliptic) return elliptic;
	hasRequiredElliptic = 1;
	elliptic = requireLib$3()(requireElliptic$1());
	return elliptic;
}

var hasRequiredSecp256k1$1;

function requireSecp256k1$1 () {
	if (hasRequiredSecp256k1$1) return secp256k1$1.exports;
	hasRequiredSecp256k1$1 = 1;
	(function (module) {
		try {
		  module.exports = requireBindings();
		} catch (err) {
		  module.exports = requireElliptic();
		}
} (secp256k1$1));
	return secp256k1$1.exports;
}

var random = {};

var randombytes;
var hasRequiredRandombytes;

function requireRandombytes () {
	if (hasRequiredRandombytes) return randombytes;
	hasRequiredRandombytes = 1;
	randombytes = require$$12__default["default"].randomBytes;
	return randombytes;
}

var hasRequiredRandom;

function requireRandom () {
	if (hasRequiredRandom) return random;
	hasRequiredRandom = 1;

	Object.defineProperty(random, "__esModule", {
	  value: true
	});
	var randombytes = requireRandombytes();
	function getRandomBytes(bytes) {
	  return new Promise(function (resolve, reject) {
	    randombytes(bytes, function (err, resp) {
	      if (err) {
	        reject(err);
	        return;
	      }
	      resolve(resp);
	    });
	  });
	}
	random.getRandomBytes = getRandomBytes;
	function getRandomBytesSync(bytes) {
	  return randombytes(bytes);
	}
	random.getRandomBytesSync = getRandomBytesSync;
	return random;
}

var hasRequiredSecp256k1;

function requireSecp256k1 () {
	if (hasRequiredSecp256k1) return secp256k1$2;
	hasRequiredSecp256k1 = 1;
	(function (exports) {

		var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
		  function adopt(value) {
		    return value instanceof P ? value : new P(function (resolve) {
		      resolve(value);
		    });
		  }
		  return new (P || (P = Promise))(function (resolve, reject) {
		    function fulfilled(value) {
		      try {
		        step(generator.next(value));
		      } catch (e) {
		        reject(e);
		      }
		    }
		    function rejected(value) {
		      try {
		        step(generator["throw"](value));
		      } catch (e) {
		        reject(e);
		      }
		    }
		    function step(result) {
		      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		    }
		    step((generator = generator.apply(thisArg, _arguments || [])).next());
		  });
		};
		var __generator = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {
		  var _ = {
		      label: 0,
		      sent: function sent() {
		        if (t[0] & 1) throw t[1];
		        return t[1];
		      },
		      trys: [],
		      ops: []
		    },
		    f,
		    y,
		    t,
		    g;
		  return g = {
		    next: verb(0),
		    "throw": verb(1),
		    "return": verb(2)
		  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
		    return this;
		  }), g;
		  function verb(n) {
		    return function (v) {
		      return step([n, v]);
		    };
		  }
		  function step(op) {
		    if (f) throw new TypeError("Generator is already executing.");
		    while (_) {
		      try {
		        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
		        if (y = 0, t) op = [op[0] & 2, t.value];
		        switch (op[0]) {
		          case 0:
		          case 1:
		            t = op;
		            break;
		          case 4:
		            _.label++;
		            return {
		              value: op[1],
		              done: false
		            };
		          case 5:
		            _.label++;
		            y = op[1];
		            op = [0];
		            continue;
		          case 7:
		            op = _.ops.pop();
		            _.trys.pop();
		            continue;
		          default:
		            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
		              _ = 0;
		              continue;
		            }
		            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
		              _.label = op[1];
		              break;
		            }
		            if (op[0] === 6 && _.label < t[1]) {
		              _.label = t[1];
		              t = op;
		              break;
		            }
		            if (t && _.label < t[2]) {
		              _.label = t[2];
		              _.ops.push(op);
		              break;
		            }
		            if (t[2]) _.ops.pop();
		            _.trys.pop();
		            continue;
		        }
		        op = body.call(thisArg, _);
		      } catch (e) {
		        op = [6, e];
		        y = 0;
		      } finally {
		        f = t = 0;
		      }
		    }
		    if (op[0] & 5) throw op[1];
		    return {
		      value: op[0] ? op[1] : void 0,
		      done: true
		    };
		  }
		};
		function __export(m) {
		  for (var p in m) {
		    if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		  }
		}
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var secp256k1_1 = requireSecp256k1$1();
		var random_1 = requireRandom();
		var SECP256K1_PRIVATE_KEY_SIZE = 32;
		function createPrivateKey() {
		  return __awaiter(this, void 0, void 0, function () {
		    var pk;
		    return __generator(this, function (_a) {
		      switch (_a.label) {
		        case 0:
		          return [4 /*yield*/, random_1.getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE)];
		        case 1:
		          pk = _a.sent();
		          if (secp256k1_1.privateKeyVerify(pk)) {
		            return [2 /*return*/, pk];
		          }
		          return [3 /*break*/, 0];
		        case 2:
		          return [2 /*return*/];
		      }
		    });
		  });
		}

		exports.createPrivateKey = createPrivateKey;
		function createPrivateKeySync() {
		  while (true) {
		    var pk = random_1.getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);
		    if (secp256k1_1.privateKeyVerify(pk)) {
		      return pk;
		    }
		  }
		}
		exports.createPrivateKeySync = createPrivateKeySync;
		__export(requireSecp256k1$1());
} (secp256k1$2));
	return secp256k1$2;
}

var secp256k1Lib = {};

var hasRequiredSecp256k1Lib;

function requireSecp256k1Lib () {
	if (hasRequiredSecp256k1Lib) return secp256k1Lib;
	hasRequiredSecp256k1Lib = 1;

	// This file is imported from secp256k1 v3
	// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
	var BN = requireBn$2();
	var EC = requireElliptic$2().ec;
	var ec = new EC('secp256k1');
	var ecparams = ec.curve;
	secp256k1Lib.privateKeyExport = function (privateKey, compressed) {
	  var d = new BN(privateKey);
	  if (d.ucmp(ecparams.n) >= 0) {
	    throw new Error('couldn\'t export to DER format');
	  }
	  var point = ec.g.mul(d);
	  return toPublicKey(point.getX(), point.getY(), compressed);
	};
	secp256k1Lib.privateKeyModInverse = function (privateKey) {
	  var bn = new BN(privateKey);
	  if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {
	    throw new Error('private key range is invalid');
	  }
	  return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);
	};
	secp256k1Lib.signatureImport = function (sigObj) {
	  var r = new BN(sigObj.r);
	  if (r.ucmp(ecparams.n) >= 0) {
	    r = new BN(0);
	  }
	  var s = new BN(sigObj.s);
	  if (s.ucmp(ecparams.n) >= 0) {
	    s = new BN(0);
	  }
	  return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);
	};
	secp256k1Lib.ecdhUnsafe = function (publicKey, privateKey, compressed) {
	  var point = ec.keyFromPublic(publicKey);
	  var scalar = new BN(privateKey);
	  if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {
	    throw new Error('scalar was invalid (zero or overflow)');
	  }
	  var shared = point.pub.mul(scalar);
	  return toPublicKey(shared.getX(), shared.getY(), compressed);
	};
	var toPublicKey = function toPublicKey(x, y, compressed) {
	  var publicKey = void 0;
	  if (compressed) {
	    publicKey = Buffer.alloc(33);
	    publicKey[0] = y.isOdd() ? 0x03 : 0x02;
	    x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
	  } else {
	    publicKey = Buffer.alloc(65);
	    publicKey[0] = 0x04;
	    x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
	    y.toArrayLike(Buffer, 'be', 32).copy(publicKey, 33);
	  }
	  return publicKey;
	};
	return secp256k1Lib;
}

var der$1 = {};

var hasRequiredDer$1;

function requireDer$1 () {
	if (hasRequiredDer$1) return der$1;
	hasRequiredDer$1 = 1;

	// This file is imported from secp256k1 v3
	// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
	var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
	// begin
	0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,
	// private key
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	// middle
	0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x21, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,
	// public key
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
	var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
	// begin
	0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,
	// private key
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	// middle
	0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x41, 0x04, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0e, 0x11, 0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10, 0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,
	// public key
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
	der$1.privateKeyExport = function (privateKey, publicKey, compressed) {
	  var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
	  privateKey.copy(result, compressed ? 8 : 9);
	  publicKey.copy(result, compressed ? 181 : 214);
	  return result;
	};
	der$1.privateKeyImport = function (privateKey) {
	  var length = privateKey.length;

	  // sequence header
	  var index = 0;
	  if (length < index + 1 || privateKey[index] !== 0x30) return null;
	  index += 1;

	  // sequence length constructor
	  if (length < index + 1 || !(privateKey[index] & 0x80)) return null;
	  var lenb = privateKey[index] & 0x7f;
	  index += 1;
	  if (lenb < 1 || lenb > 2) return null;
	  if (length < index + lenb) return null;

	  // sequence length
	  var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
	  index += lenb;
	  if (length < index + len) return null;

	  // sequence element 0: version number (=1)
	  if (length < index + 3 || privateKey[index] !== 0x02 || privateKey[index + 1] !== 0x01 || privateKey[index + 2] !== 0x01) {
	    return null;
	  }
	  index += 3;

	  // sequence element 1: octet string, up to 32 bytes
	  if (length < index + 2 || privateKey[index] !== 0x04 || privateKey[index + 1] > 0x20 || length < index + 2 + privateKey[index + 1]) {
	    return null;
	  }
	  return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
	};
	der$1.signatureImportLax = function (signature) {
	  var r = Buffer.alloc(32, 0);
	  var s = Buffer.alloc(32, 0);
	  var length = signature.length;
	  var index = 0;

	  // sequence tag byte
	  if (signature[index++] !== 0x30) {
	    return null;
	  }

	  // sequence length byte
	  var lenbyte = signature[index++];
	  if (lenbyte & 0x80) {
	    index += lenbyte - 0x80;
	    if (index > length) {
	      return null;
	    }
	  }

	  // sequence tag byte for r
	  if (signature[index++] !== 0x02) {
	    return null;
	  }

	  // length for r
	  var rlen = signature[index++];
	  if (rlen & 0x80) {
	    lenbyte = rlen - 0x80;
	    if (index + lenbyte > length) {
	      return null;
	    }
	    for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) {}
	    for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
	      rlen = (rlen << 8) + signature[index];
	    }
	  }
	  if (rlen > length - index) {
	    return null;
	  }
	  var rindex = index;
	  index += rlen;

	  // sequence tag byte for s
	  if (signature[index++] !== 0x02) {
	    return null;
	  }

	  // length for s
	  var slen = signature[index++];
	  if (slen & 0x80) {
	    lenbyte = slen - 0x80;
	    if (index + lenbyte > length) {
	      return null;
	    }
	    for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) {}
	    for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
	      slen = (slen << 8) + signature[index];
	    }
	  }
	  if (slen > length - index) {
	    return null;
	  }
	  var sindex = index;
	  index += slen;

	  // ignore leading zeros in r
	  for (; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1) {}
	  // copy r value
	  if (rlen > 32) {
	    return null;
	  }
	  var rvalue = signature.slice(rindex, rindex + rlen);
	  rvalue.copy(r, 32 - rvalue.length);

	  // ignore leading zeros in s
	  for (; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1) {}
	  // copy s value
	  if (slen > 32) {
	    return null;
	  }
	  var svalue = signature.slice(sindex, sindex + slen);
	  svalue.copy(s, 32 - svalue.length);
	  return {
	    r: r,
	    s: s
	  };
	};
	return der$1;
}

var secp256k1Adapter;
var hasRequiredSecp256k1Adapter;

function requireSecp256k1Adapter () {
	if (hasRequiredSecp256k1Adapter) return secp256k1Adapter;
	hasRequiredSecp256k1Adapter = 1;

	var secp256k1 = requireSecp256k1();
	var secp256k1v3 = requireSecp256k1Lib();
	var der = requireDer$1();

	/**
	 * Verify an ECDSA privateKey
	 * @method privateKeyVerify
	 * @param {Buffer} privateKey
	 * @return {boolean}
	 */
	var privateKeyVerify = function privateKeyVerify(privateKey) {
	  // secp256k1 v4 version throws when privateKey length is not 32
	  if (privateKey.length !== 32) {
	    return false;
	  }
	  return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));
	};

	/**
	 * Export a privateKey in DER format
	 * @method privateKeyExport
	 * @param {Buffer} privateKey
	 * @param {boolean} compressed
	 * @return {boolean}
	 */
	var privateKeyExport = function privateKeyExport(privateKey, compressed) {
	  // privateKeyExport method is not part of secp256k1 v4 package
	  // this implementation is based on v3
	  if (privateKey.length !== 32) {
	    throw new RangeError('private key length is invalid');
	  }
	  var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);
	  return der.privateKeyExport(privateKey, publicKey, compressed);
	};

	/**
	 * Import a privateKey in DER format
	 * @method privateKeyImport
	 * @param {Buffer} privateKey
	 * @return {Buffer}
	 */

	var privateKeyImport = function privateKeyImport(privateKey) {
	  // privateKeyImport method is not part of secp256k1 v4 package
	  // this implementation is based on v3
	  privateKey = der.privateKeyImport(privateKey);
	  if (privateKey !== null && privateKey.length === 32 && privateKeyVerify(privateKey)) {
	    return privateKey;
	  }
	  throw new Error("couldn't import from DER format");
	};

	/**
	 * Negate a privateKey by subtracting it from the order of the curve's base point
	 * @method privateKeyNegate
	 * @param {Buffer} privateKey
	 * @return {Buffer}
	 */
	var privateKeyNegate = function privateKeyNegate(privateKey) {
	  return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));
	};

	/**
	 * Compute the inverse of a privateKey (modulo the order of the curve's base point).
	 * @method privateKeyModInverse
	 * @param {Buffer} privateKey
	 * @return {Buffer}
	 */
	var privateKeyModInverse = function privateKeyModInverse(privateKey) {
	  if (privateKey.length !== 32) {
	    throw new Error('private key length is invalid');
	  }
	  return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));
	};

	/**
	 * Tweak a privateKey by adding tweak to it.
	 * @method privateKeyTweakAdd
	 * @param {Buffer} privateKey
	 * @param {Buffer} tweak
	 * @return {Buffer}
	 */
	var privateKeyTweakAdd = function privateKeyTweakAdd(privateKey, tweak) {
	  return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
	};

	/**
	 * Tweak a privateKey by multiplying it by a tweak.
	 * @method privateKeyTweakMul
	 * @param {Buffer} privateKey
	 * @param {Buffer} tweak
	 * @return {Buffer}
	 */
	var privateKeyTweakMul = function privateKeyTweakMul(privateKey, tweak) {
	  return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
	};

	/**
	 * Compute the public key for a privateKey.
	 * @method publicKeyCreate
	 * @param {Buffer} privateKey
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */
	var publicKeyCreate = function publicKeyCreate(privateKey, compressed) {
	  return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));
	};

	/**
	 * Convert a publicKey to compressed or uncompressed form.
	 * @method publicKeyConvert
	 * @param {Buffer} publicKey
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */
	var publicKeyConvert = function publicKeyConvert(publicKey, compressed) {
	  return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));
	};

	/**
	 * Verify an ECDSA publicKey.
	 * @method publicKeyVerify
	 * @param {Buffer} publicKey
	 * @return {boolean}
	 */
	var publicKeyVerify = function publicKeyVerify(publicKey) {
	  // secp256k1 v4 version throws when publicKey length is not 33 or 65
	  if (publicKey.length !== 33 && publicKey.length !== 65) {
	    return false;
	  }
	  return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));
	};

	/**
	 * Tweak a publicKey by adding tweak times the generator to it.
	 * @method publicKeyTweakAdd
	 * @param {Buffer} publicKey
	 * @param {Buffer} tweak
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */
	var publicKeyTweakAdd = function publicKeyTweakAdd(publicKey, tweak, compressed) {
	  return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
	};

	/**
	 * Tweak a publicKey by multiplying it by a tweak value
	 * @method publicKeyTweakMul
	 * @param {Buffer} publicKey
	 * @param {Buffer} tweak
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */
	var publicKeyTweakMul = function publicKeyTweakMul(publicKey, tweak, compressed) {
	  return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
	};

	/**
	 * Add a given publicKeys together.
	 * @method publicKeyCombine
	 * @param {Array<Buffer>} publicKeys
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */
	var publicKeyCombine = function publicKeyCombine(publicKeys, compressed) {
	  var keys = [];
	  publicKeys.forEach(function (publicKey) {
	    keys.push(Uint8Array.from(publicKey));
	  });
	  return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));
	};

	/**
	 * Convert a signature to a normalized lower-S form.
	 * @method signatureNormalize
	 * @param {Buffer} signature
	 * @return {Buffer}
	 */
	var signatureNormalize = function signatureNormalize(signature) {
	  return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));
	};

	/**
	 * Serialize an ECDSA signature in DER format.
	 * @method signatureExport
	 * @param {Buffer} signature
	 * @return {Buffer}
	 */
	var signatureExport = function signatureExport(signature) {
	  return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature)));
	};

	/**
	 * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
	 * @method signatureImport
	 * @param {Buffer} signature
	 * @return {Buffer}
	 */
	var signatureImport = function signatureImport(signature) {
	  return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature)));
	};

	/**
	 * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
	 * @method signatureImportLax
	 * @param {Buffer} signature
	 * @return {Buffer}
	 */
	var signatureImportLax = function signatureImportLax(signature) {
	  // signatureImportLax method is not part of secp256k1 v4 package
	  // this implementation is based on v3
	  // ensure that signature is greater than 0
	  if (signature.length === 0) {
	    throw new RangeError('signature length is invalid');
	  }
	  var sigObj = der.signatureImportLax(signature);
	  if (sigObj === null) {
	    throw new Error("couldn't parse DER signature");
	  }
	  return secp256k1v3.signatureImport(sigObj);
	};

	/**
	 * Create an ECDSA signature. Always return low-S signature.
	 * @method sign
	 * @param {Buffer} message
	 * @param {Buffer} privateKey
	 * @param {Object} options
	 * @return {Buffer}
	 */
	var sign = function sign(message, privateKey, options) {
	  if (options === null) {
	    throw new TypeError('options should be an Object');
	  }
	  var signOptions = void 0;
	  if (options) {
	    signOptions = {};
	    if (options.data === null) {
	      throw new TypeError('options.data should be a Buffer');
	    }
	    if (options.data) {
	      // validate option.data length
	      if (options.data.length !== 32) {
	        throw new RangeError('options.data length is invalid');
	      }
	      signOptions.data = new Uint8Array(options.data);
	    }
	    if (options.noncefn === null) {
	      throw new TypeError('options.noncefn should be a Function');
	    }
	    if (options.noncefn) {
	      //  convert option.noncefn function signature
	      signOptions.noncefn = function (message, privateKey, algo, data, attempt) {
	        var bufferAlgo = algo != null ? Buffer.from(algo) : null;
	        var bufferData = data != null ? Buffer.from(data) : null;
	        var buffer = Buffer.from('');
	        if (options.noncefn) {
	          buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);
	        }
	        return Uint8Array.from(buffer);
	      };
	    }
	  }
	  var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);
	  return {
	    signature: Buffer.from(sig.signature),
	    recovery: sig.recid
	  };
	};

	/**
	 * Verify an ECDSA signature.
	 * @method verify
	 * @param {Buffer} message
	 * @param {Buffer} signature
	 * @param {Buffer} publicKey
	 * @return {boolean}
	 */
	var verify = function verify(message, signature, publicKey) {
	  // note: secp256k1 v4 verify method has a different argument order
	  return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
	};

	/**
	 * Recover an ECDSA public key from a signature.
	 * @method recover
	 * @param {Buffer} message
	 * @param {Buffer} signature
	 * @param {Number} recid
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */
	var recover = function recover(message, signature, recid, compressed) {
	  // note: secp256k1 v4 recover method has a different argument order
	  return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
	};

	/**
	 * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.
	 * @method ecdh
	 * @param {Buffer} publicKey
	 * @param {Buffer} privateKey
	 * @return {Buffer}
	 */
	var ecdh = function ecdh(publicKey, privateKey) {
	  // note: secp256k1 v3 doesn't allow optional parameter
	  return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
	};

	/**
	 * Compute an EC Diffie-Hellman secret and return public key as result
	 * @method ecdhUnsafe
	 * @param {Buffer} publicKey
	 * @param {Buffer} privateKey
	 * @param {boolean} compressed
	 * @return {Buffer}
	 */
	var ecdhUnsafe = function ecdhUnsafe(publicKey, privateKey, compressed) {
	  // ecdhUnsafe method is not part of secp256k1 v4 package
	  // this implementation is based on v3
	  // ensure valid publicKey length
	  if (publicKey.length !== 33 && publicKey.length !== 65) {
	    throw new RangeError('public key length is invalid');
	  }

	  // ensure valid privateKey length
	  if (privateKey.length !== 32) {
	    throw new RangeError('private key length is invalid');
	  }
	  return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
	};
	secp256k1Adapter = {
	  privateKeyVerify: privateKeyVerify,
	  privateKeyExport: privateKeyExport,
	  privateKeyImport: privateKeyImport,
	  privateKeyNegate: privateKeyNegate,
	  privateKeyModInverse: privateKeyModInverse,
	  privateKeyTweakAdd: privateKeyTweakAdd,
	  privateKeyTweakMul: privateKeyTweakMul,
	  publicKeyCreate: publicKeyCreate,
	  publicKeyConvert: publicKeyConvert,
	  publicKeyVerify: publicKeyVerify,
	  publicKeyTweakAdd: publicKeyTweakAdd,
	  publicKeyTweakMul: publicKeyTweakMul,
	  publicKeyCombine: publicKeyCombine,
	  signatureNormalize: signatureNormalize,
	  signatureExport: signatureExport,
	  signatureImport: signatureImport,
	  signatureImportLax: signatureImportLax,
	  sign: sign,
	  verify: verify,
	  recover: recover,
	  ecdh: ecdh,
	  ecdhUnsafe: ecdhUnsafe
	};
	return secp256k1Adapter;
}

var dist$3 = {};

var bn = {exports: {}};

var hasRequiredBn;

function requireBn () {
	if (hasRequiredBn) return bn.exports;
	hasRequiredBn = 1;
	(function (module) {
		(function (module, exports) {

		  // Utils
		  function assert(val, msg) {
		    if (!val) throw new Error(msg || 'Assertion failed');
		  }

		  // Could use `inherits` module, but don't want to move from single file
		  // architecture yet.
		  function inherits(ctor, superCtor) {
		    ctor.super_ = superCtor;
		    var TempCtor = function TempCtor() {};
		    TempCtor.prototype = superCtor.prototype;
		    ctor.prototype = new TempCtor();
		    ctor.prototype.constructor = ctor;
		  }

		  // BN

		  function BN(number, base, endian) {
		    if (BN.isBN(number)) {
		      return number;
		    }
		    this.negative = 0;
		    this.words = null;
		    this.length = 0;

		    // Reduction context
		    this.red = null;
		    if (number !== null) {
		      if (base === 'le' || base === 'be') {
		        endian = base;
		        base = 10;
		      }
		      this._init(number || 0, base || 10, endian || 'be');
		    }
		  }
		  if (typeof module === 'object') {
		    module.exports = BN;
		  } else {
		    exports.BN = BN;
		  }
		  BN.BN = BN;
		  BN.wordSize = 26;
		  var Buffer;
		  try {
		    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
		      Buffer = window.Buffer;
		    } else {
		      Buffer = require('buffer').Buffer;
		    }
		  } catch (e) {}
		  BN.isBN = function isBN(num) {
		    if (num instanceof BN) {
		      return true;
		    }
		    return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
		  };
		  BN.max = function max(left, right) {
		    if (left.cmp(right) > 0) return left;
		    return right;
		  };
		  BN.min = function min(left, right) {
		    if (left.cmp(right) < 0) return left;
		    return right;
		  };
		  BN.prototype._init = function init(number, base, endian) {
		    if (typeof number === 'number') {
		      return this._initNumber(number, base, endian);
		    }
		    if (typeof number === 'object') {
		      return this._initArray(number, base, endian);
		    }
		    if (base === 'hex') {
		      base = 16;
		    }
		    assert(base === (base | 0) && base >= 2 && base <= 36);
		    number = number.toString().replace(/\s+/g, '');
		    var start = 0;
		    if (number[0] === '-') {
		      start++;
		      this.negative = 1;
		    }
		    if (start < number.length) {
		      if (base === 16) {
		        this._parseHex(number, start, endian);
		      } else {
		        this._parseBase(number, base, start);
		        if (endian === 'le') {
		          this._initArray(this.toArray(), base, endian);
		        }
		      }
		    }
		  };
		  BN.prototype._initNumber = function _initNumber(number, base, endian) {
		    if (number < 0) {
		      this.negative = 1;
		      number = -number;
		    }
		    if (number < 0x4000000) {
		      this.words = [number & 0x3ffffff];
		      this.length = 1;
		    } else if (number < 0x10000000000000) {
		      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
		      this.length = 2;
		    } else {
		      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
		      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
		      this.length = 3;
		    }
		    if (endian !== 'le') return;

		    // Reverse the bytes
		    this._initArray(this.toArray(), base, endian);
		  };
		  BN.prototype._initArray = function _initArray(number, base, endian) {
		    // Perhaps a Uint8Array
		    assert(typeof number.length === 'number');
		    if (number.length <= 0) {
		      this.words = [0];
		      this.length = 1;
		      return this;
		    }
		    this.length = Math.ceil(number.length / 3);
		    this.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      this.words[i] = 0;
		    }
		    var j, w;
		    var off = 0;
		    if (endian === 'be') {
		      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
		        w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
		        this.words[j] |= w << off & 0x3ffffff;
		        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
		        off += 24;
		        if (off >= 26) {
		          off -= 26;
		          j++;
		        }
		      }
		    } else if (endian === 'le') {
		      for (i = 0, j = 0; i < number.length; i += 3) {
		        w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
		        this.words[j] |= w << off & 0x3ffffff;
		        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
		        off += 24;
		        if (off >= 26) {
		          off -= 26;
		          j++;
		        }
		      }
		    }
		    return this._strip();
		  };
		  function parseHex4Bits(string, index) {
		    var c = string.charCodeAt(index);
		    // '0' - '9'
		    if (c >= 48 && c <= 57) {
		      return c - 48;
		      // 'A' - 'F'
		    } else if (c >= 65 && c <= 70) {
		      return c - 55;
		      // 'a' - 'f'
		    } else if (c >= 97 && c <= 102) {
		      return c - 87;
		    } else {
		      assert(false, 'Invalid character in ' + string);
		    }
		  }
		  function parseHexByte(string, lowerBound, index) {
		    var r = parseHex4Bits(string, index);
		    if (index - 1 >= lowerBound) {
		      r |= parseHex4Bits(string, index - 1) << 4;
		    }
		    return r;
		  }
		  BN.prototype._parseHex = function _parseHex(number, start, endian) {
		    // Create possibly bigger array to ensure that it fits the number
		    this.length = Math.ceil((number.length - start) / 6);
		    this.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      this.words[i] = 0;
		    }

		    // 24-bits chunks
		    var off = 0;
		    var j = 0;
		    var w;
		    if (endian === 'be') {
		      for (i = number.length - 1; i >= start; i -= 2) {
		        w = parseHexByte(number, start, i) << off;
		        this.words[j] |= w & 0x3ffffff;
		        if (off >= 18) {
		          off -= 18;
		          j += 1;
		          this.words[j] |= w >>> 26;
		        } else {
		          off += 8;
		        }
		      }
		    } else {
		      var parseLength = number.length - start;
		      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
		        w = parseHexByte(number, start, i) << off;
		        this.words[j] |= w & 0x3ffffff;
		        if (off >= 18) {
		          off -= 18;
		          j += 1;
		          this.words[j] |= w >>> 26;
		        } else {
		          off += 8;
		        }
		      }
		    }
		    this._strip();
		  };
		  function parseBase(str, start, end, mul) {
		    var r = 0;
		    var b = 0;
		    var len = Math.min(str.length, end);
		    for (var i = start; i < len; i++) {
		      var c = str.charCodeAt(i) - 48;
		      r *= mul;

		      // 'a'
		      if (c >= 49) {
		        b = c - 49 + 0xa;

		        // 'A'
		      } else if (c >= 17) {
		        b = c - 17 + 0xa;

		        // '0' - '9'
		      } else {
		        b = c;
		      }
		      assert(c >= 0 && b < mul, 'Invalid character');
		      r += b;
		    }
		    return r;
		  }
		  BN.prototype._parseBase = function _parseBase(number, base, start) {
		    // Initialize as zero
		    this.words = [0];
		    this.length = 1;

		    // Find length of limb in base
		    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
		      limbLen++;
		    }
		    limbLen--;
		    limbPow = limbPow / base | 0;
		    var total = number.length - start;
		    var mod = total % limbLen;
		    var end = Math.min(total, total - mod) + start;
		    var word = 0;
		    for (var i = start; i < end; i += limbLen) {
		      word = parseBase(number, i, i + limbLen, base);
		      this.imuln(limbPow);
		      if (this.words[0] + word < 0x4000000) {
		        this.words[0] += word;
		      } else {
		        this._iaddn(word);
		      }
		    }
		    if (mod !== 0) {
		      var pow = 1;
		      word = parseBase(number, i, number.length, base);
		      for (i = 0; i < mod; i++) {
		        pow *= base;
		      }
		      this.imuln(pow);
		      if (this.words[0] + word < 0x4000000) {
		        this.words[0] += word;
		      } else {
		        this._iaddn(word);
		      }
		    }
		    this._strip();
		  };
		  BN.prototype.copy = function copy(dest) {
		    dest.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      dest.words[i] = this.words[i];
		    }
		    dest.length = this.length;
		    dest.negative = this.negative;
		    dest.red = this.red;
		  };
		  function move(dest, src) {
		    dest.words = src.words;
		    dest.length = src.length;
		    dest.negative = src.negative;
		    dest.red = src.red;
		  }
		  BN.prototype._move = function _move(dest) {
		    move(dest, this);
		  };
		  BN.prototype.clone = function clone() {
		    var r = new BN(null);
		    this.copy(r);
		    return r;
		  };
		  BN.prototype._expand = function _expand(size) {
		    while (this.length < size) {
		      this.words[this.length++] = 0;
		    }
		    return this;
		  };

		  // Remove leading `0` from `this`
		  BN.prototype._strip = function strip() {
		    while (this.length > 1 && this.words[this.length - 1] === 0) {
		      this.length--;
		    }
		    return this._normSign();
		  };
		  BN.prototype._normSign = function _normSign() {
		    // -0 = 0
		    if (this.length === 1 && this.words[0] === 0) {
		      this.negative = 0;
		    }
		    return this;
		  };

		  // Check Symbol.for because not everywhere where Symbol defined
		  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
		  if (typeof Symbol !== 'undefined' && typeof Symbol["for"] === 'function') {
		    try {
		      BN.prototype[Symbol["for"]('nodejs.util.inspect.custom')] = inspect;
		    } catch (e) {
		      BN.prototype.inspect = inspect;
		    }
		  } else {
		    BN.prototype.inspect = inspect;
		  }
		  function inspect() {
		    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
		  }

		  /*
		   var zeros = [];
		  var groupSizes = [];
		  var groupBases = [];
		   var s = '';
		  var i = -1;
		  while (++i < BN.wordSize) {
		    zeros[i] = s;
		    s += '0';
		  }
		  groupSizes[0] = 0;
		  groupSizes[1] = 0;
		  groupBases[0] = 0;
		  groupBases[1] = 0;
		  var base = 2 - 1;
		  while (++base < 36 + 1) {
		    var groupSize = 0;
		    var groupBase = 1;
		    while (groupBase < (1 << BN.wordSize) / base) {
		      groupBase *= base;
		      groupSize += 1;
		    }
		    groupSizes[base] = groupSize;
		    groupBases[base] = groupBase;
		  }
		   */

		  var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
		  var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
		  var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
		  BN.prototype.toString = function toString(base, padding) {
		    base = base || 10;
		    padding = padding | 0 || 1;
		    var out;
		    if (base === 16 || base === 'hex') {
		      out = '';
		      var off = 0;
		      var carry = 0;
		      for (var i = 0; i < this.length; i++) {
		        var w = this.words[i];
		        var word = ((w << off | carry) & 0xffffff).toString(16);
		        carry = w >>> 24 - off & 0xffffff;
		        off += 2;
		        if (off >= 26) {
		          off -= 26;
		          i--;
		        }
		        if (carry !== 0 || i !== this.length - 1) {
		          out = zeros[6 - word.length] + word + out;
		        } else {
		          out = word + out;
		        }
		      }
		      if (carry !== 0) {
		        out = carry.toString(16) + out;
		      }
		      while (out.length % padding !== 0) {
		        out = '0' + out;
		      }
		      if (this.negative !== 0) {
		        out = '-' + out;
		      }
		      return out;
		    }
		    if (base === (base | 0) && base >= 2 && base <= 36) {
		      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
		      var groupSize = groupSizes[base];
		      // var groupBase = Math.pow(base, groupSize);
		      var groupBase = groupBases[base];
		      out = '';
		      var c = this.clone();
		      c.negative = 0;
		      while (!c.isZero()) {
		        var r = c.modrn(groupBase).toString(base);
		        c = c.idivn(groupBase);
		        if (!c.isZero()) {
		          out = zeros[groupSize - r.length] + r + out;
		        } else {
		          out = r + out;
		        }
		      }
		      if (this.isZero()) {
		        out = '0' + out;
		      }
		      while (out.length % padding !== 0) {
		        out = '0' + out;
		      }
		      if (this.negative !== 0) {
		        out = '-' + out;
		      }
		      return out;
		    }
		    assert(false, 'Base should be between 2 and 36');
		  };
		  BN.prototype.toNumber = function toNumber() {
		    var ret = this.words[0];
		    if (this.length === 2) {
		      ret += this.words[1] * 0x4000000;
		    } else if (this.length === 3 && this.words[2] === 0x01) {
		      // NOTE: at this stage it is known that the top bit is set
		      ret += 0x10000000000000 + this.words[1] * 0x4000000;
		    } else if (this.length > 2) {
		      assert(false, 'Number can only safely store up to 53 bits');
		    }
		    return this.negative !== 0 ? -ret : ret;
		  };
		  BN.prototype.toJSON = function toJSON() {
		    return this.toString(16, 2);
		  };
		  if (Buffer) {
		    BN.prototype.toBuffer = function toBuffer(endian, length) {
		      return this.toArrayLike(Buffer, endian, length);
		    };
		  }
		  BN.prototype.toArray = function toArray(endian, length) {
		    return this.toArrayLike(Array, endian, length);
		  };
		  var allocate = function allocate(ArrayType, size) {
		    if (ArrayType.allocUnsafe) {
		      return ArrayType.allocUnsafe(size);
		    }
		    return new ArrayType(size);
		  };
		  BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
		    this._strip();
		    var byteLength = this.byteLength();
		    var reqLength = length || Math.max(1, byteLength);
		    assert(byteLength <= reqLength, 'byte array longer than desired length');
		    assert(reqLength > 0, 'Requested array length <= 0');
		    var res = allocate(ArrayType, reqLength);
		    var postfix = endian === 'le' ? 'LE' : 'BE';
		    this['_toArrayLike' + postfix](res, byteLength);
		    return res;
		  };
		  BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
		    var position = 0;
		    var carry = 0;
		    for (var i = 0, shift = 0; i < this.length; i++) {
		      var word = this.words[i] << shift | carry;
		      res[position++] = word & 0xff;
		      if (position < res.length) {
		        res[position++] = word >> 8 & 0xff;
		      }
		      if (position < res.length) {
		        res[position++] = word >> 16 & 0xff;
		      }
		      if (shift === 6) {
		        if (position < res.length) {
		          res[position++] = word >> 24 & 0xff;
		        }
		        carry = 0;
		        shift = 0;
		      } else {
		        carry = word >>> 24;
		        shift += 2;
		      }
		    }
		    if (position < res.length) {
		      res[position++] = carry;
		      while (position < res.length) {
		        res[position++] = 0;
		      }
		    }
		  };
		  BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
		    var position = res.length - 1;
		    var carry = 0;
		    for (var i = 0, shift = 0; i < this.length; i++) {
		      var word = this.words[i] << shift | carry;
		      res[position--] = word & 0xff;
		      if (position >= 0) {
		        res[position--] = word >> 8 & 0xff;
		      }
		      if (position >= 0) {
		        res[position--] = word >> 16 & 0xff;
		      }
		      if (shift === 6) {
		        if (position >= 0) {
		          res[position--] = word >> 24 & 0xff;
		        }
		        carry = 0;
		        shift = 0;
		      } else {
		        carry = word >>> 24;
		        shift += 2;
		      }
		    }
		    if (position >= 0) {
		      res[position--] = carry;
		      while (position >= 0) {
		        res[position--] = 0;
		      }
		    }
		  };
		  if (Math.clz32) {
		    BN.prototype._countBits = function _countBits(w) {
		      return 32 - Math.clz32(w);
		    };
		  } else {
		    BN.prototype._countBits = function _countBits(w) {
		      var t = w;
		      var r = 0;
		      if (t >= 0x1000) {
		        r += 13;
		        t >>>= 13;
		      }
		      if (t >= 0x40) {
		        r += 7;
		        t >>>= 7;
		      }
		      if (t >= 0x8) {
		        r += 4;
		        t >>>= 4;
		      }
		      if (t >= 0x02) {
		        r += 2;
		        t >>>= 2;
		      }
		      return r + t;
		    };
		  }
		  BN.prototype._zeroBits = function _zeroBits(w) {
		    // Short-cut
		    if (w === 0) return 26;
		    var t = w;
		    var r = 0;
		    if ((t & 0x1fff) === 0) {
		      r += 13;
		      t >>>= 13;
		    }
		    if ((t & 0x7f) === 0) {
		      r += 7;
		      t >>>= 7;
		    }
		    if ((t & 0xf) === 0) {
		      r += 4;
		      t >>>= 4;
		    }
		    if ((t & 0x3) === 0) {
		      r += 2;
		      t >>>= 2;
		    }
		    if ((t & 0x1) === 0) {
		      r++;
		    }
		    return r;
		  };

		  // Return number of used bits in a BN
		  BN.prototype.bitLength = function bitLength() {
		    var w = this.words[this.length - 1];
		    var hi = this._countBits(w);
		    return (this.length - 1) * 26 + hi;
		  };
		  function toBitArray(num) {
		    var w = new Array(num.bitLength());
		    for (var bit = 0; bit < w.length; bit++) {
		      var off = bit / 26 | 0;
		      var wbit = bit % 26;
		      w[bit] = num.words[off] >>> wbit & 0x01;
		    }
		    return w;
		  }

		  // Number of trailing zero bits
		  BN.prototype.zeroBits = function zeroBits() {
		    if (this.isZero()) return 0;
		    var r = 0;
		    for (var i = 0; i < this.length; i++) {
		      var b = this._zeroBits(this.words[i]);
		      r += b;
		      if (b !== 26) break;
		    }
		    return r;
		  };
		  BN.prototype.byteLength = function byteLength() {
		    return Math.ceil(this.bitLength() / 8);
		  };
		  BN.prototype.toTwos = function toTwos(width) {
		    if (this.negative !== 0) {
		      return this.abs().inotn(width).iaddn(1);
		    }
		    return this.clone();
		  };
		  BN.prototype.fromTwos = function fromTwos(width) {
		    if (this.testn(width - 1)) {
		      return this.notn(width).iaddn(1).ineg();
		    }
		    return this.clone();
		  };
		  BN.prototype.isNeg = function isNeg() {
		    return this.negative !== 0;
		  };

		  // Return negative clone of `this`
		  BN.prototype.neg = function neg() {
		    return this.clone().ineg();
		  };
		  BN.prototype.ineg = function ineg() {
		    if (!this.isZero()) {
		      this.negative ^= 1;
		    }
		    return this;
		  };

		  // Or `num` with `this` in-place
		  BN.prototype.iuor = function iuor(num) {
		    while (this.length < num.length) {
		      this.words[this.length++] = 0;
		    }
		    for (var i = 0; i < num.length; i++) {
		      this.words[i] = this.words[i] | num.words[i];
		    }
		    return this._strip();
		  };
		  BN.prototype.ior = function ior(num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuor(num);
		  };

		  // Or `num` with `this`
		  BN.prototype.or = function or(num) {
		    if (this.length > num.length) return this.clone().ior(num);
		    return num.clone().ior(this);
		  };
		  BN.prototype.uor = function uor(num) {
		    if (this.length > num.length) return this.clone().iuor(num);
		    return num.clone().iuor(this);
		  };

		  // And `num` with `this` in-place
		  BN.prototype.iuand = function iuand(num) {
		    // b = min-length(num, this)
		    var b;
		    if (this.length > num.length) {
		      b = num;
		    } else {
		      b = this;
		    }
		    for (var i = 0; i < b.length; i++) {
		      this.words[i] = this.words[i] & num.words[i];
		    }
		    this.length = b.length;
		    return this._strip();
		  };
		  BN.prototype.iand = function iand(num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuand(num);
		  };

		  // And `num` with `this`
		  BN.prototype.and = function and(num) {
		    if (this.length > num.length) return this.clone().iand(num);
		    return num.clone().iand(this);
		  };
		  BN.prototype.uand = function uand(num) {
		    if (this.length > num.length) return this.clone().iuand(num);
		    return num.clone().iuand(this);
		  };

		  // Xor `num` with `this` in-place
		  BN.prototype.iuxor = function iuxor(num) {
		    // a.length > b.length
		    var a;
		    var b;
		    if (this.length > num.length) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }
		    for (var i = 0; i < b.length; i++) {
		      this.words[i] = a.words[i] ^ b.words[i];
		    }
		    if (this !== a) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }
		    this.length = a.length;
		    return this._strip();
		  };
		  BN.prototype.ixor = function ixor(num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuxor(num);
		  };

		  // Xor `num` with `this`
		  BN.prototype.xor = function xor(num) {
		    if (this.length > num.length) return this.clone().ixor(num);
		    return num.clone().ixor(this);
		  };
		  BN.prototype.uxor = function uxor(num) {
		    if (this.length > num.length) return this.clone().iuxor(num);
		    return num.clone().iuxor(this);
		  };

		  // Not ``this`` with ``width`` bitwidth
		  BN.prototype.inotn = function inotn(width) {
		    assert(typeof width === 'number' && width >= 0);
		    var bytesNeeded = Math.ceil(width / 26) | 0;
		    var bitsLeft = width % 26;

		    // Extend the buffer with leading zeroes
		    this._expand(bytesNeeded);
		    if (bitsLeft > 0) {
		      bytesNeeded--;
		    }

		    // Handle complete words
		    for (var i = 0; i < bytesNeeded; i++) {
		      this.words[i] = ~this.words[i] & 0x3ffffff;
		    }

		    // Handle the residue
		    if (bitsLeft > 0) {
		      this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
		    }

		    // And remove leading zeroes
		    return this._strip();
		  };
		  BN.prototype.notn = function notn(width) {
		    return this.clone().inotn(width);
		  };

		  // Set `bit` of `this`
		  BN.prototype.setn = function setn(bit, val) {
		    assert(typeof bit === 'number' && bit >= 0);
		    var off = bit / 26 | 0;
		    var wbit = bit % 26;
		    this._expand(off + 1);
		    if (val) {
		      this.words[off] = this.words[off] | 1 << wbit;
		    } else {
		      this.words[off] = this.words[off] & ~(1 << wbit);
		    }
		    return this._strip();
		  };

		  // Add `num` to `this` in-place
		  BN.prototype.iadd = function iadd(num) {
		    var r;

		    // negative + positive
		    if (this.negative !== 0 && num.negative === 0) {
		      this.negative = 0;
		      r = this.isub(num);
		      this.negative ^= 1;
		      return this._normSign();

		      // positive + negative
		    } else if (this.negative === 0 && num.negative !== 0) {
		      num.negative = 0;
		      r = this.isub(num);
		      num.negative = 1;
		      return r._normSign();
		    }

		    // a.length > b.length
		    var a, b;
		    if (this.length > num.length) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }
		    var carry = 0;
		    for (var i = 0; i < b.length; i++) {
		      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
		      this.words[i] = r & 0x3ffffff;
		      carry = r >>> 26;
		    }
		    for (; carry !== 0 && i < a.length; i++) {
		      r = (a.words[i] | 0) + carry;
		      this.words[i] = r & 0x3ffffff;
		      carry = r >>> 26;
		    }
		    this.length = a.length;
		    if (carry !== 0) {
		      this.words[this.length] = carry;
		      this.length++;
		      // Copy the rest of the words
		    } else if (a !== this) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }
		    return this;
		  };

		  // Add `num` to `this`
		  BN.prototype.add = function add(num) {
		    var res;
		    if (num.negative !== 0 && this.negative === 0) {
		      num.negative = 0;
		      res = this.sub(num);
		      num.negative ^= 1;
		      return res;
		    } else if (num.negative === 0 && this.negative !== 0) {
		      this.negative = 0;
		      res = num.sub(this);
		      this.negative = 1;
		      return res;
		    }
		    if (this.length > num.length) return this.clone().iadd(num);
		    return num.clone().iadd(this);
		  };

		  // Subtract `num` from `this` in-place
		  BN.prototype.isub = function isub(num) {
		    // this - (-num) = this + num
		    if (num.negative !== 0) {
		      num.negative = 0;
		      var r = this.iadd(num);
		      num.negative = 1;
		      return r._normSign();

		      // -this - num = -(this + num)
		    } else if (this.negative !== 0) {
		      this.negative = 0;
		      this.iadd(num);
		      this.negative = 1;
		      return this._normSign();
		    }

		    // At this point both numbers are positive
		    var cmp = this.cmp(num);

		    // Optimization - zeroify
		    if (cmp === 0) {
		      this.negative = 0;
		      this.length = 1;
		      this.words[0] = 0;
		      return this;
		    }

		    // a > b
		    var a, b;
		    if (cmp > 0) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }
		    var carry = 0;
		    for (var i = 0; i < b.length; i++) {
		      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
		      carry = r >> 26;
		      this.words[i] = r & 0x3ffffff;
		    }
		    for (; carry !== 0 && i < a.length; i++) {
		      r = (a.words[i] | 0) + carry;
		      carry = r >> 26;
		      this.words[i] = r & 0x3ffffff;
		    }

		    // Copy rest of the words
		    if (carry === 0 && i < a.length && a !== this) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }
		    this.length = Math.max(this.length, i);
		    if (a !== this) {
		      this.negative = 1;
		    }
		    return this._strip();
		  };

		  // Subtract `num` from `this`
		  BN.prototype.sub = function sub(num) {
		    return this.clone().isub(num);
		  };
		  function smallMulTo(self, num, out) {
		    out.negative = num.negative ^ self.negative;
		    var len = self.length + num.length | 0;
		    out.length = len;
		    len = len - 1 | 0;

		    // Peel one iteration (compiler can't do it, because of code complexity)
		    var a = self.words[0] | 0;
		    var b = num.words[0] | 0;
		    var r = a * b;
		    var lo = r & 0x3ffffff;
		    var carry = r / 0x4000000 | 0;
		    out.words[0] = lo;
		    for (var k = 1; k < len; k++) {
		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		      // note that ncarry could be >= 0x3ffffff
		      var ncarry = carry >>> 26;
		      var rword = carry & 0x3ffffff;
		      var maxJ = Math.min(k, num.length - 1);
		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
		        var i = k - j | 0;
		        a = self.words[i] | 0;
		        b = num.words[j] | 0;
		        r = a * b + rword;
		        ncarry += r / 0x4000000 | 0;
		        rword = r & 0x3ffffff;
		      }
		      out.words[k] = rword | 0;
		      carry = ncarry | 0;
		    }
		    if (carry !== 0) {
		      out.words[k] = carry | 0;
		    } else {
		      out.length--;
		    }
		    return out._strip();
		  }

		  // TODO(indutny): it may be reasonable to omit it for users who don't need
		  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
		  // multiplication (like elliptic secp256k1).
		  var comb10MulTo = function comb10MulTo(self, num, out) {
		    var a = self.words;
		    var b = num.words;
		    var o = out.words;
		    var c = 0;
		    var lo;
		    var mid;
		    var hi;
		    var a0 = a[0] | 0;
		    var al0 = a0 & 0x1fff;
		    var ah0 = a0 >>> 13;
		    var a1 = a[1] | 0;
		    var al1 = a1 & 0x1fff;
		    var ah1 = a1 >>> 13;
		    var a2 = a[2] | 0;
		    var al2 = a2 & 0x1fff;
		    var ah2 = a2 >>> 13;
		    var a3 = a[3] | 0;
		    var al3 = a3 & 0x1fff;
		    var ah3 = a3 >>> 13;
		    var a4 = a[4] | 0;
		    var al4 = a4 & 0x1fff;
		    var ah4 = a4 >>> 13;
		    var a5 = a[5] | 0;
		    var al5 = a5 & 0x1fff;
		    var ah5 = a5 >>> 13;
		    var a6 = a[6] | 0;
		    var al6 = a6 & 0x1fff;
		    var ah6 = a6 >>> 13;
		    var a7 = a[7] | 0;
		    var al7 = a7 & 0x1fff;
		    var ah7 = a7 >>> 13;
		    var a8 = a[8] | 0;
		    var al8 = a8 & 0x1fff;
		    var ah8 = a8 >>> 13;
		    var a9 = a[9] | 0;
		    var al9 = a9 & 0x1fff;
		    var ah9 = a9 >>> 13;
		    var b0 = b[0] | 0;
		    var bl0 = b0 & 0x1fff;
		    var bh0 = b0 >>> 13;
		    var b1 = b[1] | 0;
		    var bl1 = b1 & 0x1fff;
		    var bh1 = b1 >>> 13;
		    var b2 = b[2] | 0;
		    var bl2 = b2 & 0x1fff;
		    var bh2 = b2 >>> 13;
		    var b3 = b[3] | 0;
		    var bl3 = b3 & 0x1fff;
		    var bh3 = b3 >>> 13;
		    var b4 = b[4] | 0;
		    var bl4 = b4 & 0x1fff;
		    var bh4 = b4 >>> 13;
		    var b5 = b[5] | 0;
		    var bl5 = b5 & 0x1fff;
		    var bh5 = b5 >>> 13;
		    var b6 = b[6] | 0;
		    var bl6 = b6 & 0x1fff;
		    var bh6 = b6 >>> 13;
		    var b7 = b[7] | 0;
		    var bl7 = b7 & 0x1fff;
		    var bh7 = b7 >>> 13;
		    var b8 = b[8] | 0;
		    var bl8 = b8 & 0x1fff;
		    var bh8 = b8 >>> 13;
		    var b9 = b[9] | 0;
		    var bl9 = b9 & 0x1fff;
		    var bh9 = b9 >>> 13;
		    out.negative = self.negative ^ num.negative;
		    out.length = 19;
		    /* k = 0 */
		    lo = Math.imul(al0, bl0);
		    mid = Math.imul(al0, bh0);
		    mid = mid + Math.imul(ah0, bl0) | 0;
		    hi = Math.imul(ah0, bh0);
		    var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
		    w0 &= 0x3ffffff;
		    /* k = 1 */
		    lo = Math.imul(al1, bl0);
		    mid = Math.imul(al1, bh0);
		    mid = mid + Math.imul(ah1, bl0) | 0;
		    hi = Math.imul(ah1, bh0);
		    lo = lo + Math.imul(al0, bl1) | 0;
		    mid = mid + Math.imul(al0, bh1) | 0;
		    mid = mid + Math.imul(ah0, bl1) | 0;
		    hi = hi + Math.imul(ah0, bh1) | 0;
		    var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
		    w1 &= 0x3ffffff;
		    /* k = 2 */
		    lo = Math.imul(al2, bl0);
		    mid = Math.imul(al2, bh0);
		    mid = mid + Math.imul(ah2, bl0) | 0;
		    hi = Math.imul(ah2, bh0);
		    lo = lo + Math.imul(al1, bl1) | 0;
		    mid = mid + Math.imul(al1, bh1) | 0;
		    mid = mid + Math.imul(ah1, bl1) | 0;
		    hi = hi + Math.imul(ah1, bh1) | 0;
		    lo = lo + Math.imul(al0, bl2) | 0;
		    mid = mid + Math.imul(al0, bh2) | 0;
		    mid = mid + Math.imul(ah0, bl2) | 0;
		    hi = hi + Math.imul(ah0, bh2) | 0;
		    var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
		    w2 &= 0x3ffffff;
		    /* k = 3 */
		    lo = Math.imul(al3, bl0);
		    mid = Math.imul(al3, bh0);
		    mid = mid + Math.imul(ah3, bl0) | 0;
		    hi = Math.imul(ah3, bh0);
		    lo = lo + Math.imul(al2, bl1) | 0;
		    mid = mid + Math.imul(al2, bh1) | 0;
		    mid = mid + Math.imul(ah2, bl1) | 0;
		    hi = hi + Math.imul(ah2, bh1) | 0;
		    lo = lo + Math.imul(al1, bl2) | 0;
		    mid = mid + Math.imul(al1, bh2) | 0;
		    mid = mid + Math.imul(ah1, bl2) | 0;
		    hi = hi + Math.imul(ah1, bh2) | 0;
		    lo = lo + Math.imul(al0, bl3) | 0;
		    mid = mid + Math.imul(al0, bh3) | 0;
		    mid = mid + Math.imul(ah0, bl3) | 0;
		    hi = hi + Math.imul(ah0, bh3) | 0;
		    var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
		    w3 &= 0x3ffffff;
		    /* k = 4 */
		    lo = Math.imul(al4, bl0);
		    mid = Math.imul(al4, bh0);
		    mid = mid + Math.imul(ah4, bl0) | 0;
		    hi = Math.imul(ah4, bh0);
		    lo = lo + Math.imul(al3, bl1) | 0;
		    mid = mid + Math.imul(al3, bh1) | 0;
		    mid = mid + Math.imul(ah3, bl1) | 0;
		    hi = hi + Math.imul(ah3, bh1) | 0;
		    lo = lo + Math.imul(al2, bl2) | 0;
		    mid = mid + Math.imul(al2, bh2) | 0;
		    mid = mid + Math.imul(ah2, bl2) | 0;
		    hi = hi + Math.imul(ah2, bh2) | 0;
		    lo = lo + Math.imul(al1, bl3) | 0;
		    mid = mid + Math.imul(al1, bh3) | 0;
		    mid = mid + Math.imul(ah1, bl3) | 0;
		    hi = hi + Math.imul(ah1, bh3) | 0;
		    lo = lo + Math.imul(al0, bl4) | 0;
		    mid = mid + Math.imul(al0, bh4) | 0;
		    mid = mid + Math.imul(ah0, bl4) | 0;
		    hi = hi + Math.imul(ah0, bh4) | 0;
		    var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
		    w4 &= 0x3ffffff;
		    /* k = 5 */
		    lo = Math.imul(al5, bl0);
		    mid = Math.imul(al5, bh0);
		    mid = mid + Math.imul(ah5, bl0) | 0;
		    hi = Math.imul(ah5, bh0);
		    lo = lo + Math.imul(al4, bl1) | 0;
		    mid = mid + Math.imul(al4, bh1) | 0;
		    mid = mid + Math.imul(ah4, bl1) | 0;
		    hi = hi + Math.imul(ah4, bh1) | 0;
		    lo = lo + Math.imul(al3, bl2) | 0;
		    mid = mid + Math.imul(al3, bh2) | 0;
		    mid = mid + Math.imul(ah3, bl2) | 0;
		    hi = hi + Math.imul(ah3, bh2) | 0;
		    lo = lo + Math.imul(al2, bl3) | 0;
		    mid = mid + Math.imul(al2, bh3) | 0;
		    mid = mid + Math.imul(ah2, bl3) | 0;
		    hi = hi + Math.imul(ah2, bh3) | 0;
		    lo = lo + Math.imul(al1, bl4) | 0;
		    mid = mid + Math.imul(al1, bh4) | 0;
		    mid = mid + Math.imul(ah1, bl4) | 0;
		    hi = hi + Math.imul(ah1, bh4) | 0;
		    lo = lo + Math.imul(al0, bl5) | 0;
		    mid = mid + Math.imul(al0, bh5) | 0;
		    mid = mid + Math.imul(ah0, bl5) | 0;
		    hi = hi + Math.imul(ah0, bh5) | 0;
		    var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
		    w5 &= 0x3ffffff;
		    /* k = 6 */
		    lo = Math.imul(al6, bl0);
		    mid = Math.imul(al6, bh0);
		    mid = mid + Math.imul(ah6, bl0) | 0;
		    hi = Math.imul(ah6, bh0);
		    lo = lo + Math.imul(al5, bl1) | 0;
		    mid = mid + Math.imul(al5, bh1) | 0;
		    mid = mid + Math.imul(ah5, bl1) | 0;
		    hi = hi + Math.imul(ah5, bh1) | 0;
		    lo = lo + Math.imul(al4, bl2) | 0;
		    mid = mid + Math.imul(al4, bh2) | 0;
		    mid = mid + Math.imul(ah4, bl2) | 0;
		    hi = hi + Math.imul(ah4, bh2) | 0;
		    lo = lo + Math.imul(al3, bl3) | 0;
		    mid = mid + Math.imul(al3, bh3) | 0;
		    mid = mid + Math.imul(ah3, bl3) | 0;
		    hi = hi + Math.imul(ah3, bh3) | 0;
		    lo = lo + Math.imul(al2, bl4) | 0;
		    mid = mid + Math.imul(al2, bh4) | 0;
		    mid = mid + Math.imul(ah2, bl4) | 0;
		    hi = hi + Math.imul(ah2, bh4) | 0;
		    lo = lo + Math.imul(al1, bl5) | 0;
		    mid = mid + Math.imul(al1, bh5) | 0;
		    mid = mid + Math.imul(ah1, bl5) | 0;
		    hi = hi + Math.imul(ah1, bh5) | 0;
		    lo = lo + Math.imul(al0, bl6) | 0;
		    mid = mid + Math.imul(al0, bh6) | 0;
		    mid = mid + Math.imul(ah0, bl6) | 0;
		    hi = hi + Math.imul(ah0, bh6) | 0;
		    var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
		    w6 &= 0x3ffffff;
		    /* k = 7 */
		    lo = Math.imul(al7, bl0);
		    mid = Math.imul(al7, bh0);
		    mid = mid + Math.imul(ah7, bl0) | 0;
		    hi = Math.imul(ah7, bh0);
		    lo = lo + Math.imul(al6, bl1) | 0;
		    mid = mid + Math.imul(al6, bh1) | 0;
		    mid = mid + Math.imul(ah6, bl1) | 0;
		    hi = hi + Math.imul(ah6, bh1) | 0;
		    lo = lo + Math.imul(al5, bl2) | 0;
		    mid = mid + Math.imul(al5, bh2) | 0;
		    mid = mid + Math.imul(ah5, bl2) | 0;
		    hi = hi + Math.imul(ah5, bh2) | 0;
		    lo = lo + Math.imul(al4, bl3) | 0;
		    mid = mid + Math.imul(al4, bh3) | 0;
		    mid = mid + Math.imul(ah4, bl3) | 0;
		    hi = hi + Math.imul(ah4, bh3) | 0;
		    lo = lo + Math.imul(al3, bl4) | 0;
		    mid = mid + Math.imul(al3, bh4) | 0;
		    mid = mid + Math.imul(ah3, bl4) | 0;
		    hi = hi + Math.imul(ah3, bh4) | 0;
		    lo = lo + Math.imul(al2, bl5) | 0;
		    mid = mid + Math.imul(al2, bh5) | 0;
		    mid = mid + Math.imul(ah2, bl5) | 0;
		    hi = hi + Math.imul(ah2, bh5) | 0;
		    lo = lo + Math.imul(al1, bl6) | 0;
		    mid = mid + Math.imul(al1, bh6) | 0;
		    mid = mid + Math.imul(ah1, bl6) | 0;
		    hi = hi + Math.imul(ah1, bh6) | 0;
		    lo = lo + Math.imul(al0, bl7) | 0;
		    mid = mid + Math.imul(al0, bh7) | 0;
		    mid = mid + Math.imul(ah0, bl7) | 0;
		    hi = hi + Math.imul(ah0, bh7) | 0;
		    var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
		    w7 &= 0x3ffffff;
		    /* k = 8 */
		    lo = Math.imul(al8, bl0);
		    mid = Math.imul(al8, bh0);
		    mid = mid + Math.imul(ah8, bl0) | 0;
		    hi = Math.imul(ah8, bh0);
		    lo = lo + Math.imul(al7, bl1) | 0;
		    mid = mid + Math.imul(al7, bh1) | 0;
		    mid = mid + Math.imul(ah7, bl1) | 0;
		    hi = hi + Math.imul(ah7, bh1) | 0;
		    lo = lo + Math.imul(al6, bl2) | 0;
		    mid = mid + Math.imul(al6, bh2) | 0;
		    mid = mid + Math.imul(ah6, bl2) | 0;
		    hi = hi + Math.imul(ah6, bh2) | 0;
		    lo = lo + Math.imul(al5, bl3) | 0;
		    mid = mid + Math.imul(al5, bh3) | 0;
		    mid = mid + Math.imul(ah5, bl3) | 0;
		    hi = hi + Math.imul(ah5, bh3) | 0;
		    lo = lo + Math.imul(al4, bl4) | 0;
		    mid = mid + Math.imul(al4, bh4) | 0;
		    mid = mid + Math.imul(ah4, bl4) | 0;
		    hi = hi + Math.imul(ah4, bh4) | 0;
		    lo = lo + Math.imul(al3, bl5) | 0;
		    mid = mid + Math.imul(al3, bh5) | 0;
		    mid = mid + Math.imul(ah3, bl5) | 0;
		    hi = hi + Math.imul(ah3, bh5) | 0;
		    lo = lo + Math.imul(al2, bl6) | 0;
		    mid = mid + Math.imul(al2, bh6) | 0;
		    mid = mid + Math.imul(ah2, bl6) | 0;
		    hi = hi + Math.imul(ah2, bh6) | 0;
		    lo = lo + Math.imul(al1, bl7) | 0;
		    mid = mid + Math.imul(al1, bh7) | 0;
		    mid = mid + Math.imul(ah1, bl7) | 0;
		    hi = hi + Math.imul(ah1, bh7) | 0;
		    lo = lo + Math.imul(al0, bl8) | 0;
		    mid = mid + Math.imul(al0, bh8) | 0;
		    mid = mid + Math.imul(ah0, bl8) | 0;
		    hi = hi + Math.imul(ah0, bh8) | 0;
		    var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
		    w8 &= 0x3ffffff;
		    /* k = 9 */
		    lo = Math.imul(al9, bl0);
		    mid = Math.imul(al9, bh0);
		    mid = mid + Math.imul(ah9, bl0) | 0;
		    hi = Math.imul(ah9, bh0);
		    lo = lo + Math.imul(al8, bl1) | 0;
		    mid = mid + Math.imul(al8, bh1) | 0;
		    mid = mid + Math.imul(ah8, bl1) | 0;
		    hi = hi + Math.imul(ah8, bh1) | 0;
		    lo = lo + Math.imul(al7, bl2) | 0;
		    mid = mid + Math.imul(al7, bh2) | 0;
		    mid = mid + Math.imul(ah7, bl2) | 0;
		    hi = hi + Math.imul(ah7, bh2) | 0;
		    lo = lo + Math.imul(al6, bl3) | 0;
		    mid = mid + Math.imul(al6, bh3) | 0;
		    mid = mid + Math.imul(ah6, bl3) | 0;
		    hi = hi + Math.imul(ah6, bh3) | 0;
		    lo = lo + Math.imul(al5, bl4) | 0;
		    mid = mid + Math.imul(al5, bh4) | 0;
		    mid = mid + Math.imul(ah5, bl4) | 0;
		    hi = hi + Math.imul(ah5, bh4) | 0;
		    lo = lo + Math.imul(al4, bl5) | 0;
		    mid = mid + Math.imul(al4, bh5) | 0;
		    mid = mid + Math.imul(ah4, bl5) | 0;
		    hi = hi + Math.imul(ah4, bh5) | 0;
		    lo = lo + Math.imul(al3, bl6) | 0;
		    mid = mid + Math.imul(al3, bh6) | 0;
		    mid = mid + Math.imul(ah3, bl6) | 0;
		    hi = hi + Math.imul(ah3, bh6) | 0;
		    lo = lo + Math.imul(al2, bl7) | 0;
		    mid = mid + Math.imul(al2, bh7) | 0;
		    mid = mid + Math.imul(ah2, bl7) | 0;
		    hi = hi + Math.imul(ah2, bh7) | 0;
		    lo = lo + Math.imul(al1, bl8) | 0;
		    mid = mid + Math.imul(al1, bh8) | 0;
		    mid = mid + Math.imul(ah1, bl8) | 0;
		    hi = hi + Math.imul(ah1, bh8) | 0;
		    lo = lo + Math.imul(al0, bl9) | 0;
		    mid = mid + Math.imul(al0, bh9) | 0;
		    mid = mid + Math.imul(ah0, bl9) | 0;
		    hi = hi + Math.imul(ah0, bh9) | 0;
		    var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
		    w9 &= 0x3ffffff;
		    /* k = 10 */
		    lo = Math.imul(al9, bl1);
		    mid = Math.imul(al9, bh1);
		    mid = mid + Math.imul(ah9, bl1) | 0;
		    hi = Math.imul(ah9, bh1);
		    lo = lo + Math.imul(al8, bl2) | 0;
		    mid = mid + Math.imul(al8, bh2) | 0;
		    mid = mid + Math.imul(ah8, bl2) | 0;
		    hi = hi + Math.imul(ah8, bh2) | 0;
		    lo = lo + Math.imul(al7, bl3) | 0;
		    mid = mid + Math.imul(al7, bh3) | 0;
		    mid = mid + Math.imul(ah7, bl3) | 0;
		    hi = hi + Math.imul(ah7, bh3) | 0;
		    lo = lo + Math.imul(al6, bl4) | 0;
		    mid = mid + Math.imul(al6, bh4) | 0;
		    mid = mid + Math.imul(ah6, bl4) | 0;
		    hi = hi + Math.imul(ah6, bh4) | 0;
		    lo = lo + Math.imul(al5, bl5) | 0;
		    mid = mid + Math.imul(al5, bh5) | 0;
		    mid = mid + Math.imul(ah5, bl5) | 0;
		    hi = hi + Math.imul(ah5, bh5) | 0;
		    lo = lo + Math.imul(al4, bl6) | 0;
		    mid = mid + Math.imul(al4, bh6) | 0;
		    mid = mid + Math.imul(ah4, bl6) | 0;
		    hi = hi + Math.imul(ah4, bh6) | 0;
		    lo = lo + Math.imul(al3, bl7) | 0;
		    mid = mid + Math.imul(al3, bh7) | 0;
		    mid = mid + Math.imul(ah3, bl7) | 0;
		    hi = hi + Math.imul(ah3, bh7) | 0;
		    lo = lo + Math.imul(al2, bl8) | 0;
		    mid = mid + Math.imul(al2, bh8) | 0;
		    mid = mid + Math.imul(ah2, bl8) | 0;
		    hi = hi + Math.imul(ah2, bh8) | 0;
		    lo = lo + Math.imul(al1, bl9) | 0;
		    mid = mid + Math.imul(al1, bh9) | 0;
		    mid = mid + Math.imul(ah1, bl9) | 0;
		    hi = hi + Math.imul(ah1, bh9) | 0;
		    var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
		    w10 &= 0x3ffffff;
		    /* k = 11 */
		    lo = Math.imul(al9, bl2);
		    mid = Math.imul(al9, bh2);
		    mid = mid + Math.imul(ah9, bl2) | 0;
		    hi = Math.imul(ah9, bh2);
		    lo = lo + Math.imul(al8, bl3) | 0;
		    mid = mid + Math.imul(al8, bh3) | 0;
		    mid = mid + Math.imul(ah8, bl3) | 0;
		    hi = hi + Math.imul(ah8, bh3) | 0;
		    lo = lo + Math.imul(al7, bl4) | 0;
		    mid = mid + Math.imul(al7, bh4) | 0;
		    mid = mid + Math.imul(ah7, bl4) | 0;
		    hi = hi + Math.imul(ah7, bh4) | 0;
		    lo = lo + Math.imul(al6, bl5) | 0;
		    mid = mid + Math.imul(al6, bh5) | 0;
		    mid = mid + Math.imul(ah6, bl5) | 0;
		    hi = hi + Math.imul(ah6, bh5) | 0;
		    lo = lo + Math.imul(al5, bl6) | 0;
		    mid = mid + Math.imul(al5, bh6) | 0;
		    mid = mid + Math.imul(ah5, bl6) | 0;
		    hi = hi + Math.imul(ah5, bh6) | 0;
		    lo = lo + Math.imul(al4, bl7) | 0;
		    mid = mid + Math.imul(al4, bh7) | 0;
		    mid = mid + Math.imul(ah4, bl7) | 0;
		    hi = hi + Math.imul(ah4, bh7) | 0;
		    lo = lo + Math.imul(al3, bl8) | 0;
		    mid = mid + Math.imul(al3, bh8) | 0;
		    mid = mid + Math.imul(ah3, bl8) | 0;
		    hi = hi + Math.imul(ah3, bh8) | 0;
		    lo = lo + Math.imul(al2, bl9) | 0;
		    mid = mid + Math.imul(al2, bh9) | 0;
		    mid = mid + Math.imul(ah2, bl9) | 0;
		    hi = hi + Math.imul(ah2, bh9) | 0;
		    var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
		    w11 &= 0x3ffffff;
		    /* k = 12 */
		    lo = Math.imul(al9, bl3);
		    mid = Math.imul(al9, bh3);
		    mid = mid + Math.imul(ah9, bl3) | 0;
		    hi = Math.imul(ah9, bh3);
		    lo = lo + Math.imul(al8, bl4) | 0;
		    mid = mid + Math.imul(al8, bh4) | 0;
		    mid = mid + Math.imul(ah8, bl4) | 0;
		    hi = hi + Math.imul(ah8, bh4) | 0;
		    lo = lo + Math.imul(al7, bl5) | 0;
		    mid = mid + Math.imul(al7, bh5) | 0;
		    mid = mid + Math.imul(ah7, bl5) | 0;
		    hi = hi + Math.imul(ah7, bh5) | 0;
		    lo = lo + Math.imul(al6, bl6) | 0;
		    mid = mid + Math.imul(al6, bh6) | 0;
		    mid = mid + Math.imul(ah6, bl6) | 0;
		    hi = hi + Math.imul(ah6, bh6) | 0;
		    lo = lo + Math.imul(al5, bl7) | 0;
		    mid = mid + Math.imul(al5, bh7) | 0;
		    mid = mid + Math.imul(ah5, bl7) | 0;
		    hi = hi + Math.imul(ah5, bh7) | 0;
		    lo = lo + Math.imul(al4, bl8) | 0;
		    mid = mid + Math.imul(al4, bh8) | 0;
		    mid = mid + Math.imul(ah4, bl8) | 0;
		    hi = hi + Math.imul(ah4, bh8) | 0;
		    lo = lo + Math.imul(al3, bl9) | 0;
		    mid = mid + Math.imul(al3, bh9) | 0;
		    mid = mid + Math.imul(ah3, bl9) | 0;
		    hi = hi + Math.imul(ah3, bh9) | 0;
		    var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
		    w12 &= 0x3ffffff;
		    /* k = 13 */
		    lo = Math.imul(al9, bl4);
		    mid = Math.imul(al9, bh4);
		    mid = mid + Math.imul(ah9, bl4) | 0;
		    hi = Math.imul(ah9, bh4);
		    lo = lo + Math.imul(al8, bl5) | 0;
		    mid = mid + Math.imul(al8, bh5) | 0;
		    mid = mid + Math.imul(ah8, bl5) | 0;
		    hi = hi + Math.imul(ah8, bh5) | 0;
		    lo = lo + Math.imul(al7, bl6) | 0;
		    mid = mid + Math.imul(al7, bh6) | 0;
		    mid = mid + Math.imul(ah7, bl6) | 0;
		    hi = hi + Math.imul(ah7, bh6) | 0;
		    lo = lo + Math.imul(al6, bl7) | 0;
		    mid = mid + Math.imul(al6, bh7) | 0;
		    mid = mid + Math.imul(ah6, bl7) | 0;
		    hi = hi + Math.imul(ah6, bh7) | 0;
		    lo = lo + Math.imul(al5, bl8) | 0;
		    mid = mid + Math.imul(al5, bh8) | 0;
		    mid = mid + Math.imul(ah5, bl8) | 0;
		    hi = hi + Math.imul(ah5, bh8) | 0;
		    lo = lo + Math.imul(al4, bl9) | 0;
		    mid = mid + Math.imul(al4, bh9) | 0;
		    mid = mid + Math.imul(ah4, bl9) | 0;
		    hi = hi + Math.imul(ah4, bh9) | 0;
		    var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
		    w13 &= 0x3ffffff;
		    /* k = 14 */
		    lo = Math.imul(al9, bl5);
		    mid = Math.imul(al9, bh5);
		    mid = mid + Math.imul(ah9, bl5) | 0;
		    hi = Math.imul(ah9, bh5);
		    lo = lo + Math.imul(al8, bl6) | 0;
		    mid = mid + Math.imul(al8, bh6) | 0;
		    mid = mid + Math.imul(ah8, bl6) | 0;
		    hi = hi + Math.imul(ah8, bh6) | 0;
		    lo = lo + Math.imul(al7, bl7) | 0;
		    mid = mid + Math.imul(al7, bh7) | 0;
		    mid = mid + Math.imul(ah7, bl7) | 0;
		    hi = hi + Math.imul(ah7, bh7) | 0;
		    lo = lo + Math.imul(al6, bl8) | 0;
		    mid = mid + Math.imul(al6, bh8) | 0;
		    mid = mid + Math.imul(ah6, bl8) | 0;
		    hi = hi + Math.imul(ah6, bh8) | 0;
		    lo = lo + Math.imul(al5, bl9) | 0;
		    mid = mid + Math.imul(al5, bh9) | 0;
		    mid = mid + Math.imul(ah5, bl9) | 0;
		    hi = hi + Math.imul(ah5, bh9) | 0;
		    var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
		    w14 &= 0x3ffffff;
		    /* k = 15 */
		    lo = Math.imul(al9, bl6);
		    mid = Math.imul(al9, bh6);
		    mid = mid + Math.imul(ah9, bl6) | 0;
		    hi = Math.imul(ah9, bh6);
		    lo = lo + Math.imul(al8, bl7) | 0;
		    mid = mid + Math.imul(al8, bh7) | 0;
		    mid = mid + Math.imul(ah8, bl7) | 0;
		    hi = hi + Math.imul(ah8, bh7) | 0;
		    lo = lo + Math.imul(al7, bl8) | 0;
		    mid = mid + Math.imul(al7, bh8) | 0;
		    mid = mid + Math.imul(ah7, bl8) | 0;
		    hi = hi + Math.imul(ah7, bh8) | 0;
		    lo = lo + Math.imul(al6, bl9) | 0;
		    mid = mid + Math.imul(al6, bh9) | 0;
		    mid = mid + Math.imul(ah6, bl9) | 0;
		    hi = hi + Math.imul(ah6, bh9) | 0;
		    var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
		    w15 &= 0x3ffffff;
		    /* k = 16 */
		    lo = Math.imul(al9, bl7);
		    mid = Math.imul(al9, bh7);
		    mid = mid + Math.imul(ah9, bl7) | 0;
		    hi = Math.imul(ah9, bh7);
		    lo = lo + Math.imul(al8, bl8) | 0;
		    mid = mid + Math.imul(al8, bh8) | 0;
		    mid = mid + Math.imul(ah8, bl8) | 0;
		    hi = hi + Math.imul(ah8, bh8) | 0;
		    lo = lo + Math.imul(al7, bl9) | 0;
		    mid = mid + Math.imul(al7, bh9) | 0;
		    mid = mid + Math.imul(ah7, bl9) | 0;
		    hi = hi + Math.imul(ah7, bh9) | 0;
		    var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
		    w16 &= 0x3ffffff;
		    /* k = 17 */
		    lo = Math.imul(al9, bl8);
		    mid = Math.imul(al9, bh8);
		    mid = mid + Math.imul(ah9, bl8) | 0;
		    hi = Math.imul(ah9, bh8);
		    lo = lo + Math.imul(al8, bl9) | 0;
		    mid = mid + Math.imul(al8, bh9) | 0;
		    mid = mid + Math.imul(ah8, bl9) | 0;
		    hi = hi + Math.imul(ah8, bh9) | 0;
		    var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
		    w17 &= 0x3ffffff;
		    /* k = 18 */
		    lo = Math.imul(al9, bl9);
		    mid = Math.imul(al9, bh9);
		    mid = mid + Math.imul(ah9, bl9) | 0;
		    hi = Math.imul(ah9, bh9);
		    var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
		    c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
		    w18 &= 0x3ffffff;
		    o[0] = w0;
		    o[1] = w1;
		    o[2] = w2;
		    o[3] = w3;
		    o[4] = w4;
		    o[5] = w5;
		    o[6] = w6;
		    o[7] = w7;
		    o[8] = w8;
		    o[9] = w9;
		    o[10] = w10;
		    o[11] = w11;
		    o[12] = w12;
		    o[13] = w13;
		    o[14] = w14;
		    o[15] = w15;
		    o[16] = w16;
		    o[17] = w17;
		    o[18] = w18;
		    if (c !== 0) {
		      o[19] = c;
		      out.length++;
		    }
		    return out;
		  };

		  // Polyfill comb
		  if (!Math.imul) {
		    comb10MulTo = smallMulTo;
		  }
		  function bigMulTo(self, num, out) {
		    out.negative = num.negative ^ self.negative;
		    out.length = self.length + num.length;
		    var carry = 0;
		    var hncarry = 0;
		    for (var k = 0; k < out.length - 1; k++) {
		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		      // note that ncarry could be >= 0x3ffffff
		      var ncarry = hncarry;
		      hncarry = 0;
		      var rword = carry & 0x3ffffff;
		      var maxJ = Math.min(k, num.length - 1);
		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
		        var i = k - j;
		        var a = self.words[i] | 0;
		        var b = num.words[j] | 0;
		        var r = a * b;
		        var lo = r & 0x3ffffff;
		        ncarry = ncarry + (r / 0x4000000 | 0) | 0;
		        lo = lo + rword | 0;
		        rword = lo & 0x3ffffff;
		        ncarry = ncarry + (lo >>> 26) | 0;
		        hncarry += ncarry >>> 26;
		        ncarry &= 0x3ffffff;
		      }
		      out.words[k] = rword;
		      carry = ncarry;
		      ncarry = hncarry;
		    }
		    if (carry !== 0) {
		      out.words[k] = carry;
		    } else {
		      out.length--;
		    }
		    return out._strip();
		  }
		  function jumboMulTo(self, num, out) {
		    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
		    // var fftm = new FFTM();
		    // return fftm.mulp(self, num, out);
		    return bigMulTo(self, num, out);
		  }
		  BN.prototype.mulTo = function mulTo(num, out) {
		    var res;
		    var len = this.length + num.length;
		    if (this.length === 10 && num.length === 10) {
		      res = comb10MulTo(this, num, out);
		    } else if (len < 63) {
		      res = smallMulTo(this, num, out);
		    } else if (len < 1024) {
		      res = bigMulTo(this, num, out);
		    } else {
		      res = jumboMulTo(this, num, out);
		    }
		    return res;
		  };

		  // Multiply `this` by `num`
		  BN.prototype.mul = function mul(num) {
		    var out = new BN(null);
		    out.words = new Array(this.length + num.length);
		    return this.mulTo(num, out);
		  };

		  // Multiply employing FFT
		  BN.prototype.mulf = function mulf(num) {
		    var out = new BN(null);
		    out.words = new Array(this.length + num.length);
		    return jumboMulTo(this, num, out);
		  };

		  // In-place Multiplication
		  BN.prototype.imul = function imul(num) {
		    return this.clone().mulTo(num, this);
		  };
		  BN.prototype.imuln = function imuln(num) {
		    var isNegNum = num < 0;
		    if (isNegNum) num = -num;
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);

		    // Carry
		    var carry = 0;
		    for (var i = 0; i < this.length; i++) {
		      var w = (this.words[i] | 0) * num;
		      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
		      carry >>= 26;
		      carry += w / 0x4000000 | 0;
		      // NOTE: lo is 27bit maximum
		      carry += lo >>> 26;
		      this.words[i] = lo & 0x3ffffff;
		    }
		    if (carry !== 0) {
		      this.words[i] = carry;
		      this.length++;
		    }
		    return isNegNum ? this.ineg() : this;
		  };
		  BN.prototype.muln = function muln(num) {
		    return this.clone().imuln(num);
		  };

		  // `this` * `this`
		  BN.prototype.sqr = function sqr() {
		    return this.mul(this);
		  };

		  // `this` * `this` in-place
		  BN.prototype.isqr = function isqr() {
		    return this.imul(this.clone());
		  };

		  // Math.pow(`this`, `num`)
		  BN.prototype.pow = function pow(num) {
		    var w = toBitArray(num);
		    if (w.length === 0) return new BN(1);

		    // Skip leading zeroes
		    var res = this;
		    for (var i = 0; i < w.length; i++, res = res.sqr()) {
		      if (w[i] !== 0) break;
		    }
		    if (++i < w.length) {
		      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
		        if (w[i] === 0) continue;
		        res = res.mul(q);
		      }
		    }
		    return res;
		  };

		  // Shift-left in-place
		  BN.prototype.iushln = function iushln(bits) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var r = bits % 26;
		    var s = (bits - r) / 26;
		    var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
		    var i;
		    if (r !== 0) {
		      var carry = 0;
		      for (i = 0; i < this.length; i++) {
		        var newCarry = this.words[i] & carryMask;
		        var c = (this.words[i] | 0) - newCarry << r;
		        this.words[i] = c | carry;
		        carry = newCarry >>> 26 - r;
		      }
		      if (carry) {
		        this.words[i] = carry;
		        this.length++;
		      }
		    }
		    if (s !== 0) {
		      for (i = this.length - 1; i >= 0; i--) {
		        this.words[i + s] = this.words[i];
		      }
		      for (i = 0; i < s; i++) {
		        this.words[i] = 0;
		      }
		      this.length += s;
		    }
		    return this._strip();
		  };
		  BN.prototype.ishln = function ishln(bits) {
		    // TODO(indutny): implement me
		    assert(this.negative === 0);
		    return this.iushln(bits);
		  };

		  // Shift-right in-place
		  // NOTE: `hint` is a lowest bit before trailing zeroes
		  // NOTE: if `extended` is present - it will be filled with destroyed bits
		  BN.prototype.iushrn = function iushrn(bits, hint, extended) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var h;
		    if (hint) {
		      h = (hint - hint % 26) / 26;
		    } else {
		      h = 0;
		    }
		    var r = bits % 26;
		    var s = Math.min((bits - r) / 26, this.length);
		    var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
		    var maskedWords = extended;
		    h -= s;
		    h = Math.max(0, h);

		    // Extended mode, copy masked part
		    if (maskedWords) {
		      for (var i = 0; i < s; i++) {
		        maskedWords.words[i] = this.words[i];
		      }
		      maskedWords.length = s;
		    }
		    if (s === 0) ; else if (this.length > s) {
		      this.length -= s;
		      for (i = 0; i < this.length; i++) {
		        this.words[i] = this.words[i + s];
		      }
		    } else {
		      this.words[0] = 0;
		      this.length = 1;
		    }
		    var carry = 0;
		    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
		      var word = this.words[i] | 0;
		      this.words[i] = carry << 26 - r | word >>> r;
		      carry = word & mask;
		    }

		    // Push carried bits as a mask
		    if (maskedWords && carry !== 0) {
		      maskedWords.words[maskedWords.length++] = carry;
		    }
		    if (this.length === 0) {
		      this.words[0] = 0;
		      this.length = 1;
		    }
		    return this._strip();
		  };
		  BN.prototype.ishrn = function ishrn(bits, hint, extended) {
		    // TODO(indutny): implement me
		    assert(this.negative === 0);
		    return this.iushrn(bits, hint, extended);
		  };

		  // Shift-left
		  BN.prototype.shln = function shln(bits) {
		    return this.clone().ishln(bits);
		  };
		  BN.prototype.ushln = function ushln(bits) {
		    return this.clone().iushln(bits);
		  };

		  // Shift-right
		  BN.prototype.shrn = function shrn(bits) {
		    return this.clone().ishrn(bits);
		  };
		  BN.prototype.ushrn = function ushrn(bits) {
		    return this.clone().iushrn(bits);
		  };

		  // Test if n bit is set
		  BN.prototype.testn = function testn(bit) {
		    assert(typeof bit === 'number' && bit >= 0);
		    var r = bit % 26;
		    var s = (bit - r) / 26;
		    var q = 1 << r;

		    // Fast case: bit is much higher than all existing words
		    if (this.length <= s) return false;

		    // Check bit and return
		    var w = this.words[s];
		    return !!(w & q);
		  };

		  // Return only lowers bits of number (in-place)
		  BN.prototype.imaskn = function imaskn(bits) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var r = bits % 26;
		    var s = (bits - r) / 26;
		    assert(this.negative === 0, 'imaskn works only with positive numbers');
		    if (this.length <= s) {
		      return this;
		    }
		    if (r !== 0) {
		      s++;
		    }
		    this.length = Math.min(s, this.length);
		    if (r !== 0) {
		      var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
		      this.words[this.length - 1] &= mask;
		    }
		    return this._strip();
		  };

		  // Return only lowers bits of number
		  BN.prototype.maskn = function maskn(bits) {
		    return this.clone().imaskn(bits);
		  };

		  // Add plain number `num` to `this`
		  BN.prototype.iaddn = function iaddn(num) {
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);
		    if (num < 0) return this.isubn(-num);

		    // Possible sign change
		    if (this.negative !== 0) {
		      if (this.length === 1 && (this.words[0] | 0) <= num) {
		        this.words[0] = num - (this.words[0] | 0);
		        this.negative = 0;
		        return this;
		      }
		      this.negative = 0;
		      this.isubn(num);
		      this.negative = 1;
		      return this;
		    }

		    // Add without checks
		    return this._iaddn(num);
		  };
		  BN.prototype._iaddn = function _iaddn(num) {
		    this.words[0] += num;

		    // Carry
		    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
		      this.words[i] -= 0x4000000;
		      if (i === this.length - 1) {
		        this.words[i + 1] = 1;
		      } else {
		        this.words[i + 1]++;
		      }
		    }
		    this.length = Math.max(this.length, i + 1);
		    return this;
		  };

		  // Subtract plain number `num` from `this`
		  BN.prototype.isubn = function isubn(num) {
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);
		    if (num < 0) return this.iaddn(-num);
		    if (this.negative !== 0) {
		      this.negative = 0;
		      this.iaddn(num);
		      this.negative = 1;
		      return this;
		    }
		    this.words[0] -= num;
		    if (this.length === 1 && this.words[0] < 0) {
		      this.words[0] = -this.words[0];
		      this.negative = 1;
		    } else {
		      // Carry
		      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
		        this.words[i] += 0x4000000;
		        this.words[i + 1] -= 1;
		      }
		    }
		    return this._strip();
		  };
		  BN.prototype.addn = function addn(num) {
		    return this.clone().iaddn(num);
		  };
		  BN.prototype.subn = function subn(num) {
		    return this.clone().isubn(num);
		  };
		  BN.prototype.iabs = function iabs() {
		    this.negative = 0;
		    return this;
		  };
		  BN.prototype.abs = function abs() {
		    return this.clone().iabs();
		  };
		  BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
		    var len = num.length + shift;
		    var i;
		    this._expand(len);
		    var w;
		    var carry = 0;
		    for (i = 0; i < num.length; i++) {
		      w = (this.words[i + shift] | 0) + carry;
		      var right = (num.words[i] | 0) * mul;
		      w -= right & 0x3ffffff;
		      carry = (w >> 26) - (right / 0x4000000 | 0);
		      this.words[i + shift] = w & 0x3ffffff;
		    }
		    for (; i < this.length - shift; i++) {
		      w = (this.words[i + shift] | 0) + carry;
		      carry = w >> 26;
		      this.words[i + shift] = w & 0x3ffffff;
		    }
		    if (carry === 0) return this._strip();

		    // Subtraction overflow
		    assert(carry === -1);
		    carry = 0;
		    for (i = 0; i < this.length; i++) {
		      w = -(this.words[i] | 0) + carry;
		      carry = w >> 26;
		      this.words[i] = w & 0x3ffffff;
		    }
		    this.negative = 1;
		    return this._strip();
		  };
		  BN.prototype._wordDiv = function _wordDiv(num, mode) {
		    var shift = this.length - num.length;
		    var a = this.clone();
		    var b = num;

		    // Normalize
		    var bhi = b.words[b.length - 1] | 0;
		    var bhiBits = this._countBits(bhi);
		    shift = 26 - bhiBits;
		    if (shift !== 0) {
		      b = b.ushln(shift);
		      a.iushln(shift);
		      bhi = b.words[b.length - 1] | 0;
		    }

		    // Initialize quotient
		    var m = a.length - b.length;
		    var q;
		    if (mode !== 'mod') {
		      q = new BN(null);
		      q.length = m + 1;
		      q.words = new Array(q.length);
		      for (var i = 0; i < q.length; i++) {
		        q.words[i] = 0;
		      }
		    }
		    var diff = a.clone()._ishlnsubmul(b, 1, m);
		    if (diff.negative === 0) {
		      a = diff;
		      if (q) {
		        q.words[m] = 1;
		      }
		    }
		    for (var j = m - 1; j >= 0; j--) {
		      var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);

		      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
		      // (0x7ffffff)
		      qj = Math.min(qj / bhi | 0, 0x3ffffff);
		      a._ishlnsubmul(b, qj, j);
		      while (a.negative !== 0) {
		        qj--;
		        a.negative = 0;
		        a._ishlnsubmul(b, 1, j);
		        if (!a.isZero()) {
		          a.negative ^= 1;
		        }
		      }
		      if (q) {
		        q.words[j] = qj;
		      }
		    }
		    if (q) {
		      q._strip();
		    }
		    a._strip();

		    // Denormalize
		    if (mode !== 'div' && shift !== 0) {
		      a.iushrn(shift);
		    }
		    return {
		      div: q || null,
		      mod: a
		    };
		  };

		  // NOTE: 1) `mode` can be set to `mod` to request mod only,
		  //       to `div` to request div only, or be absent to
		  //       request both div & mod
		  //       2) `positive` is true if unsigned mod is requested
		  BN.prototype.divmod = function divmod(num, mode, positive) {
		    assert(!num.isZero());
		    if (this.isZero()) {
		      return {
		        div: new BN(0),
		        mod: new BN(0)
		      };
		    }
		    var div, mod, res;
		    if (this.negative !== 0 && num.negative === 0) {
		      res = this.neg().divmod(num, mode);
		      if (mode !== 'mod') {
		        div = res.div.neg();
		      }
		      if (mode !== 'div') {
		        mod = res.mod.neg();
		        if (positive && mod.negative !== 0) {
		          mod.iadd(num);
		        }
		      }
		      return {
		        div: div,
		        mod: mod
		      };
		    }
		    if (this.negative === 0 && num.negative !== 0) {
		      res = this.divmod(num.neg(), mode);
		      if (mode !== 'mod') {
		        div = res.div.neg();
		      }
		      return {
		        div: div,
		        mod: res.mod
		      };
		    }
		    if ((this.negative & num.negative) !== 0) {
		      res = this.neg().divmod(num.neg(), mode);
		      if (mode !== 'div') {
		        mod = res.mod.neg();
		        if (positive && mod.negative !== 0) {
		          mod.isub(num);
		        }
		      }
		      return {
		        div: res.div,
		        mod: mod
		      };
		    }

		    // Both numbers are positive at this point

		    // Strip both numbers to approximate shift value
		    if (num.length > this.length || this.cmp(num) < 0) {
		      return {
		        div: new BN(0),
		        mod: this
		      };
		    }

		    // Very short reduction
		    if (num.length === 1) {
		      if (mode === 'div') {
		        return {
		          div: this.divn(num.words[0]),
		          mod: null
		        };
		      }
		      if (mode === 'mod') {
		        return {
		          div: null,
		          mod: new BN(this.modrn(num.words[0]))
		        };
		      }
		      return {
		        div: this.divn(num.words[0]),
		        mod: new BN(this.modrn(num.words[0]))
		      };
		    }
		    return this._wordDiv(num, mode);
		  };

		  // Find `this` / `num`
		  BN.prototype.div = function div(num) {
		    return this.divmod(num, 'div', false).div;
		  };

		  // Find `this` % `num`
		  BN.prototype.mod = function mod(num) {
		    return this.divmod(num, 'mod', false).mod;
		  };
		  BN.prototype.umod = function umod(num) {
		    return this.divmod(num, 'mod', true).mod;
		  };

		  // Find Round(`this` / `num`)
		  BN.prototype.divRound = function divRound(num) {
		    var dm = this.divmod(num);

		    // Fast case - exact division
		    if (dm.mod.isZero()) return dm.div;
		    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
		    var half = num.ushrn(1);
		    var r2 = num.andln(1);
		    var cmp = mod.cmp(half);

		    // Round down
		    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

		    // Round up
		    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
		  };
		  BN.prototype.modrn = function modrn(num) {
		    var isNegNum = num < 0;
		    if (isNegNum) num = -num;
		    assert(num <= 0x3ffffff);
		    var p = (1 << 26) % num;
		    var acc = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      acc = (p * acc + (this.words[i] | 0)) % num;
		    }
		    return isNegNum ? -acc : acc;
		  };

		  // WARNING: DEPRECATED
		  BN.prototype.modn = function modn(num) {
		    return this.modrn(num);
		  };

		  // In-place division by number
		  BN.prototype.idivn = function idivn(num) {
		    var isNegNum = num < 0;
		    if (isNegNum) num = -num;
		    assert(num <= 0x3ffffff);
		    var carry = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      var w = (this.words[i] | 0) + carry * 0x4000000;
		      this.words[i] = w / num | 0;
		      carry = w % num;
		    }
		    this._strip();
		    return isNegNum ? this.ineg() : this;
		  };
		  BN.prototype.divn = function divn(num) {
		    return this.clone().idivn(num);
		  };
		  BN.prototype.egcd = function egcd(p) {
		    assert(p.negative === 0);
		    assert(!p.isZero());
		    var x = this;
		    var y = p.clone();
		    if (x.negative !== 0) {
		      x = x.umod(p);
		    } else {
		      x = x.clone();
		    }

		    // A * x + B * y = x
		    var A = new BN(1);
		    var B = new BN(0);

		    // C * x + D * y = y
		    var C = new BN(0);
		    var D = new BN(1);
		    var g = 0;
		    while (x.isEven() && y.isEven()) {
		      x.iushrn(1);
		      y.iushrn(1);
		      ++g;
		    }
		    var yp = y.clone();
		    var xp = x.clone();
		    while (!x.isZero()) {
		      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
		      }
		      if (i > 0) {
		        x.iushrn(i);
		        while (i-- > 0) {
		          if (A.isOdd() || B.isOdd()) {
		            A.iadd(yp);
		            B.isub(xp);
		          }
		          A.iushrn(1);
		          B.iushrn(1);
		        }
		      }
		      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
		      }
		      if (j > 0) {
		        y.iushrn(j);
		        while (j-- > 0) {
		          if (C.isOdd() || D.isOdd()) {
		            C.iadd(yp);
		            D.isub(xp);
		          }
		          C.iushrn(1);
		          D.iushrn(1);
		        }
		      }
		      if (x.cmp(y) >= 0) {
		        x.isub(y);
		        A.isub(C);
		        B.isub(D);
		      } else {
		        y.isub(x);
		        C.isub(A);
		        D.isub(B);
		      }
		    }
		    return {
		      a: C,
		      b: D,
		      gcd: y.iushln(g)
		    };
		  };

		  // This is reduced incarnation of the binary EEA
		  // above, designated to invert members of the
		  // _prime_ fields F(p) at a maximal speed
		  BN.prototype._invmp = function _invmp(p) {
		    assert(p.negative === 0);
		    assert(!p.isZero());
		    var a = this;
		    var b = p.clone();
		    if (a.negative !== 0) {
		      a = a.umod(p);
		    } else {
		      a = a.clone();
		    }
		    var x1 = new BN(1);
		    var x2 = new BN(0);
		    var delta = b.clone();
		    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
		      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
		      }
		      if (i > 0) {
		        a.iushrn(i);
		        while (i-- > 0) {
		          if (x1.isOdd()) {
		            x1.iadd(delta);
		          }
		          x1.iushrn(1);
		        }
		      }
		      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
		      }
		      if (j > 0) {
		        b.iushrn(j);
		        while (j-- > 0) {
		          if (x2.isOdd()) {
		            x2.iadd(delta);
		          }
		          x2.iushrn(1);
		        }
		      }
		      if (a.cmp(b) >= 0) {
		        a.isub(b);
		        x1.isub(x2);
		      } else {
		        b.isub(a);
		        x2.isub(x1);
		      }
		    }
		    var res;
		    if (a.cmpn(1) === 0) {
		      res = x1;
		    } else {
		      res = x2;
		    }
		    if (res.cmpn(0) < 0) {
		      res.iadd(p);
		    }
		    return res;
		  };
		  BN.prototype.gcd = function gcd(num) {
		    if (this.isZero()) return num.abs();
		    if (num.isZero()) return this.abs();
		    var a = this.clone();
		    var b = num.clone();
		    a.negative = 0;
		    b.negative = 0;

		    // Remove common factor of two
		    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
		      a.iushrn(1);
		      b.iushrn(1);
		    }
		    do {
		      while (a.isEven()) {
		        a.iushrn(1);
		      }
		      while (b.isEven()) {
		        b.iushrn(1);
		      }
		      var r = a.cmp(b);
		      if (r < 0) {
		        // Swap `a` and `b` to make `a` always bigger than `b`
		        var t = a;
		        a = b;
		        b = t;
		      } else if (r === 0 || b.cmpn(1) === 0) {
		        break;
		      }
		      a.isub(b);
		    } while (true);
		    return b.iushln(shift);
		  };

		  // Invert number in the field F(num)
		  BN.prototype.invm = function invm(num) {
		    return this.egcd(num).a.umod(num);
		  };
		  BN.prototype.isEven = function isEven() {
		    return (this.words[0] & 1) === 0;
		  };
		  BN.prototype.isOdd = function isOdd() {
		    return (this.words[0] & 1) === 1;
		  };

		  // And first word and num
		  BN.prototype.andln = function andln(num) {
		    return this.words[0] & num;
		  };

		  // Increment at the bit position in-line
		  BN.prototype.bincn = function bincn(bit) {
		    assert(typeof bit === 'number');
		    var r = bit % 26;
		    var s = (bit - r) / 26;
		    var q = 1 << r;

		    // Fast case: bit is much higher than all existing words
		    if (this.length <= s) {
		      this._expand(s + 1);
		      this.words[s] |= q;
		      return this;
		    }

		    // Add bit and propagate, if needed
		    var carry = q;
		    for (var i = s; carry !== 0 && i < this.length; i++) {
		      var w = this.words[i] | 0;
		      w += carry;
		      carry = w >>> 26;
		      w &= 0x3ffffff;
		      this.words[i] = w;
		    }
		    if (carry !== 0) {
		      this.words[i] = carry;
		      this.length++;
		    }
		    return this;
		  };
		  BN.prototype.isZero = function isZero() {
		    return this.length === 1 && this.words[0] === 0;
		  };
		  BN.prototype.cmpn = function cmpn(num) {
		    var negative = num < 0;
		    if (this.negative !== 0 && !negative) return -1;
		    if (this.negative === 0 && negative) return 1;
		    this._strip();
		    var res;
		    if (this.length > 1) {
		      res = 1;
		    } else {
		      if (negative) {
		        num = -num;
		      }
		      assert(num <= 0x3ffffff, 'Number is too big');
		      var w = this.words[0] | 0;
		      res = w === num ? 0 : w < num ? -1 : 1;
		    }
		    if (this.negative !== 0) return -res | 0;
		    return res;
		  };

		  // Compare two numbers and return:
		  // 1 - if `this` > `num`
		  // 0 - if `this` == `num`
		  // -1 - if `this` < `num`
		  BN.prototype.cmp = function cmp(num) {
		    if (this.negative !== 0 && num.negative === 0) return -1;
		    if (this.negative === 0 && num.negative !== 0) return 1;
		    var res = this.ucmp(num);
		    if (this.negative !== 0) return -res | 0;
		    return res;
		  };

		  // Unsigned comparison
		  BN.prototype.ucmp = function ucmp(num) {
		    // At this point both numbers have the same sign
		    if (this.length > num.length) return 1;
		    if (this.length < num.length) return -1;
		    var res = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      var a = this.words[i] | 0;
		      var b = num.words[i] | 0;
		      if (a === b) continue;
		      if (a < b) {
		        res = -1;
		      } else if (a > b) {
		        res = 1;
		      }
		      break;
		    }
		    return res;
		  };
		  BN.prototype.gtn = function gtn(num) {
		    return this.cmpn(num) === 1;
		  };
		  BN.prototype.gt = function gt(num) {
		    return this.cmp(num) === 1;
		  };
		  BN.prototype.gten = function gten(num) {
		    return this.cmpn(num) >= 0;
		  };
		  BN.prototype.gte = function gte(num) {
		    return this.cmp(num) >= 0;
		  };
		  BN.prototype.ltn = function ltn(num) {
		    return this.cmpn(num) === -1;
		  };
		  BN.prototype.lt = function lt(num) {
		    return this.cmp(num) === -1;
		  };
		  BN.prototype.lten = function lten(num) {
		    return this.cmpn(num) <= 0;
		  };
		  BN.prototype.lte = function lte(num) {
		    return this.cmp(num) <= 0;
		  };
		  BN.prototype.eqn = function eqn(num) {
		    return this.cmpn(num) === 0;
		  };
		  BN.prototype.eq = function eq(num) {
		    return this.cmp(num) === 0;
		  };

		  //
		  // A reduce context, could be using montgomery or something better, depending
		  // on the `m` itself.
		  //
		  BN.red = function red(num) {
		    return new Red(num);
		  };
		  BN.prototype.toRed = function toRed(ctx) {
		    assert(!this.red, 'Already a number in reduction context');
		    assert(this.negative === 0, 'red works only with positives');
		    return ctx.convertTo(this)._forceRed(ctx);
		  };
		  BN.prototype.fromRed = function fromRed() {
		    assert(this.red, 'fromRed works only with numbers in reduction context');
		    return this.red.convertFrom(this);
		  };
		  BN.prototype._forceRed = function _forceRed(ctx) {
		    this.red = ctx;
		    return this;
		  };
		  BN.prototype.forceRed = function forceRed(ctx) {
		    assert(!this.red, 'Already a number in reduction context');
		    return this._forceRed(ctx);
		  };
		  BN.prototype.redAdd = function redAdd(num) {
		    assert(this.red, 'redAdd works only with red numbers');
		    return this.red.add(this, num);
		  };
		  BN.prototype.redIAdd = function redIAdd(num) {
		    assert(this.red, 'redIAdd works only with red numbers');
		    return this.red.iadd(this, num);
		  };
		  BN.prototype.redSub = function redSub(num) {
		    assert(this.red, 'redSub works only with red numbers');
		    return this.red.sub(this, num);
		  };
		  BN.prototype.redISub = function redISub(num) {
		    assert(this.red, 'redISub works only with red numbers');
		    return this.red.isub(this, num);
		  };
		  BN.prototype.redShl = function redShl(num) {
		    assert(this.red, 'redShl works only with red numbers');
		    return this.red.shl(this, num);
		  };
		  BN.prototype.redMul = function redMul(num) {
		    assert(this.red, 'redMul works only with red numbers');
		    this.red._verify2(this, num);
		    return this.red.mul(this, num);
		  };
		  BN.prototype.redIMul = function redIMul(num) {
		    assert(this.red, 'redMul works only with red numbers');
		    this.red._verify2(this, num);
		    return this.red.imul(this, num);
		  };
		  BN.prototype.redSqr = function redSqr() {
		    assert(this.red, 'redSqr works only with red numbers');
		    this.red._verify1(this);
		    return this.red.sqr(this);
		  };
		  BN.prototype.redISqr = function redISqr() {
		    assert(this.red, 'redISqr works only with red numbers');
		    this.red._verify1(this);
		    return this.red.isqr(this);
		  };

		  // Square root over p
		  BN.prototype.redSqrt = function redSqrt() {
		    assert(this.red, 'redSqrt works only with red numbers');
		    this.red._verify1(this);
		    return this.red.sqrt(this);
		  };
		  BN.prototype.redInvm = function redInvm() {
		    assert(this.red, 'redInvm works only with red numbers');
		    this.red._verify1(this);
		    return this.red.invm(this);
		  };

		  // Return negative clone of `this` % `red modulo`
		  BN.prototype.redNeg = function redNeg() {
		    assert(this.red, 'redNeg works only with red numbers');
		    this.red._verify1(this);
		    return this.red.neg(this);
		  };
		  BN.prototype.redPow = function redPow(num) {
		    assert(this.red && !num.red, 'redPow(normalNum)');
		    this.red._verify1(this);
		    return this.red.pow(this, num);
		  };

		  // Prime numbers with efficient reduction
		  var primes = {
		    k256: null,
		    p224: null,
		    p192: null,
		    p25519: null
		  };

		  // Pseudo-Mersenne prime
		  function MPrime(name, p) {
		    // P = 2 ^ N - K
		    this.name = name;
		    this.p = new BN(p, 16);
		    this.n = this.p.bitLength();
		    this.k = new BN(1).iushln(this.n).isub(this.p);
		    this.tmp = this._tmp();
		  }
		  MPrime.prototype._tmp = function _tmp() {
		    var tmp = new BN(null);
		    tmp.words = new Array(Math.ceil(this.n / 13));
		    return tmp;
		  };
		  MPrime.prototype.ireduce = function ireduce(num) {
		    // Assumes that `num` is less than `P^2`
		    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
		    var r = num;
		    var rlen;
		    do {
		      this.split(r, this.tmp);
		      r = this.imulK(r);
		      r = r.iadd(this.tmp);
		      rlen = r.bitLength();
		    } while (rlen > this.n);
		    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
		    if (cmp === 0) {
		      r.words[0] = 0;
		      r.length = 1;
		    } else if (cmp > 0) {
		      r.isub(this.p);
		    } else {
		      if (r.strip !== undefined) {
		        // r is a BN v4 instance
		        r.strip();
		      } else {
		        // r is a BN v5 instance
		        r._strip();
		      }
		    }
		    return r;
		  };
		  MPrime.prototype.split = function split(input, out) {
		    input.iushrn(this.n, 0, out);
		  };
		  MPrime.prototype.imulK = function imulK(num) {
		    return num.imul(this.k);
		  };
		  function K256() {
		    MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
		  }
		  inherits(K256, MPrime);
		  K256.prototype.split = function split(input, output) {
		    // 256 = 9 * 26 + 22
		    var mask = 0x3fffff;
		    var outLen = Math.min(input.length, 9);
		    for (var i = 0; i < outLen; i++) {
		      output.words[i] = input.words[i];
		    }
		    output.length = outLen;
		    if (input.length <= 9) {
		      input.words[0] = 0;
		      input.length = 1;
		      return;
		    }

		    // Shift by 9 limbs
		    var prev = input.words[9];
		    output.words[output.length++] = prev & mask;
		    for (i = 10; i < input.length; i++) {
		      var next = input.words[i] | 0;
		      input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
		      prev = next;
		    }
		    prev >>>= 22;
		    input.words[i - 10] = prev;
		    if (prev === 0 && input.length > 10) {
		      input.length -= 10;
		    } else {
		      input.length -= 9;
		    }
		  };
		  K256.prototype.imulK = function imulK(num) {
		    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
		    num.words[num.length] = 0;
		    num.words[num.length + 1] = 0;
		    num.length += 2;

		    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
		    var lo = 0;
		    for (var i = 0; i < num.length; i++) {
		      var w = num.words[i] | 0;
		      lo += w * 0x3d1;
		      num.words[i] = lo & 0x3ffffff;
		      lo = w * 0x40 + (lo / 0x4000000 | 0);
		    }

		    // Fast length reduction
		    if (num.words[num.length - 1] === 0) {
		      num.length--;
		      if (num.words[num.length - 1] === 0) {
		        num.length--;
		      }
		    }
		    return num;
		  };
		  function P224() {
		    MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
		  }
		  inherits(P224, MPrime);
		  function P192() {
		    MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
		  }
		  inherits(P192, MPrime);
		  function P25519() {
		    // 2 ^ 255 - 19
		    MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
		  }
		  inherits(P25519, MPrime);
		  P25519.prototype.imulK = function imulK(num) {
		    // K = 0x13
		    var carry = 0;
		    for (var i = 0; i < num.length; i++) {
		      var hi = (num.words[i] | 0) * 0x13 + carry;
		      var lo = hi & 0x3ffffff;
		      hi >>>= 26;
		      num.words[i] = lo;
		      carry = hi;
		    }
		    if (carry !== 0) {
		      num.words[num.length++] = carry;
		    }
		    return num;
		  };

		  // Exported mostly for testing purposes, use plain name instead
		  BN._prime = function prime(name) {
		    // Cached version of prime
		    if (primes[name]) return primes[name];
		    var prime;
		    if (name === 'k256') {
		      prime = new K256();
		    } else if (name === 'p224') {
		      prime = new P224();
		    } else if (name === 'p192') {
		      prime = new P192();
		    } else if (name === 'p25519') {
		      prime = new P25519();
		    } else {
		      throw new Error('Unknown prime ' + name);
		    }
		    primes[name] = prime;
		    return prime;
		  };

		  //
		  // Base reduction engine
		  //
		  function Red(m) {
		    if (typeof m === 'string') {
		      var prime = BN._prime(m);
		      this.m = prime.p;
		      this.prime = prime;
		    } else {
		      assert(m.gtn(1), 'modulus must be greater than 1');
		      this.m = m;
		      this.prime = null;
		    }
		  }
		  Red.prototype._verify1 = function _verify1(a) {
		    assert(a.negative === 0, 'red works only with positives');
		    assert(a.red, 'red works only with red numbers');
		  };
		  Red.prototype._verify2 = function _verify2(a, b) {
		    assert((a.negative | b.negative) === 0, 'red works only with positives');
		    assert(a.red && a.red === b.red, 'red works only with red numbers');
		  };
		  Red.prototype.imod = function imod(a) {
		    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
		    move(a, a.umod(this.m)._forceRed(this));
		    return a;
		  };
		  Red.prototype.neg = function neg(a) {
		    if (a.isZero()) {
		      return a.clone();
		    }
		    return this.m.sub(a)._forceRed(this);
		  };
		  Red.prototype.add = function add(a, b) {
		    this._verify2(a, b);
		    var res = a.add(b);
		    if (res.cmp(this.m) >= 0) {
		      res.isub(this.m);
		    }
		    return res._forceRed(this);
		  };
		  Red.prototype.iadd = function iadd(a, b) {
		    this._verify2(a, b);
		    var res = a.iadd(b);
		    if (res.cmp(this.m) >= 0) {
		      res.isub(this.m);
		    }
		    return res;
		  };
		  Red.prototype.sub = function sub(a, b) {
		    this._verify2(a, b);
		    var res = a.sub(b);
		    if (res.cmpn(0) < 0) {
		      res.iadd(this.m);
		    }
		    return res._forceRed(this);
		  };
		  Red.prototype.isub = function isub(a, b) {
		    this._verify2(a, b);
		    var res = a.isub(b);
		    if (res.cmpn(0) < 0) {
		      res.iadd(this.m);
		    }
		    return res;
		  };
		  Red.prototype.shl = function shl(a, num) {
		    this._verify1(a);
		    return this.imod(a.ushln(num));
		  };
		  Red.prototype.imul = function imul(a, b) {
		    this._verify2(a, b);
		    return this.imod(a.imul(b));
		  };
		  Red.prototype.mul = function mul(a, b) {
		    this._verify2(a, b);
		    return this.imod(a.mul(b));
		  };
		  Red.prototype.isqr = function isqr(a) {
		    return this.imul(a, a.clone());
		  };
		  Red.prototype.sqr = function sqr(a) {
		    return this.mul(a, a);
		  };
		  Red.prototype.sqrt = function sqrt(a) {
		    if (a.isZero()) return a.clone();
		    var mod3 = this.m.andln(3);
		    assert(mod3 % 2 === 1);

		    // Fast case
		    if (mod3 === 3) {
		      var pow = this.m.add(new BN(1)).iushrn(2);
		      return this.pow(a, pow);
		    }

		    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
		    //
		    // Find Q and S, that Q * 2 ^ S = (P - 1)
		    var q = this.m.subn(1);
		    var s = 0;
		    while (!q.isZero() && q.andln(1) === 0) {
		      s++;
		      q.iushrn(1);
		    }
		    assert(!q.isZero());
		    var one = new BN(1).toRed(this);
		    var nOne = one.redNeg();

		    // Find quadratic non-residue
		    // NOTE: Max is such because of generalized Riemann hypothesis.
		    var lpow = this.m.subn(1).iushrn(1);
		    var z = this.m.bitLength();
		    z = new BN(2 * z * z).toRed(this);
		    while (this.pow(z, lpow).cmp(nOne) !== 0) {
		      z.redIAdd(nOne);
		    }
		    var c = this.pow(z, q);
		    var r = this.pow(a, q.addn(1).iushrn(1));
		    var t = this.pow(a, q);
		    var m = s;
		    while (t.cmp(one) !== 0) {
		      var tmp = t;
		      for (var i = 0; tmp.cmp(one) !== 0; i++) {
		        tmp = tmp.redSqr();
		      }
		      assert(i < m);
		      var b = this.pow(c, new BN(1).iushln(m - i - 1));
		      r = r.redMul(b);
		      c = b.redSqr();
		      t = t.redMul(c);
		      m = i;
		    }
		    return r;
		  };
		  Red.prototype.invm = function invm(a) {
		    var inv = a._invmp(this.m);
		    if (inv.negative !== 0) {
		      inv.negative = 0;
		      return this.imod(inv).redNeg();
		    } else {
		      return this.imod(inv);
		    }
		  };
		  Red.prototype.pow = function pow(a, num) {
		    if (num.isZero()) return new BN(1).toRed(this);
		    if (num.cmpn(1) === 0) return a.clone();
		    var windowSize = 4;
		    var wnd = new Array(1 << windowSize);
		    wnd[0] = new BN(1).toRed(this);
		    wnd[1] = a;
		    for (var i = 2; i < wnd.length; i++) {
		      wnd[i] = this.mul(wnd[i - 1], a);
		    }
		    var res = wnd[0];
		    var current = 0;
		    var currentLen = 0;
		    var start = num.bitLength() % 26;
		    if (start === 0) {
		      start = 26;
		    }
		    for (i = num.length - 1; i >= 0; i--) {
		      var word = num.words[i];
		      for (var j = start - 1; j >= 0; j--) {
		        var bit = word >> j & 1;
		        if (res !== wnd[0]) {
		          res = this.sqr(res);
		        }
		        if (bit === 0 && current === 0) {
		          currentLen = 0;
		          continue;
		        }
		        current <<= 1;
		        current |= bit;
		        currentLen++;
		        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
		        res = this.mul(res, wnd[current]);
		        currentLen = 0;
		        current = 0;
		      }
		      start = 26;
		    }
		    return res;
		  };
		  Red.prototype.convertTo = function convertTo(num) {
		    var r = num.umod(this.m);
		    return r === num ? r.clone() : r;
		  };
		  Red.prototype.convertFrom = function convertFrom(num) {
		    var res = num.clone();
		    res.red = null;
		    return res;
		  };

		  //
		  // Montgomery method engine
		  //

		  BN.mont = function mont(num) {
		    return new Mont(num);
		  };
		  function Mont(m) {
		    Red.call(this, m);
		    this.shift = this.m.bitLength();
		    if (this.shift % 26 !== 0) {
		      this.shift += 26 - this.shift % 26;
		    }
		    this.r = new BN(1).iushln(this.shift);
		    this.r2 = this.imod(this.r.sqr());
		    this.rinv = this.r._invmp(this.m);
		    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
		    this.minv = this.minv.umod(this.r);
		    this.minv = this.r.sub(this.minv);
		  }
		  inherits(Mont, Red);
		  Mont.prototype.convertTo = function convertTo(num) {
		    return this.imod(num.ushln(this.shift));
		  };
		  Mont.prototype.convertFrom = function convertFrom(num) {
		    var r = this.imod(num.mul(this.rinv));
		    r.red = null;
		    return r;
		  };
		  Mont.prototype.imul = function imul(a, b) {
		    if (a.isZero() || b.isZero()) {
		      a.words[0] = 0;
		      a.length = 1;
		      return a;
		    }
		    var t = a.imul(b);
		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		    var u = t.isub(c).iushrn(this.shift);
		    var res = u;
		    if (u.cmp(this.m) >= 0) {
		      res = u.isub(this.m);
		    } else if (u.cmpn(0) < 0) {
		      res = u.iadd(this.m);
		    }
		    return res._forceRed(this);
		  };
		  Mont.prototype.mul = function mul(a, b) {
		    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
		    var t = a.mul(b);
		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		    var u = t.isub(c).iushrn(this.shift);
		    var res = u;
		    if (u.cmp(this.m) >= 0) {
		      res = u.isub(this.m);
		    } else if (u.cmpn(0) < 0) {
		      res = u.iadd(this.m);
		    }
		    return res._forceRed(this);
		  };
		  Mont.prototype.invm = function invm(a) {
		    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
		    var res = this.imod(a._invmp(this.m).mul(this.r2));
		    return res._forceRed(this);
		  };
		})(module, commonjsGlobal);
} (bn));
	return bn.exports;
}

var hasRequiredDist$4;

function requireDist$4 () {
	if (hasRequiredDist$4) return dist$3;
	hasRequiredDist$4 = 1;

	var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
	  return mod && mod.__esModule ? mod : {
	    "default": mod
	  };
	};
	Object.defineProperty(dist$3, "__esModule", {
	  value: true
	});
	dist$3.getLength = dist$3.decode = dist$3.encode = void 0;
	var bn_js_1 = __importDefault(requireBn());
	/**
	 * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP
	 * This function takes in a data, convert it to buffer if not, and a length for recursion
	 * @param input - will be converted to buffer
	 * @returns returns buffer of encoded data
	 **/
	function encode(input) {
	  if (Array.isArray(input)) {
	    var output = [];
	    for (var i = 0; i < input.length; i++) {
	      output.push(encode(input[i]));
	    }
	    var buf = Buffer.concat(output);
	    return Buffer.concat([encodeLength(buf.length, 192), buf]);
	  } else {
	    var inputBuf = toBuffer(input);
	    return inputBuf.length === 1 && inputBuf[0] < 128 ? inputBuf : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);
	  }
	}
	dist$3.encode = encode;
	/**
	 * Parse integers. Check if there is no leading zeros
	 * @param v The value to parse
	 * @param base The base to parse the integer into
	 */
	function safeParseInt(v, base) {
	  if (v[0] === '0' && v[1] === '0') {
	    throw new Error('invalid RLP: extra zeros');
	  }
	  return parseInt(v, base);
	}
	function encodeLength(len, offset) {
	  if (len < 56) {
	    return Buffer.from([len + offset]);
	  } else {
	    var hexLength = intToHex(len);
	    var lLength = hexLength.length / 2;
	    var firstByte = intToHex(offset + 55 + lLength);
	    return Buffer.from(firstByte + hexLength, 'hex');
	  }
	}
	function decode(input) {
	  var stream = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	  if (!input || input.length === 0) {
	    return Buffer.from([]);
	  }
	  var inputBuffer = toBuffer(input);
	  var decoded = _decode(inputBuffer);
	  if (stream) {
	    return decoded;
	  }
	  if (decoded.remainder.length !== 0) {
	    throw new Error('invalid remainder');
	  }
	  return decoded.data;
	}
	dist$3.decode = decode;
	/**
	 * Get the length of the RLP input
	 * @param input
	 * @returns The length of the input or an empty Buffer if no input
	 */
	function getLength(input) {
	  if (!input || input.length === 0) {
	    return Buffer.from([]);
	  }
	  var inputBuffer = toBuffer(input);
	  var firstByte = inputBuffer[0];
	  if (firstByte <= 0x7f) {
	    return inputBuffer.length;
	  } else if (firstByte <= 0xb7) {
	    return firstByte - 0x7f;
	  } else if (firstByte <= 0xbf) {
	    return firstByte - 0xb6;
	  } else if (firstByte <= 0xf7) {
	    // a list between  0-55 bytes long
	    return firstByte - 0xbf;
	  } else {
	    // a list  over 55 bytes long
	    var llength = firstByte - 0xf6;
	    var length = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);
	    return llength + length;
	  }
	}
	dist$3.getLength = getLength;
	/** Decode an input with RLP */
	function _decode(input) {
	  var length, llength, data, innerRemainder, d;
	  var decoded = [];
	  var firstByte = input[0];
	  if (firstByte <= 0x7f) {
	    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
	    return {
	      data: input.slice(0, 1),
	      remainder: input.slice(1)
	    };
	  } else if (firstByte <= 0xb7) {
	    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
	    // The range of the first byte is [0x80, 0xb7]
	    length = firstByte - 0x7f;
	    // set 0x80 null to 0
	    if (firstByte === 0x80) {
	      data = Buffer.from([]);
	    } else {
	      data = input.slice(1, length);
	    }
	    if (length === 2 && data[0] < 0x80) {
	      throw new Error('invalid rlp encoding: byte must be less 0x80');
	    }
	    return {
	      data: data,
	      remainder: input.slice(length)
	    };
	  } else if (firstByte <= 0xbf) {
	    // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),
	    // followed by the length, followed by the string
	    llength = firstByte - 0xb6;
	    if (input.length - 1 < llength) {
	      throw new Error('invalid RLP: not enough bytes for string length');
	    }
	    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
	    if (length <= 55) {
	      throw new Error('invalid RLP: expected string length to be greater than 55');
	    }
	    data = input.slice(llength, length + llength);
	    if (data.length < length) {
	      throw new Error('invalid RLP: not enough bytes for string');
	    }
	    return {
	      data: data,
	      remainder: input.slice(length + llength)
	    };
	  } else if (firstByte <= 0xf7) {
	    // a list between  0-55 bytes long
	    length = firstByte - 0xbf;
	    innerRemainder = input.slice(1, length);
	    while (innerRemainder.length) {
	      d = _decode(innerRemainder);
	      decoded.push(d.data);
	      innerRemainder = d.remainder;
	    }
	    return {
	      data: decoded,
	      remainder: input.slice(length)
	    };
	  } else {
	    // a list  over 55 bytes long
	    llength = firstByte - 0xf6;
	    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
	    var totalLength = llength + length;
	    if (totalLength > input.length) {
	      throw new Error('invalid rlp: total length is larger than the data');
	    }
	    innerRemainder = input.slice(llength, totalLength);
	    if (innerRemainder.length === 0) {
	      throw new Error('invalid rlp, List has a invalid length');
	    }
	    while (innerRemainder.length) {
	      d = _decode(innerRemainder);
	      decoded.push(d.data);
	      innerRemainder = d.remainder;
	    }
	    return {
	      data: decoded,
	      remainder: input.slice(totalLength)
	    };
	  }
	}
	/** Check if a string is prefixed by 0x */
	function isHexPrefixed(str) {
	  return str.slice(0, 2) === '0x';
	}
	/** Removes 0x from a given String */
	function stripHexPrefix(str) {
	  if (typeof str !== 'string') {
	    return str;
	  }
	  return isHexPrefixed(str) ? str.slice(2) : str;
	}
	/** Transform an integer into its hexadecimal value */
	function intToHex(integer) {
	  if (integer < 0) {
	    throw new Error('Invalid integer as argument, must be unsigned!');
	  }
	  var hex = integer.toString(16);
	  return hex.length % 2 ? "0".concat(hex) : hex;
	}
	/** Pad a string to be even */
	function padToEven(a) {
	  return a.length % 2 ? "0".concat(a) : a;
	}
	/** Transform an integer into a Buffer */
	function intToBuffer(integer) {
	  var hex = intToHex(integer);
	  return Buffer.from(hex, 'hex');
	}
	/** Transform anything into a Buffer */
	function toBuffer(v) {
	  if (!Buffer.isBuffer(v)) {
	    if (typeof v === 'string') {
	      if (isHexPrefixed(v)) {
	        return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');
	      } else {
	        return Buffer.from(v);
	      }
	    } else if (typeof v === 'number' || typeof v === 'bigint') {
	      if (!v) {
	        return Buffer.from([]);
	      } else {
	        return intToBuffer(v);
	      }
	    } else if (v === null || v === undefined) {
	      return Buffer.from([]);
	    } else if (v instanceof Uint8Array) {
	      return Buffer.from(v);
	    } else if (bn_js_1["default"].isBN(v)) {
	      // converts a BN to a Buffer
	      return Buffer.from(v.toArray());
	    } else {
	      throw new Error('invalid type');
	    }
	  }
	  return v;
	}
	return dist$3;
}

var createHash;
var hasRequiredCreateHash;

function requireCreateHash () {
	if (hasRequiredCreateHash) return createHash;
	hasRequiredCreateHash = 1;
	createHash = require$$12__default["default"].createHash;
	return createHash;
}

var safeBuffer = {exports: {}};

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

var hasRequiredSafeBuffer;

function requireSafeBuffer () {
	if (hasRequiredSafeBuffer) return safeBuffer.exports;
	hasRequiredSafeBuffer = 1;
	(function (module, exports) {
		/* eslint-disable node/no-deprecated-api */
		var buffer = require$$2__default["default"];
		var Buffer = buffer.Buffer;

		// alternative to using Object.keys for old browsers
		function copyProps(src, dst) {
		  for (var key in src) {
		    dst[key] = src[key];
		  }
		}
		if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
		  module.exports = buffer;
		} else {
		  // Copy properties from require('buffer')
		  copyProps(buffer, exports);
		  exports.Buffer = SafeBuffer;
		}
		function SafeBuffer(arg, encodingOrOffset, length) {
		  return Buffer(arg, encodingOrOffset, length);
		}
		SafeBuffer.prototype = Object.create(Buffer.prototype);

		// Copy static methods from Buffer
		copyProps(Buffer, SafeBuffer);
		SafeBuffer.from = function (arg, encodingOrOffset, length) {
		  if (typeof arg === 'number') {
		    throw new TypeError('Argument must not be a number');
		  }
		  return Buffer(arg, encodingOrOffset, length);
		};
		SafeBuffer.alloc = function (size, fill, encoding) {
		  if (typeof size !== 'number') {
		    throw new TypeError('Argument must be a number');
		  }
		  var buf = Buffer(size);
		  if (fill !== undefined) {
		    if (typeof encoding === 'string') {
		      buf.fill(fill, encoding);
		    } else {
		      buf.fill(fill);
		    }
		  } else {
		    buf.fill(0);
		  }
		  return buf;
		};
		SafeBuffer.allocUnsafe = function (size) {
		  if (typeof size !== 'number') {
		    throw new TypeError('Argument must be a number');
		  }
		  return Buffer(size);
		};
		SafeBuffer.allocUnsafeSlow = function (size) {
		  if (typeof size !== 'number') {
		    throw new TypeError('Argument must be a number');
		  }
		  return buffer.SlowBuffer(size);
		};
} (safeBuffer, safeBuffer.exports));
	return safeBuffer.exports;
}

/**
 * Returns a `Boolean` on whether or not the a `String` starts with '0x'
 * @param {String} str the string input value
 * @return {Boolean} a boolean if it is or is not hex prefixed
 * @throws if the str input is not a string
 */

var src$1;
var hasRequiredSrc$1;

function requireSrc$1 () {
	if (hasRequiredSrc$1) return src$1;
	hasRequiredSrc$1 = 1;
	src$1 = function isHexPrefixed(str) {
	  if (typeof str !== 'string') {
	    throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + typeof str + ", while checking isHexPrefixed.");
	  }
	  return str.slice(0, 2) === '0x';
	};
	return src$1;
}

var src;
var hasRequiredSrc;

function requireSrc () {
	if (hasRequiredSrc) return src;
	hasRequiredSrc = 1;
	var isHexPrefixed = requireSrc$1();

	/**
	 * Removes '0x' from a given `String` is present
	 * @param {String} str the string value
	 * @return {String|Optional} a string by pass if necessary
	 */
	src = function stripHexPrefix(str) {
	  if (typeof str !== 'string') {
	    return str;
	  }
	  return isHexPrefixed(str) ? str.slice(2) : str;
	};
	return src;
}

var lib$2;
var hasRequiredLib$2;

function requireLib$2 () {
	if (hasRequiredLib$2) return lib$2;
	hasRequiredLib$2 = 1;

	var isHexPrefixed = requireSrc$1();
	var stripHexPrefix = requireSrc();

	/**
	 * Pads a `String` to have an even length
	 * @param {String} value
	 * @return {String} output
	 */
	function padToEven(value) {
	  var a = value; // eslint-disable-line

	  if (typeof a !== 'string') {
	    throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');
	  }
	  if (a.length % 2) {
	    a = '0' + a;
	  }
	  return a;
	}

	/**
	 * Converts a `Number` into a hex `String`
	 * @param {Number} i
	 * @return {String}
	 */
	function intToHex(i) {
	  var hex = i.toString(16); // eslint-disable-line

	  return '0x' + hex;
	}

	/**
	 * Converts an `Number` to a `Buffer`
	 * @param {Number} i
	 * @return {Buffer}
	 */
	function intToBuffer(i) {
	  var hex = intToHex(i);
	  return new Buffer(padToEven(hex.slice(2)), 'hex');
	}

	/**
	 * Get the binary size of a string
	 * @param {String} str
	 * @return {Number}
	 */
	function getBinarySize(str) {
	  if (typeof str !== 'string') {
	    throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \'str\' to be type String, got \'' + typeof str + '\'.');
	  }
	  return Buffer.byteLength(str, 'utf8');
	}

	/**
	 * Returns TRUE if the first specified array contains all elements
	 * from the second one. FALSE otherwise.
	 *
	 * @param {array} superset
	 * @param {array} subset
	 *
	 * @returns {boolean}
	 */
	function arrayContainsArray(superset, subset, some) {
	  if (Array.isArray(superset) !== true) {
	    throw new Error('[ethjs-util] method arrayContainsArray requires input \'superset\' to be an array got type \'' + typeof superset + '\'');
	  }
	  if (Array.isArray(subset) !== true) {
	    throw new Error('[ethjs-util] method arrayContainsArray requires input \'subset\' to be an array got type \'' + typeof subset + '\'');
	  }
	  return subset[Boolean(some) && 'some' || 'every'](function (value) {
	    return superset.indexOf(value) >= 0;
	  });
	}

	/**
	 * Should be called to get utf8 from it's hex representation
	 *
	 * @method toUtf8
	 * @param {String} string in hex
	 * @returns {String} ascii string representation of hex value
	 */
	function toUtf8(hex) {
	  var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, '')), 'hex');
	  return bufferValue.toString('utf8');
	}

	/**
	 * Should be called to get ascii from it's hex representation
	 *
	 * @method toAscii
	 * @param {String} string in hex
	 * @returns {String} ascii string representation of hex value
	 */
	function toAscii(hex) {
	  var str = ''; // eslint-disable-line
	  var i = 0,
	    l = hex.length; // eslint-disable-line

	  if (hex.substring(0, 2) === '0x') {
	    i = 2;
	  }
	  for (; i < l; i += 2) {
	    var code = parseInt(hex.substr(i, 2), 16);
	    str += String.fromCharCode(code);
	  }
	  return str;
	}

	/**
	 * Should be called to get hex representation (prefixed by 0x) of utf8 string
	 *
	 * @method fromUtf8
	 * @param {String} string
	 * @param {Number} optional padding
	 * @returns {String} hex representation of input string
	 */
	function fromUtf8(stringValue) {
	  var str = new Buffer(stringValue, 'utf8');
	  return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');
	}

	/**
	 * Should be called to get hex representation (prefixed by 0x) of ascii string
	 *
	 * @method fromAscii
	 * @param {String} string
	 * @param {Number} optional padding
	 * @returns {String} hex representation of input string
	 */
	function fromAscii(stringValue) {
	  var hex = ''; // eslint-disable-line
	  for (var i = 0; i < stringValue.length; i++) {
	    // eslint-disable-line
	    var code = stringValue.charCodeAt(i);
	    var n = code.toString(16);
	    hex += n.length < 2 ? '0' + n : n;
	  }
	  return '0x' + hex;
	}

	/**
	 * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]
	 *
	 * @method getKeys get specific key from inner object array of objects
	 * @param {String} params
	 * @param {String} key
	 * @param {Boolean} allowEmpty
	 * @returns {Array} output just a simple array of output keys
	 */
	function getKeys(params, key, allowEmpty) {
	  if (!Array.isArray(params)) {
	    throw new Error('[ethjs-util] method getKeys expecting type Array as \'params\' input, got \'' + typeof params + '\'');
	  }
	  if (typeof key !== 'string') {
	    throw new Error('[ethjs-util] method getKeys expecting type String for input \'key\' got \'' + typeof key + '\'.');
	  }
	  var result = []; // eslint-disable-line

	  for (var i = 0; i < params.length; i++) {
	    // eslint-disable-line
	    var value = params[i][key]; // eslint-disable-line
	    if (allowEmpty && !value) {
	      value = '';
	    } else if (typeof value !== 'string') {
	      throw new Error('invalid abi');
	    }
	    result.push(value);
	  }
	  return result;
	}

	/**
	 * Is the string a hex string.
	 *
	 * @method check if string is hex string of specific length
	 * @param {String} value
	 * @param {Number} length
	 * @returns {Boolean} output the string is a hex string
	 */
	function isHexString(value, length) {
	  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
	    return false;
	  }
	  if (length && value.length !== 2 + 2 * length) {
	    return false;
	  }
	  return true;
	}
	lib$2 = {
	  arrayContainsArray: arrayContainsArray,
	  intToBuffer: intToBuffer,
	  getBinarySize: getBinarySize,
	  isHexPrefixed: isHexPrefixed,
	  stripHexPrefix: stripHexPrefix,
	  padToEven: padToEven,
	  intToHex: intToHex,
	  fromAscii: fromAscii,
	  fromUtf8: fromUtf8,
	  toAscii: toAscii,
	  toUtf8: toUtf8,
	  getKeys: getKeys,
	  isHexString: isHexString
	};
	return lib$2;
}

var hasRequiredDist$3;

function requireDist$3 () {
	if (hasRequiredDist$3) return dist$4;
	hasRequiredDist$3 = 1;
	(function (exports) {

		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
		  return typeof obj;
		} : function (obj) {
		  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		};
		var _require = requireKeccak(),
		  keccak224 = _require.keccak224,
		  keccak384 = _require.keccak384,
		  k256 = _require.keccak256,
		  keccak512 = _require.keccak512;
		var secp256k1 = requireSecp256k1Adapter();
		var assert = require$$0__default$2["default"];
		var rlp = requireDist$4();
		var BN = requireBn$2();
		var createHash = requireCreateHash();
		var Buffer = requireSafeBuffer().Buffer;
		Object.assign(exports, requireLib$2());

		/**
		 * the max integer that this VM can handle (a ```BN```)
		 * @var {BN} MAX_INTEGER
		 */
		exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);

		/**
		 * 2^256 (a ```BN```)
		 * @var {BN} TWO_POW256
		 */
		exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);

		/**
		 * Keccak-256 hash of null (a ```String```)
		 * @var {String} KECCAK256_NULL_S
		 */
		exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
		exports.SHA3_NULL_S = exports.KECCAK256_NULL_S;

		/**
		 * Keccak-256 hash of null (a ```Buffer```)
		 * @var {Buffer} KECCAK256_NULL
		 */
		exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
		exports.SHA3_NULL = exports.KECCAK256_NULL;

		/**
		 * Keccak-256 of an RLP of an empty array (a ```String```)
		 * @var {String} KECCAK256_RLP_ARRAY_S
		 */
		exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
		exports.SHA3_RLP_ARRAY_S = exports.KECCAK256_RLP_ARRAY_S;

		/**
		 * Keccak-256 of an RLP of an empty array (a ```Buffer```)
		 * @var {Buffer} KECCAK256_RLP_ARRAY
		 */
		exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
		exports.SHA3_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY;

		/**
		 * Keccak-256 hash of the RLP of null  (a ```String```)
		 * @var {String} KECCAK256_RLP_S
		 */
		exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
		exports.SHA3_RLP_S = exports.KECCAK256_RLP_S;

		/**
		 * Keccak-256 hash of the RLP of null (a ```Buffer```)
		 * @var {Buffer} KECCAK256_RLP
		 */
		exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');
		exports.SHA3_RLP = exports.KECCAK256_RLP;

		/**
		 * [`BN`](https://github.com/indutny/bn.js)
		 * @var {Function}
		 */
		exports.BN = BN;

		/**
		 * [`rlp`](https://github.com/ethereumjs/rlp)
		 * @var {Function}
		 */
		exports.rlp = rlp;

		/**
		 * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)
		 * @var {Object}
		 */
		exports.secp256k1 = secp256k1;

		/**
		 * Returns a buffer filled with 0s
		 * @method zeros
		 * @param {Number} bytes  the number of bytes the buffer should be
		 * @return {Buffer}
		 */
		exports.zeros = function (bytes) {
		  return Buffer.allocUnsafe(bytes).fill(0);
		};

		/**
		  * Returns a zero address
		  * @method zeroAddress
		  * @return {String}
		  */
		exports.zeroAddress = function () {
		  var addressLength = 20;
		  var zeroAddress = exports.zeros(addressLength);
		  return exports.bufferToHex(zeroAddress);
		};

		/**
		 * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
		 * Or it truncates the beginning if it exceeds.
		 * @method lsetLength
		 * @param {Buffer|Array} msg the value to pad
		 * @param {Number} length the number of bytes the output should be
		 * @param {Boolean} [right=false] whether to start padding form the left or right
		 * @return {Buffer|Array}
		 */
		exports.setLengthLeft = exports.setLength = function (msg, length, right) {
		  var buf = exports.zeros(length);
		  msg = exports.toBuffer(msg);
		  if (right) {
		    if (msg.length < length) {
		      msg.copy(buf);
		      return buf;
		    }
		    return msg.slice(0, length);
		  } else {
		    if (msg.length < length) {
		      msg.copy(buf, length - msg.length);
		      return buf;
		    }
		    return msg.slice(-length);
		  }
		};

		/**
		 * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
		 * Or it truncates the beginning if it exceeds.
		 * @param {Buffer|Array} msg the value to pad
		 * @param {Number} length the number of bytes the output should be
		 * @return {Buffer|Array}
		 */
		exports.setLengthRight = function (msg, length) {
		  return exports.setLength(msg, length, true);
		};

		/**
		 * Trims leading zeros from a `Buffer` or an `Array`
		 * @param {Buffer|Array|String} a
		 * @return {Buffer|Array|String}
		 */
		exports.unpad = exports.stripZeros = function (a) {
		  a = exports.stripHexPrefix(a);
		  var first = a[0];
		  while (a.length > 0 && first.toString() === '0') {
		    a = a.slice(1);
		    first = a[0];
		  }
		  return a;
		};
		/**
		 * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
		 * @param {*} v the value
		 */
		exports.toBuffer = function (v) {
		  if (!Buffer.isBuffer(v)) {
		    if (Array.isArray(v)) {
		      v = Buffer.from(v);
		    } else if (typeof v === 'string') {
		      if (exports.isHexString(v)) {
		        v = Buffer.from(exports.padToEven(exports.stripHexPrefix(v)), 'hex');
		      } else {
		        v = Buffer.from(v);
		      }
		    } else if (typeof v === 'number') {
		      v = exports.intToBuffer(v);
		    } else if (v === null || v === undefined) {
		      v = Buffer.allocUnsafe(0);
		    } else if (BN.isBN(v)) {
		      v = v.toArrayLike(Buffer);
		    } else if (v.toArray) {
		      // converts a BN to a Buffer
		      v = Buffer.from(v.toArray());
		    } else {
		      throw new Error('invalid type');
		    }
		  }
		  return v;
		};

		/**
		 * Converts a `Buffer` to a `Number`
		 * @param {Buffer} buf
		 * @return {Number}
		 * @throws If the input number exceeds 53 bits.
		 */
		exports.bufferToInt = function (buf) {
		  return new BN(exports.toBuffer(buf)).toNumber();
		};

		/**
		 * Converts a `Buffer` into a hex `String`
		 * @param {Buffer} buf
		 * @return {String}
		 */
		exports.bufferToHex = function (buf) {
		  buf = exports.toBuffer(buf);
		  return '0x' + buf.toString('hex');
		};

		/**
		 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
		 * @param {Buffer} num
		 * @return {BN}
		 */
		exports.fromSigned = function (num) {
		  return new BN(num).fromTwos(256);
		};

		/**
		 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
		 * @param {BN} num
		 * @return {Buffer}
		 */
		exports.toUnsigned = function (num) {
		  return Buffer.from(num.toTwos(256).toArray());
		};

		/**
		 * Creates Keccak hash of the input
		 * @param {Buffer|Array|String|Number} a the input data
		 * @param {Number} [bits=256] the Keccak width
		 * @return {Buffer}
		 */
		exports.keccak = function (a, bits) {
		  a = exports.toBuffer(a);
		  if (!bits) bits = 256;
		  switch (bits) {
		    case 224:
		      {
		        return keccak224(a);
		      }
		    case 256:
		      {
		        return k256(a);
		      }
		    case 384:
		      {
		        return keccak384(a);
		      }
		    case 512:
		      {
		        return keccak512(a);
		      }
		    default:
		      {
		        throw new Error('Invald algorithm: keccak' + bits);
		      }
		  }
		};

		/**
		 * Creates Keccak-256 hash of the input, alias for keccak(a, 256)
		 * @param {Buffer|Array|String|Number} a the input data
		 * @return {Buffer}
		 */
		exports.keccak256 = function (a) {
		  return exports.keccak(a);
		};

		/**
		 * Creates SHA-3 (Keccak) hash of the input [OBSOLETE]
		 * @param {Buffer|Array|String|Number} a the input data
		 * @param {Number} [bits=256] the SHA-3 width
		 * @return {Buffer}
		 */
		exports.sha3 = exports.keccak;

		/**
		 * Creates SHA256 hash of the input
		 * @param {Buffer|Array|String|Number} a the input data
		 * @return {Buffer}
		 */
		exports.sha256 = function (a) {
		  a = exports.toBuffer(a);
		  return createHash('sha256').update(a).digest();
		};

		/**
		 * Creates RIPEMD160 hash of the input
		 * @param {Buffer|Array|String|Number} a the input data
		 * @param {Boolean} padded whether it should be padded to 256 bits or not
		 * @return {Buffer}
		 */
		exports.ripemd160 = function (a, padded) {
		  a = exports.toBuffer(a);
		  var hash = createHash('rmd160').update(a).digest();
		  if (padded === true) {
		    return exports.setLength(hash, 32);
		  } else {
		    return hash;
		  }
		};

		/**
		 * Creates SHA-3 hash of the RLP encoded version of the input
		 * @param {Buffer|Array|String|Number} a the input data
		 * @return {Buffer}
		 */
		exports.rlphash = function (a) {
		  return exports.keccak(rlp.encode(a));
		};

		/**
		 * Checks if the private key satisfies the rules of the curve secp256k1.
		 * @param {Buffer} privateKey
		 * @return {Boolean}
		 */
		exports.isValidPrivate = function (privateKey) {
		  return secp256k1.privateKeyVerify(privateKey);
		};

		/**
		 * Checks if the public key satisfies the rules of the curve secp256k1
		 * and the requirements of Ethereum.
		 * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled
		 * @param {Boolean} [sanitize=false] Accept public keys in other formats
		 * @return {Boolean}
		 */
		exports.isValidPublic = function (publicKey, sanitize) {
		  if (publicKey.length === 64) {
		    // Convert to SEC1 for secp256k1
		    return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
		  }
		  if (!sanitize) {
		    return false;
		  }
		  return secp256k1.publicKeyVerify(publicKey);
		};

		/**
		 * Returns the ethereum address of a given public key.
		 * Accepts "Ethereum public keys" and SEC1 encoded keys.
		 * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled
		 * @param {Boolean} [sanitize=false] Accept public keys in other formats
		 * @return {Buffer}
		 */
		exports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {
		  pubKey = exports.toBuffer(pubKey);
		  if (sanitize && pubKey.length !== 64) {
		    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
		  }
		  assert(pubKey.length === 64);
		  // Only take the lower 160bits of the hash
		  return exports.keccak(pubKey).slice(-20);
		};

		/**
		 * Returns the ethereum public key of a given private key
		 * @param {Buffer} privateKey A private key must be 256 bits wide
		 * @return {Buffer}
		 */
		var privateToPublic = exports.privateToPublic = function (privateKey) {
		  privateKey = exports.toBuffer(privateKey);
		  // skip the type flag and use the X, Y points
		  return secp256k1.publicKeyCreate(privateKey, false).slice(1);
		};

		/**
		 * Converts a public key to the Ethereum format.
		 * @param {Buffer} publicKey
		 * @return {Buffer}
		 */
		exports.importPublic = function (publicKey) {
		  publicKey = exports.toBuffer(publicKey);
		  if (publicKey.length !== 64) {
		    publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
		  }
		  return publicKey;
		};

		/**
		 * ECDSA sign
		 * @param {Buffer} msgHash
		 * @param {Buffer} privateKey
		 * @return {Object}
		 */
		exports.ecsign = function (msgHash, privateKey) {
		  var sig = secp256k1.sign(msgHash, privateKey);
		  var ret = {};
		  ret.r = sig.signature.slice(0, 32);
		  ret.s = sig.signature.slice(32, 64);
		  ret.v = sig.recovery + 27;
		  return ret;
		};

		/**
		 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
		 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
		 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
		 * used to produce the signature.
		 * @param message
		 * @returns {Buffer} hash
		 */
		exports.hashPersonalMessage = function (message) {
		  var prefix = exports.toBuffer('\x19Ethereum Signed Message:\n' + message.length.toString());
		  return exports.keccak(Buffer.concat([prefix, message]));
		};

		/**
		 * ECDSA public key recovery from signature
		 * @param {Buffer} msgHash
		 * @param {Number} v
		 * @param {Buffer} r
		 * @param {Buffer} s
		 * @return {Buffer} publicKey
		 */
		exports.ecrecover = function (msgHash, v, r, s) {
		  var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);
		  var recovery = v - 27;
		  if (recovery !== 0 && recovery !== 1) {
		    throw new Error('Invalid signature v value');
		  }
		  var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
		  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
		};

		/**
		 * Convert signature parameters into the format of `eth_sign` RPC method
		 * @param {Number} v
		 * @param {Buffer} r
		 * @param {Buffer} s
		 * @return {String} sig
		 */
		exports.toRpcSig = function (v, r, s) {
		  // NOTE: with potential introduction of chainId this might need to be updated
		  if (v !== 27 && v !== 28) {
		    throw new Error('Invalid recovery id');
		  }

		  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
		  // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053
		  return exports.bufferToHex(Buffer.concat([exports.setLengthLeft(r, 32), exports.setLengthLeft(s, 32), exports.toBuffer(v - 27)]));
		};

		/**
		 * Convert signature format of the `eth_sign` RPC method to signature parameters
		 * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
		 * @param {String} sig
		 * @return {Object}
		 */
		exports.fromRpcSig = function (sig) {
		  sig = exports.toBuffer(sig);

		  // NOTE: with potential introduction of chainId this might need to be updated
		  if (sig.length !== 65) {
		    throw new Error('Invalid signature length');
		  }
		  var v = sig[64];
		  // support both versions of `eth_sign` responses
		  if (v < 27) {
		    v += 27;
		  }
		  return {
		    v: v,
		    r: sig.slice(0, 32),
		    s: sig.slice(32, 64)
		  };
		};

		/**
		 * Returns the ethereum address of a given private key
		 * @param {Buffer} privateKey A private key must be 256 bits wide
		 * @return {Buffer}
		 */
		exports.privateToAddress = function (privateKey) {
		  return exports.publicToAddress(privateToPublic(privateKey));
		};

		/**
		 * Checks if the address is a valid. Accepts checksummed addresses too
		 * @param {String} address
		 * @return {Boolean}
		 */
		exports.isValidAddress = function (address) {
		  return /^0x[0-9a-fA-F]{40}$/.test(address);
		};

		/**
		  * Checks if a given address is a zero address
		  * @method isZeroAddress
		  * @param {String} address
		  * @return {Boolean}
		  */
		exports.isZeroAddress = function (address) {
		  var zeroAddress = exports.zeroAddress();
		  return zeroAddress === exports.addHexPrefix(address);
		};

		/**
		 * Returns a checksummed address
		 * @param {String} address
		 * @return {String}
		 */
		exports.toChecksumAddress = function (address) {
		  address = exports.stripHexPrefix(address).toLowerCase();
		  var hash = exports.keccak(address).toString('hex');
		  var ret = '0x';
		  for (var i = 0; i < address.length; i++) {
		    if (parseInt(hash[i], 16) >= 8) {
		      ret += address[i].toUpperCase();
		    } else {
		      ret += address[i];
		    }
		  }
		  return ret;
		};

		/**
		 * Checks if the address is a valid checksummed address
		 * @param {Buffer} address
		 * @return {Boolean}
		 */
		exports.isValidChecksumAddress = function (address) {
		  return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;
		};

		/**
		 * Generates an address of a newly created contract
		 * @param {Buffer} from the address which is creating this new address
		 * @param {Buffer} nonce the nonce of the from account
		 * @return {Buffer}
		 */
		exports.generateAddress = function (from, nonce) {
		  from = exports.toBuffer(from);
		  nonce = new BN(nonce);
		  if (nonce.isZero()) {
		    // in RLP we want to encode null in the case of zero nonce
		    // read the RLP documentation for an answer if you dare
		    nonce = null;
		  } else {
		    nonce = Buffer.from(nonce.toArray());
		  }

		  // Only take the lower 160bits of the hash
		  return exports.rlphash([from, nonce]).slice(-20);
		};

		/**
		 * Returns true if the supplied address belongs to a precompiled account (Byzantium)
		 * @param {Buffer|String} address
		 * @return {Boolean}
		 */
		exports.isPrecompiled = function (address) {
		  var a = exports.unpad(address);
		  return a.length === 1 && a[0] >= 1 && a[0] <= 8;
		};

		/**
		 * Adds "0x" to a given `String` if it does not already start with "0x"
		 * @param {String} str
		 * @return {String}
		 */
		exports.addHexPrefix = function (str) {
		  if (typeof str !== 'string') {
		    return str;
		  }
		  return exports.isHexPrefixed(str) ? str : '0x' + str;
		};

		/**
		 * Validate ECDSA signature
		 * @method isValidSignature
		 * @param {Buffer} v
		 * @param {Buffer} r
		 * @param {Buffer} s
		 * @param {Boolean} [homestead=true]
		 * @return {Boolean}
		 */

		exports.isValidSignature = function (v, r, s, homestead) {
		  var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
		  var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
		  if (r.length !== 32 || s.length !== 32) {
		    return false;
		  }
		  if (v !== 27 && v !== 28) {
		    return false;
		  }
		  r = new BN(r);
		  s = new BN(s);
		  if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) {
		    return false;
		  }
		  if (homestead === false && new BN(s).cmp(SECP256K1_N_DIV_2) === 1) {
		    return false;
		  }
		  return true;
		};

		/**
		 * Converts a `Buffer` or `Array` to JSON
		 * @param {Buffer|Array} ba
		 * @return {Array|String|null}
		 */
		exports.baToJSON = function (ba) {
		  if (Buffer.isBuffer(ba)) {
		    return '0x' + ba.toString('hex');
		  } else if (ba instanceof Array) {
		    var array = [];
		    for (var i = 0; i < ba.length; i++) {
		      array.push(exports.baToJSON(ba[i]));
		    }
		    return array;
		  }
		};

		/**
		 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
		 * @param {Object} self the `Object` to define properties on
		 * @param {Array} fields an array fields to define. Fields can contain:
		 * * `name` - the name of the properties
		 * * `length` - the number of bytes the field can have
		 * * `allowLess` - if the field can be less than the length
		 * * `allowEmpty`
		 * @param {*} data data to be validated against the definitions
		 */
		exports.defineProperties = function (self, fields, data) {
		  self.raw = [];
		  self._fields = [];

		  // attach the `toJSON`
		  self.toJSON = function (label) {
		    if (label) {
		      var obj = {};
		      self._fields.forEach(function (field) {
		        obj[field] = '0x' + self[field].toString('hex');
		      });
		      return obj;
		    }
		    return exports.baToJSON(this.raw);
		  };
		  self.serialize = function serialize() {
		    return rlp.encode(self.raw);
		  };
		  fields.forEach(function (field, i) {
		    self._fields.push(field.name);
		    function getter() {
		      return self.raw[i];
		    }
		    function setter(v) {
		      v = exports.toBuffer(v);
		      if (v.toString('hex') === '00' && !field.allowZero) {
		        v = Buffer.allocUnsafe(0);
		      }
		      if (field.allowLess && field.length) {
		        v = exports.stripZeros(v);
		        assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');
		      } else if (!(field.allowZero && v.length === 0) && field.length) {
		        assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);
		      }
		      self.raw[i] = v;
		    }
		    Object.defineProperty(self, field.name, {
		      enumerable: true,
		      configurable: true,
		      get: getter,
		      set: setter
		    });
		    if (field["default"]) {
		      self[field.name] = field["default"];
		    }

		    // attach alias
		    if (field.alias) {
		      Object.defineProperty(self, field.alias, {
		        enumerable: false,
		        configurable: true,
		        set: setter,
		        get: getter
		      });
		    }
		  });

		  // if the constuctor is passed data
		  if (data) {
		    if (typeof data === 'string') {
		      data = Buffer.from(exports.stripHexPrefix(data), 'hex');
		    }
		    if (Buffer.isBuffer(data)) {
		      data = rlp.decode(data);
		    }
		    if (Array.isArray(data)) {
		      if (data.length > self._fields.length) {
		        throw new Error('wrong number of fields in data');
		      }

		      // make sure all the items are buffers
		      data.forEach(function (d, i) {
		        self[self._fields[i]] = exports.toBuffer(d);
		      });
		    } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
		      var keys = Object.keys(data);
		      fields.forEach(function (field) {
		        if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];
		        if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];
		      });
		    } else {
		      throw new Error('invalid data');
		    }
		  }
		};
} (dist$4));
	return dist$4;
}

var asyncToGenerator = {exports: {}};

var hasRequiredAsyncToGenerator;

function requireAsyncToGenerator () {
	if (hasRequiredAsyncToGenerator) return asyncToGenerator.exports;
	hasRequiredAsyncToGenerator = 1;
	(function (module) {
		function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
		  try {
		    var info = gen[key](arg);
		    var value = info.value;
		  } catch (error) {
		    reject(error);
		    return;
		  }
		  if (info.done) {
		    resolve(value);
		  } else {
		    Promise.resolve(value).then(_next, _throw);
		  }
		}
		function _asyncToGenerator(fn) {
		  return function () {
		    var self = this,
		      args = arguments;
		    return new Promise(function (resolve, reject) {
		      var gen = fn.apply(self, args);
		      function _next(value) {
		        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
		      }
		      function _throw(err) {
		        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
		      }
		      _next(undefined);
		    });
		  };
		}
		module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (asyncToGenerator));
	return asyncToGenerator.exports;
}

var pify$1;
var hasRequiredPify$1;

function requirePify$1 () {
	if (hasRequiredPify$1) return pify$1;
	hasRequiredPify$1 = 1;

	var processFn = function processFn(fn, opts) {
	  return function () {
	    var _this = this;
	    var P = opts.promiseModule;
	    var args = new Array(arguments.length);
	    for (var i = 0; i < arguments.length; i++) {
	      args[i] = arguments[i];
	    }
	    return new P(function (resolve, reject) {
	      if (opts.errorFirst) {
	        args.push(function (err, result) {
	          if (opts.multiArgs) {
	            var results = new Array(arguments.length - 1);
	            for (var _i = 1; _i < arguments.length; _i++) {
	              results[_i - 1] = arguments[_i];
	            }
	            if (err) {
	              results.unshift(err);
	              reject(results);
	            } else {
	              resolve(results);
	            }
	          } else if (err) {
	            reject(err);
	          } else {
	            resolve(result);
	          }
	        });
	      } else {
	        args.push(function (result) {
	          if (opts.multiArgs) {
	            var results = new Array(arguments.length - 1);
	            for (var _i2 = 0; _i2 < arguments.length; _i2++) {
	              results[_i2] = arguments[_i2];
	            }
	            resolve(results);
	          } else {
	            resolve(result);
	          }
	        });
	      }
	      fn.apply(_this, args);
	    });
	  };
	};
	pify$1 = function (obj, opts) {
	  opts = Object.assign({
	    exclude: [/.+(Sync|Stream)$/],
	    errorFirst: true,
	    promiseModule: Promise
	  }, opts);
	  var filter = function filter(key) {
	    var match = function match(pattern) {
	      return typeof pattern === 'string' ? key === pattern : pattern.test(key);
	    };
	    return opts.include ? opts.include.some(match) : !opts.exclude.some(match);
	  };
	  var ret;
	  if (typeof obj === 'function') {
	    ret = function ret() {
	      if (opts.excludeMain) {
	        return obj.apply(this, arguments);
	      }
	      return processFn(obj, opts).apply(this, arguments);
	    };
	  } else {
	    ret = Object.create(Object.getPrototypeOf(obj));
	  }
	  for (var key in obj) {
	    // eslint-disable-line guard-for-in
	    var x = obj[key];
	    ret[key] = typeof x === 'function' && filter(key) ? processFn(x, opts) : x;
	  }
	  return ret;
	};
	return pify$1;
}

var get = {exports: {}};

var superPropBase = {exports: {}};

var hasRequiredSuperPropBase;

function requireSuperPropBase () {
	if (hasRequiredSuperPropBase) return superPropBase.exports;
	hasRequiredSuperPropBase = 1;
	(function (module) {
		var getPrototypeOf$1 = getPrototypeOf.exports;
		function _superPropBase(object, property) {
		  while (!Object.prototype.hasOwnProperty.call(object, property)) {
		    object = getPrototypeOf$1(object);
		    if (object === null) break;
		  }
		  return object;
		}
		module.exports = _superPropBase, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (superPropBase));
	return superPropBase.exports;
}

var hasRequiredGet;

function requireGet () {
	if (hasRequiredGet) return get.exports;
	hasRequiredGet = 1;
	(function (module) {
		var superPropBase = requireSuperPropBase();
		function _get() {
		  if (typeof Reflect !== "undefined" && Reflect.get) {
		    module.exports = _get = Reflect.get.bind(), module.exports.__esModule = true, module.exports["default"] = module.exports;
		  } else {
		    module.exports = _get = function _get(target, property, receiver) {
		      var base = superPropBase(target, property);
		      if (!base) return;
		      var desc = Object.getOwnPropertyDescriptor(base, property);
		      if (desc.get) {
		        return desc.get.call(arguments.length < 3 ? target : receiver);
		      }
		      return desc.value;
		    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
		  }
		  return _get.apply(this, arguments);
		}
		module.exports = _get, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (get));
	return get.exports;
}

var immutable;
var hasRequiredImmutable;

function requireImmutable () {
	if (hasRequiredImmutable) return immutable;
	hasRequiredImmutable = 1;
	immutable = extend;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	function extend() {
	  var target = {};
	  for (var i = 0; i < arguments.length; i++) {
	    var source = arguments[i];
	    for (var key in source) {
	      if (hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }
	  return target;
	}
	return immutable;
}

var jsonRpcRandomId;
var hasRequiredJsonRpcRandomId;

function requireJsonRpcRandomId () {
	if (hasRequiredJsonRpcRandomId) return jsonRpcRandomId;
	hasRequiredJsonRpcRandomId = 1;
	jsonRpcRandomId = IdIterator;
	function IdIterator(opts) {
	  opts = opts || {};
	  var max = opts.max || Number.MAX_SAFE_INTEGER;
	  var idCounter = typeof opts.start !== 'undefined' ? opts.start : Math.floor(Math.random() * max);
	  return function createRandomId() {
	    idCounter = idCounter % max;
	    return idCounter++;
	  };
	}
	return jsonRpcRandomId;
}

var ethQuery;
var hasRequiredEthQuery;

function requireEthQuery () {
	if (hasRequiredEthQuery) return ethQuery;
	hasRequiredEthQuery = 1;
	var extend = requireImmutable();
	var createRandomId = requireJsonRpcRandomId()();
	ethQuery = EthQuery;
	function EthQuery(provider) {
	  var self = this;
	  self.currentProvider = provider;
	}

	//
	// base queries
	//

	// default block
	EthQuery.prototype.getBalance = generateFnWithDefaultBlockFor(2, 'eth_getBalance');
	EthQuery.prototype.getCode = generateFnWithDefaultBlockFor(2, 'eth_getCode');
	EthQuery.prototype.getTransactionCount = generateFnWithDefaultBlockFor(2, 'eth_getTransactionCount');
	EthQuery.prototype.getStorageAt = generateFnWithDefaultBlockFor(3, 'eth_getStorageAt');
	EthQuery.prototype.call = generateFnWithDefaultBlockFor(2, 'eth_call');
	// standard
	EthQuery.prototype.protocolVersion = generateFnFor('eth_protocolVersion');
	EthQuery.prototype.syncing = generateFnFor('eth_syncing');
	EthQuery.prototype.coinbase = generateFnFor('eth_coinbase');
	EthQuery.prototype.mining = generateFnFor('eth_mining');
	EthQuery.prototype.hashrate = generateFnFor('eth_hashrate');
	EthQuery.prototype.gasPrice = generateFnFor('eth_gasPrice');
	EthQuery.prototype.accounts = generateFnFor('eth_accounts');
	EthQuery.prototype.blockNumber = generateFnFor('eth_blockNumber');
	EthQuery.prototype.getBlockTransactionCountByHash = generateFnFor('eth_getBlockTransactionCountByHash');
	EthQuery.prototype.getBlockTransactionCountByNumber = generateFnFor('eth_getBlockTransactionCountByNumber');
	EthQuery.prototype.getUncleCountByBlockHash = generateFnFor('eth_getUncleCountByBlockHash');
	EthQuery.prototype.getUncleCountByBlockNumber = generateFnFor('eth_getUncleCountByBlockNumber');
	EthQuery.prototype.sign = generateFnFor('eth_sign');
	EthQuery.prototype.sendTransaction = generateFnFor('eth_sendTransaction');
	EthQuery.prototype.sendRawTransaction = generateFnFor('eth_sendRawTransaction');
	EthQuery.prototype.estimateGas = generateFnFor('eth_estimateGas');
	EthQuery.prototype.getBlockByHash = generateFnFor('eth_getBlockByHash');
	EthQuery.prototype.getBlockByNumber = generateFnFor('eth_getBlockByNumber');
	EthQuery.prototype.getTransactionByHash = generateFnFor('eth_getTransactionByHash');
	EthQuery.prototype.getTransactionByBlockHashAndIndex = generateFnFor('eth_getTransactionByBlockHashAndIndex');
	EthQuery.prototype.getTransactionByBlockNumberAndIndex = generateFnFor('eth_getTransactionByBlockNumberAndIndex');
	EthQuery.prototype.getTransactionReceipt = generateFnFor('eth_getTransactionReceipt');
	EthQuery.prototype.getUncleByBlockHashAndIndex = generateFnFor('eth_getUncleByBlockHashAndIndex');
	EthQuery.prototype.getUncleByBlockNumberAndIndex = generateFnFor('eth_getUncleByBlockNumberAndIndex');
	EthQuery.prototype.getCompilers = generateFnFor('eth_getCompilers');
	EthQuery.prototype.compileLLL = generateFnFor('eth_compileLLL');
	EthQuery.prototype.compileSolidity = generateFnFor('eth_compileSolidity');
	EthQuery.prototype.compileSerpent = generateFnFor('eth_compileSerpent');
	EthQuery.prototype.newFilter = generateFnFor('eth_newFilter');
	EthQuery.prototype.newBlockFilter = generateFnFor('eth_newBlockFilter');
	EthQuery.prototype.newPendingTransactionFilter = generateFnFor('eth_newPendingTransactionFilter');
	EthQuery.prototype.uninstallFilter = generateFnFor('eth_uninstallFilter');
	EthQuery.prototype.getFilterChanges = generateFnFor('eth_getFilterChanges');
	EthQuery.prototype.getFilterLogs = generateFnFor('eth_getFilterLogs');
	EthQuery.prototype.getLogs = generateFnFor('eth_getLogs');
	EthQuery.prototype.getWork = generateFnFor('eth_getWork');
	EthQuery.prototype.submitWork = generateFnFor('eth_submitWork');
	EthQuery.prototype.submitHashrate = generateFnFor('eth_submitHashrate');

	// network level

	EthQuery.prototype.sendAsync = function (opts, cb) {
	  var self = this;
	  self.currentProvider.sendAsync(createPayload(opts), function (err, response) {
	    if (!err && response.error) err = new Error('EthQuery - RPC Error - ' + response.error.message);
	    if (err) return cb(err);
	    cb(null, response.result);
	  });
	};

	// util

	function generateFnFor(methodName) {
	  return function () {
	    var self = this;
	    var args = [].slice.call(arguments);
	    var cb = args.pop();
	    self.sendAsync({
	      method: methodName,
	      params: args
	    }, cb);
	  };
	}
	function generateFnWithDefaultBlockFor(argCount, methodName) {
	  return function () {
	    var self = this;
	    var args = [].slice.call(arguments);
	    var cb = args.pop();
	    // set optional default block param
	    if (args.length < argCount) args.push('latest');
	    self.sendAsync({
	      method: methodName,
	      params: args
	    }, cb);
	  };
	}
	function createPayload(data) {
	  return extend({
	    // defaults
	    id: createRandomId(),
	    jsonrpc: '2.0',
	    params: []
	    // user-specified
	  }, data);
	}
	return ethQuery;
}

var safeEventEmitter$1;
var hasRequiredSafeEventEmitter$1;

function requireSafeEventEmitter$1 () {
	if (hasRequiredSafeEventEmitter$1) return safeEventEmitter$1;
	hasRequiredSafeEventEmitter$1 = 1;
	var util = require$$0__default$1["default"];
	var EventEmitter = require$$1__default$4["default"];
	var R = typeof Reflect === 'object' ? Reflect : null;
	var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
	  return Function.prototype.apply.call(target, receiver, args);
	};
	safeEventEmitter$1 = SafeEventEmitter;
	function SafeEventEmitter() {
	  EventEmitter.call(this);
	}
	util.inherits(SafeEventEmitter, EventEmitter);
	SafeEventEmitter.prototype.emit = function (type) {
	  // copied from https://github.com/Gozala/events/blob/master/events.js
	  // modified lines are commented with "edited:"
	  var args = [];
	  for (var i = 1; i < arguments.length; i++) {
	    args.push(arguments[i]);
	  }
	  var doError = type === 'error';
	  var events = this._events;
	  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false;

	  // If there is no 'error' event listener then throw.
	  if (doError) {
	    var er;
	    if (args.length > 0) er = args[0];
	    if (er instanceof Error) {
	      // Note: The comments on the `throw` lines are intentional, they show
	      // up in Node's output if this results in an unhandled exception.
	      throw er; // Unhandled 'error' event
	    }
	    // At least give some kind of context to the user
	    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
	    err.context = er;
	    throw err; // Unhandled 'error' event
	  }

	  var handler = events[type];
	  if (handler === undefined) return false;
	  if (typeof handler === 'function') {
	    // edited: using safeApply
	    safeApply(handler, this, args);
	  } else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i) {
	      // edited: using safeApply
	      safeApply(listeners[i], this, args);
	    }
	  }
	  return true;
	};
	function safeApply(handler, context, args) {
	  try {
	    ReflectApply(handler, context, args);
	  } catch (err) {
	    // throw error after timeout so as not to interupt the stack
	    setTimeout(function () {
	      throw err;
	    });
	  }
	}
	function arrayClone(arr, n) {
	  var copy = new Array(n);
	  for (var i = 0; i < n; ++i) {
	    copy[i] = arr[i];
	  }
	  return copy;
	}
	return safeEventEmitter$1;
}

var base;
var hasRequiredBase;

function requireBase () {
	if (hasRequiredBase) return base;
	hasRequiredBase = 1;
	var _regeneratorRuntime = regenerator;
	var _asyncToGenerator = requireAsyncToGenerator();
	var _classCallCheck = classCallCheck.exports;
	var _createClass = createClass.exports;
	var _assertThisInitialized = assertThisInitialized.exports;
	var _get = requireGet();
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf.exports;
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	requireEthQuery();
	requirePify$1();
	var SafeEventEmitter = requireSafeEventEmitter$1();
	var sec = 1000;
	var calculateSum = function calculateSum(accumulator, currentValue) {
	  return accumulator + currentValue;
	};
	var blockTrackerEvents = ['sync', 'latest'];
	var BaseBlockTracker = /*#__PURE__*/function (_SafeEventEmitter) {

	  _inherits(BaseBlockTracker, _SafeEventEmitter);
	  var _super = _createSuper(BaseBlockTracker);
	  //
	  // public
	  //

	  function BaseBlockTracker() {
	    var _this;
	    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    _classCallCheck(this, BaseBlockTracker);
	    _this = _super.call(this);
	    // config
	    _this._blockResetDuration = opts.blockResetDuration || 20 * sec;
	    // state
	    _this._blockResetTimeout;
	    _this._currentBlock = null;
	    _this._isRunning = false;
	    // bind functions for internal use
	    _this._onNewListener = _this._onNewListener.bind(_assertThisInitialized(_this));
	    _this._onRemoveListener = _this._onRemoveListener.bind(_assertThisInitialized(_this));
	    _this._resetCurrentBlock = _this._resetCurrentBlock.bind(_assertThisInitialized(_this));
	    // listen for handler changes
	    _this._setupInternalEvents();
	    return _this;
	  }
	  _createClass(BaseBlockTracker, [{
	    key: "isRunning",
	    value: function isRunning() {
	      return this._isRunning;
	    }
	  }, {
	    key: "getCurrentBlock",
	    value: function getCurrentBlock() {
	      return this._currentBlock;
	    }
	  }, {
	    key: "getLatestBlock",
	    value: function () {
	      var _getLatestBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
	        var _this2 = this;
	        var latestBlock;
	        return _regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (!this._currentBlock) {
	                  _context.next = 2;
	                  break;
	                }
	                return _context.abrupt("return", this._currentBlock);
	              case 2:
	                _context.next = 4;
	                return new Promise(function (resolve) {
	                  return _this2.once('latest', resolve);
	                });
	              case 4:
	                latestBlock = _context.sent;
	                return _context.abrupt("return", latestBlock);
	              case 6:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));
	      function getLatestBlock() {
	        return _getLatestBlock.apply(this, arguments);
	      }
	      return getLatestBlock;
	    }() // dont allow module consumer to remove our internal event listeners
	  }, {
	    key: "removeAllListeners",
	    value: function removeAllListeners(eventName) {
	      // perform default behavior, preserve fn arity
	      if (eventName) {
	        _get(_getPrototypeOf(BaseBlockTracker.prototype), "removeAllListeners", this).call(this, eventName);
	      } else {
	        _get(_getPrototypeOf(BaseBlockTracker.prototype), "removeAllListeners", this).call(this);
	      }
	      // re-add internal events
	      this._setupInternalEvents();
	      // trigger stop check just in case
	      this._onRemoveListener();
	    }

	    //
	    // to be implemented in subclass
	    //
	  }, {
	    key: "_start",
	    value: function _start() {
	      // default behavior is noop
	    }
	  }, {
	    key: "_end",
	    value: function _end() {
	      // default behavior is noop
	    }

	    //
	    // private
	    //
	  }, {
	    key: "_setupInternalEvents",
	    value: function _setupInternalEvents() {
	      // first remove listeners for idempotence
	      this.removeListener('newListener', this._onNewListener);
	      this.removeListener('removeListener', this._onRemoveListener);
	      // then add them
	      this.on('newListener', this._onNewListener);
	      this.on('removeListener', this._onRemoveListener);
	    }
	  }, {
	    key: "_onNewListener",
	    value: function _onNewListener(eventName, handler) {
	      // `newListener` is called *before* the listener is added
	      if (!blockTrackerEvents.includes(eventName)) return;
	      this._maybeStart();
	    }
	  }, {
	    key: "_onRemoveListener",
	    value: function _onRemoveListener(eventName, handler) {
	      // `removeListener` is called *after* the listener is removed
	      if (this._getBlockTrackerEventCount() > 0) return;
	      this._maybeEnd();
	    }
	  }, {
	    key: "_maybeStart",
	    value: function _maybeStart() {
	      if (this._isRunning) return;
	      this._isRunning = true;
	      // cancel setting latest block to stale
	      this._cancelBlockResetTimeout();
	      this._start();
	    }
	  }, {
	    key: "_maybeEnd",
	    value: function _maybeEnd() {
	      if (!this._isRunning) return;
	      this._isRunning = false;
	      this._setupBlockResetTimeout();
	      this._end();
	    }
	  }, {
	    key: "_getBlockTrackerEventCount",
	    value: function _getBlockTrackerEventCount() {
	      var _this3 = this;
	      return blockTrackerEvents.map(function (eventName) {
	        return _this3.listenerCount(eventName);
	      }).reduce(calculateSum);
	    }
	  }, {
	    key: "_newPotentialLatest",
	    value: function _newPotentialLatest(newBlock) {
	      var currentBlock = this._currentBlock;
	      // only update if blok number is higher
	      if (currentBlock && hexToInt(newBlock) <= hexToInt(currentBlock)) return;
	      this._setCurrentBlock(newBlock);
	    }
	  }, {
	    key: "_setCurrentBlock",
	    value: function _setCurrentBlock(newBlock) {
	      var oldBlock = this._currentBlock;
	      this._currentBlock = newBlock;
	      this.emit('latest', newBlock);
	      this.emit('sync', {
	        oldBlock: oldBlock,
	        newBlock: newBlock
	      });
	    }
	  }, {
	    key: "_setupBlockResetTimeout",
	    value: function _setupBlockResetTimeout() {
	      // clear any existing timeout
	      this._cancelBlockResetTimeout();
	      // clear latest block when stale
	      this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration);
	      // nodejs - dont hold process open
	      if (this._blockResetTimeout.unref) {
	        this._blockResetTimeout.unref();
	      }
	    }
	  }, {
	    key: "_cancelBlockResetTimeout",
	    value: function _cancelBlockResetTimeout() {
	      clearTimeout(this._blockResetTimeout);
	    }
	  }, {
	    key: "_resetCurrentBlock",
	    value: function _resetCurrentBlock() {
	      this._currentBlock = null;
	    }
	  }]);
	  return BaseBlockTracker;
	}(SafeEventEmitter);
	base = BaseBlockTracker;
	function hexToInt(hexInt) {
	  return Number.parseInt(hexInt, 16);
	}
	return base;
}

var polling;
var hasRequiredPolling;

function requirePolling () {
	if (hasRequiredPolling) return polling;
	hasRequiredPolling = 1;
	var _regeneratorRuntime = regenerator;
	var _asyncToGenerator = requireAsyncToGenerator();
	var _classCallCheck = classCallCheck.exports;
	var _createClass = createClass.exports;
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf.exports;
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	var pify = requirePify$1();
	var BaseBlockTracker = requireBase();
	var sec = 1000;
	var PollingBlockTracker = /*#__PURE__*/function (_BaseBlockTracker) {

	  _inherits(PollingBlockTracker, _BaseBlockTracker);
	  var _super = _createSuper(PollingBlockTracker);
	  function PollingBlockTracker() {
	    var _this;
	    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    _classCallCheck(this, PollingBlockTracker);
	    // parse + validate args
	    if (!opts.provider) throw new Error('PollingBlockTracker - no provider specified.');
	    var pollingInterval = opts.pollingInterval || 20 * sec;
	    var retryTimeout = opts.retryTimeout || pollingInterval / 10;
	    var keepEventLoopActive = opts.keepEventLoopActive !== undefined ? opts.keepEventLoopActive : true;
	    var setSkipCacheFlag = opts.setSkipCacheFlag || false;
	    // BaseBlockTracker constructor
	    _this = _super.call(this, Object.assign({
	      blockResetDuration: pollingInterval
	    }, opts));
	    // config
	    _this._provider = opts.provider;
	    _this._pollingInterval = pollingInterval;
	    _this._retryTimeout = retryTimeout;
	    _this._keepEventLoopActive = keepEventLoopActive;
	    _this._setSkipCacheFlag = setSkipCacheFlag;
	    return _this;
	  }

	  //
	  // public
	  //

	  // trigger block polling
	  _createClass(PollingBlockTracker, [{
	    key: "checkForLatestBlock",
	    value: function () {
	      var _checkForLatestBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
	        return _regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                _context.next = 2;
	                return this._updateLatestBlock();
	              case 2:
	                _context.next = 4;
	                return this.getLatestBlock();
	              case 4:
	                return _context.abrupt("return", _context.sent);
	              case 5:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));
	      function checkForLatestBlock() {
	        return _checkForLatestBlock.apply(this, arguments);
	      }
	      return checkForLatestBlock;
	    }() //
	    // private
	    //
	  }, {
	    key: "_start",
	    value: function _start() {
	      var _this2 = this;
	      this._performSync()["catch"](function (err) {
	        return _this2.emit('error', err);
	      });
	    }
	  }, {
	    key: "_performSync",
	    value: function () {
	      var _performSync2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
	        var newErr;
	        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                if (!this._isRunning) {
	                  _context2.next = 16;
	                  break;
	                }
	                _context2.prev = 1;
	                _context2.next = 4;
	                return this._updateLatestBlock();
	              case 4:
	                _context2.next = 6;
	                return timeout(this._pollingInterval, !this._keepEventLoopActive);
	              case 6:
	                _context2.next = 14;
	                break;
	              case 8:
	                _context2.prev = 8;
	                _context2.t0 = _context2["catch"](1);
	                newErr = new Error("PollingBlockTracker - encountered an error while attempting to update latest block:\n".concat(_context2.t0.stack));
	                try {
	                  this.emit('error', newErr);
	                } catch (emitErr) {
	                  console.error(newErr);
	                }
	                _context2.next = 14;
	                return timeout(this._retryTimeout, !this._keepEventLoopActive);
	              case 14:
	                _context2.next = 0;
	                break;
	              case 16:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this, [[1, 8]]);
	      }));
	      function _performSync() {
	        return _performSync2.apply(this, arguments);
	      }
	      return _performSync;
	    }()
	  }, {
	    key: "_updateLatestBlock",
	    value: function () {
	      var _updateLatestBlock2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
	        var latestBlock;
	        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                _context3.next = 2;
	                return this._fetchLatestBlock();
	              case 2:
	                latestBlock = _context3.sent;
	                this._newPotentialLatest(latestBlock);
	              case 4:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));
	      function _updateLatestBlock() {
	        return _updateLatestBlock2.apply(this, arguments);
	      }
	      return _updateLatestBlock;
	    }()
	  }, {
	    key: "_fetchLatestBlock",
	    value: function () {
	      var _fetchLatestBlock2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
	        var _this3 = this;
	        var req, res;
	        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                req = {
	                  jsonrpc: "2.0",
	                  id: 1,
	                  method: 'eth_blockNumber',
	                  params: []
	                };
	                if (this._setSkipCacheFlag) req.skipCache = true;
	                _context4.next = 4;
	                return pify(function (cb) {
	                  return _this3._provider.sendAsync(req, cb);
	                })();
	              case 4:
	                res = _context4.sent;
	                if (!res.error) {
	                  _context4.next = 7;
	                  break;
	                }
	                throw new Error("PollingBlockTracker - encountered error fetching block:\n".concat(res.error));
	              case 7:
	                return _context4.abrupt("return", res.result);
	              case 8:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this);
	      }));
	      function _fetchLatestBlock() {
	        return _fetchLatestBlock2.apply(this, arguments);
	      }
	      return _fetchLatestBlock;
	    }()
	  }]);
	  return PollingBlockTracker;
	}(BaseBlockTracker);
	polling = PollingBlockTracker;
	function timeout(duration, unref) {
	  return new Promise(function (resolve) {
	    var timoutRef = setTimeout(resolve, duration);
	    // don't keep process open
	    if (timoutRef.unref && unref) {
	      timoutRef.unref();
	    }
	  });
	}
	return polling;
}

var map$1 = {exports: {}};

var doParallel = {exports: {}};

var eachOf = {exports: {}};

/** Detect free variable `global` from Node.js. */

var _freeGlobal;
var hasRequired_freeGlobal;

function require_freeGlobal () {
	if (hasRequired_freeGlobal) return _freeGlobal;
	hasRequired_freeGlobal = 1;
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
	_freeGlobal = freeGlobal;
	return _freeGlobal;
}

var _root;
var hasRequired_root;

function require_root () {
	if (hasRequired_root) return _root;
	hasRequired_root = 1;
	var freeGlobal = require_freeGlobal();

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();
	_root = root;
	return _root;
}

var _Symbol;
var hasRequired_Symbol;

function require_Symbol () {
	if (hasRequired_Symbol) return _Symbol;
	hasRequired_Symbol = 1;
	var root = require_root();

	/** Built-in value references. */
	var Symbol = root.Symbol;
	_Symbol = Symbol;
	return _Symbol;
}

var _getRawTag;
var hasRequired_getRawTag;

function require_getRawTag () {
	if (hasRequired_getRawTag) return _getRawTag;
	hasRequired_getRawTag = 1;
	var Symbol = require_Symbol();

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	    tag = value[symToStringTag];
	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}
	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}
	_getRawTag = getRawTag;
	return _getRawTag;
}

/** Used for built-in method references. */

var _objectToString;
var hasRequired_objectToString;

function require_objectToString () {
	if (hasRequired_objectToString) return _objectToString;
	hasRequired_objectToString = 1;
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}
	_objectToString = objectToString;
	return _objectToString;
}

var _baseGetTag;
var hasRequired_baseGetTag;

function require_baseGetTag () {
	if (hasRequired_baseGetTag) return _baseGetTag;
	hasRequired_baseGetTag = 1;
	var Symbol = require_Symbol(),
	  getRawTag = require_getRawTag(),
	  objectToString = require_objectToString();

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	  undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
	}
	_baseGetTag = baseGetTag;
	return _baseGetTag;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */

var isObject_1;
var hasRequiredIsObject;

function requireIsObject () {
	if (hasRequiredIsObject) return isObject_1;
	hasRequiredIsObject = 1;
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}
	isObject_1 = isObject;
	return isObject_1;
}

var isFunction_1;
var hasRequiredIsFunction;

function requireIsFunction () {
	if (hasRequiredIsFunction) return isFunction_1;
	hasRequiredIsFunction = 1;
	var baseGetTag = require_baseGetTag(),
	  isObject = requireIsObject();

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	  funcTag = '[object Function]',
	  genTag = '[object GeneratorFunction]',
	  proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}
	isFunction_1 = isFunction;
	return isFunction_1;
}

/** Used as references for various `Number` constants. */

var isLength_1;
var hasRequiredIsLength;

function requireIsLength () {
	if (hasRequiredIsLength) return isLength_1;
	hasRequiredIsLength = 1;
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}
	isLength_1 = isLength;
	return isLength_1;
}

var isArrayLike_1;
var hasRequiredIsArrayLike;

function requireIsArrayLike () {
	if (hasRequiredIsArrayLike) return isArrayLike_1;
	hasRequiredIsArrayLike = 1;
	var isFunction = requireIsFunction(),
	  isLength = requireIsLength();

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}
	isArrayLike_1 = isArrayLike;
	return isArrayLike_1;
}

var breakLoop = {exports: {}};

var hasRequiredBreakLoop;

function requireBreakLoop () {
	if (hasRequiredBreakLoop) return breakLoop.exports;
	hasRequiredBreakLoop = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		// A temporary value used to identify if the loop should be broken.
		// See #1064, #1293
		exports["default"] = {};
		module.exports = exports["default"];
} (breakLoop, breakLoop.exports));
	return breakLoop.exports;
}

var eachOfLimit$1 = {exports: {}};

var eachOfLimit = {exports: {}};

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */

var noop_1;
var hasRequiredNoop;

function requireNoop () {
	if (hasRequiredNoop) return noop_1;
	hasRequiredNoop = 1;
	function noop() {
	  // No operation performed.
	}
	noop_1 = noop;
	return noop_1;
}

var once = {exports: {}};

var hasRequiredOnce;

function requireOnce () {
	if (hasRequiredOnce) return once.exports;
	hasRequiredOnce = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = once;
		function once(fn) {
		  return function () {
		    if (fn === null) return;
		    var callFn = fn;
		    fn = null;
		    callFn.apply(this, arguments);
		  };
		}
		module.exports = exports["default"];
} (once, once.exports));
	return once.exports;
}

var iterator = {exports: {}};

var getIterator = {exports: {}};

var hasRequiredGetIterator;

function requireGetIterator () {
	if (hasRequiredGetIterator) return getIterator.exports;
	hasRequiredGetIterator = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = function (coll) {
		  return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
		};
		var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;
		module.exports = exports['default'];
} (getIterator, getIterator.exports));
	return getIterator.exports;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */

var _baseTimes;
var hasRequired_baseTimes;

function require_baseTimes () {
	if (hasRequired_baseTimes) return _baseTimes;
	hasRequired_baseTimes = 1;
	function baseTimes(n, iteratee) {
	  var index = -1,
	    result = Array(n);
	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}
	_baseTimes = baseTimes;
	return _baseTimes;
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

var isObjectLike_1;
var hasRequiredIsObjectLike;

function requireIsObjectLike () {
	if (hasRequiredIsObjectLike) return isObjectLike_1;
	hasRequiredIsObjectLike = 1;
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}
	isObjectLike_1 = isObjectLike;
	return isObjectLike_1;
}

var _baseIsArguments;
var hasRequired_baseIsArguments;

function require_baseIsArguments () {
	if (hasRequired_baseIsArguments) return _baseIsArguments;
	hasRequired_baseIsArguments = 1;
	var baseGetTag = require_baseGetTag(),
	  isObjectLike = requireIsObjectLike();

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';

	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments(value) {
	  return isObjectLike(value) && baseGetTag(value) == argsTag;
	}
	_baseIsArguments = baseIsArguments;
	return _baseIsArguments;
}

var isArguments_1;
var hasRequiredIsArguments;

function requireIsArguments () {
	if (hasRequiredIsArguments) return isArguments_1;
	hasRequiredIsArguments = 1;
	var baseIsArguments = require_baseIsArguments(),
	  isObjectLike = requireIsObjectLike();

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments = baseIsArguments(function () {
	  return arguments;
	}()) ? baseIsArguments : function (value) {
	  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	};
	isArguments_1 = isArguments;
	return isArguments_1;
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */

var isArray_1;
var hasRequiredIsArray;

function requireIsArray () {
	if (hasRequiredIsArray) return isArray_1;
	hasRequiredIsArray = 1;
	var isArray = Array.isArray;
	isArray_1 = isArray;
	return isArray_1;
}

var isBuffer = {exports: {}};

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */

var stubFalse_1;
var hasRequiredStubFalse;

function requireStubFalse () {
	if (hasRequiredStubFalse) return stubFalse_1;
	hasRequiredStubFalse = 1;
	function stubFalse() {
	  return false;
	}
	stubFalse_1 = stubFalse;
	return stubFalse_1;
}

var hasRequiredIsBuffer;

function requireIsBuffer () {
	if (hasRequiredIsBuffer) return isBuffer.exports;
	hasRequiredIsBuffer = 1;
	(function (module, exports) {
		var root = require_root(),
		  stubFalse = requireStubFalse();

		/** Detect free variable `exports`. */
		var freeExports = exports && !exports.nodeType && exports;

		/** Detect free variable `module`. */
		var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

		/** Detect the popular CommonJS extension `module.exports`. */
		var moduleExports = freeModule && freeModule.exports === freeExports;

		/** Built-in value references. */
		var Buffer = moduleExports ? root.Buffer : undefined;

		/* Built-in method references for those with the same name as other `lodash` methods. */
		var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

		/**
		 * Checks if `value` is a buffer.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.3.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
		 * @example
		 *
		 * _.isBuffer(new Buffer(2));
		 * // => true
		 *
		 * _.isBuffer(new Uint8Array(2));
		 * // => false
		 */
		var isBuffer = nativeIsBuffer || stubFalse;
		module.exports = isBuffer;
} (isBuffer, isBuffer.exports));
	return isBuffer.exports;
}

/** Used as references for various `Number` constants. */

var _isIndex;
var hasRequired_isIndex;

function require_isIndex () {
	if (hasRequired_isIndex) return _isIndex;
	hasRequired_isIndex = 1;
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  var type = typeof value;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
	}
	_isIndex = isIndex;
	return _isIndex;
}

var _baseIsTypedArray;
var hasRequired_baseIsTypedArray;

function require_baseIsTypedArray () {
	if (hasRequired_baseIsTypedArray) return _baseIsTypedArray;
	hasRequired_baseIsTypedArray = 1;
	var baseGetTag = require_baseGetTag(),
	  isLength = requireIsLength(),
	  isObjectLike = requireIsObjectLike();

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	  arrayTag = '[object Array]',
	  boolTag = '[object Boolean]',
	  dateTag = '[object Date]',
	  errorTag = '[object Error]',
	  funcTag = '[object Function]',
	  mapTag = '[object Map]',
	  numberTag = '[object Number]',
	  objectTag = '[object Object]',
	  regexpTag = '[object RegExp]',
	  setTag = '[object Set]',
	  stringTag = '[object String]',
	  weakMapTag = '[object WeakMap]';
	var arrayBufferTag = '[object ArrayBuffer]',
	  dataViewTag = '[object DataView]',
	  float32Tag = '[object Float32Array]',
	  float64Tag = '[object Float64Array]',
	  int8Tag = '[object Int8Array]',
	  int16Tag = '[object Int16Array]',
	  int32Tag = '[object Int32Array]',
	  uint8Tag = '[object Uint8Array]',
	  uint8ClampedTag = '[object Uint8ClampedArray]',
	  uint16Tag = '[object Uint16Array]',
	  uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	}
	_baseIsTypedArray = baseIsTypedArray;
	return _baseIsTypedArray;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */

var _baseUnary;
var hasRequired_baseUnary;

function require_baseUnary () {
	if (hasRequired_baseUnary) return _baseUnary;
	hasRequired_baseUnary = 1;
	function baseUnary(func) {
	  return function (value) {
	    return func(value);
	  };
	}
	_baseUnary = baseUnary;
	return _baseUnary;
}

var _nodeUtil = {exports: {}};

var hasRequired_nodeUtil;

function require_nodeUtil () {
	if (hasRequired_nodeUtil) return _nodeUtil.exports;
	hasRequired_nodeUtil = 1;
	(function (module, exports) {
		var freeGlobal = require_freeGlobal();

		/** Detect free variable `exports`. */
		var freeExports = exports && !exports.nodeType && exports;

		/** Detect free variable `module`. */
		var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

		/** Detect the popular CommonJS extension `module.exports`. */
		var moduleExports = freeModule && freeModule.exports === freeExports;

		/** Detect free variable `process` from Node.js. */
		var freeProcess = moduleExports && freeGlobal.process;

		/** Used to access faster Node.js helpers. */
		var nodeUtil = function () {
		  try {
		    // Use `util.types` for Node.js 10+.
		    var types = freeModule && freeModule.require && freeModule.require('util').types;
		    if (types) {
		      return types;
		    }

		    // Legacy `process.binding('util')` for Node.js < 10.
		    return freeProcess && freeProcess.binding && freeProcess.binding('util');
		  } catch (e) {}
		}();
		module.exports = nodeUtil;
} (_nodeUtil, _nodeUtil.exports));
	return _nodeUtil.exports;
}

var isTypedArray_1;
var hasRequiredIsTypedArray;

function requireIsTypedArray () {
	if (hasRequiredIsTypedArray) return isTypedArray_1;
	hasRequiredIsTypedArray = 1;
	var baseIsTypedArray = require_baseIsTypedArray(),
	  baseUnary = require_baseUnary(),
	  nodeUtil = require_nodeUtil();

	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
	isTypedArray_1 = isTypedArray;
	return isTypedArray_1;
}

var _arrayLikeKeys;
var hasRequired_arrayLikeKeys;

function require_arrayLikeKeys () {
	if (hasRequired_arrayLikeKeys) return _arrayLikeKeys;
	hasRequired_arrayLikeKeys = 1;
	var baseTimes = require_baseTimes(),
	  isArguments = requireIsArguments(),
	  isArray = requireIsArray(),
	  isBuffer = requireIsBuffer(),
	  isIndex = require_isIndex(),
	  isTypedArray = requireIsTypedArray();

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray(value),
	    isArg = !isArr && isArguments(value),
	    isBuff = !isArr && !isArg && isBuffer(value),
	    isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	    skipIndexes = isArr || isArg || isBuff || isType,
	    result = skipIndexes ? baseTimes(value.length, String) : [],
	    length = result.length;
	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (
	    // Safari 9 has enumerable `arguments.length` in strict mode.
	    key == 'length' ||
	    // Node.js 0.10 has enumerable non-index properties on buffers.
	    isBuff && (key == 'offset' || key == 'parent') ||
	    // PhantomJS 2 has enumerable non-index properties on typed arrays.
	    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
	    // Skip index properties.
	    isIndex(key, length)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	_arrayLikeKeys = arrayLikeKeys;
	return _arrayLikeKeys;
}

/** Used for built-in method references. */

var _isPrototype;
var hasRequired_isPrototype;

function require_isPrototype () {
	if (hasRequired_isPrototype) return _isPrototype;
	hasRequired_isPrototype = 1;
	var objectProto = Object.prototype;

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	    proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
	  return value === proto;
	}
	_isPrototype = isPrototype;
	return _isPrototype;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */

var _overArg;
var hasRequired_overArg;

function require_overArg () {
	if (hasRequired_overArg) return _overArg;
	hasRequired_overArg = 1;
	function overArg(func, transform) {
	  return function (arg) {
	    return func(transform(arg));
	  };
	}
	_overArg = overArg;
	return _overArg;
}

var _nativeKeys;
var hasRequired_nativeKeys;

function require_nativeKeys () {
	if (hasRequired_nativeKeys) return _nativeKeys;
	hasRequired_nativeKeys = 1;
	var overArg = require_overArg();

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = overArg(Object.keys, Object);
	_nativeKeys = nativeKeys;
	return _nativeKeys;
}

var _baseKeys;
var hasRequired_baseKeys;

function require_baseKeys () {
	if (hasRequired_baseKeys) return _baseKeys;
	hasRequired_baseKeys = 1;
	var isPrototype = require_isPrototype(),
	  nativeKeys = require_nativeKeys();

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}
	_baseKeys = baseKeys;
	return _baseKeys;
}

var keys_1;
var hasRequiredKeys;

function requireKeys () {
	if (hasRequiredKeys) return keys_1;
	hasRequiredKeys = 1;
	var arrayLikeKeys = require_arrayLikeKeys(),
	  baseKeys = require_baseKeys(),
	  isArrayLike = requireIsArrayLike();

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}
	keys_1 = keys;
	return keys_1;
}

var hasRequiredIterator;

function requireIterator () {
	if (hasRequiredIterator) return iterator.exports;
	hasRequiredIterator = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = iterator;
		var _isArrayLike = requireIsArrayLike();
		var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
		var _getIterator = requireGetIterator();
		var _getIterator2 = _interopRequireDefault(_getIterator);
		var _keys = requireKeys();
		var _keys2 = _interopRequireDefault(_keys);
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		function createArrayIterator(coll) {
		  var i = -1;
		  var len = coll.length;
		  return function next() {
		    return ++i < len ? {
		      value: coll[i],
		      key: i
		    } : null;
		  };
		}
		function createES2015Iterator(iterator) {
		  var i = -1;
		  return function next() {
		    var item = iterator.next();
		    if (item.done) return null;
		    i++;
		    return {
		      value: item.value,
		      key: i
		    };
		  };
		}
		function createObjectIterator(obj) {
		  var okeys = (0, _keys2["default"])(obj);
		  var i = -1;
		  var len = okeys.length;
		  return function next() {
		    var key = okeys[++i];
		    if (key === '__proto__') {
		      return next();
		    }
		    return i < len ? {
		      value: obj[key],
		      key: key
		    } : null;
		  };
		}
		function iterator(coll) {
		  if ((0, _isArrayLike2["default"])(coll)) {
		    return createArrayIterator(coll);
		  }
		  var iterator = (0, _getIterator2["default"])(coll);
		  return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
		}
		module.exports = exports['default'];
} (iterator, iterator.exports));
	return iterator.exports;
}

var onlyOnce = {exports: {}};

var hasRequiredOnlyOnce;

function requireOnlyOnce () {
	if (hasRequiredOnlyOnce) return onlyOnce.exports;
	hasRequiredOnlyOnce = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = onlyOnce;
		function onlyOnce(fn) {
		  return function () {
		    if (fn === null) throw new Error("Callback was already called.");
		    var callFn = fn;
		    fn = null;
		    callFn.apply(this, arguments);
		  };
		}
		module.exports = exports["default"];
} (onlyOnce, onlyOnce.exports));
	return onlyOnce.exports;
}

var hasRequiredEachOfLimit$1;

function requireEachOfLimit$1 () {
	if (hasRequiredEachOfLimit$1) return eachOfLimit.exports;
	hasRequiredEachOfLimit$1 = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = _eachOfLimit;
		var _noop = requireNoop();
		var _noop2 = _interopRequireDefault(_noop);
		var _once = requireOnce();
		var _once2 = _interopRequireDefault(_once);
		var _iterator = requireIterator();
		var _iterator2 = _interopRequireDefault(_iterator);
		var _onlyOnce = requireOnlyOnce();
		var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
		var _breakLoop = requireBreakLoop();
		var _breakLoop2 = _interopRequireDefault(_breakLoop);
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		function _eachOfLimit(limit) {
		  return function (obj, iteratee, callback) {
		    callback = (0, _once2["default"])(callback || _noop2["default"]);
		    if (limit <= 0 || !obj) {
		      return callback(null);
		    }
		    var nextElem = (0, _iterator2["default"])(obj);
		    var done = false;
		    var running = 0;
		    var looping = false;
		    function iterateeCallback(err, value) {
		      running -= 1;
		      if (err) {
		        done = true;
		        callback(err);
		      } else if (value === _breakLoop2["default"] || done && running <= 0) {
		        done = true;
		        return callback(null);
		      } else if (!looping) {
		        replenish();
		      }
		    }
		    function replenish() {
		      looping = true;
		      while (running < limit && !done) {
		        var elem = nextElem();
		        if (elem === null) {
		          done = true;
		          if (running <= 0) {
		            callback(null);
		          }
		          return;
		        }
		        running += 1;
		        iteratee(elem.value, elem.key, (0, _onlyOnce2["default"])(iterateeCallback));
		      }
		      looping = false;
		    }
		    replenish();
		  };
		}
		module.exports = exports['default'];
} (eachOfLimit, eachOfLimit.exports));
	return eachOfLimit.exports;
}

var wrapAsync = {};

var asyncify = {exports: {}};

var initialParams = {exports: {}};

var slice = {exports: {}};

var hasRequiredSlice;

function requireSlice () {
	if (hasRequiredSlice) return slice.exports;
	hasRequiredSlice = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = slice;
		function slice(arrayLike, start) {
		  start = start | 0;
		  var newLen = Math.max(arrayLike.length - start, 0);
		  var newArr = Array(newLen);
		  for (var idx = 0; idx < newLen; idx++) {
		    newArr[idx] = arrayLike[start + idx];
		  }
		  return newArr;
		}
		module.exports = exports["default"];
} (slice, slice.exports));
	return slice.exports;
}

var hasRequiredInitialParams;

function requireInitialParams () {
	if (hasRequiredInitialParams) return initialParams.exports;
	hasRequiredInitialParams = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = function (fn) {
		  return function () /*...args, callback*/{
		    var args = (0, _slice2["default"])(arguments);
		    var callback = args.pop();
		    fn.call(this, args, callback);
		  };
		};
		var _slice = requireSlice();
		var _slice2 = _interopRequireDefault(_slice);
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		module.exports = exports['default'];
} (initialParams, initialParams.exports));
	return initialParams.exports;
}

var setImmediate$1 = {};

var hasRequiredSetImmediate;

function requireSetImmediate () {
	if (hasRequiredSetImmediate) return setImmediate$1;
	hasRequiredSetImmediate = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.hasNextTick = exports.hasSetImmediate = undefined;
		exports.fallback = fallback;
		exports.wrap = wrap;
		var _slice = requireSlice();
		var _slice2 = _interopRequireDefault(_slice);
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		var hasSetImmediate = exports.hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
		var hasNextTick = exports.hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';
		function fallback(fn) {
		  setTimeout(fn, 0);
		}
		function wrap(defer) {
		  return function (fn /*, ...args*/) {
		    var args = (0, _slice2["default"])(arguments, 1);
		    defer(function () {
		      fn.apply(null, args);
		    });
		  };
		}
		var _defer;
		if (hasSetImmediate) {
		  _defer = setImmediate;
		} else if (hasNextTick) {
		  _defer = process.nextTick;
		} else {
		  _defer = fallback;
		}
		exports["default"] = wrap(_defer);
} (setImmediate$1));
	return setImmediate$1;
}

var hasRequiredAsyncify;

function requireAsyncify () {
	if (hasRequiredAsyncify) return asyncify.exports;
	hasRequiredAsyncify = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = asyncify;
		var _isObject = requireIsObject();
		var _isObject2 = _interopRequireDefault(_isObject);
		var _initialParams = requireInitialParams();
		var _initialParams2 = _interopRequireDefault(_initialParams);
		var _setImmediate = requireSetImmediate();
		var _setImmediate2 = _interopRequireDefault(_setImmediate);
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}

		/**
		 * Take a sync function and make it async, passing its return value to a
		 * callback. This is useful for plugging sync functions into a waterfall,
		 * series, or other async functions. Any arguments passed to the generated
		 * function will be passed to the wrapped function (except for the final
		 * callback argument). Errors thrown will be passed to the callback.
		 *
		 * If the function passed to `asyncify` returns a Promise, that promises's
		 * resolved/rejected state will be used to call the callback, rather than simply
		 * the synchronous return value.
		 *
		 * This also means you can asyncify ES2017 `async` functions.
		 *
		 * @name asyncify
		 * @static
		 * @memberOf module:Utils
		 * @method
		 * @alias wrapSync
		 * @category Util
		 * @param {Function} func - The synchronous function, or Promise-returning
		 * function to convert to an {@link AsyncFunction}.
		 * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
		 * invoked with `(args..., callback)`.
		 * @example
		 *
		 * // passing a regular synchronous function
		 * async.waterfall([
		 *     async.apply(fs.readFile, filename, "utf8"),
		 *     async.asyncify(JSON.parse),
		 *     function (data, next) {
		 *         // data is the result of parsing the text.
		 *         // If there was a parsing error, it would have been caught.
		 *     }
		 * ], callback);
		 *
		 * // passing a function returning a promise
		 * async.waterfall([
		 *     async.apply(fs.readFile, filename, "utf8"),
		 *     async.asyncify(function (contents) {
		 *         return db.model.create(contents);
		 *     }),
		 *     function (model, next) {
		 *         // `model` is the instantiated model object.
		 *         // If there was an error, this function would be skipped.
		 *     }
		 * ], callback);
		 *
		 * // es2017 example, though `asyncify` is not needed if your JS environment
		 * // supports async functions out of the box
		 * var q = async.queue(async.asyncify(async function(file) {
		 *     var intermediateStep = await processFile(file);
		 *     return await somePromise(intermediateStep)
		 * }));
		 *
		 * q.push(files);
		 */
		function asyncify(func) {
		  return (0, _initialParams2["default"])(function (args, callback) {
		    var result;
		    try {
		      result = func.apply(this, args);
		    } catch (e) {
		      return callback(e);
		    }
		    // if result is Promise object
		    if ((0, _isObject2["default"])(result) && typeof result.then === 'function') {
		      result.then(function (value) {
		        invokeCallback(callback, null, value);
		      }, function (err) {
		        invokeCallback(callback, err.message ? err : new Error(err));
		      });
		    } else {
		      callback(null, result);
		    }
		  });
		}
		function invokeCallback(callback, error, value) {
		  try {
		    callback(error, value);
		  } catch (e) {
		    (0, _setImmediate2["default"])(rethrow, e);
		  }
		}
		function rethrow(error) {
		  throw error;
		}
		module.exports = exports['default'];
} (asyncify, asyncify.exports));
	return asyncify.exports;
}

var hasRequiredWrapAsync;

function requireWrapAsync () {
	if (hasRequiredWrapAsync) return wrapAsync;
	hasRequiredWrapAsync = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.isAsync = undefined;
		var _asyncify = requireAsyncify();
		var _asyncify2 = _interopRequireDefault(_asyncify);
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		var supportsSymbol = typeof Symbol === 'function';
		function isAsync(fn) {
		  return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';
		}
		function wrapAsync(asyncFn) {
		  return isAsync(asyncFn) ? (0, _asyncify2["default"])(asyncFn) : asyncFn;
		}
		exports["default"] = wrapAsync;
		exports.isAsync = isAsync;
} (wrapAsync));
	return wrapAsync;
}

var hasRequiredEachOfLimit;

function requireEachOfLimit () {
	if (hasRequiredEachOfLimit) return eachOfLimit$1.exports;
	hasRequiredEachOfLimit = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = eachOfLimit;
		var _eachOfLimit2 = requireEachOfLimit$1();
		var _eachOfLimit3 = _interopRequireDefault(_eachOfLimit2);
		var _wrapAsync = requireWrapAsync();
		var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}

		/**
		 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
		 * time.
		 *
		 * @name eachOfLimit
		 * @static
		 * @memberOf module:Collections
		 * @method
		 * @see [async.eachOf]{@link module:Collections.eachOf}
		 * @alias forEachOfLimit
		 * @category Collection
		 * @param {Array|Iterable|Object} coll - A collection to iterate over.
		 * @param {number} limit - The maximum number of async operations at a time.
		 * @param {AsyncFunction} iteratee - An async function to apply to each
		 * item in `coll`. The `key` is the item's key, or index in the case of an
		 * array.
		 * Invoked with (item, key, callback).
		 * @param {Function} [callback] - A callback which is called when all
		 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
		 */
		function eachOfLimit(coll, limit, iteratee, callback) {
		  (0, _eachOfLimit3["default"])(limit)(coll, (0, _wrapAsync2["default"])(iteratee), callback);
		}
		module.exports = exports['default'];
} (eachOfLimit$1, eachOfLimit$1.exports));
	return eachOfLimit$1.exports;
}

var doLimit = {exports: {}};

var hasRequiredDoLimit;

function requireDoLimit () {
	if (hasRequiredDoLimit) return doLimit.exports;
	hasRequiredDoLimit = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = doLimit;
		function doLimit(fn, limit) {
		  return function (iterable, iteratee, callback) {
		    return fn(iterable, limit, iteratee, callback);
		  };
		}
		module.exports = exports["default"];
} (doLimit, doLimit.exports));
	return doLimit.exports;
}

var hasRequiredEachOf;

function requireEachOf () {
	if (hasRequiredEachOf) return eachOf.exports;
	hasRequiredEachOf = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = function (coll, iteratee, callback) {
		  var eachOfImplementation = (0, _isArrayLike2["default"])(coll) ? eachOfArrayLike : eachOfGeneric;
		  eachOfImplementation(coll, (0, _wrapAsync2["default"])(iteratee), callback);
		};
		var _isArrayLike = requireIsArrayLike();
		var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
		var _breakLoop = requireBreakLoop();
		var _breakLoop2 = _interopRequireDefault(_breakLoop);
		var _eachOfLimit = requireEachOfLimit();
		var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);
		var _doLimit = requireDoLimit();
		var _doLimit2 = _interopRequireDefault(_doLimit);
		var _noop = requireNoop();
		var _noop2 = _interopRequireDefault(_noop);
		var _once = requireOnce();
		var _once2 = _interopRequireDefault(_once);
		var _onlyOnce = requireOnlyOnce();
		var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
		var _wrapAsync = requireWrapAsync();
		var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}

		// eachOf implementation optimized for array-likes
		function eachOfArrayLike(coll, iteratee, callback) {
		  callback = (0, _once2["default"])(callback || _noop2["default"]);
		  var index = 0,
		    completed = 0,
		    length = coll.length;
		  if (length === 0) {
		    callback(null);
		  }
		  function iteratorCallback(err, value) {
		    if (err) {
		      callback(err);
		    } else if (++completed === length || value === _breakLoop2["default"]) {
		      callback(null);
		    }
		  }
		  for (; index < length; index++) {
		    iteratee(coll[index], index, (0, _onlyOnce2["default"])(iteratorCallback));
		  }
		}

		// a generic version of eachOf which can handle array, object, and iterator cases.
		var eachOfGeneric = (0, _doLimit2["default"])(_eachOfLimit2["default"], Infinity);

		/**
		 * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
		 * to the iteratee.
		 *
		 * @name eachOf
		 * @static
		 * @memberOf module:Collections
		 * @method
		 * @alias forEachOf
		 * @category Collection
		 * @see [async.each]{@link module:Collections.each}
		 * @param {Array|Iterable|Object} coll - A collection to iterate over.
		 * @param {AsyncFunction} iteratee - A function to apply to each
		 * item in `coll`.
		 * The `key` is the item's key, or index in the case of an array.
		 * Invoked with (item, key, callback).
		 * @param {Function} [callback] - A callback which is called when all
		 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
		 * @example
		 *
		 * var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
		 * var configs = {};
		 *
		 * async.forEachOf(obj, function (value, key, callback) {
		 *     fs.readFile(__dirname + value, "utf8", function (err, data) {
		 *         if (err) return callback(err);
		 *         try {
		 *             configs[key] = JSON.parse(data);
		 *         } catch (e) {
		 *             return callback(e);
		 *         }
		 *         callback();
		 *     });
		 * }, function (err) {
		 *     if (err) console.error(err.message);
		 *     // configs is now a map of JSON data
		 *     doSomethingWith(configs);
		 * });
		 */
		module.exports = exports['default'];
} (eachOf, eachOf.exports));
	return eachOf.exports;
}

var hasRequiredDoParallel;

function requireDoParallel () {
	if (hasRequiredDoParallel) return doParallel.exports;
	hasRequiredDoParallel = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = doParallel;
		var _eachOf = requireEachOf();
		var _eachOf2 = _interopRequireDefault(_eachOf);
		var _wrapAsync = requireWrapAsync();
		var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		function doParallel(fn) {
		  return function (obj, iteratee, callback) {
		    return fn(_eachOf2["default"], obj, (0, _wrapAsync2["default"])(iteratee), callback);
		  };
		}
		module.exports = exports['default'];
} (doParallel, doParallel.exports));
	return doParallel.exports;
}

var map = {exports: {}};

var hasRequiredMap$1;

function requireMap$1 () {
	if (hasRequiredMap$1) return map.exports;
	hasRequiredMap$1 = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = _asyncMap;
		var _noop = requireNoop();
		var _noop2 = _interopRequireDefault(_noop);
		var _wrapAsync = requireWrapAsync();
		var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		function _asyncMap(eachfn, arr, iteratee, callback) {
		  callback = callback || _noop2["default"];
		  arr = arr || [];
		  var results = [];
		  var counter = 0;
		  var _iteratee = (0, _wrapAsync2["default"])(iteratee);
		  eachfn(arr, function (value, _, callback) {
		    var index = counter++;
		    _iteratee(value, function (err, v) {
		      results[index] = v;
		      callback(err);
		    });
		  }, function (err) {
		    callback(err, results);
		  });
		}
		module.exports = exports['default'];
} (map, map.exports));
	return map.exports;
}

var hasRequiredMap;

function requireMap () {
	if (hasRequiredMap) return map$1.exports;
	hasRequiredMap = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _doParallel = requireDoParallel();
		var _doParallel2 = _interopRequireDefault(_doParallel);
		var _map = requireMap$1();
		var _map2 = _interopRequireDefault(_map);
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}

		/**
		 * Produces a new collection of values by mapping each value in `coll` through
		 * the `iteratee` function. The `iteratee` is called with an item from `coll`
		 * and a callback for when it has finished processing. Each of these callback
		 * takes 2 arguments: an `error`, and the transformed item from `coll`. If
		 * `iteratee` passes an error to its callback, the main `callback` (for the
		 * `map` function) is immediately called with the error.
		 *
		 * Note, that since this function applies the `iteratee` to each item in
		 * parallel, there is no guarantee that the `iteratee` functions will complete
		 * in order. However, the results array will be in the same order as the
		 * original `coll`.
		 *
		 * If `map` is passed an Object, the results will be an Array.  The results
		 * will roughly be in the order of the original Objects' keys (but this can
		 * vary across JavaScript engines).
		 *
		 * @name map
		 * @static
		 * @memberOf module:Collections
		 * @method
		 * @category Collection
		 * @param {Array|Iterable|Object} coll - A collection to iterate over.
		 * @param {AsyncFunction} iteratee - An async function to apply to each item in
		 * `coll`.
		 * The iteratee should complete with the transformed item.
		 * Invoked with (item, callback).
		 * @param {Function} [callback] - A callback which is called when all `iteratee`
		 * functions have finished, or an error occurs. Results is an Array of the
		 * transformed items from the `coll`. Invoked with (err, results).
		 * @example
		 *
		 * async.map(['file1','file2','file3'], fs.stat, function(err, results) {
		 *     // results is now an array of stats for each file
		 * });
		 */
		exports["default"] = (0, _doParallel2["default"])(_map2["default"]);
		module.exports = exports['default'];
} (map$1, map$1.exports));
	return map$1.exports;
}

var eachSeries = {exports: {}};

var eachLimit = {exports: {}};

var withoutIndex = {exports: {}};

var hasRequiredWithoutIndex;

function requireWithoutIndex () {
	if (hasRequiredWithoutIndex) return withoutIndex.exports;
	hasRequiredWithoutIndex = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = _withoutIndex;
		function _withoutIndex(iteratee) {
		  return function (value, index, callback) {
		    return iteratee(value, callback);
		  };
		}
		module.exports = exports["default"];
} (withoutIndex, withoutIndex.exports));
	return withoutIndex.exports;
}

var hasRequiredEachLimit;

function requireEachLimit () {
	if (hasRequiredEachLimit) return eachLimit.exports;
	hasRequiredEachLimit = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = eachLimit;
		var _eachOfLimit = requireEachOfLimit$1();
		var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);
		var _withoutIndex = requireWithoutIndex();
		var _withoutIndex2 = _interopRequireDefault(_withoutIndex);
		var _wrapAsync = requireWrapAsync();
		var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}

		/**
		 * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.
		 *
		 * @name eachLimit
		 * @static
		 * @memberOf module:Collections
		 * @method
		 * @see [async.each]{@link module:Collections.each}
		 * @alias forEachLimit
		 * @category Collection
		 * @param {Array|Iterable|Object} coll - A collection to iterate over.
		 * @param {number} limit - The maximum number of async operations at a time.
		 * @param {AsyncFunction} iteratee - An async function to apply to each item in
		 * `coll`.
		 * The array index is not passed to the iteratee.
		 * If you need the index, use `eachOfLimit`.
		 * Invoked with (item, callback).
		 * @param {Function} [callback] - A callback which is called when all
		 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
		 */
		function eachLimit(coll, limit, iteratee, callback) {
		  (0, _eachOfLimit2["default"])(limit)(coll, (0, _withoutIndex2["default"])((0, _wrapAsync2["default"])(iteratee)), callback);
		}
		module.exports = exports['default'];
} (eachLimit, eachLimit.exports));
	return eachLimit.exports;
}

var hasRequiredEachSeries;

function requireEachSeries () {
	if (hasRequiredEachSeries) return eachSeries.exports;
	hasRequiredEachSeries = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _eachLimit = requireEachLimit();
		var _eachLimit2 = _interopRequireDefault(_eachLimit);
		var _doLimit = requireDoLimit();
		var _doLimit2 = _interopRequireDefault(_doLimit);
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}

		/**
		 * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
		 *
		 * @name eachSeries
		 * @static
		 * @memberOf module:Collections
		 * @method
		 * @see [async.each]{@link module:Collections.each}
		 * @alias forEachSeries
		 * @category Collection
		 * @param {Array|Iterable|Object} coll - A collection to iterate over.
		 * @param {AsyncFunction} iteratee - An async function to apply to each
		 * item in `coll`.
		 * The array index is not passed to the iteratee.
		 * If you need the index, use `eachOfSeries`.
		 * Invoked with (item, callback).
		 * @param {Function} [callback] - A callback which is called when all
		 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
		 */
		exports["default"] = (0, _doLimit2["default"])(_eachLimit2["default"], 1);
		module.exports = exports['default'];
} (eachSeries, eachSeries.exports));
	return eachSeries.exports;
}

var stoplight;
var hasRequiredStoplight;

function requireStoplight () {
	if (hasRequiredStoplight) return stoplight;
	hasRequiredStoplight = 1;
	var EventEmitter = require$$0__default["default"].EventEmitter;
	var inherits = require$$0__default$1["default"].inherits;
	stoplight = Stoplight;
	inherits(Stoplight, EventEmitter);
	function Stoplight() {
	  var self = this;
	  EventEmitter.call(self);
	  self.isLocked = true;
	}
	Stoplight.prototype.go = function () {
	  var self = this;
	  self.isLocked = false;
	  self.emit('unlock');
	};
	Stoplight.prototype.stop = function () {
	  var self = this;
	  self.isLocked = true;
	  self.emit('lock');
	};
	Stoplight.prototype["await"] = function (fn) {
	  var self = this;
	  if (self.isLocked) {
	    self.once('unlock', fn);
	  } else {
	    setTimeout(fn);
	  }
	};
	return stoplight;
}

var jsonify = {};

var parse;
var hasRequiredParse;

function requireParse () {
	if (hasRequiredParse) return parse;
	hasRequiredParse = 1;

	var at; // The index of the current character
	var ch; // The current character
	var escapee = {
	  '"': '"',
	  '\\': '\\',
	  '/': '/',
	  b: '\b',
	  f: '\f',
	  n: '\n',
	  r: '\r',
	  t: '\t'
	};
	var text;

	// Call error when something is wrong.
	function error(m) {
	  throw {
	    name: 'SyntaxError',
	    message: m,
	    at: at,
	    text: text
	  };
	}
	function next(c) {
	  // If a c parameter is provided, verify that it matches the current character.
	  if (c && c !== ch) {
	    error("Expected '" + c + "' instead of '" + ch + "'");
	  }

	  // Get the next character. When there are no more characters, return the empty string.

	  ch = text.charAt(at);
	  at += 1;
	  return ch;
	}
	function number() {
	  // Parse a number value.
	  var num;
	  var str = '';
	  if (ch === '-') {
	    str = '-';
	    next('-');
	  }
	  while (ch >= '0' && ch <= '9') {
	    str += ch;
	    next();
	  }
	  if (ch === '.') {
	    str += '.';
	    while (next() && ch >= '0' && ch <= '9') {
	      str += ch;
	    }
	  }
	  if (ch === 'e' || ch === 'E') {
	    str += ch;
	    next();
	    if (ch === '-' || ch === '+') {
	      str += ch;
	      next();
	    }
	    while (ch >= '0' && ch <= '9') {
	      str += ch;
	      next();
	    }
	  }
	  num = Number(str);
	  if (!isFinite(num)) {
	    error('Bad number');
	  }
	  return num;
	}
	function string() {
	  // Parse a string value.
	  var hex;
	  var i;
	  var str = '';
	  var uffff;

	  // When parsing for string values, we must look for " and \ characters.
	  if (ch === '"') {
	    while (next()) {
	      if (ch === '"') {
	        next();
	        return str;
	      } else if (ch === '\\') {
	        next();
	        if (ch === 'u') {
	          uffff = 0;
	          for (i = 0; i < 4; i += 1) {
	            hex = parseInt(next(), 16);
	            if (!isFinite(hex)) {
	              break;
	            }
	            uffff = uffff * 16 + hex;
	          }
	          str += String.fromCharCode(uffff);
	        } else if (typeof escapee[ch] === 'string') {
	          str += escapee[ch];
	        } else {
	          break;
	        }
	      } else {
	        str += ch;
	      }
	    }
	  }
	  error('Bad string');
	}

	// Skip whitespace.
	function white() {
	  while (ch && ch <= ' ') {
	    next();
	  }
	}

	// true, false, or null.
	function word() {
	  switch (ch) {
	    case 't':
	      next('t');
	      next('r');
	      next('u');
	      next('e');
	      return true;
	    case 'f':
	      next('f');
	      next('a');
	      next('l');
	      next('s');
	      next('e');
	      return false;
	    case 'n':
	      next('n');
	      next('u');
	      next('l');
	      next('l');
	      return null;
	    default:
	      error("Unexpected '" + ch + "'");
	  }
	}

	// Parse an array value.
	function array() {
	  var arr = [];
	  if (ch === '[') {
	    next('[');
	    white();
	    if (ch === ']') {
	      next(']');
	      return arr; // empty array
	    }

	    while (ch) {
	      arr.push(value()); // eslint-disable-line no-use-before-define
	      white();
	      if (ch === ']') {
	        next(']');
	        return arr;
	      }
	      next(',');
	      white();
	    }
	  }
	  error('Bad array');
	}

	// Parse an object value.
	function object() {
	  var key;
	  var obj = {};
	  if (ch === '{') {
	    next('{');
	    white();
	    if (ch === '}') {
	      next('}');
	      return obj; // empty object
	    }

	    while (ch) {
	      key = string();
	      white();
	      next(':');
	      if (Object.prototype.hasOwnProperty.call(obj, key)) {
	        error('Duplicate key "' + key + '"');
	      }
	      obj[key] = value(); // eslint-disable-line no-use-before-define
	      white();
	      if (ch === '}') {
	        next('}');
	        return obj;
	      }
	      next(',');
	      white();
	    }
	  }
	  error('Bad object');
	}

	// Parse a JSON value. It could be an object, an array, a string, a number, or a word.
	function value() {
	  white();
	  switch (ch) {
	    case '{':
	      return object();
	    case '[':
	      return array();
	    case '"':
	      return string();
	    case '-':
	      return number();
	    default:
	      return ch >= '0' && ch <= '9' ? number() : word();
	  }
	}

	// Return the json_parse function. It will have access to all of the above functions and variables.
	parse = function (source, reviver) {
	  var result;
	  text = source;
	  at = 0;
	  ch = ' ';
	  result = value();
	  white();
	  if (ch) {
	    error('Syntax error');
	  }

	  // If there is a reviver function, we recursively walk the new structure,
	  // passing each name/value pair to the reviver function for possible
	  // transformation, starting with a temporary root object that holds the result
	  // in an empty key. If there is not a reviver function, we simply return the
	  // result.

	  return typeof reviver === 'function' ? function walk(holder, key) {
	    var k;
	    var v;
	    var val = holder[key];
	    if (val && typeof val === 'object') {
	      for (k in value) {
	        if (Object.prototype.hasOwnProperty.call(val, k)) {
	          v = walk(val, k);
	          if (typeof v === 'undefined') {
	            delete val[k];
	          } else {
	            val[k] = v;
	          }
	        }
	      }
	    }
	    return reviver.call(holder, key, val);
	  }({
	    '': result
	  }, '') : result;
	};
	return parse;
}

var stringify;
var hasRequiredStringify;

function requireStringify () {
	if (hasRequiredStringify) return stringify;
	hasRequiredStringify = 1;

	var escapable = /[\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
	var gap;
	var indent;
	var meta = {
	  // table of character substitutions
	  '\b': '\\b',
	  '\t': '\\t',
	  '\n': '\\n',
	  '\f': '\\f',
	  '\r': '\\r',
	  '"': '\\"',
	  '\\': '\\\\'
	};
	var rep;
	function quote(string) {
	  // If the string contains no control characters, no quote characters, and no
	  // backslash characters, then we can safely slap some quotes around it.
	  // Otherwise we must also replace the offending characters with safe escape sequences.

	  escapable.lastIndex = 0;
	  return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
	    var c = meta[a];
	    return typeof c === 'string' ? c : "\\u" + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	  }) + '"' : '"' + string + '"';
	}
	function str(key, holder) {
	  // Produce a string from holder[key].
	  var i; // The loop counter.
	  var k; // The member key.
	  var v; // The member value.
	  var length;
	  var mind = gap;
	  var partial;
	  var value = holder[key];

	  // If the value has a toJSON method, call it to obtain a replacement value.
	  if (value && typeof value === 'object' && typeof value.toJSON === 'function') {
	    value = value.toJSON(key);
	  }

	  // If we were called with a replacer function, then call the replacer to obtain a replacement value.
	  if (typeof rep === 'function') {
	    value = rep.call(holder, key, value);
	  }

	  // What happens next depends on the value's type.
	  switch (typeof value) {
	    case 'string':
	      return quote(value);
	    case 'number':
	      // JSON numbers must be finite. Encode non-finite numbers as null.
	      return isFinite(value) ? String(value) : 'null';
	    case 'boolean':
	    case 'null':
	      // If the value is a boolean or null, convert it to a string. Note:
	      // typeof null does not produce 'null'. The case is included here in
	      // the remote chance that this gets fixed someday.
	      return String(value);
	    case 'object':
	      if (!value) {
	        return 'null';
	      }
	      gap += indent;
	      partial = [];

	      // Array.isArray
	      if (Object.prototype.toString.apply(value) === '[object Array]') {
	        length = value.length;
	        for (i = 0; i < length; i += 1) {
	          partial[i] = str(i, value) || 'null';
	        }

	        // Join all of the elements together, separated with commas, and wrap them in brackets.
	        v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']';
	        gap = mind;
	        return v;
	      }

	      // If the replacer is an array, use it to select the members to be stringified.
	      if (rep && typeof rep === 'object') {
	        length = rep.length;
	        for (i = 0; i < length; i += 1) {
	          k = rep[i];
	          if (typeof k === 'string') {
	            v = str(k, value);
	            if (v) {
	              partial.push(quote(k) + (gap ? ': ' : ':') + v);
	            }
	          }
	        }
	      } else {
	        // Otherwise, iterate through all of the keys in the object.
	        for (k in value) {
	          if (Object.prototype.hasOwnProperty.call(value, k)) {
	            v = str(k, value);
	            if (v) {
	              partial.push(quote(k) + (gap ? ': ' : ':') + v);
	            }
	          }
	        }
	      }

	      // Join all of the member texts together, separated with commas, and wrap them in braces.

	      v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}';
	      gap = mind;
	      return v;
	  }
	}
	stringify = function (value, replacer, space) {
	  var i;
	  gap = '';
	  indent = '';

	  // If the space parameter is a number, make an indent string containing that many spaces.
	  if (typeof space === 'number') {
	    for (i = 0; i < space; i += 1) {
	      indent += ' ';
	    }
	  } else if (typeof space === 'string') {
	    // If the space parameter is a string, it will be used as the indent string.
	    indent = space;
	  }

	  // If there is a replacer, it must be a function or an array. Otherwise, throw an error.
	  rep = replacer;
	  if (replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
	    throw new Error('JSON.stringify');
	  }

	  // Make a fake root object containing our value under the key of ''.
	  // Return the result of stringifying the value.
	  return str('', {
	    '': value
	  });
	};
	return stringify;
}

var hasRequiredJsonify;

function requireJsonify () {
	if (hasRequiredJsonify) return jsonify;
	hasRequiredJsonify = 1;

	jsonify.parse = requireParse();
	jsonify.stringify = requireStringify();
	return jsonify;
}

var jsonStableStringify;
var hasRequiredJsonStableStringify;

function requireJsonStableStringify () {
	if (hasRequiredJsonStableStringify) return jsonStableStringify;
	hasRequiredJsonStableStringify = 1;

	var json = typeof JSON !== 'undefined' ? JSON : requireJsonify();
	var isArray = Array.isArray || function (x) {
	  return {}.toString.call(x) === '[object Array]';
	};
	var objectKeys = Object.keys || function (obj) {
	  var has = Object.prototype.hasOwnProperty || function () {
	    return true;
	  };
	  var keys = [];
	  for (var key in obj) {
	    if (has.call(obj, key)) {
	      keys.push(key);
	    }
	  }
	  return keys;
	};
	jsonStableStringify = function (obj, opts) {
	  if (!opts) {
	    opts = {};
	  }
	  if (typeof opts === 'function') {
	    opts = {
	      cmp: opts
	    };
	  }
	  var space = opts.space || '';
	  if (typeof space === 'number') {
	    space = Array(space + 1).join(' ');
	  }
	  var cycles = typeof opts.cycles === 'boolean' ? opts.cycles : false;
	  var replacer = opts.replacer || function (key, value) {
	    return value;
	  };
	  var cmp = opts.cmp && function (f) {
	    return function (node) {
	      return function (a, b) {
	        var aobj = {
	          key: a,
	          value: node[a]
	        };
	        var bobj = {
	          key: b,
	          value: node[b]
	        };
	        return f(aobj, bobj);
	      };
	    };
	  }(opts.cmp);
	  var seen = [];
	  return function stringify(parent, key, node, level) {
	    var indent = space ? '\n' + new Array(level + 1).join(space) : '';
	    var colonSeparator = space ? ': ' : ':';
	    if (node && node.toJSON && typeof node.toJSON === 'function') {
	      node = node.toJSON();
	    }
	    node = replacer.call(parent, key, node);
	    if (node === undefined) {
	      return;
	    }
	    if (typeof node !== 'object' || node === null) {
	      return json.stringify(node);
	    }
	    if (isArray(node)) {
	      var out = [];
	      for (var i = 0; i < node.length; i++) {
	        var item = stringify(node, i, node[i], level + 1) || json.stringify(null);
	        out.push(indent + space + item);
	      }
	      return '[' + out.join(',') + indent + ']';
	    }
	    if (seen.indexOf(node) !== -1) {
	      if (cycles) {
	        return json.stringify('__cycle__');
	      }
	      throw new TypeError('Converting circular structure to JSON');
	    } else {
	      seen.push(node);
	    }
	    var keys = objectKeys(node).sort(cmp && cmp(node));
	    var out = [];
	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];
	      var value = stringify(node, key, node[key], level + 1);
	      if (!value) {
	        continue;
	      }
	      var keyValue = json.stringify(key) + colonSeparator + value;
	      out.push(indent + space + keyValue);
	    }
	    seen.splice(seen.indexOf(node), 1);
	    return '{' + out.join(',') + indent + '}';
	  }({
	    '': obj
	  }, '', obj, 0);
	};
	return jsonStableStringify;
}

var rpcCacheUtils;
var hasRequiredRpcCacheUtils;

function requireRpcCacheUtils () {
	if (hasRequiredRpcCacheUtils) return rpcCacheUtils;
	hasRequiredRpcCacheUtils = 1;
	var stringify = requireJsonStableStringify();
	rpcCacheUtils = {
	  cacheIdentifierForPayload: cacheIdentifierForPayload,
	  canCache: canCache,
	  blockTagForPayload: blockTagForPayload,
	  paramsWithoutBlockTag: paramsWithoutBlockTag,
	  blockTagParamIndex: blockTagParamIndex,
	  cacheTypeForPayload: cacheTypeForPayload
	};
	function cacheIdentifierForPayload(payload) {
	  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  if (!canCache(payload)) return null;
	  var includeBlockRef = opts.includeBlockRef;
	  var params = includeBlockRef ? payload.params : paramsWithoutBlockTag(payload);
	  return payload.method + ':' + stringify(params);
	}
	function canCache(payload) {
	  return cacheTypeForPayload(payload) !== 'never';
	}
	function blockTagForPayload(payload) {
	  var index = blockTagParamIndex(payload);

	  // Block tag param not passed.
	  if (index >= payload.params.length) {
	    return null;
	  }
	  return payload.params[index];
	}
	function paramsWithoutBlockTag(payload) {
	  var index = blockTagParamIndex(payload);

	  // Block tag param not passed.
	  if (index >= payload.params.length) {
	    return payload.params;
	  }

	  // eth_getBlockByNumber has the block tag first, then the optional includeTx? param
	  if (payload.method === 'eth_getBlockByNumber') {
	    return payload.params.slice(1);
	  }
	  return payload.params.slice(0, index);
	}
	function blockTagParamIndex(payload) {
	  switch (payload.method) {
	    // blockTag is third param
	    case 'eth_getStorageAt':
	      return 2;
	    // blockTag is second param
	    case 'eth_getBalance':
	    case 'eth_getCode':
	    case 'eth_getTransactionCount':
	    case 'eth_call':
	    case 'eth_estimateGas':
	      return 1;
	    // blockTag is first param
	    case 'eth_getBlockByNumber':
	      return 0;
	    // there is no blockTag
	    default:
	      return undefined;
	  }
	}
	function cacheTypeForPayload(payload) {
	  switch (payload.method) {
	    // cache permanently
	    case 'web3_clientVersion':
	    case 'web3_sha3':
	    case 'eth_protocolVersion':
	    case 'eth_getBlockTransactionCountByHash':
	    case 'eth_getUncleCountByBlockHash':
	    case 'eth_getCode':
	    case 'eth_getBlockByHash':
	    case 'eth_getTransactionByHash':
	    case 'eth_getTransactionByBlockHashAndIndex':
	    case 'eth_getTransactionReceipt':
	    case 'eth_getUncleByBlockHashAndIndex':
	    case 'eth_getCompilers':
	    case 'eth_compileLLL':
	    case 'eth_compileSolidity':
	    case 'eth_compileSerpent':
	    case 'shh_version':
	      return 'perma';

	    // cache until fork
	    case 'eth_getBlockByNumber':
	    case 'eth_getBlockTransactionCountByNumber':
	    case 'eth_getUncleCountByBlockNumber':
	    case 'eth_getTransactionByBlockNumberAndIndex':
	    case 'eth_getUncleByBlockNumberAndIndex':
	      return 'fork';

	    // cache for block
	    case 'eth_gasPrice':
	    case 'eth_getBalance':
	    case 'eth_getStorageAt':
	    case 'eth_getTransactionCount':
	    case 'eth_call':
	    case 'eth_estimateGas':
	    case 'eth_getFilterLogs':
	    case 'eth_getLogs':
	    case 'eth_blockNumber':
	      return 'block';

	    // never cache
	    case 'net_version':
	    case 'net_peerCount':
	    case 'net_listening':
	    case 'eth_syncing':
	    case 'eth_sign':
	    case 'eth_coinbase':
	    case 'eth_mining':
	    case 'eth_hashrate':
	    case 'eth_accounts':
	    case 'eth_sendTransaction':
	    case 'eth_sendRawTransaction':
	    case 'eth_newFilter':
	    case 'eth_newBlockFilter':
	    case 'eth_newPendingTransactionFilter':
	    case 'eth_uninstallFilter':
	    case 'eth_getFilterChanges':
	    case 'eth_getWork':
	    case 'eth_submitWork':
	    case 'eth_submitHashrate':
	    case 'db_putString':
	    case 'db_getString':
	    case 'db_putHex':
	    case 'db_getHex':
	    case 'shh_post':
	    case 'shh_newIdentity':
	    case 'shh_hasIdentity':
	    case 'shh_newGroup':
	    case 'shh_addToGroup':
	    case 'shh_newFilter':
	    case 'shh_uninstallFilter':
	    case 'shh_getFilterChanges':
	    case 'shh_getMessages':
	      return 'never';
	  }
	}
	return rpcCacheUtils;
}

var randomId;
var hasRequiredRandomId;

function requireRandomId () {
	if (hasRequiredRandomId) return randomId;
	hasRequiredRandomId = 1;
	randomId = createRandomId;
	function createRandomId() {
	  // random id
	  return Math.floor(Number.MAX_SAFE_INTEGER * Math.random());
	}
	return randomId;
}

var createPayload_1;
var hasRequiredCreatePayload;

function requireCreatePayload () {
	if (hasRequiredCreatePayload) return createPayload_1;
	hasRequiredCreatePayload = 1;
	var getRandomId = requireRandomId();
	var extend = requireImmutable();
	createPayload_1 = createPayload;
	function createPayload(data) {
	  return extend({
	    // defaults
	    id: getRandomId(),
	    jsonrpc: '2.0',
	    params: []
	    // user-specified
	  }, data);
	}
	return createPayload_1;
}

var web3ProviderEngine;
var hasRequiredWeb3ProviderEngine;

function requireWeb3ProviderEngine () {
	if (hasRequiredWeb3ProviderEngine) return web3ProviderEngine;
	hasRequiredWeb3ProviderEngine = 1;
	var EventEmitter = require$$0__default["default"].EventEmitter;
	var inherits = require$$0__default$1["default"].inherits;
	var ethUtil = requireDist$3();
	var EthBlockTracker = requirePolling();
	var map = requireMap();
	var eachSeries = requireEachSeries();
	var Stoplight = requireStoplight();
	requireRpcCacheUtils();
	var createPayload = requireCreatePayload();
	web3ProviderEngine = Web3ProviderEngine;
	inherits(Web3ProviderEngine, EventEmitter);
	function Web3ProviderEngine(opts) {
	  var self = this;
	  EventEmitter.call(self);
	  self.setMaxListeners(30);
	  // parse options
	  opts = opts || {};

	  // block polling
	  var directProvider = {
	    sendAsync: self._handleAsync.bind(self)
	  };
	  var blockTrackerProvider = opts.blockTrackerProvider || directProvider;
	  self._blockTracker = opts.blockTracker || new EthBlockTracker({
	    provider: blockTrackerProvider,
	    pollingInterval: opts.pollingInterval || 4000,
	    setSkipCacheFlag: true
	  });

	  // set initialization blocker
	  self._ready = new Stoplight();

	  // local state
	  self.currentBlock = null;
	  self._providers = [];
	}

	// public

	Web3ProviderEngine.prototype.start = function () {
	  var _this = this;
	  var self = this;

	  // trigger start
	  self._ready.go();

	  // on new block, request block body and emit as events
	  self._blockTracker.on('latest', function (blockNumber) {
	    // get block body
	    self._getBlockByNumberWithRetry(blockNumber, function (err, block) {
	      if (err) {
	        _this.emit('error', err);
	        return;
	      }
	      if (!block) {
	        console.log(block);
	        _this.emit('error', new Error("Could not find block"));
	        return;
	      }
	      var bufferBlock = toBufferBlock(block);
	      // set current + emit "block" event
	      self._setCurrentBlock(bufferBlock);
	      // emit other events
	      self.emit('rawBlock', block);
	      self.emit('latest', block);
	    });
	  });

	  // forward other events
	  self._blockTracker.on('sync', self.emit.bind(self, 'sync'));
	  self._blockTracker.on('error', self.emit.bind(self, 'error'));

	  // update state
	  self._running = true;
	  // signal that we started
	  self.emit('start');
	};
	Web3ProviderEngine.prototype.stop = function () {
	  var self = this;
	  // stop block polling by removing event listeners
	  self._blockTracker.removeAllListeners();
	  // update state
	  self._running = false;
	  // signal that we stopped
	  self.emit('stop');
	};
	Web3ProviderEngine.prototype.isRunning = function () {
	  var self = this;
	  return self._running;
	};
	Web3ProviderEngine.prototype.addProvider = function (source, index) {
	  var self = this;
	  if (typeof index === 'number') {
	    self._providers.splice(index, 0, source);
	  } else {
	    self._providers.push(source);
	  }
	  source.setEngine(this);
	};
	Web3ProviderEngine.prototype.removeProvider = function (source) {
	  var self = this;
	  var index = self._providers.indexOf(source);
	  if (index < 0) throw new Error('Provider not found.');
	  self._providers.splice(index, 1);
	};
	Web3ProviderEngine.prototype.send = function (payload) {
	  throw new Error('Web3ProviderEngine does not support synchronous requests.');
	};
	Web3ProviderEngine.prototype.sendAsync = function (payload, cb) {
	  var self = this;
	  self._ready["await"](function () {
	    if (Array.isArray(payload)) {
	      // handle batch
	      map(payload, self._handleAsync.bind(self), cb);
	    } else {
	      // handle single
	      self._handleAsync(payload, cb);
	    }
	  });
	};

	// private

	Web3ProviderEngine.prototype._getBlockByNumberWithRetry = function (blockNumber, cb) {
	  var self = this;
	  var retriesRemaining = 5;
	  attemptRequest();
	  return;
	  function attemptRequest() {
	    self._getBlockByNumber(blockNumber, afterRequest);
	  }
	  function afterRequest(err, block) {
	    // anomalous error occurred
	    if (err) return cb(err);
	    // block not ready yet
	    if (!block) {
	      if (retriesRemaining > 0) {
	        // wait 1s then try again
	        retriesRemaining--;
	        setTimeout(function () {
	          attemptRequest();
	        }, 1000);
	        return;
	      } else {
	        // give up, return a null block
	        cb(null, null);
	        return;
	      }
	    }
	    // otherwise return result
	    cb(null, block);
	    return;
	  }
	};
	Web3ProviderEngine.prototype._getBlockByNumber = function (blockNumber, cb) {
	  var req = createPayload({
	    method: 'eth_getBlockByNumber',
	    params: [blockNumber, false],
	    skipCache: true
	  });
	  this._handleAsync(req, function (err, res) {
	    if (err) return cb(err);
	    return cb(null, res.result);
	  });
	};
	Web3ProviderEngine.prototype._handleAsync = function (payload, finished) {
	  var self = this;
	  var currentProvider = -1;
	  var result = null;
	  var error = null;
	  var stack = [];
	  next();
	  function next(after) {
	    currentProvider += 1;
	    stack.unshift(after);

	    // Bubbled down as far as we could go, and the request wasn't
	    // handled. Return an error.
	    if (currentProvider >= self._providers.length) {
	      end(new Error('Request for method "' + payload.method + '" not handled by any subprovider. Please check your subprovider configuration to ensure this method is handled.'));
	    } else {
	      try {
	        var provider = self._providers[currentProvider];
	        provider.handleRequest(payload, next, end);
	      } catch (e) {
	        end(e);
	      }
	    }
	  }
	  function end(_error, _result) {
	    error = _error;
	    result = _result;
	    eachSeries(stack, function (fn, callback) {
	      if (fn) {
	        fn(error, result, callback);
	      } else {
	        callback();
	      }
	    }, function () {
	      var resultObj = {
	        id: payload.id,
	        jsonrpc: payload.jsonrpc,
	        result: result
	      };
	      if (error != null) {
	        resultObj.error = {
	          message: error.stack || error.message || error,
	          code: -32000
	        };
	        // respond with both error formats
	        finished(error, resultObj);
	      } else {
	        finished(null, resultObj);
	      }
	    });
	  }
	};

	//
	// from remote-data
	//

	Web3ProviderEngine.prototype._setCurrentBlock = function (block) {
	  var self = this;
	  self.currentBlock = block;
	  self.emit('block', block);
	};

	// util

	function toBufferBlock(jsonBlock) {
	  return {
	    number: ethUtil.toBuffer(jsonBlock.number),
	    hash: ethUtil.toBuffer(jsonBlock.hash),
	    parentHash: ethUtil.toBuffer(jsonBlock.parentHash),
	    nonce: ethUtil.toBuffer(jsonBlock.nonce),
	    mixHash: ethUtil.toBuffer(jsonBlock.mixHash),
	    sha3Uncles: ethUtil.toBuffer(jsonBlock.sha3Uncles),
	    logsBloom: ethUtil.toBuffer(jsonBlock.logsBloom),
	    transactionsRoot: ethUtil.toBuffer(jsonBlock.transactionsRoot),
	    stateRoot: ethUtil.toBuffer(jsonBlock.stateRoot),
	    receiptsRoot: ethUtil.toBuffer(jsonBlock.receiptRoot || jsonBlock.receiptsRoot),
	    miner: ethUtil.toBuffer(jsonBlock.miner),
	    difficulty: ethUtil.toBuffer(jsonBlock.difficulty),
	    totalDifficulty: ethUtil.toBuffer(jsonBlock.totalDifficulty),
	    size: ethUtil.toBuffer(jsonBlock.size),
	    extraData: ethUtil.toBuffer(jsonBlock.extraData),
	    gasLimit: ethUtil.toBuffer(jsonBlock.gasLimit),
	    gasUsed: ethUtil.toBuffer(jsonBlock.gasUsed),
	    timestamp: ethUtil.toBuffer(jsonBlock.timestamp),
	    transactions: jsonBlock.transactions
	  };
	}
	return web3ProviderEngine;
}

var subprovider;
var hasRequiredSubprovider;

function requireSubprovider () {
	if (hasRequiredSubprovider) return subprovider;
	hasRequiredSubprovider = 1;
	var createPayload = requireCreatePayload();
	subprovider = SubProvider;

	// this is the base class for a subprovider -- mostly helpers

	function SubProvider() {}
	SubProvider.prototype.setEngine = function (engine) {
	  var self = this;
	  if (self.engine) return;
	  self.engine = engine;
	  engine.on('block', function (block) {
	    self.currentBlock = block;
	  });
	  engine.on('start', function () {
	    self.start();
	  });
	  engine.on('stop', function () {
	    self.stop();
	  });
	};
	SubProvider.prototype.handleRequest = function (payload, next, end) {
	  throw new Error('Subproviders should override `handleRequest`.');
	};
	SubProvider.prototype.emitPayload = function (payload, cb) {
	  var self = this;
	  self.engine.sendAsync(createPayload(payload), cb);
	};

	// dummies for overriding

	SubProvider.prototype.stop = function () {};
	SubProvider.prototype.start = function () {};
	return subprovider;
}

var jsonRpcEngineMiddleware;
var hasRequiredJsonRpcEngineMiddleware;

function requireJsonRpcEngineMiddleware () {
	if (hasRequiredJsonRpcEngineMiddleware) return jsonRpcEngineMiddleware;
	hasRequiredJsonRpcEngineMiddleware = 1;
	var _classCallCheck = classCallCheck.exports;
	var _createClass = createClass.exports;
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf.exports;
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	var Subprovider = requireSubprovider();

	// wraps a json-rpc-engine middleware in a subprovider interface
	var JsonRpcEngineMiddlewareSubprovider = /*#__PURE__*/function (_Subprovider) {

	  _inherits(JsonRpcEngineMiddlewareSubprovider, _Subprovider);
	  var _super = _createSuper(JsonRpcEngineMiddlewareSubprovider);
	  // take a constructorFn to call once we have a reference to the engine
	  function JsonRpcEngineMiddlewareSubprovider(constructorFn) {
	    var _this;
	    _classCallCheck(this, JsonRpcEngineMiddlewareSubprovider);
	    _this = _super.call(this);
	    if (!constructorFn) throw new Error('JsonRpcEngineMiddlewareSubprovider - no constructorFn specified');
	    _this._constructorFn = constructorFn;
	    return _this;
	  }

	  // this is called once the subprovider has been added to the provider engine
	  _createClass(JsonRpcEngineMiddlewareSubprovider, [{
	    key: "setEngine",
	    value: function setEngine(engine) {
	      if (this.middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice');
	      var blockTracker = engine._blockTracker;
	      var middleware = this._constructorFn({
	        engine: engine,
	        provider: engine,
	        blockTracker: blockTracker
	      });
	      if (!middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware');
	      if (typeof middleware !== 'function') throw new Error('JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function');
	      this.middleware = middleware;
	    }
	  }, {
	    key: "handleRequest",
	    value: function handleRequest(req, provEngNext, provEngEnd) {
	      var res = {
	        id: req.id
	      };
	      this.middleware(req, res, middlewareNext, middlewareEnd);
	      function middlewareNext(handler) {
	        provEngNext(function (err, result, cb) {
	          // update response object with result or error
	          if (err) {
	            delete res.result;
	            res.error = {
	              message: err.message || err
	            };
	          } else {
	            res.result = result;
	          }
	          // call middleware's next handler (even if error)
	          if (handler) {
	            handler(cb);
	          } else {
	            cb();
	          }
	        });
	      }
	      function middlewareEnd(err) {
	        if (err) return provEngEnd(err);
	        provEngEnd(null, res.result);
	      }
	    }
	  }]);
	  return JsonRpcEngineMiddlewareSubprovider;
	}(Subprovider);
	jsonRpcEngineMiddleware = JsonRpcEngineMiddlewareSubprovider;
	return jsonRpcEngineMiddleware;
}

var cacheUtils;
var hasRequiredCacheUtils;

function requireCacheUtils () {
	if (hasRequiredCacheUtils) return cacheUtils;
	hasRequiredCacheUtils = 1;
	var stringify = requireJsonStableStringify();
	cacheUtils = {
	  cacheIdentifierForPayload: cacheIdentifierForPayload,
	  canCache: canCache,
	  blockTagForPayload: blockTagForPayload,
	  paramsWithoutBlockTag: paramsWithoutBlockTag,
	  blockTagParamIndex: blockTagParamIndex,
	  cacheTypeForPayload: cacheTypeForPayload
	};
	function cacheIdentifierForPayload(payload, skipBlockRef) {
	  var simpleParams = skipBlockRef ? paramsWithoutBlockTag(payload) : payload.params;
	  if (canCache(payload)) {
	    return payload.method + ':' + stringify(simpleParams);
	  } else {
	    return null;
	  }
	}
	function canCache(payload) {
	  return cacheTypeForPayload(payload) !== 'never';
	}
	function blockTagForPayload(payload) {
	  var index = blockTagParamIndex(payload);

	  // Block tag param not passed.
	  if (index >= payload.params.length) {
	    return null;
	  }
	  return payload.params[index];
	}
	function paramsWithoutBlockTag(payload) {
	  var index = blockTagParamIndex(payload);

	  // Block tag param not passed.
	  if (index >= payload.params.length) {
	    return payload.params;
	  }

	  // eth_getBlockByNumber has the block tag first, then the optional includeTx? param
	  if (payload.method === 'eth_getBlockByNumber') {
	    return payload.params.slice(1);
	  }
	  return payload.params.slice(0, index);
	}
	function blockTagParamIndex(payload) {
	  switch (payload.method) {
	    // blockTag is at index 2
	    case 'eth_getStorageAt':
	      return 2;
	    // blockTag is at index 1
	    case 'eth_getBalance':
	    case 'eth_getCode':
	    case 'eth_getTransactionCount':
	    case 'eth_call':
	      return 1;
	    // blockTag is at index 0
	    case 'eth_getBlockByNumber':
	      return 0;
	    // there is no blockTag
	    default:
	      return undefined;
	  }
	}
	function cacheTypeForPayload(payload) {
	  switch (payload.method) {
	    // cache permanently
	    case 'web3_clientVersion':
	    case 'web3_sha3':
	    case 'eth_protocolVersion':
	    case 'eth_getBlockTransactionCountByHash':
	    case 'eth_getUncleCountByBlockHash':
	    case 'eth_getCode':
	    case 'eth_getBlockByHash':
	    case 'eth_getTransactionByHash':
	    case 'eth_getTransactionByBlockHashAndIndex':
	    case 'eth_getTransactionReceipt':
	    case 'eth_getUncleByBlockHashAndIndex':
	    case 'eth_getCompilers':
	    case 'eth_compileLLL':
	    case 'eth_compileSolidity':
	    case 'eth_compileSerpent':
	    case 'shh_version':
	    case 'test_permaCache':
	      return 'perma';

	    // cache until fork
	    case 'eth_getBlockByNumber':
	    case 'eth_getBlockTransactionCountByNumber':
	    case 'eth_getUncleCountByBlockNumber':
	    case 'eth_getTransactionByBlockNumberAndIndex':
	    case 'eth_getUncleByBlockNumberAndIndex':
	    case 'test_forkCache':
	      return 'fork';

	    // cache for block
	    case 'eth_gasPrice':
	    case 'eth_blockNumber':
	    case 'eth_getBalance':
	    case 'eth_getStorageAt':
	    case 'eth_getTransactionCount':
	    case 'eth_call':
	    case 'eth_estimateGas':
	    case 'eth_getFilterLogs':
	    case 'eth_getLogs':
	    case 'test_blockCache':
	      return 'block';

	    // never cache
	    case 'net_version':
	    case 'net_peerCount':
	    case 'net_listening':
	    case 'eth_syncing':
	    case 'eth_sign':
	    case 'eth_coinbase':
	    case 'eth_mining':
	    case 'eth_hashrate':
	    case 'eth_accounts':
	    case 'eth_sendTransaction':
	    case 'eth_sendRawTransaction':
	    case 'eth_newFilter':
	    case 'eth_newBlockFilter':
	    case 'eth_newPendingTransactionFilter':
	    case 'eth_uninstallFilter':
	    case 'eth_getFilterChanges':
	    case 'eth_getWork':
	    case 'eth_submitWork':
	    case 'eth_submitHashrate':
	    case 'db_putString':
	    case 'db_getString':
	    case 'db_putHex':
	    case 'db_getHex':
	    case 'shh_post':
	    case 'shh_newIdentity':
	    case 'shh_hasIdentity':
	    case 'shh_newGroup':
	    case 'shh_addToGroup':
	    case 'shh_newFilter':
	    case 'shh_uninstallFilter':
	    case 'shh_getFilterChanges':
	    case 'shh_getMessages':
	    case 'test_neverCache':
	      return 'never';
	  }
	}
	return cacheUtils;
}

var createAsyncMiddleware$1;
var hasRequiredCreateAsyncMiddleware$1;

function requireCreateAsyncMiddleware$1 () {
	if (hasRequiredCreateAsyncMiddleware$1) return createAsyncMiddleware$1;
	hasRequiredCreateAsyncMiddleware$1 = 1;
	var _regeneratorRuntime = regenerator;
	var _asyncToGenerator = requireAsyncToGenerator();
	/**
	 * JsonRpcEngine only accepts callback-based middleware directly.
	 * createAsyncMiddleware exists to enable consumers to pass in async middleware
	 * functions.
	 *
	 * Async middleware have no "end" function. Instead, they "end" if they return
	 * without calling "next". Rather than passing in explicit return handlers,
	 * async middleware can simply await "next", and perform operations on the
	 * response object when execution resumes.
	 *
	 * To accomplish this, createAsyncMiddleware passes the async middleware a
	 * wrapped "next" function. That function calls the internal JsonRpcEngine
	 * "next" function with a return handler that resolves a promise when called.
	 *
	 * The return handler will always be called. Its resolution of the promise
	 * enables the control flow described above.
	 */

	createAsyncMiddleware$1 = function createAsyncMiddleware(asyncMiddleware) {
	  return function (req, res, next, end) {
	    // nextPromise is the key to the implementation
	    // it is resolved by the return handler passed to the
	    // "next" function
	    var resolveNextPromise;
	    var nextPromise = new Promise(function (resolve) {
	      resolveNextPromise = resolve;
	    });
	    var returnHandlerCallback, nextWasCalled;
	    var asyncNext = /*#__PURE__*/function () {
	      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
	        return _regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                nextWasCalled = true;
	                next(function (callback) {
	                  // eslint-disable-line callback-return
	                  returnHandlerCallback = callback;
	                  resolveNextPromise();
	                });
	                _context.next = 4;
	                return nextPromise;
	              case 4:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee);
	      }));
	      return function asyncNext() {
	        return _ref.apply(this, arguments);
	      };
	    }();
	    asyncMiddleware(req, res, asyncNext).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
	      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              if (!nextWasCalled) {
	                _context2.next = 6;
	                break;
	              }
	              _context2.next = 3;
	              return nextPromise;
	            case 3:
	              // we must wait until the return handler is called
	              returnHandlerCallback(null);
	              _context2.next = 7;
	              break;
	            case 6:
	              end(null);
	            case 7:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2);
	    })))["catch"](function (error) {
	      if (returnHandlerCallback) {
	        returnHandlerCallback(error);
	      } else {
	        end(error);
	      }
	    });
	  };
	};
	return createAsyncMiddleware$1;
}

var blockCache;
var hasRequiredBlockCache;

function requireBlockCache () {
	if (hasRequiredBlockCache) return blockCache;
	hasRequiredBlockCache = 1;
	var _classCallCheck = classCallCheck.exports;
	var _createClass = createClass.exports;
	var _regeneratorRuntime = regenerator;
	var _asyncToGenerator = requireAsyncToGenerator();
	var cacheUtils = requireCacheUtils();
	var createAsyncMiddleware = requireCreateAsyncMiddleware$1();
	// `<nil>` comes from https://github.com/ethereum/go-ethereum/issues/16925
	var emptyValues = [undefined, null, "<nil>"];
	blockCache = createBlockCacheMiddleware;
	function createBlockCacheMiddleware() {
	  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  // validate options
	  var blockTracker = opts.blockTracker;
	  if (!blockTracker) throw new Error('createBlockCacheMiddleware - No BlockTracker specified');

	  // create caching strategies
	  var blockCache = new BlockCacheStrategy();
	  var strategies = {
	    perma: blockCache,
	    block: blockCache,
	    fork: blockCache
	  };
	  return createAsyncMiddleware( /*#__PURE__*/function () {
	    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res, next) {
	      var type, strategy, blockTag, requestedBlockNumber, latestBlockNumber, cacheResult;
	      return _regeneratorRuntime.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              if (!req.skipCache) {
	                _context.next = 2;
	                break;
	              }
	              return _context.abrupt("return", next());
	            case 2:
	              // check type and matching strategy
	              type = cacheUtils.cacheTypeForPayload(req);
	              strategy = strategies[type]; // If there's no strategy in place, pass it down the chain.
	              if (strategy) {
	                _context.next = 6;
	                break;
	              }
	              return _context.abrupt("return", next());
	            case 6:
	              if (strategy.canCacheRequest(req)) {
	                _context.next = 8;
	                break;
	              }
	              return _context.abrupt("return", next());
	            case 8:
	              // get block reference (number or keyword)
	              blockTag = cacheUtils.blockTagForPayload(req);
	              if (!blockTag) blockTag = 'latest';

	              // get exact block number
	              if (!(blockTag === 'earliest')) {
	                _context.next = 14;
	                break;
	              }
	              // this just exists for symmetry with "latest"
	              requestedBlockNumber = '0x00';
	              _context.next = 23;
	              break;
	            case 14:
	              if (!(blockTag === 'latest')) {
	                _context.next = 22;
	                break;
	              }
	              _context.next = 17;
	              return blockTracker.getLatestBlock();
	            case 17:
	              latestBlockNumber = _context.sent;
	              // clear all cache before latest block
	              blockCache.clearBefore(latestBlockNumber);
	              requestedBlockNumber = latestBlockNumber;
	              _context.next = 23;
	              break;
	            case 22:
	              // We have a hex number
	              requestedBlockNumber = blockTag;
	            case 23:
	              _context.next = 25;
	              return strategy.get(req, requestedBlockNumber);
	            case 25:
	              cacheResult = _context.sent;
	              if (!(cacheResult === undefined)) {
	                _context.next = 33;
	                break;
	              }
	              _context.next = 29;
	              return next();
	            case 29:
	              _context.next = 31;
	              return strategy.set(req, requestedBlockNumber, res.result);
	            case 31:
	              _context.next = 34;
	              break;
	            case 33:
	              // fill in result from cache
	              res.result = cacheResult;
	            case 34:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee);
	    }));
	    return function (_x, _x2, _x3) {
	      return _ref.apply(this, arguments);
	    };
	  }());
	}

	//
	// Cache Strategies
	//
	var BlockCacheStrategy = /*#__PURE__*/function () {

	  function BlockCacheStrategy() {
	    _classCallCheck(this, BlockCacheStrategy);
	    this.cache = {};
	  }
	  _createClass(BlockCacheStrategy, [{
	    key: "getBlockCacheForPayload",
	    value: function getBlockCacheForPayload(payload, blockNumberHex) {
	      var blockNumber = Number.parseInt(blockNumberHex, 16);
	      var blockCache = this.cache[blockNumber];
	      // create new cache if necesary
	      if (!blockCache) {
	        var newCache = {};
	        this.cache[blockNumber] = newCache;
	        blockCache = newCache;
	      }
	      return blockCache;
	    }
	  }, {
	    key: "get",
	    value: function () {
	      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(payload, requestedBlockNumber) {
	        var blockCache, identifier, cached;
	        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                // lookup block cache
	                blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber);
	                if (blockCache) {
	                  _context2.next = 3;
	                  break;
	                }
	                return _context2.abrupt("return");
	              case 3:
	                // lookup payload in block cache
	                identifier = cacheUtils.cacheIdentifierForPayload(payload, true);
	                cached = blockCache[identifier]; // may be undefined
	                return _context2.abrupt("return", cached);
	              case 6:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));
	      function get(_x4, _x5) {
	        return _get.apply(this, arguments);
	      }
	      return get;
	    }()
	  }, {
	    key: "set",
	    value: function () {
	      var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(payload, requestedBlockNumber, result) {
	        var canCache, blockCache, identifier;
	        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                // check if we can cached this result
	                canCache = this.canCacheResult(payload, result);
	                if (canCache) {
	                  _context3.next = 3;
	                  break;
	                }
	                return _context3.abrupt("return");
	              case 3:
	                // set the value in the cache
	                blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber);
	                identifier = cacheUtils.cacheIdentifierForPayload(payload, true);
	                blockCache[identifier] = result;
	              case 6:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));
	      function set(_x6, _x7, _x8) {
	        return _set.apply(this, arguments);
	      }
	      return set;
	    }()
	  }, {
	    key: "canCacheRequest",
	    value: function canCacheRequest(payload) {
	      // check request method
	      if (!cacheUtils.canCache(payload)) {
	        return false;
	      }
	      // check blockTag
	      var blockTag = cacheUtils.blockTagForPayload(payload);
	      if (blockTag === 'pending') {
	        return false;
	      }
	      // can be cached
	      return true;
	    }
	  }, {
	    key: "canCacheResult",
	    value: function canCacheResult(payload, result) {
	      // never cache empty values (e.g. undefined)
	      if (emptyValues.includes(result)) return;
	      // check if transactions have block reference before caching
	      if (['eth_getTransactionByHash', 'eth_getTransactionReceipt'].includes(payload.method)) {
	        if (!result || !result.blockHash || result.blockHash === '0x0000000000000000000000000000000000000000000000000000000000000000') {
	          return false;
	        }
	      }
	      // otherwise true
	      return true;
	    }

	    // removes all block caches with block number lower than `oldBlockHex`
	  }, {
	    key: "clearBefore",
	    value: function clearBefore(oldBlockHex) {
	      var self = this;
	      var oldBlockNumber = Number.parseInt(oldBlockHex, 16);
	      // clear old caches
	      Object.keys(self.cache).map(Number).filter(function (num) {
	        return num < oldBlockNumber;
	      }).forEach(function (num) {
	        return delete self.cache[num];
	      });
	    }
	  }]);
	  return BlockCacheStrategy;
	}();
	return blockCache;
}

var cache;
var hasRequiredCache;

function requireCache () {
	if (hasRequiredCache) return cache;
	hasRequiredCache = 1;
	var _createClass = createClass.exports;
	var _classCallCheck = classCallCheck.exports;
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf.exports;
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	var ProviderSubprovider = requireJsonRpcEngineMiddleware();
	var createBlockCacheMiddleware = requireBlockCache();
	var BlockCacheSubprovider = /*#__PURE__*/function (_ProviderSubprovider) {

	  _inherits(BlockCacheSubprovider, _ProviderSubprovider);
	  var _super = _createSuper(BlockCacheSubprovider);
	  function BlockCacheSubprovider(opts) {
	    _classCallCheck(this, BlockCacheSubprovider);
	    return _super.call(this, function (_ref) {
	      var blockTracker = _ref.blockTracker;
	      return createBlockCacheMiddleware(Object.assign({
	        blockTracker: blockTracker
	      }, opts));
	    });
	  }
	  return _createClass(BlockCacheSubprovider);
	}(ProviderSubprovider);
	cache = BlockCacheSubprovider;
	return cache;
}

var fixture;
var hasRequiredFixture;

function requireFixture () {
	if (hasRequiredFixture) return fixture;
	hasRequiredFixture = 1;
	var inherits = require$$0__default$1["default"].inherits;
	var Subprovider = requireSubprovider();
	fixture = FixtureProvider;
	inherits(FixtureProvider, Subprovider);
	function FixtureProvider(staticResponses) {
	  var self = this;
	  staticResponses = staticResponses || {};
	  self.staticResponses = staticResponses;
	}
	FixtureProvider.prototype.handleRequest = function (payload, next, end) {
	  var self = this;
	  var staticResponse = self.staticResponses[payload.method];
	  // async function
	  if ('function' === typeof staticResponse) {
	    staticResponse(payload, next, end);
	    // static response - null is valid response
	  } else if (staticResponse !== undefined) {
	    // return result asynchronously
	    setTimeout(function () {
	      return end(null, staticResponse);
	    });
	    // no prepared response - skip
	  } else {
	    next();
	  }
	};
	return fixture;
}

var lib$1 = {};

var Mutex = {};

var Semaphore = {};

var hasRequiredSemaphore$1;

function requireSemaphore$1 () {
	if (hasRequiredSemaphore$1) return Semaphore;
	hasRequiredSemaphore$1 = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var tslib_1 = require$$7;
		var Semaphore = /** @class */function () {
		  function Semaphore(_maxConcurrency) {
		    this._maxConcurrency = _maxConcurrency;
		    this._queue = [];
		    if (_maxConcurrency <= 0) {
		      throw new Error('semaphore must be initialized to a positive value');
		    }
		    this._value = _maxConcurrency;
		  }
		  Semaphore.prototype.acquire = function () {
		    var _this = this;
		    var locked = this.isLocked();
		    var ticket = new Promise(function (r) {
		      return _this._queue.push(r);
		    });
		    if (!locked) this._dispatch();
		    return ticket;
		  };
		  Semaphore.prototype.runExclusive = function (callback) {
		    return tslib_1.__awaiter(this, void 0, void 0, function () {
		      var _a, value, release;
		      return tslib_1.__generator(this, function (_b) {
		        switch (_b.label) {
		          case 0:
		            return [4 /*yield*/, this.acquire()];
		          case 1:
		            _a = _b.sent(), value = _a[0], release = _a[1];
		            _b.label = 2;
		          case 2:
		            _b.trys.push([2,, 4, 5]);
		            return [4 /*yield*/, callback(value)];
		          case 3:
		            return [2 /*return*/, _b.sent()];
		          case 4:
		            release();
		            return [7 /*endfinally*/];
		          case 5:
		            return [2 /*return*/];
		        }
		      });
		    });
		  };

		  Semaphore.prototype.isLocked = function () {
		    return this._value <= 0;
		  };
		  Semaphore.prototype.release = function () {
		    if (this._maxConcurrency > 1) {
		      throw new Error('this method is unavailabel on semaphores with concurrency > 1; use the scoped release returned by acquire instead');
		    }
		    if (this._currentReleaser) {
		      var releaser = this._currentReleaser;
		      this._currentReleaser = undefined;
		      releaser();
		    }
		  };
		  Semaphore.prototype._dispatch = function () {
		    var _this = this;
		    var nextConsumer = this._queue.shift();
		    if (!nextConsumer) return;
		    var released = false;
		    this._currentReleaser = function () {
		      if (released) return;
		      released = true;
		      _this._value++;
		      _this._dispatch();
		    };
		    nextConsumer([this._value--, this._currentReleaser]);
		  };
		  return Semaphore;
		}();
		exports["default"] = Semaphore;
} (Semaphore));
	return Semaphore;
}

var hasRequiredMutex;

function requireMutex () {
	if (hasRequiredMutex) return Mutex;
	hasRequiredMutex = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var tslib_1 = require$$7;
		var Semaphore_1 = requireSemaphore$1();
		var Mutex = /** @class */function () {
		  function Mutex() {
		    this._semaphore = new Semaphore_1["default"](1);
		  }
		  Mutex.prototype.acquire = function () {
		    return tslib_1.__awaiter(this, void 0, void 0, function () {
		      var _a, releaser;
		      return tslib_1.__generator(this, function (_b) {
		        switch (_b.label) {
		          case 0:
		            return [4 /*yield*/, this._semaphore.acquire()];
		          case 1:
		            _a = _b.sent(), releaser = _a[1];
		            return [2 /*return*/, releaser];
		        }
		      });
		    });
		  };
		  Mutex.prototype.runExclusive = function (callback) {
		    return this._semaphore.runExclusive(function () {
		      return callback();
		    });
		  };
		  Mutex.prototype.isLocked = function () {
		    return this._semaphore.isLocked();
		  };
		  Mutex.prototype.release = function () {
		    this._semaphore.release();
		  };
		  return Mutex;
		}();
		exports["default"] = Mutex;
} (Mutex));
	return Mutex;
}

var withTimeout = {};

var hasRequiredWithTimeout;

function requireWithTimeout () {
	if (hasRequiredWithTimeout) return withTimeout;
	hasRequiredWithTimeout = 1;

	Object.defineProperty(withTimeout, "__esModule", {
	  value: true
	});
	withTimeout.withTimeout = void 0;
	var tslib_1 = require$$7;
	// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
	function withTimeout$1(sync, timeout, timeoutError) {
	  var _this = this;
	  if (timeoutError === void 0) {
	    timeoutError = new Error('timeout');
	  }
	  return {
	    acquire: function acquire() {
	      return new Promise(function (resolve, reject) {
	        return tslib_1.__awaiter(_this, void 0, void 0, function () {
	          var isTimeout, ticket, release;
	          return tslib_1.__generator(this, function (_a) {
	            switch (_a.label) {
	              case 0:
	                isTimeout = false;
	                setTimeout(function () {
	                  isTimeout = true;
	                  reject(timeoutError);
	                }, timeout);
	                return [4 /*yield*/, sync.acquire()];
	              case 1:
	                ticket = _a.sent();
	                if (isTimeout) {
	                  release = Array.isArray(ticket) ? ticket[1] : ticket;
	                  release();
	                } else {
	                  resolve(ticket);
	                }
	                return [2 /*return*/];
	            }
	          });
	        });
	      });
	    },

	    runExclusive: function runExclusive(callback) {
	      return tslib_1.__awaiter(this, void 0, void 0, function () {
	        var release, ticket;
	        return tslib_1.__generator(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              release = function release() {
	                return undefined;
	              };
	              _a.label = 1;
	            case 1:
	              _a.trys.push([1,, 7, 8]);
	              return [4 /*yield*/, this.acquire()];
	            case 2:
	              ticket = _a.sent();
	              if (!Array.isArray(ticket)) return [3 /*break*/, 4];
	              release = ticket[1];
	              return [4 /*yield*/, callback(ticket[0])];
	            case 3:
	              return [2 /*return*/, _a.sent()];
	            case 4:
	              release = ticket;
	              return [4 /*yield*/, callback()];
	            case 5:
	              return [2 /*return*/, _a.sent()];
	            case 6:
	              return [3 /*break*/, 8];
	            case 7:
	              release();
	              return [7 /*endfinally*/];
	            case 8:
	              return [2 /*return*/];
	          }
	        });
	      });
	    },

	    release: function release() {
	      sync.release();
	    },
	    isLocked: function isLocked() {
	      return sync.isLocked();
	    }
	  };
	}
	withTimeout.withTimeout = withTimeout$1;
	return withTimeout;
}

var hasRequiredLib$1;

function requireLib$1 () {
	if (hasRequiredLib$1) return lib$1;
	hasRequiredLib$1 = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.withTimeout = exports.Semaphore = exports.Mutex = void 0;
		var Mutex_1 = requireMutex();
		Object.defineProperty(exports, "Mutex", {
		  enumerable: true,
		  get: function get() {
		    return Mutex_1["default"];
		  }
		});
		var Semaphore_1 = requireSemaphore$1();
		Object.defineProperty(exports, "Semaphore", {
		  enumerable: true,
		  get: function get() {
		    return Semaphore_1["default"];
		  }
		});
		var withTimeout_1 = requireWithTimeout();
		Object.defineProperty(exports, "withTimeout", {
		  enumerable: true,
		  get: function get() {
		    return withTimeout_1.withTimeout;
		  }
		});
} (lib$1));
	return lib$1;
}

var dist$2 = {};

var idRemapMiddleware = {};

var getUniqueId = {};

var hasRequiredGetUniqueId;

function requireGetUniqueId () {
	if (hasRequiredGetUniqueId) return getUniqueId;
	hasRequiredGetUniqueId = 1;

	Object.defineProperty(getUniqueId, "__esModule", {
	  value: true
	});
	getUniqueId.getUniqueId = void 0;
	// uint32 (two's complement) max
	// more conservative than Number.MAX_SAFE_INTEGER
	var MAX = 4294967295;
	var idCounter = Math.floor(Math.random() * MAX);
	function getUniqueId$1() {
	  idCounter = (idCounter + 1) % MAX;
	  return idCounter;
	}
	getUniqueId.getUniqueId = getUniqueId$1;
	return getUniqueId;
}

var hasRequiredIdRemapMiddleware;

function requireIdRemapMiddleware () {
	if (hasRequiredIdRemapMiddleware) return idRemapMiddleware;
	hasRequiredIdRemapMiddleware = 1;

	Object.defineProperty(idRemapMiddleware, "__esModule", {
	  value: true
	});
	idRemapMiddleware.createIdRemapMiddleware = void 0;
	var getUniqueId_1 = requireGetUniqueId();
	function createIdRemapMiddleware() {
	  return function (req, res, next, _end) {
	    var originalId = req.id;
	    var newId = getUniqueId_1.getUniqueId();
	    req.id = newId;
	    res.id = newId;
	    next(function (done) {
	      req.id = originalId;
	      res.id = originalId;
	      done();
	    });
	  };
	}
	idRemapMiddleware.createIdRemapMiddleware = createIdRemapMiddleware;
	return idRemapMiddleware;
}

var createAsyncMiddleware = {};

var hasRequiredCreateAsyncMiddleware;

function requireCreateAsyncMiddleware () {
	if (hasRequiredCreateAsyncMiddleware) return createAsyncMiddleware;
	hasRequiredCreateAsyncMiddleware = 1;

	var _regeneratorRuntime = regenerator;
	var _asyncToGenerator = requireAsyncToGenerator();
	Object.defineProperty(createAsyncMiddleware, "__esModule", {
	  value: true
	});
	createAsyncMiddleware.createAsyncMiddleware = void 0;
	/**
	 * JsonRpcEngine only accepts callback-based middleware directly.
	 * createAsyncMiddleware exists to enable consumers to pass in async middleware
	 * functions.
	 *
	 * Async middleware have no "end" function. Instead, they "end" if they return
	 * without calling "next". Rather than passing in explicit return handlers,
	 * async middleware can simply await "next", and perform operations on the
	 * response object when execution resumes.
	 *
	 * To accomplish this, createAsyncMiddleware passes the async middleware a
	 * wrapped "next" function. That function calls the internal JsonRpcEngine
	 * "next" function with a return handler that resolves a promise when called.
	 *
	 * The return handler will always be called. Its resolution of the promise
	 * enables the control flow described above.
	 */
	function createAsyncMiddleware$1(asyncMiddleware) {
	  return /*#__PURE__*/function () {
	    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req, res, next, end) {
	      var resolveNextPromise, nextPromise, returnHandlerCallback, nextWasCalled, asyncNext;
	      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              // nextPromise is the key to the implementation
	              // it is resolved by the return handler passed to the
	              // "next" function
	              nextPromise = new Promise(function (resolve) {
	                resolveNextPromise = resolve;
	              });
	              returnHandlerCallback = null;
	              nextWasCalled = false; // This will be called by the consumer's async middleware.
	              asyncNext = /*#__PURE__*/function () {
	                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
	                  return _regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                      switch (_context.prev = _context.next) {
	                        case 0:
	                          nextWasCalled = true;
	                          // We pass a return handler to next(). When it is called by the engine,
	                          // the consumer's async middleware will resume executing.
	                          // eslint-disable-next-line node/callback-return
	                          next(function (runReturnHandlersCallback) {
	                            // This callback comes from JsonRpcEngine._runReturnHandlers
	                            returnHandlerCallback = runReturnHandlersCallback;
	                            resolveNextPromise();
	                          });
	                          _context.next = 4;
	                          return nextPromise;
	                        case 4:
	                        case "end":
	                          return _context.stop();
	                      }
	                    }
	                  }, _callee);
	                }));
	                return function asyncNext() {
	                  return _ref2.apply(this, arguments);
	                };
	              }();
	              _context2.prev = 4;
	              _context2.next = 7;
	              return asyncMiddleware(req, res, asyncNext);
	            case 7:
	              if (!nextWasCalled) {
	                _context2.next = 13;
	                break;
	              }
	              _context2.next = 10;
	              return nextPromise;
	            case 10:
	              // we must wait until the return handler is called
	              returnHandlerCallback(null);
	              _context2.next = 14;
	              break;
	            case 13:
	              end(null);
	            case 14:
	              _context2.next = 19;
	              break;
	            case 16:
	              _context2.prev = 16;
	              _context2.t0 = _context2["catch"](4);
	              if (returnHandlerCallback) {
	                returnHandlerCallback(_context2.t0);
	              } else {
	                end(_context2.t0);
	              }
	            case 19:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2, null, [[4, 16]]);
	    }));
	    return function (_x, _x2, _x3, _x4) {
	      return _ref.apply(this, arguments);
	    };
	  }();
	}
	createAsyncMiddleware.createAsyncMiddleware = createAsyncMiddleware$1;
	return createAsyncMiddleware;
}

var createScaffoldMiddleware$1 = {};

var hasRequiredCreateScaffoldMiddleware$1;

function requireCreateScaffoldMiddleware$1 () {
	if (hasRequiredCreateScaffoldMiddleware$1) return createScaffoldMiddleware$1;
	hasRequiredCreateScaffoldMiddleware$1 = 1;

	Object.defineProperty(createScaffoldMiddleware$1, "__esModule", {
	  value: true
	});
	createScaffoldMiddleware$1.createScaffoldMiddleware = void 0;
	function createScaffoldMiddleware(handlers) {
	  return function (req, res, next, end) {
	    var handler = handlers[req.method];
	    // if no handler, return
	    if (handler === undefined) {
	      return next();
	    }
	    // if handler is fn, call as middleware
	    if (typeof handler === 'function') {
	      return handler(req, res, next, end);
	    }
	    // if handler is some other value, use as result
	    res.result = handler;
	    return end();
	  };
	}
	createScaffoldMiddleware$1.createScaffoldMiddleware = createScaffoldMiddleware;
	return createScaffoldMiddleware$1;
}

var JsonRpcEngine = {};

var safeEventEmitter = {};

var hasRequiredSafeEventEmitter;

function requireSafeEventEmitter () {
	if (hasRequiredSafeEventEmitter) return safeEventEmitter;
	hasRequiredSafeEventEmitter = 1;
	(function (exports) {

		var _classCallCheck = classCallCheck.exports;
		var _createClass = createClass.exports;
		var _inherits = inherits.exports;
		var _possibleConstructorReturn = possibleConstructorReturn.exports;
		var _getPrototypeOf = getPrototypeOf.exports;
		function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
		function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var events_1 = require$$0__default["default"];
		function safeApply(handler, context, args) {
		  try {
		    Reflect.apply(handler, context, args);
		  } catch (err) {
		    // Throw error after timeout so as not to interrupt the stack
		    setTimeout(function () {
		      throw err;
		    });
		  }
		}
		function arrayClone(arr) {
		  var n = arr.length;
		  var copy = new Array(n);
		  for (var i = 0; i < n; i += 1) {
		    copy[i] = arr[i];
		  }
		  return copy;
		}
		var SafeEventEmitter = /*#__PURE__*/function (_events_1$EventEmitte) {
		  _inherits(SafeEventEmitter, _events_1$EventEmitte);
		  var _super = _createSuper(SafeEventEmitter);
		  function SafeEventEmitter() {
		    _classCallCheck(this, SafeEventEmitter);
		    return _super.apply(this, arguments);
		  }
		  _createClass(SafeEventEmitter, [{
		    key: "emit",
		    value: function emit(type) {
		      var doError = type === 'error';
		      var events = this._events;
		      if (events !== undefined) {
		        doError = doError && events.error === undefined;
		      } else if (!doError) {
		        return false;
		      }
		      // If there is no 'error' event listener then throw.
		      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		        args[_key - 1] = arguments[_key];
		      }
		      if (doError) {
		        var er;
		        if (args.length > 0) {
		          er = args[0];
		        }
		        if (er instanceof Error) {
		          // Note: The comments on the `throw` lines are intentional, they show
		          // up in Node's output if this results in an unhandled exception.
		          throw er; // Unhandled 'error' event
		        }
		        // At least give some kind of context to the user
		        var err = new Error("Unhandled error.".concat(er ? " (".concat(er.message, ")") : ''));
		        err.context = er;
		        throw err; // Unhandled 'error' event
		      }

		      var handler = events[type];
		      if (handler === undefined) {
		        return false;
		      }
		      if (typeof handler === 'function') {
		        safeApply(handler, this, args);
		      } else {
		        var len = handler.length;
		        var listeners = arrayClone(handler);
		        for (var i = 0; i < len; i += 1) {
		          safeApply(listeners[i], this, args);
		        }
		      }
		      return true;
		    }
		  }]);
		  return SafeEventEmitter;
		}(events_1.EventEmitter);
		exports["default"] = SafeEventEmitter;
} (safeEventEmitter));
	return safeEventEmitter;
}

var dist$1 = {};

var classes = {};

var wrapNativeSuper = {exports: {}};

var isNativeFunction = {exports: {}};

var hasRequiredIsNativeFunction;

function requireIsNativeFunction () {
	if (hasRequiredIsNativeFunction) return isNativeFunction.exports;
	hasRequiredIsNativeFunction = 1;
	(function (module) {
		function _isNativeFunction(fn) {
		  return Function.toString.call(fn).indexOf("[native code]") !== -1;
		}
		module.exports = _isNativeFunction, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (isNativeFunction));
	return isNativeFunction.exports;
}

var construct = {exports: {}};

var isNativeReflectConstruct = {exports: {}};

var hasRequiredIsNativeReflectConstruct;

function requireIsNativeReflectConstruct () {
	if (hasRequiredIsNativeReflectConstruct) return isNativeReflectConstruct.exports;
	hasRequiredIsNativeReflectConstruct = 1;
	(function (module) {
		function _isNativeReflectConstruct() {
		  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
		  if (Reflect.construct.sham) return false;
		  if (typeof Proxy === "function") return true;
		  try {
		    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
		    return true;
		  } catch (e) {
		    return false;
		  }
		}
		module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (isNativeReflectConstruct));
	return isNativeReflectConstruct.exports;
}

var hasRequiredConstruct;

function requireConstruct () {
	if (hasRequiredConstruct) return construct.exports;
	hasRequiredConstruct = 1;
	(function (module) {
		var setPrototypeOf$1 = setPrototypeOf.exports;
		var isNativeReflectConstruct = requireIsNativeReflectConstruct();
		function _construct(Parent, args, Class) {
		  if (isNativeReflectConstruct()) {
		    module.exports = _construct = Reflect.construct.bind(), module.exports.__esModule = true, module.exports["default"] = module.exports;
		  } else {
		    module.exports = _construct = function _construct(Parent, args, Class) {
		      var a = [null];
		      a.push.apply(a, args);
		      var Constructor = Function.bind.apply(Parent, a);
		      var instance = new Constructor();
		      if (Class) setPrototypeOf$1(instance, Class.prototype);
		      return instance;
		    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
		  }
		  return _construct.apply(null, arguments);
		}
		module.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (construct));
	return construct.exports;
}

var hasRequiredWrapNativeSuper;

function requireWrapNativeSuper () {
	if (hasRequiredWrapNativeSuper) return wrapNativeSuper.exports;
	hasRequiredWrapNativeSuper = 1;
	(function (module) {
		var getPrototypeOf$1 = getPrototypeOf.exports;
		var setPrototypeOf$1 = setPrototypeOf.exports;
		var isNativeFunction = requireIsNativeFunction();
		var construct = requireConstruct();
		function _wrapNativeSuper(Class) {
		  var _cache = typeof Map === "function" ? new Map() : undefined;
		  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
		    if (Class === null || !isNativeFunction(Class)) return Class;
		    if (typeof Class !== "function") {
		      throw new TypeError("Super expression must either be null or a function");
		    }
		    if (typeof _cache !== "undefined") {
		      if (_cache.has(Class)) return _cache.get(Class);
		      _cache.set(Class, Wrapper);
		    }
		    function Wrapper() {
		      return construct(Class, arguments, getPrototypeOf$1(this).constructor);
		    }
		    Wrapper.prototype = Object.create(Class.prototype, {
		      constructor: {
		        value: Wrapper,
		        enumerable: false,
		        writable: true,
		        configurable: true
		      }
		    });
		    return setPrototypeOf$1(Wrapper, Class);
		  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
		  return _wrapNativeSuper(Class);
		}
		module.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports["default"] = module.exports;
} (wrapNativeSuper));
	return wrapNativeSuper.exports;
}

var fastSafeStringify;
var hasRequiredFastSafeStringify;

function requireFastSafeStringify () {
	if (hasRequiredFastSafeStringify) return fastSafeStringify;
	hasRequiredFastSafeStringify = 1;
	fastSafeStringify = stringify;
	stringify["default"] = stringify;
	stringify.stable = deterministicStringify;
	stringify.stableStringify = deterministicStringify;
	var LIMIT_REPLACE_NODE = '[...]';
	var CIRCULAR_REPLACE_NODE = '[Circular]';
	var arr = [];
	var replacerStack = [];
	function defaultOptions() {
	  return {
	    depthLimit: Number.MAX_SAFE_INTEGER,
	    edgesLimit: Number.MAX_SAFE_INTEGER
	  };
	}

	// Regular stringify
	function stringify(obj, replacer, spacer, options) {
	  if (typeof options === 'undefined') {
	    options = defaultOptions();
	  }
	  decirc(obj, '', 0, [], undefined, 0, options);
	  var res;
	  try {
	    if (replacerStack.length === 0) {
	      res = JSON.stringify(obj, replacer, spacer);
	    } else {
	      res = JSON.stringify(obj, replaceGetterValues(replacer), spacer);
	    }
	  } catch (_) {
	    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]');
	  } finally {
	    while (arr.length !== 0) {
	      var part = arr.pop();
	      if (part.length === 4) {
	        Object.defineProperty(part[0], part[1], part[3]);
	      } else {
	        part[0][part[1]] = part[2];
	      }
	    }
	  }
	  return res;
	}
	function setReplace(replace, val, k, parent) {
	  var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k);
	  if (propertyDescriptor.get !== undefined) {
	    if (propertyDescriptor.configurable) {
	      Object.defineProperty(parent, k, {
	        value: replace
	      });
	      arr.push([parent, k, val, propertyDescriptor]);
	    } else {
	      replacerStack.push([val, k, replace]);
	    }
	  } else {
	    parent[k] = replace;
	    arr.push([parent, k, val]);
	  }
	}
	function decirc(val, k, edgeIndex, stack, parent, depth, options) {
	  depth += 1;
	  var i;
	  if (typeof val === 'object' && val !== null) {
	    for (i = 0; i < stack.length; i++) {
	      if (stack[i] === val) {
	        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);
	        return;
	      }
	    }
	    if (typeof options.depthLimit !== 'undefined' && depth > options.depthLimit) {
	      setReplace(LIMIT_REPLACE_NODE, val, k, parent);
	      return;
	    }
	    if (typeof options.edgesLimit !== 'undefined' && edgeIndex + 1 > options.edgesLimit) {
	      setReplace(LIMIT_REPLACE_NODE, val, k, parent);
	      return;
	    }
	    stack.push(val);
	    // Optimize for Arrays. Big arrays could kill the performance otherwise!
	    if (Array.isArray(val)) {
	      for (i = 0; i < val.length; i++) {
	        decirc(val[i], i, i, stack, val, depth, options);
	      }
	    } else {
	      var keys = Object.keys(val);
	      for (i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        decirc(val[key], key, i, stack, val, depth, options);
	      }
	    }
	    stack.pop();
	  }
	}

	// Stable-stringify
	function compareFunction(a, b) {
	  if (a < b) {
	    return -1;
	  }
	  if (a > b) {
	    return 1;
	  }
	  return 0;
	}
	function deterministicStringify(obj, replacer, spacer, options) {
	  if (typeof options === 'undefined') {
	    options = defaultOptions();
	  }
	  var tmp = deterministicDecirc(obj, '', 0, [], undefined, 0, options) || obj;
	  var res;
	  try {
	    if (replacerStack.length === 0) {
	      res = JSON.stringify(tmp, replacer, spacer);
	    } else {
	      res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer);
	    }
	  } catch (_) {
	    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]');
	  } finally {
	    // Ensure that we restore the object as it was.
	    while (arr.length !== 0) {
	      var part = arr.pop();
	      if (part.length === 4) {
	        Object.defineProperty(part[0], part[1], part[3]);
	      } else {
	        part[0][part[1]] = part[2];
	      }
	    }
	  }
	  return res;
	}
	function deterministicDecirc(val, k, edgeIndex, stack, parent, depth, options) {
	  depth += 1;
	  var i;
	  if (typeof val === 'object' && val !== null) {
	    for (i = 0; i < stack.length; i++) {
	      if (stack[i] === val) {
	        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);
	        return;
	      }
	    }
	    try {
	      if (typeof val.toJSON === 'function') {
	        return;
	      }
	    } catch (_) {
	      return;
	    }
	    if (typeof options.depthLimit !== 'undefined' && depth > options.depthLimit) {
	      setReplace(LIMIT_REPLACE_NODE, val, k, parent);
	      return;
	    }
	    if (typeof options.edgesLimit !== 'undefined' && edgeIndex + 1 > options.edgesLimit) {
	      setReplace(LIMIT_REPLACE_NODE, val, k, parent);
	      return;
	    }
	    stack.push(val);
	    // Optimize for Arrays. Big arrays could kill the performance otherwise!
	    if (Array.isArray(val)) {
	      for (i = 0; i < val.length; i++) {
	        deterministicDecirc(val[i], i, i, stack, val, depth, options);
	      }
	    } else {
	      // Create a temporary object in the required way
	      var tmp = {};
	      var keys = Object.keys(val).sort(compareFunction);
	      for (i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        deterministicDecirc(val[key], key, i, stack, val, depth, options);
	        tmp[key] = val[key];
	      }
	      if (typeof parent !== 'undefined') {
	        arr.push([parent, k, val]);
	        parent[k] = tmp;
	      } else {
	        return tmp;
	      }
	    }
	    stack.pop();
	  }
	}

	// wraps replacer function to handle values we couldn't replace
	// and mark them as replaced value
	function replaceGetterValues(replacer) {
	  replacer = typeof replacer !== 'undefined' ? replacer : function (k, v) {
	    return v;
	  };
	  return function (key, val) {
	    if (replacerStack.length > 0) {
	      for (var i = 0; i < replacerStack.length; i++) {
	        var part = replacerStack[i];
	        if (part[1] === key && part[0] === val) {
	          val = part[2];
	          replacerStack.splice(i, 1);
	          break;
	        }
	      }
	    }
	    return replacer.call(this, key, val);
	  };
	}
	return fastSafeStringify;
}

var hasRequiredClasses;

function requireClasses () {
	if (hasRequiredClasses) return classes;
	hasRequiredClasses = 1;

	var _classCallCheck = classCallCheck.exports;
	var _createClass = createClass.exports;
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf.exports;
	var _wrapNativeSuper = requireWrapNativeSuper();
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	Object.defineProperty(classes, "__esModule", {
	  value: true
	});
	classes.EthereumProviderError = classes.EthereumRpcError = void 0;
	var fast_safe_stringify_1 = requireFastSafeStringify();
	/**
	 * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors
	 * per EIP-1474.
	 * Permits any integer error code.
	 */
	var EthereumRpcError = /*#__PURE__*/function (_Error) {
	  _inherits(EthereumRpcError, _Error);
	  var _super = _createSuper(EthereumRpcError);
	  function EthereumRpcError(code, message, data) {
	    var _this;
	    _classCallCheck(this, EthereumRpcError);
	    if (!Number.isInteger(code)) {
	      throw new Error('"code" must be an integer.');
	    }
	    if (!message || typeof message !== 'string') {
	      throw new Error('"message" must be a nonempty string.');
	    }
	    _this = _super.call(this, message);
	    _this.code = code;
	    if (data !== undefined) {
	      _this.data = data;
	    }
	    return _this;
	  }
	  /**
	   * Returns a plain object with all public class properties.
	   */
	  _createClass(EthereumRpcError, [{
	    key: "serialize",
	    value: function serialize() {
	      var serialized = {
	        code: this.code,
	        message: this.message
	      };
	      if (this.data !== undefined) {
	        serialized.data = this.data;
	      }
	      if (this.stack) {
	        serialized.stack = this.stack;
	      }
	      return serialized;
	    }
	    /**
	     * Return a string representation of the serialized error, omitting
	     * any circular references.
	     */
	  }, {
	    key: "toString",
	    value: function toString() {
	      return fast_safe_stringify_1["default"](this.serialize(), stringifyReplacer, 2);
	    }
	  }]);
	  return EthereumRpcError;
	}( /*#__PURE__*/_wrapNativeSuper(Error));
	classes.EthereumRpcError = EthereumRpcError;
	/**
	 * Error subclass implementing Ethereum Provider errors per EIP-1193.
	 * Permits integer error codes in the [ 1000 <= 4999 ] range.
	 */
	var EthereumProviderError = /*#__PURE__*/function (_EthereumRpcError) {
	  _inherits(EthereumProviderError, _EthereumRpcError);
	  var _super2 = _createSuper(EthereumProviderError);
	  /**
	   * Create an Ethereum Provider JSON-RPC error.
	   * `code` must be an integer in the 1000 <= 4999 range.
	   */
	  function EthereumProviderError(code, message, data) {
	    _classCallCheck(this, EthereumProviderError);
	    if (!isValidEthProviderCode(code)) {
	      throw new Error('"code" must be an integer such that: 1000 <= code <= 4999');
	    }
	    return _super2.call(this, code, message, data);
	  }
	  return _createClass(EthereumProviderError);
	}(EthereumRpcError);
	classes.EthereumProviderError = EthereumProviderError;
	// Internal
	function isValidEthProviderCode(code) {
	  return Number.isInteger(code) && code >= 1000 && code <= 4999;
	}
	function stringifyReplacer(_, value) {
	  if (value === '[Circular]') {
	    return undefined;
	  }
	  return value;
	}
	return classes;
}

var utils = {};

var errorConstants = {};

var hasRequiredErrorConstants;

function requireErrorConstants () {
	if (hasRequiredErrorConstants) return errorConstants;
	hasRequiredErrorConstants = 1;

	Object.defineProperty(errorConstants, "__esModule", {
	  value: true
	});
	errorConstants.errorValues = errorConstants.errorCodes = void 0;
	errorConstants.errorCodes = {
	  rpc: {
	    invalidInput: -32000,
	    resourceNotFound: -32001,
	    resourceUnavailable: -32002,
	    transactionRejected: -32003,
	    methodNotSupported: -32004,
	    limitExceeded: -32005,
	    parse: -32700,
	    invalidRequest: -32600,
	    methodNotFound: -32601,
	    invalidParams: -32602,
	    internal: -32603
	  },
	  provider: {
	    userRejectedRequest: 4001,
	    unauthorized: 4100,
	    unsupportedMethod: 4200,
	    disconnected: 4900,
	    chainDisconnected: 4901
	  }
	};
	errorConstants.errorValues = {
	  '-32700': {
	    standard: 'JSON RPC 2.0',
	    message: 'Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.'
	  },
	  '-32600': {
	    standard: 'JSON RPC 2.0',
	    message: 'The JSON sent is not a valid Request object.'
	  },
	  '-32601': {
	    standard: 'JSON RPC 2.0',
	    message: 'The method does not exist / is not available.'
	  },
	  '-32602': {
	    standard: 'JSON RPC 2.0',
	    message: 'Invalid method parameter(s).'
	  },
	  '-32603': {
	    standard: 'JSON RPC 2.0',
	    message: 'Internal JSON-RPC error.'
	  },
	  '-32000': {
	    standard: 'EIP-1474',
	    message: 'Invalid input.'
	  },
	  '-32001': {
	    standard: 'EIP-1474',
	    message: 'Resource not found.'
	  },
	  '-32002': {
	    standard: 'EIP-1474',
	    message: 'Resource unavailable.'
	  },
	  '-32003': {
	    standard: 'EIP-1474',
	    message: 'Transaction rejected.'
	  },
	  '-32004': {
	    standard: 'EIP-1474',
	    message: 'Method not supported.'
	  },
	  '-32005': {
	    standard: 'EIP-1474',
	    message: 'Request limit exceeded.'
	  },
	  '4001': {
	    standard: 'EIP-1193',
	    message: 'User rejected the request.'
	  },
	  '4100': {
	    standard: 'EIP-1193',
	    message: 'The requested account and/or method has not been authorized by the user.'
	  },
	  '4200': {
	    standard: 'EIP-1193',
	    message: 'The requested method is not supported by this Ethereum provider.'
	  },
	  '4900': {
	    standard: 'EIP-1193',
	    message: 'The provider is disconnected from all chains.'
	  },
	  '4901': {
	    standard: 'EIP-1193',
	    message: 'The provider is disconnected from the specified chain.'
	  }
	};
	return errorConstants;
}

var hasRequiredUtils;

function requireUtils () {
	if (hasRequiredUtils) return utils;
	hasRequiredUtils = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.serializeError = exports.isValidCode = exports.getMessageFromCode = exports.JSON_RPC_SERVER_ERROR_MESSAGE = void 0;
		var error_constants_1 = requireErrorConstants();
		var classes_1 = requireClasses();
		var FALLBACK_ERROR_CODE = error_constants_1.errorCodes.rpc.internal;
		var FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.';
		var FALLBACK_ERROR = {
		  code: FALLBACK_ERROR_CODE,
		  message: getMessageFromCode(FALLBACK_ERROR_CODE)
		};
		exports.JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';
		/**
		 * Gets the message for a given code, or a fallback message if the code has
		 * no corresponding message.
		 */
		function getMessageFromCode(code) {
		  var fallbackMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FALLBACK_MESSAGE;
		  if (Number.isInteger(code)) {
		    var codeString = code.toString();
		    if (hasKey(error_constants_1.errorValues, codeString)) {
		      return error_constants_1.errorValues[codeString].message;
		    }
		    if (isJsonRpcServerError(code)) {
		      return exports.JSON_RPC_SERVER_ERROR_MESSAGE;
		    }
		  }
		  return fallbackMessage;
		}
		exports.getMessageFromCode = getMessageFromCode;
		/**
		 * Returns whether the given code is valid.
		 * A code is only valid if it has a message.
		 */
		function isValidCode(code) {
		  if (!Number.isInteger(code)) {
		    return false;
		  }
		  var codeString = code.toString();
		  if (error_constants_1.errorValues[codeString]) {
		    return true;
		  }
		  if (isJsonRpcServerError(code)) {
		    return true;
		  }
		  return false;
		}
		exports.isValidCode = isValidCode;
		/**
		 * Serializes the given error to an Ethereum JSON RPC-compatible error object.
		 * Merely copies the given error's values if it is already compatible.
		 * If the given error is not fully compatible, it will be preserved on the
		 * returned object's data.originalError property.
		 */
		function serializeError(error) {
		  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
		    _ref$fallbackError = _ref.fallbackError,
		    fallbackError = _ref$fallbackError === void 0 ? FALLBACK_ERROR : _ref$fallbackError,
		    _ref$shouldIncludeSta = _ref.shouldIncludeStack,
		    shouldIncludeStack = _ref$shouldIncludeSta === void 0 ? false : _ref$shouldIncludeSta;
		  var _a, _b;
		  if (!fallbackError || !Number.isInteger(fallbackError.code) || typeof fallbackError.message !== 'string') {
		    throw new Error('Must provide fallback error with integer number code and string message.');
		  }
		  if (error instanceof classes_1.EthereumRpcError) {
		    return error.serialize();
		  }
		  var serialized = {};
		  if (error && typeof error === 'object' && !Array.isArray(error) && hasKey(error, 'code') && isValidCode(error.code)) {
		    var _error = error;
		    serialized.code = _error.code;
		    if (_error.message && typeof _error.message === 'string') {
		      serialized.message = _error.message;
		      if (hasKey(_error, 'data')) {
		        serialized.data = _error.data;
		      }
		    } else {
		      serialized.message = getMessageFromCode(serialized.code);
		      serialized.data = {
		        originalError: assignOriginalError(error)
		      };
		    }
		  } else {
		    serialized.code = fallbackError.code;
		    var message = (_a = error) === null || _a === void 0 ? void 0 : _a.message;
		    serialized.message = message && typeof message === 'string' ? message : fallbackError.message;
		    serialized.data = {
		      originalError: assignOriginalError(error)
		    };
		  }
		  var stack = (_b = error) === null || _b === void 0 ? void 0 : _b.stack;
		  if (shouldIncludeStack && error && stack && typeof stack === 'string') {
		    serialized.stack = stack;
		  }
		  return serialized;
		}
		exports.serializeError = serializeError;
		// Internal
		function isJsonRpcServerError(code) {
		  return code >= -32099 && code <= -32000;
		}
		function assignOriginalError(error) {
		  if (error && typeof error === 'object' && !Array.isArray(error)) {
		    return Object.assign({}, error);
		  }
		  return error;
		}
		function hasKey(obj, key) {
		  return Object.prototype.hasOwnProperty.call(obj, key);
		}
} (utils));
	return utils;
}

var errors = {};

var hasRequiredErrors;

function requireErrors () {
	if (hasRequiredErrors) return errors;
	hasRequiredErrors = 1;

	var _slicedToArray = requireSlicedToArray();
	Object.defineProperty(errors, "__esModule", {
	  value: true
	});
	errors.ethErrors = void 0;
	var classes_1 = requireClasses();
	var utils_1 = requireUtils();
	var error_constants_1 = requireErrorConstants();
	errors.ethErrors = {
	  rpc: {
	    /**
	     * Get a JSON RPC 2.0 Parse (-32700) error.
	     */
	    parse: function parse(arg) {
	      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.parse, arg);
	    },
	    /**
	     * Get a JSON RPC 2.0 Invalid Request (-32600) error.
	     */
	    invalidRequest: function invalidRequest(arg) {
	      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidRequest, arg);
	    },
	    /**
	     * Get a JSON RPC 2.0 Invalid Params (-32602) error.
	     */
	    invalidParams: function invalidParams(arg) {
	      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidParams, arg);
	    },
	    /**
	     * Get a JSON RPC 2.0 Method Not Found (-32601) error.
	     */
	    methodNotFound: function methodNotFound(arg) {
	      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotFound, arg);
	    },
	    /**
	     * Get a JSON RPC 2.0 Internal (-32603) error.
	     */
	    internal: function internal(arg) {
	      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.internal, arg);
	    },
	    /**
	     * Get a JSON RPC 2.0 Server error.
	     * Permits integer error codes in the [ -32099 <= -32005 ] range.
	     * Codes -32000 through -32004 are reserved by EIP-1474.
	     */
	    server: function server(opts) {
	      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {
	        throw new Error('Ethereum RPC Server errors must provide single object argument.');
	      }
	      var code = opts.code;
	      if (!Number.isInteger(code) || code > -32005 || code < -32099) {
	        throw new Error('"code" must be an integer such that: -32099 <= code <= -32005');
	      }
	      return getEthJsonRpcError(code, opts);
	    },
	    /**
	     * Get an Ethereum JSON RPC Invalid Input (-32000) error.
	     */
	    invalidInput: function invalidInput(arg) {
	      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidInput, arg);
	    },
	    /**
	     * Get an Ethereum JSON RPC Resource Not Found (-32001) error.
	     */
	    resourceNotFound: function resourceNotFound(arg) {
	      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceNotFound, arg);
	    },
	    /**
	     * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.
	     */
	    resourceUnavailable: function resourceUnavailable(arg) {
	      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceUnavailable, arg);
	    },
	    /**
	     * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.
	     */
	    transactionRejected: function transactionRejected(arg) {
	      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.transactionRejected, arg);
	    },
	    /**
	     * Get an Ethereum JSON RPC Method Not Supported (-32004) error.
	     */
	    methodNotSupported: function methodNotSupported(arg) {
	      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotSupported, arg);
	    },
	    /**
	     * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.
	     */
	    limitExceeded: function limitExceeded(arg) {
	      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.limitExceeded, arg);
	    }
	  },
	  provider: {
	    /**
	     * Get an Ethereum Provider User Rejected Request (4001) error.
	     */
	    userRejectedRequest: function userRejectedRequest(arg) {
	      return getEthProviderError(error_constants_1.errorCodes.provider.userRejectedRequest, arg);
	    },
	    /**
	     * Get an Ethereum Provider Unauthorized (4100) error.
	     */
	    unauthorized: function unauthorized(arg) {
	      return getEthProviderError(error_constants_1.errorCodes.provider.unauthorized, arg);
	    },
	    /**
	     * Get an Ethereum Provider Unsupported Method (4200) error.
	     */
	    unsupportedMethod: function unsupportedMethod(arg) {
	      return getEthProviderError(error_constants_1.errorCodes.provider.unsupportedMethod, arg);
	    },
	    /**
	     * Get an Ethereum Provider Not Connected (4900) error.
	     */
	    disconnected: function disconnected(arg) {
	      return getEthProviderError(error_constants_1.errorCodes.provider.disconnected, arg);
	    },
	    /**
	     * Get an Ethereum Provider Chain Not Connected (4901) error.
	     */
	    chainDisconnected: function chainDisconnected(arg) {
	      return getEthProviderError(error_constants_1.errorCodes.provider.chainDisconnected, arg);
	    },
	    /**
	     * Get a custom Ethereum Provider error.
	     */
	    custom: function custom(opts) {
	      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {
	        throw new Error('Ethereum Provider custom errors must provide single object argument.');
	      }
	      var code = opts.code,
	        message = opts.message,
	        data = opts.data;
	      if (!message || typeof message !== 'string') {
	        throw new Error('"message" must be a nonempty string');
	      }
	      return new classes_1.EthereumProviderError(code, message, data);
	    }
	  }
	};
	// Internal
	function getEthJsonRpcError(code, arg) {
	  var _parseOpts = parseOpts(arg),
	    _parseOpts2 = _slicedToArray(_parseOpts, 2),
	    message = _parseOpts2[0],
	    data = _parseOpts2[1];
	  return new classes_1.EthereumRpcError(code, message || utils_1.getMessageFromCode(code), data);
	}
	function getEthProviderError(code, arg) {
	  var _parseOpts3 = parseOpts(arg),
	    _parseOpts4 = _slicedToArray(_parseOpts3, 2),
	    message = _parseOpts4[0],
	    data = _parseOpts4[1];
	  return new classes_1.EthereumProviderError(code, message || utils_1.getMessageFromCode(code), data);
	}
	function parseOpts(arg) {
	  if (arg) {
	    if (typeof arg === 'string') {
	      return [arg];
	    } else if (typeof arg === 'object' && !Array.isArray(arg)) {
	      var message = arg.message,
	        data = arg.data;
	      if (message && typeof message !== 'string') {
	        throw new Error('Must specify string message.');
	      }
	      return [message || undefined, data];
	    }
	  }
	  return [];
	}
	return errors;
}

var hasRequiredDist$2;

function requireDist$2 () {
	if (hasRequiredDist$2) return dist$1;
	hasRequiredDist$2 = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.getMessageFromCode = exports.serializeError = exports.EthereumProviderError = exports.EthereumRpcError = exports.ethErrors = exports.errorCodes = void 0;
		var classes_1 = requireClasses();
		Object.defineProperty(exports, "EthereumRpcError", {
		  enumerable: true,
		  get: function get() {
		    return classes_1.EthereumRpcError;
		  }
		});
		Object.defineProperty(exports, "EthereumProviderError", {
		  enumerable: true,
		  get: function get() {
		    return classes_1.EthereumProviderError;
		  }
		});
		var utils_1 = requireUtils();
		Object.defineProperty(exports, "serializeError", {
		  enumerable: true,
		  get: function get() {
		    return utils_1.serializeError;
		  }
		});
		Object.defineProperty(exports, "getMessageFromCode", {
		  enumerable: true,
		  get: function get() {
		    return utils_1.getMessageFromCode;
		  }
		});
		var errors_1 = requireErrors();
		Object.defineProperty(exports, "ethErrors", {
		  enumerable: true,
		  get: function get() {
		    return errors_1.ethErrors;
		  }
		});
		var error_constants_1 = requireErrorConstants();
		Object.defineProperty(exports, "errorCodes", {
		  enumerable: true,
		  get: function get() {
		    return error_constants_1.errorCodes;
		  }
		});
} (dist$1));
	return dist$1;
}

var hasRequiredJsonRpcEngine;

function requireJsonRpcEngine () {
	if (hasRequiredJsonRpcEngine) return JsonRpcEngine;
	hasRequiredJsonRpcEngine = 1;

	var _regeneratorRuntime = regenerator;
	var _slicedToArray = requireSlicedToArray();
	var _asyncToGenerator = requireAsyncToGenerator();
	var _classCallCheck = classCallCheck.exports;
	var _createClass = createClass.exports;
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf.exports;
	function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
	function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
	function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
	  return mod && mod.__esModule ? mod : {
	    "default": mod
	  };
	};
	Object.defineProperty(JsonRpcEngine, "__esModule", {
	  value: true
	});
	JsonRpcEngine.JsonRpcEngine = void 0;
	var safe_event_emitter_1 = __importDefault(requireSafeEventEmitter());
	var eth_rpc_errors_1 = requireDist$2();
	/**
	 * A JSON-RPC request and response processor.
	 * Give it a stack of middleware, pass it requests, and get back responses.
	 */
	var JsonRpcEngine$1 = /*#__PURE__*/function (_safe_event_emitter_) {
	  _inherits(JsonRpcEngine, _safe_event_emitter_);
	  var _super = _createSuper(JsonRpcEngine);
	  function JsonRpcEngine() {
	    var _this;
	    _classCallCheck(this, JsonRpcEngine);
	    _this = _super.call(this);
	    _this._middleware = [];
	    return _this;
	  }
	  /**
	   * Add a middleware function to the engine's middleware stack.
	   *
	   * @param middleware - The middleware function to add.
	   */
	  _createClass(JsonRpcEngine, [{
	    key: "push",
	    value: function push(middleware) {
	      this._middleware.push(middleware);
	    }
	  }, {
	    key: "handle",
	    value: function handle(req, cb) {
	      if (cb && typeof cb !== 'function') {
	        throw new Error('"callback" must be a function if provided.');
	      }
	      if (Array.isArray(req)) {
	        if (cb) {
	          return this._handleBatch(req, cb);
	        }
	        return this._handleBatch(req);
	      }
	      if (cb) {
	        return this._handle(req, cb);
	      }
	      return this._promiseHandle(req);
	    }
	    /**
	     * Returns this engine as a middleware function that can be pushed to other
	     * engines.
	     *
	     * @returns This engine as a middleware function.
	     */
	  }, {
	    key: "asMiddleware",
	    value: function asMiddleware() {
	      var _this2 = this;
	      return /*#__PURE__*/function () {
	        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req, res, next, end) {
	          var _yield$JsonRpcEngine$, _yield$JsonRpcEngine$2, middlewareError, isComplete, returnHandlers;
	          return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	            while (1) {
	              switch (_context2.prev = _context2.next) {
	                case 0:
	                  _context2.prev = 0;
	                  _context2.next = 3;
	                  return JsonRpcEngine._runAllMiddleware(req, res, _this2._middleware);
	                case 3:
	                  _yield$JsonRpcEngine$ = _context2.sent;
	                  _yield$JsonRpcEngine$2 = _slicedToArray(_yield$JsonRpcEngine$, 3);
	                  middlewareError = _yield$JsonRpcEngine$2[0];
	                  isComplete = _yield$JsonRpcEngine$2[1];
	                  returnHandlers = _yield$JsonRpcEngine$2[2];
	                  if (!isComplete) {
	                    _context2.next = 12;
	                    break;
	                  }
	                  _context2.next = 11;
	                  return JsonRpcEngine._runReturnHandlers(returnHandlers);
	                case 11:
	                  return _context2.abrupt("return", end(middlewareError));
	                case 12:
	                  return _context2.abrupt("return", next( /*#__PURE__*/function () {
	                    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(handlerCallback) {
	                      return _regeneratorRuntime.wrap(function _callee$(_context) {
	                        while (1) {
	                          switch (_context.prev = _context.next) {
	                            case 0:
	                              _context.prev = 0;
	                              _context.next = 3;
	                              return JsonRpcEngine._runReturnHandlers(returnHandlers);
	                            case 3:
	                              _context.next = 8;
	                              break;
	                            case 5:
	                              _context.prev = 5;
	                              _context.t0 = _context["catch"](0);
	                              return _context.abrupt("return", handlerCallback(_context.t0));
	                            case 8:
	                              return _context.abrupt("return", handlerCallback());
	                            case 9:
	                            case "end":
	                              return _context.stop();
	                          }
	                        }
	                      }, _callee, null, [[0, 5]]);
	                    }));
	                    return function (_x5) {
	                      return _ref2.apply(this, arguments);
	                    };
	                  }()));
	                case 15:
	                  _context2.prev = 15;
	                  _context2.t0 = _context2["catch"](0);
	                  return _context2.abrupt("return", end(_context2.t0));
	                case 18:
	                case "end":
	                  return _context2.stop();
	              }
	            }
	          }, _callee2, null, [[0, 15]]);
	        }));
	        return function (_x, _x2, _x3, _x4) {
	          return _ref.apply(this, arguments);
	        };
	      }();
	    }
	  }, {
	    key: "_handleBatch",
	    value: function () {
	      var _handleBatch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(reqs, cb) {
	        var responses;
	        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                _context3.prev = 0;
	                _context3.next = 3;
	                return Promise.all(
	                // 1. Begin executing each request in the order received
	                reqs.map(this._promiseHandle.bind(this)));
	              case 3:
	                responses = _context3.sent;
	                if (!cb) {
	                  _context3.next = 6;
	                  break;
	                }
	                return _context3.abrupt("return", cb(null, responses));
	              case 6:
	                return _context3.abrupt("return", responses);
	              case 9:
	                _context3.prev = 9;
	                _context3.t0 = _context3["catch"](0);
	                if (!cb) {
	                  _context3.next = 13;
	                  break;
	                }
	                return _context3.abrupt("return", cb(_context3.t0));
	              case 13:
	                throw _context3.t0;
	              case 14:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this, [[0, 9]]);
	      }));
	      function _handleBatch(_x6, _x7) {
	        return _handleBatch2.apply(this, arguments);
	      }
	      return _handleBatch;
	    }()
	    /**
	     * A promise-wrapped _handle.
	     */
	  }, {
	    key: "_promiseHandle",
	    value: function _promiseHandle(req) {
	      var _this3 = this;
	      return new Promise(function (resolve) {
	        _this3._handle(req, function (_err, res) {
	          // There will always be a response, and it will always have any error
	          // that is caught and propagated.
	          resolve(res);
	        });
	      });
	    }
	    /**
	     * Ensures that the request object is valid, processes it, and passes any
	     * error and the response object to the given callback.
	     *
	     * Does not reject.
	     */
	  }, {
	    key: "_handle",
	    value: function () {
	      var _handle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(callerReq, cb) {
	        var _error2, _error3, req, res, error;
	        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                if (!(!callerReq || Array.isArray(callerReq) || typeof callerReq !== 'object')) {
	                  _context4.next = 3;
	                  break;
	                }
	                _error2 = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, "Requests must be plain objects. Received: ".concat(typeof callerReq), {
	                  request: callerReq
	                });
	                return _context4.abrupt("return", cb(_error2, {
	                  id: undefined,
	                  jsonrpc: '2.0',
	                  error: _error2
	                }));
	              case 3:
	                if (!(typeof callerReq.method !== 'string')) {
	                  _context4.next = 6;
	                  break;
	                }
	                _error3 = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, "Must specify a string method. Received: ".concat(typeof callerReq.method), {
	                  request: callerReq
	                });
	                return _context4.abrupt("return", cb(_error3, {
	                  id: callerReq.id,
	                  jsonrpc: '2.0',
	                  error: _error3
	                }));
	              case 6:
	                req = Object.assign({}, callerReq);
	                res = {
	                  id: req.id,
	                  jsonrpc: req.jsonrpc
	                };
	                error = null;
	                _context4.prev = 9;
	                _context4.next = 12;
	                return this._processRequest(req, res);
	              case 12:
	                _context4.next = 17;
	                break;
	              case 14:
	                _context4.prev = 14;
	                _context4.t0 = _context4["catch"](9);
	                // A request handler error, a re-thrown middleware error, or something
	                // unexpected.
	                error = _context4.t0;
	              case 17:
	                if (error) {
	                  // Ensure no result is present on an errored response
	                  delete res.result;
	                  if (!res.error) {
	                    res.error = eth_rpc_errors_1.serializeError(error);
	                  }
	                }
	                return _context4.abrupt("return", cb(error, res));
	              case 19:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this, [[9, 14]]);
	      }));
	      function _handle(_x8, _x9) {
	        return _handle2.apply(this, arguments);
	      }
	      return _handle;
	    }()
	    /**
	     * For the given request and response, runs all middleware and their return
	     * handlers, if any, and ensures that internal request processing semantics
	     * are satisfied.
	     */
	  }, {
	    key: "_processRequest",
	    value: function () {
	      var _processRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(req, res) {
	        var _yield$JsonRpcEngine$3, _yield$JsonRpcEngine$4, error, isComplete, returnHandlers;
	        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                _context5.next = 2;
	                return JsonRpcEngine._runAllMiddleware(req, res, this._middleware);
	              case 2:
	                _yield$JsonRpcEngine$3 = _context5.sent;
	                _yield$JsonRpcEngine$4 = _slicedToArray(_yield$JsonRpcEngine$3, 3);
	                error = _yield$JsonRpcEngine$4[0];
	                isComplete = _yield$JsonRpcEngine$4[1];
	                returnHandlers = _yield$JsonRpcEngine$4[2];
	                // Throw if "end" was not called, or if the response has neither a result
	                // nor an error.
	                JsonRpcEngine._checkForCompletion(req, res, isComplete);
	                // The return handlers should run even if an error was encountered during
	                // middleware processing.
	                _context5.next = 10;
	                return JsonRpcEngine._runReturnHandlers(returnHandlers);
	              case 10:
	                if (!error) {
	                  _context5.next = 12;
	                  break;
	                }
	                throw error;
	              case 12:
	              case "end":
	                return _context5.stop();
	            }
	          }
	        }, _callee5, this);
	      }));
	      function _processRequest(_x10, _x11) {
	        return _processRequest2.apply(this, arguments);
	      }
	      return _processRequest;
	    }()
	    /**
	     * Serially executes the given stack of middleware.
	     *
	     * @returns An array of any error encountered during middleware execution,
	     * a boolean indicating whether the request was completed, and an array of
	     * middleware-defined return handlers.
	     */
	  }], [{
	    key: "_runAllMiddleware",
	    value: function () {
	      var _runAllMiddleware2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(req, res, middlewareStack) {
	        var returnHandlers, error, isComplete, _iterator, _step, middleware, _yield$JsonRpcEngine$5, _yield$JsonRpcEngine$6;
	        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
	          while (1) {
	            switch (_context6.prev = _context6.next) {
	              case 0:
	                returnHandlers = [];
	                error = null;
	                isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers
	                _iterator = _createForOfIteratorHelper(middlewareStack);
	                _context6.prev = 4;
	                _iterator.s();
	              case 6:
	                if ((_step = _iterator.n()).done) {
	                  _context6.next = 18;
	                  break;
	                }
	                middleware = _step.value;
	                _context6.next = 10;
	                return JsonRpcEngine._runMiddleware(req, res, middleware, returnHandlers);
	              case 10:
	                _yield$JsonRpcEngine$5 = _context6.sent;
	                _yield$JsonRpcEngine$6 = _slicedToArray(_yield$JsonRpcEngine$5, 2);
	                error = _yield$JsonRpcEngine$6[0];
	                isComplete = _yield$JsonRpcEngine$6[1];
	                if (!isComplete) {
	                  _context6.next = 16;
	                  break;
	                }
	                return _context6.abrupt("break", 18);
	              case 16:
	                _context6.next = 6;
	                break;
	              case 18:
	                _context6.next = 23;
	                break;
	              case 20:
	                _context6.prev = 20;
	                _context6.t0 = _context6["catch"](4);
	                _iterator.e(_context6.t0);
	              case 23:
	                _context6.prev = 23;
	                _iterator.f();
	                return _context6.finish(23);
	              case 26:
	                return _context6.abrupt("return", [error, isComplete, returnHandlers.reverse()]);
	              case 27:
	              case "end":
	                return _context6.stop();
	            }
	          }
	        }, _callee6, null, [[4, 20, 23, 26]]);
	      }));
	      function _runAllMiddleware(_x12, _x13, _x14) {
	        return _runAllMiddleware2.apply(this, arguments);
	      }
	      return _runAllMiddleware;
	    }()
	    /**
	     * Runs an individual middleware.
	     *
	     * @returns An array of any error encountered during middleware exection,
	     * and a boolean indicating whether the request should end.
	     */
	  }, {
	    key: "_runMiddleware",
	    value: function _runMiddleware(req, res, middleware, returnHandlers) {
	      return new Promise(function (resolve) {
	        var end = function end(err) {
	          var error = err || res.error;
	          if (error) {
	            res.error = eth_rpc_errors_1.serializeError(error);
	          }
	          // True indicates that the request should end
	          resolve([error, true]);
	        };
	        var next = function next(returnHandler) {
	          if (res.error) {
	            end(res.error);
	          } else {
	            if (returnHandler) {
	              if (typeof returnHandler !== 'function') {
	                end(new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, "JsonRpcEngine: \"next\" return handlers must be functions. " + "Received \"".concat(typeof returnHandler, "\" for request:\n").concat(jsonify(req)), {
	                  request: req
	                }));
	              }
	              returnHandlers.push(returnHandler);
	            }
	            // False indicates that the request should not end
	            resolve([null, false]);
	          }
	        };
	        try {
	          middleware(req, res, next, end);
	        } catch (error) {
	          end(error);
	        }
	      });
	    }
	    /**
	     * Serially executes array of return handlers. The request and response are
	     * assumed to be in their scope.
	     */
	  }, {
	    key: "_runReturnHandlers",
	    value: function () {
	      var _runReturnHandlers2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(handlers) {
	        var _iterator2, _step2, _loop;
	        return _regeneratorRuntime.wrap(function _callee7$(_context8) {
	          while (1) {
	            switch (_context8.prev = _context8.next) {
	              case 0:
	                _iterator2 = _createForOfIteratorHelper(handlers);
	                _context8.prev = 1;
	                _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {
	                  var handler;
	                  return _regeneratorRuntime.wrap(function _loop$(_context7) {
	                    while (1) {
	                      switch (_context7.prev = _context7.next) {
	                        case 0:
	                          handler = _step2.value;
	                          _context7.next = 3;
	                          return new Promise(function (resolve, reject) {
	                            handler(function (err) {
	                              return err ? reject(err) : resolve();
	                            });
	                          });
	                        case 3:
	                        case "end":
	                          return _context7.stop();
	                      }
	                    }
	                  }, _loop);
	                });
	                _iterator2.s();
	              case 4:
	                if ((_step2 = _iterator2.n()).done) {
	                  _context8.next = 8;
	                  break;
	                }
	                return _context8.delegateYield(_loop(), "t0", 6);
	              case 6:
	                _context8.next = 4;
	                break;
	              case 8:
	                _context8.next = 13;
	                break;
	              case 10:
	                _context8.prev = 10;
	                _context8.t1 = _context8["catch"](1);
	                _iterator2.e(_context8.t1);
	              case 13:
	                _context8.prev = 13;
	                _iterator2.f();
	                return _context8.finish(13);
	              case 16:
	              case "end":
	                return _context8.stop();
	            }
	          }
	        }, _callee7, null, [[1, 10, 13, 16]]);
	      }));
	      function _runReturnHandlers(_x15) {
	        return _runReturnHandlers2.apply(this, arguments);
	      }
	      return _runReturnHandlers;
	    }()
	    /**
	     * Throws an error if the response has neither a result nor an error, or if
	     * the "isComplete" flag is falsy.
	     */
	  }, {
	    key: "_checkForCompletion",
	    value: function _checkForCompletion(req, res, isComplete) {
	      if (!('result' in res) && !('error' in res)) {
	        throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, "JsonRpcEngine: Response has no error or result for request:\n".concat(jsonify(req)), {
	          request: req
	        });
	      }
	      if (!isComplete) {
	        throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, "JsonRpcEngine: Nothing ended request:\n".concat(jsonify(req)), {
	          request: req
	        });
	      }
	    }
	  }]);
	  return JsonRpcEngine;
	}(safe_event_emitter_1["default"]);
	JsonRpcEngine.JsonRpcEngine = JsonRpcEngine$1;
	function jsonify(request) {
	  return JSON.stringify(request, null, 2);
	}
	return JsonRpcEngine;
}

var mergeMiddleware = {};

var hasRequiredMergeMiddleware;

function requireMergeMiddleware () {
	if (hasRequiredMergeMiddleware) return mergeMiddleware;
	hasRequiredMergeMiddleware = 1;

	Object.defineProperty(mergeMiddleware, "__esModule", {
	  value: true
	});
	mergeMiddleware.mergeMiddleware = void 0;
	var JsonRpcEngine_1 = requireJsonRpcEngine();
	function mergeMiddleware$1(middlewareStack) {
	  var engine = new JsonRpcEngine_1.JsonRpcEngine();
	  middlewareStack.forEach(function (middleware) {
	    return engine.push(middleware);
	  });
	  return engine.asMiddleware();
	}
	mergeMiddleware.mergeMiddleware = mergeMiddleware$1;
	return mergeMiddleware;
}

var hasRequiredDist$1;

function requireDist$1 () {
	if (hasRequiredDist$1) return dist$2;
	hasRequiredDist$1 = 1;
	(function (exports) {

		var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  Object.defineProperty(o, k2, {
		    enumerable: true,
		    get: function get() {
		      return m[k];
		    }
		  });
		} : function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  o[k2] = m[k];
		});
		var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
		  for (var p in m) {
		    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		  }
		};
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		__exportStar(requireIdRemapMiddleware(), exports);
		__exportStar(requireCreateAsyncMiddleware(), exports);
		__exportStar(requireCreateScaffoldMiddleware$1(), exports);
		__exportStar(requireGetUniqueId(), exports);
		__exportStar(requireJsonRpcEngine(), exports);
		__exportStar(requireMergeMiddleware(), exports);
} (dist$2));
	return dist$2;
}

var scaffold = {exports: {}};

var createScaffoldMiddleware;
var hasRequiredCreateScaffoldMiddleware;

function requireCreateScaffoldMiddleware () {
	if (hasRequiredCreateScaffoldMiddleware) return createScaffoldMiddleware;
	hasRequiredCreateScaffoldMiddleware = 1;
	createScaffoldMiddleware = function createScaffoldMiddleware(handlers) {
	  return function (req, res, next, end) {
	    var handler = handlers[req.method];
	    // if no handler, return
	    if (handler === undefined) {
	      return next();
	    }
	    // if handler is fn, call as middleware
	    if (typeof handler === 'function') {
	      return handler(req, res, next, end);
	    }
	    // if handler is some other value, use as result
	    res.result = handler;
	    return end();
	  };
	};
	return createScaffoldMiddleware;
}

var hasRequiredScaffold;

function requireScaffold () {
	if (hasRequiredScaffold) return scaffold.exports;
	hasRequiredScaffold = 1;
	(function (module) {
		// for backwards compat
		module.exports = requireCreateScaffoldMiddleware();
} (scaffold));
	return scaffold.exports;
}

var pify;
var hasRequiredPify;

function requirePify () {
	if (hasRequiredPify) return pify;
	hasRequiredPify = 1;

	var _defineProperty = requireDefineProperty();
	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
	var processFn = function processFn(fn, options, proxy, unwrapped) {
	  return function () {
	    var _this = this;
	    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {
	      arguments_[_key] = arguments[_key];
	    }
	    var P = options.promiseModule;
	    return new P(function (resolve, reject) {
	      if (options.multiArgs) {
	        arguments_.push(function () {
	          for (var _len2 = arguments.length, result = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	            result[_key2] = arguments[_key2];
	          }
	          if (options.errorFirst) {
	            if (result[0]) {
	              reject(result);
	            } else {
	              result.shift();
	              resolve(result);
	            }
	          } else {
	            resolve(result);
	          }
	        });
	      } else if (options.errorFirst) {
	        arguments_.push(function (error, result) {
	          if (error) {
	            reject(error);
	          } else {
	            resolve(result);
	          }
	        });
	      } else {
	        arguments_.push(resolve);
	      }
	      var self = _this === proxy ? unwrapped : _this;
	      Reflect.apply(fn, self, arguments_);
	    });
	  };
	};
	var filterCache = new WeakMap();
	pify = function (input, options) {
	  options = _objectSpread({
	    exclude: [/.+(?:Sync|Stream)$/],
	    errorFirst: true,
	    promiseModule: Promise
	  }, options);
	  var objectType = typeof input;
	  if (!(input !== null && (objectType === 'object' || objectType === 'function'))) {
	    throw new TypeError("Expected `input` to be a `Function` or `Object`, got `".concat(input === null ? 'null' : objectType, "`"));
	  }
	  var filter = function filter(target, key) {
	    var cached = filterCache.get(target);
	    if (!cached) {
	      cached = {};
	      filterCache.set(target, cached);
	    }
	    if (key in cached) {
	      return cached[key];
	    }
	    var match = function match(pattern) {
	      return typeof pattern === 'string' || typeof key === 'symbol' ? key === pattern : pattern.test(key);
	    };
	    var desc = Reflect.getOwnPropertyDescriptor(target, key);
	    var writableOrConfigurableOwn = desc === undefined || desc.writable || desc.configurable;
	    var included = options.include ? options.include.some(match) : !options.exclude.some(match);
	    var shouldFilter = included && writableOrConfigurableOwn;
	    cached[key] = shouldFilter;
	    return shouldFilter;
	  };
	  var cache = new WeakMap();
	  var proxy = new Proxy(input, {
	    apply: function apply(target, thisArg, args) {
	      var cached = cache.get(target);
	      if (cached) {
	        return Reflect.apply(cached, thisArg, args);
	      }
	      var pified = options.excludeMain ? target : processFn(target, options, proxy, target);
	      cache.set(target, pified);
	      return Reflect.apply(pified, thisArg, args);
	    },
	    get: function get(target, key) {
	      var property = target[key];

	      // eslint-disable-next-line no-use-extend-native/no-use-extend-native
	      if (!filter(target, key) || property === Function.prototype[key]) {
	        return property;
	      }
	      var cached = cache.get(property);
	      if (cached) {
	        return cached;
	      }
	      if (typeof property === 'function') {
	        var pified = processFn(property, options, proxy, target);
	        cache.set(property, pified);
	        return pified;
	      }
	      return property;
	    }
	  });
	  return proxy;
	};
	return pify;
}

var baseFilter;
var hasRequiredBaseFilter;

function requireBaseFilter () {
	if (hasRequiredBaseFilter) return baseFilter;
	hasRequiredBaseFilter = 1;
	var _regeneratorRuntime = regenerator;
	var _asyncToGenerator = requireAsyncToGenerator();
	var _classCallCheck = classCallCheck.exports;
	var _createClass = createClass.exports;
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf.exports;
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	var SafeEventEmitter = requireSafeEventEmitter()["default"];
	var BaseFilter = /*#__PURE__*/function (_SafeEventEmitter) {

	  _inherits(BaseFilter, _SafeEventEmitter);
	  var _super = _createSuper(BaseFilter);
	  function BaseFilter() {
	    var _this;
	    _classCallCheck(this, BaseFilter);
	    _this = _super.call(this);
	    _this.updates = [];
	    return _this;
	  }
	  _createClass(BaseFilter, [{
	    key: "initialize",
	    value: function () {
	      var _initialize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
	        return _regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee);
	      }));
	      function initialize() {
	        return _initialize.apply(this, arguments);
	      }
	      return initialize;
	    }()
	  }, {
	    key: "update",
	    value: function () {
	      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
	        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                throw new Error('BaseFilter - no update method specified');
	              case 1:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2);
	      }));
	      function update() {
	        return _update.apply(this, arguments);
	      }
	      return update;
	    }()
	  }, {
	    key: "addResults",
	    value: function addResults(newResults) {
	      var _this2 = this;
	      this.updates = this.updates.concat(newResults);
	      newResults.forEach(function (result) {
	        return _this2.emit('update', result);
	      });
	    }
	  }, {
	    key: "addInitialResults",
	    value: function addInitialResults(newResults) {}
	  }, {
	    key: "getChangesAndClear",
	    value: function getChangesAndClear() {
	      var updates = this.updates;
	      this.updates = [];
	      return updates;
	    }
	  }]);
	  return BaseFilter;
	}(SafeEventEmitter);
	baseFilter = BaseFilter;
	return baseFilter;
}

var baseFilterHistory;
var hasRequiredBaseFilterHistory;

function requireBaseFilterHistory () {
	if (hasRequiredBaseFilterHistory) return baseFilterHistory;
	hasRequiredBaseFilterHistory = 1;
	var _regeneratorRuntime = regenerator;
	var _asyncToGenerator = requireAsyncToGenerator();
	var _classCallCheck = classCallCheck.exports;
	var _createClass = createClass.exports;
	var _get = requireGet();
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf.exports;
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	var BaseFilter = requireBaseFilter();

	// tracks all results ever recorded
	var BaseFilterWithHistory = /*#__PURE__*/function (_BaseFilter) {

	  _inherits(BaseFilterWithHistory, _BaseFilter);
	  var _super = _createSuper(BaseFilterWithHistory);
	  function BaseFilterWithHistory() {
	    var _this;
	    _classCallCheck(this, BaseFilterWithHistory);
	    _this = _super.call(this);
	    _this.allResults = [];
	    return _this;
	  }
	  _createClass(BaseFilterWithHistory, [{
	    key: "update",
	    value: function () {
	      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
	        return _regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                throw new Error('BaseFilterWithHistory - no update method specified');
	              case 1:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee);
	      }));
	      function update() {
	        return _update.apply(this, arguments);
	      }
	      return update;
	    }()
	  }, {
	    key: "addResults",
	    value: function addResults(newResults) {
	      this.allResults = this.allResults.concat(newResults);
	      _get(_getPrototypeOf(BaseFilterWithHistory.prototype), "addResults", this).call(this, newResults);
	    }
	  }, {
	    key: "addInitialResults",
	    value: function addInitialResults(newResults) {
	      this.allResults = this.allResults.concat(newResults);
	      _get(_getPrototypeOf(BaseFilterWithHistory.prototype), "addInitialResults", this).call(this, newResults);
	    }
	  }, {
	    key: "getAllResults",
	    value: function getAllResults() {
	      return this.allResults;
	    }
	  }]);
	  return BaseFilterWithHistory;
	}(BaseFilter);
	baseFilterHistory = BaseFilterWithHistory;
	return baseFilterHistory;
}

var hexUtils;
var hasRequiredHexUtils;

function requireHexUtils () {
	if (hasRequiredHexUtils) return hexUtils;
	hasRequiredHexUtils = 1;
	hexUtils = {
	  minBlockRef: minBlockRef,
	  maxBlockRef: maxBlockRef,
	  sortBlockRefs: sortBlockRefs,
	  bnToHex: bnToHex,
	  blockRefIsNumber: blockRefIsNumber,
	  hexToInt: hexToInt,
	  incrementHexInt: incrementHexInt,
	  intToHex: intToHex,
	  unsafeRandomBytes: unsafeRandomBytes
	};
	function minBlockRef() {
	  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
	    refs[_key] = arguments[_key];
	  }
	  var sortedRefs = sortBlockRefs(refs);
	  return sortedRefs[0];
	}
	function maxBlockRef() {
	  for (var _len2 = arguments.length, refs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    refs[_key2] = arguments[_key2];
	  }
	  var sortedRefs = sortBlockRefs(refs);
	  return sortedRefs[sortedRefs.length - 1];
	}
	function sortBlockRefs(refs) {
	  return refs.sort(function (refA, refB) {
	    if (refA === 'latest' || refB === 'earliest') return 1;
	    if (refB === 'latest' || refA === 'earliest') return -1;
	    return hexToInt(refA) - hexToInt(refB);
	  });
	}
	function bnToHex(bn) {
	  return '0x' + bn.toString(16);
	}
	function blockRefIsNumber(blockRef) {
	  return blockRef && !['earliest', 'latest', 'pending'].includes(blockRef);
	}
	function hexToInt(hexString) {
	  if (hexString === undefined || hexString === null) return hexString;
	  return Number.parseInt(hexString, 16);
	}
	function incrementHexInt(hexString) {
	  if (hexString === undefined || hexString === null) return hexString;
	  var value = hexToInt(hexString);
	  return intToHex(value + 1);
	}
	function intToHex(_int) {
	  if (_int === undefined || _int === null) return _int;
	  var hexString = _int.toString(16);
	  var needsLeftPad = hexString.length % 2;
	  if (needsLeftPad) hexString = '0' + hexString;
	  return '0x' + hexString;
	}
	function unsafeRandomBytes(byteCount) {
	  var result = '0x';
	  for (var i = 0; i < byteCount; i++) {
	    result += unsafeRandomNibble();
	    result += unsafeRandomNibble();
	  }
	  return result;
	}
	function unsafeRandomNibble() {
	  return Math.floor(Math.random() * 16).toString(16);
	}
	return hexUtils;
}

var logFilter;
var hasRequiredLogFilter;

function requireLogFilter () {
	if (hasRequiredLogFilter) return logFilter;
	hasRequiredLogFilter = 1;
	var _regeneratorRuntime = regenerator;
	var _asyncToGenerator = requireAsyncToGenerator();
	var _classCallCheck = classCallCheck.exports;
	var _createClass = createClass.exports;
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf.exports;
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	var EthQuery = requireEthQuery();
	var pify = requirePify();
	var BaseFilterWithHistory = requireBaseFilterHistory();
	var _require = requireHexUtils();
	  _require.bnToHex;
	  var hexToInt = _require.hexToInt,
	  incrementHexInt = _require.incrementHexInt,
	  minBlockRef = _require.minBlockRef,
	  blockRefIsNumber = _require.blockRefIsNumber;
	var LogFilter = /*#__PURE__*/function (_BaseFilterWithHistor) {

	  _inherits(LogFilter, _BaseFilterWithHistor);
	  var _super = _createSuper(LogFilter);
	  function LogFilter(_ref) {
	    var _this;
	    var provider = _ref.provider,
	      params = _ref.params;
	    _classCallCheck(this, LogFilter);
	    _this = _super.call(this);
	    _this.type = 'log';
	    _this.ethQuery = new EthQuery(provider);
	    _this.params = Object.assign({
	      fromBlock: 'latest',
	      toBlock: 'latest',
	      address: undefined,
	      topics: []
	    }, params);
	    // normalize address parameter
	    if (_this.params.address) {
	      // ensure array
	      if (!Array.isArray(_this.params.address)) {
	        _this.params.address = [_this.params.address];
	      }
	      // ensure lowercase
	      _this.params.address = _this.params.address.map(function (address) {
	        return address.toLowerCase();
	      });
	    }
	    return _this;
	  }
	  _createClass(LogFilter, [{
	    key: "initialize",
	    value: function () {
	      var _initialize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {
	        var currentBlock, fromBlock, toBlock, params, newLogs;
	        return _regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                currentBlock = _ref2.currentBlock;
	                // resolve params.fromBlock
	                fromBlock = this.params.fromBlock;
	                if (['latest', 'pending'].includes(fromBlock)) fromBlock = currentBlock;
	                if ('earliest' === fromBlock) fromBlock = '0x0';
	                this.params.fromBlock = fromBlock;
	                // set toBlock for initial lookup
	                toBlock = minBlockRef(this.params.toBlock, currentBlock);
	                params = Object.assign({}, this.params, {
	                  toBlock: toBlock
	                }); // fetch logs and add to results
	                _context.next = 9;
	                return this._fetchLogs(params);
	              case 9:
	                newLogs = _context.sent;
	                this.addInitialResults(newLogs);
	              case 11:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));
	      function initialize(_x) {
	        return _initialize.apply(this, arguments);
	      }
	      return initialize;
	    }()
	  }, {
	    key: "update",
	    value: function () {
	      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {
	        var _this2 = this;
	        var oldBlock, newBlock, toBlock, fromBlock, params, newLogs, matchingLogs;
	        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                oldBlock = _ref3.oldBlock, newBlock = _ref3.newBlock;
	                // configure params for this update
	                toBlock = newBlock;
	                // oldBlock is empty on first sync
	                if (oldBlock) {
	                  fromBlock = incrementHexInt(oldBlock);
	                } else {
	                  fromBlock = newBlock;
	                }
	                // fetch logs
	                params = Object.assign({}, this.params, {
	                  fromBlock: fromBlock,
	                  toBlock: toBlock
	                });
	                _context2.next = 6;
	                return this._fetchLogs(params);
	              case 6:
	                newLogs = _context2.sent;
	                matchingLogs = newLogs.filter(function (log) {
	                  return _this2.matchLog(log);
	                }); // add to results
	                this.addResults(matchingLogs);
	              case 9:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));
	      function update(_x2) {
	        return _update.apply(this, arguments);
	      }
	      return update;
	    }()
	  }, {
	    key: "_fetchLogs",
	    value: function () {
	      var _fetchLogs2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params) {
	        var _this3 = this;
	        var newLogs;
	        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                _context3.next = 2;
	                return pify(function (cb) {
	                  return _this3.ethQuery.getLogs(params, cb);
	                })();
	              case 2:
	                newLogs = _context3.sent;
	                return _context3.abrupt("return", newLogs);
	              case 4:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3);
	      }));
	      function _fetchLogs(_x3) {
	        return _fetchLogs2.apply(this, arguments);
	      }
	      return _fetchLogs;
	    }()
	  }, {
	    key: "matchLog",
	    value: function matchLog(log) {
	      // check if block number in bounds:
	      if (hexToInt(this.params.fromBlock) >= hexToInt(log.blockNumber)) return false;
	      if (blockRefIsNumber(this.params.toBlock) && hexToInt(this.params.toBlock) <= hexToInt(log.blockNumber)) return false;

	      // address is correct:
	      var normalizedLogAddress = log.address && log.address.toLowerCase();
	      if (this.params.address && normalizedLogAddress && !this.params.address.includes(normalizedLogAddress)) return false;

	      // topics match:
	      // topics are position-dependant
	      // topics can be nested to represent `or` [[a || b], c]
	      // topics can be null, representing a wild card for that position
	      var topicsMatch = this.params.topics.every(function (topicPattern, index) {
	        // pattern is longer than actual topics
	        var logTopic = log.topics[index];
	        if (!logTopic) return false;
	        logTopic = logTopic.toLowerCase();
	        // normalize subTopics
	        var subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [topicPattern];
	        // check for wild card
	        var subtopicsIncludeWildcard = subtopicsToMatch.includes(null);
	        if (subtopicsIncludeWildcard) return true;
	        subtopicsToMatch = subtopicsToMatch.map(function (topic) {
	          return topic.toLowerCase();
	        });
	        // check each possible matching topic
	        var topicDoesMatch = subtopicsToMatch.includes(logTopic);
	        return topicDoesMatch;
	      });
	      return topicsMatch;
	    }
	  }]);
	  return LogFilter;
	}(BaseFilterWithHistory);
	logFilter = LogFilter;
	return logFilter;
}

var getBlocksForRange_1;
var hasRequiredGetBlocksForRange;

function requireGetBlocksForRange () {
	if (hasRequiredGetBlocksForRange) return getBlocksForRange_1;
	hasRequiredGetBlocksForRange = 1;
	var _regeneratorRuntime = regenerator;
	var _asyncToGenerator = requireAsyncToGenerator();
	getBlocksForRange_1 = getBlocksForRange;
	function getBlocksForRange(_x) {
	  return _getBlocksForRange.apply(this, arguments);
	}
	function _getBlocksForRange() {
	  _getBlocksForRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
	    var provider, fromBlock, toBlock, fromBlockNumber, toBlockNumber, blockCountToQuery, missingBlockNumbers, blockBodies;
	    return _regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            provider = _ref.provider, fromBlock = _ref.fromBlock, toBlock = _ref.toBlock;
	            if (!fromBlock) fromBlock = toBlock;
	            fromBlockNumber = hexToInt(fromBlock);
	            toBlockNumber = hexToInt(toBlock);
	            blockCountToQuery = toBlockNumber - fromBlockNumber + 1; // load all blocks from old to new (inclusive)
	            missingBlockNumbers = Array(blockCountToQuery).fill().map(function (_, index) {
	              return fromBlockNumber + index;
	            }).map(intToHex);
	            _context.next = 8;
	            return Promise.all(missingBlockNumbers.map(function (blockNum) {
	              return query(provider, 'eth_getBlockByNumber', [blockNum, false]);
	            }));
	          case 8:
	            blockBodies = _context.sent;
	            return _context.abrupt("return", blockBodies);
	          case 10:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));
	  return _getBlocksForRange.apply(this, arguments);
	}
	function hexToInt(hexString) {
	  if (hexString === undefined || hexString === null) return hexString;
	  return Number.parseInt(hexString, 16);
	}
	function intToHex(_int) {
	  if (_int === undefined || _int === null) return _int;
	  var hexString = _int.toString(16);
	  return '0x' + hexString;
	}
	function query(provider, method, params) {
	  return new Promise(function (resolve, reject) {
	    provider.sendAsync({
	      id: 1,
	      jsonrpc: '2.0',
	      method: method,
	      params: params
	    }, function (err, res) {
	      if (err) return reject(err);
	      resolve(res.result);
	    });
	  });
	}
	return getBlocksForRange_1;
}

var blockFilter;
var hasRequiredBlockFilter;

function requireBlockFilter () {
	if (hasRequiredBlockFilter) return blockFilter;
	hasRequiredBlockFilter = 1;
	var _regeneratorRuntime = regenerator;
	var _asyncToGenerator = requireAsyncToGenerator();
	var _classCallCheck = classCallCheck.exports;
	var _createClass = createClass.exports;
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf.exports;
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	var BaseFilter = requireBaseFilter();
	var getBlocksForRange = requireGetBlocksForRange();
	var _require = requireHexUtils(),
	  incrementHexInt = _require.incrementHexInt;
	var BlockFilter = /*#__PURE__*/function (_BaseFilter) {

	  _inherits(BlockFilter, _BaseFilter);
	  var _super = _createSuper(BlockFilter);
	  function BlockFilter(_ref) {
	    var _this;
	    var provider = _ref.provider;
	      _ref.params;
	    _classCallCheck(this, BlockFilter);
	    _this = _super.call(this);
	    _this.type = 'block';
	    _this.provider = provider;
	    return _this;
	  }
	  _createClass(BlockFilter, [{
	    key: "update",
	    value: function () {
	      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {
	        var oldBlock, newBlock, toBlock, fromBlock, blockBodies, blockHashes;
	        return _regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                oldBlock = _ref2.oldBlock, newBlock = _ref2.newBlock;
	                toBlock = newBlock;
	                fromBlock = incrementHexInt(oldBlock);
	                _context.next = 5;
	                return getBlocksForRange({
	                  provider: this.provider,
	                  fromBlock: fromBlock,
	                  toBlock: toBlock
	                });
	              case 5:
	                blockBodies = _context.sent;
	                blockHashes = blockBodies.map(function (block) {
	                  return block.hash;
	                });
	                this.addResults(blockHashes);
	              case 8:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));
	      function update(_x) {
	        return _update.apply(this, arguments);
	      }
	      return update;
	    }()
	  }]);
	  return BlockFilter;
	}(BaseFilter);
	blockFilter = BlockFilter;
	return blockFilter;
}

var txFilter;
var hasRequiredTxFilter;

function requireTxFilter () {
	if (hasRequiredTxFilter) return txFilter;
	hasRequiredTxFilter = 1;
	var _regeneratorRuntime = regenerator;
	var _toConsumableArray = requireToConsumableArray();
	var _asyncToGenerator = requireAsyncToGenerator();
	var _classCallCheck = classCallCheck.exports;
	var _createClass = createClass.exports;
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf.exports;
	function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
	function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
	function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	var BaseFilter = requireBaseFilter();
	var getBlocksForRange = requireGetBlocksForRange();
	var _require = requireHexUtils(),
	  incrementHexInt = _require.incrementHexInt;
	var TxFilter = /*#__PURE__*/function (_BaseFilter) {

	  _inherits(TxFilter, _BaseFilter);
	  var _super = _createSuper(TxFilter);
	  function TxFilter(_ref) {
	    var _this;
	    var provider = _ref.provider;
	    _classCallCheck(this, TxFilter);
	    _this = _super.call(this);
	    _this.type = 'tx';
	    _this.provider = provider;
	    return _this;
	  }
	  _createClass(TxFilter, [{
	    key: "update",
	    value: function () {
	      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {
	        var oldBlock, toBlock, fromBlock, blocks, blockTxHashes, _iterator, _step, block;
	        return _regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                oldBlock = _ref2.oldBlock;
	                toBlock = oldBlock;
	                fromBlock = incrementHexInt(oldBlock);
	                _context.next = 5;
	                return getBlocksForRange({
	                  provider: this.provider,
	                  fromBlock: fromBlock,
	                  toBlock: toBlock
	                });
	              case 5:
	                blocks = _context.sent;
	                blockTxHashes = [];
	                _iterator = _createForOfIteratorHelper(blocks);
	                try {
	                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
	                    block = _step.value;
	                    blockTxHashes.push.apply(blockTxHashes, _toConsumableArray(block.transactions));
	                  }
	                  // add to results
	                } catch (err) {
	                  _iterator.e(err);
	                } finally {
	                  _iterator.f();
	                }
	                this.addResults(blockTxHashes);
	              case 10:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));
	      function update(_x) {
	        return _update.apply(this, arguments);
	      }
	      return update;
	    }()
	  }]);
	  return TxFilter;
	}(BaseFilter);
	txFilter = TxFilter;
	return txFilter;
}

var ethJsonRpcFilters;
var hasRequiredEthJsonRpcFilters;

function requireEthJsonRpcFilters () {
	if (hasRequiredEthJsonRpcFilters) return ethJsonRpcFilters;
	hasRequiredEthJsonRpcFilters = 1;
	var _regeneratorRuntime = regenerator;
	var _asyncToGenerator = requireAsyncToGenerator();
	var Mutex = requireLib$1().Mutex;
	var _require = requireDist$1(),
	  createAsyncMiddleware = _require.createAsyncMiddleware;
	var createJsonRpcMiddleware = requireScaffold();
	var LogFilter = requireLogFilter();
	var BlockFilter = requireBlockFilter();
	var TxFilter = requireTxFilter();
	var _require2 = requireHexUtils(),
	  intToHex = _require2.intToHex,
	  hexToInt = _require2.hexToInt;
	ethJsonRpcFilters = createEthFilterMiddleware;
	function createEthFilterMiddleware(_ref) {
	  var blockTracker = _ref.blockTracker,
	    provider = _ref.provider;
	  // create filter collection
	  var filterIndex = 0;
	  var filters = {};
	  // create update mutex
	  var mutex = new Mutex();
	  var waitForFree = mutexMiddlewareWrapper({
	    mutex: mutex
	  });
	  var middleware = createJsonRpcMiddleware({
	    // install filters
	    eth_newFilter: waitForFree(toFilterCreationMiddleware(newLogFilter)),
	    eth_newBlockFilter: waitForFree(toFilterCreationMiddleware(newBlockFilter)),
	    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),
	    // uninstall filters
	    eth_uninstallFilter: waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),
	    // checking filter changes
	    eth_getFilterChanges: waitForFree(toAsyncRpcMiddleware(getFilterChanges)),
	    eth_getFilterLogs: waitForFree(toAsyncRpcMiddleware(getFilterLogs))
	  });

	  // setup filter updating and destroy handler
	  var filterUpdater = /*#__PURE__*/function () {
	    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {
	      var oldBlock, newBlock, releaseLock;
	      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              oldBlock = _ref2.oldBlock, newBlock = _ref2.newBlock;
	              if (!(filters.length === 0)) {
	                _context2.next = 3;
	                break;
	              }
	              return _context2.abrupt("return");
	            case 3:
	              _context2.next = 5;
	              return mutex.acquire();
	            case 5:
	              releaseLock = _context2.sent;
	              _context2.prev = 6;
	              _context2.next = 9;
	              return Promise.all(objValues(filters).map( /*#__PURE__*/function () {
	                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(filter) {
	                  return _regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                      switch (_context.prev = _context.next) {
	                        case 0:
	                          _context.prev = 0;
	                          _context.next = 3;
	                          return filter.update({
	                            oldBlock: oldBlock,
	                            newBlock: newBlock
	                          });
	                        case 3:
	                          _context.next = 8;
	                          break;
	                        case 5:
	                          _context.prev = 5;
	                          _context.t0 = _context["catch"](0);
	                          // handle each error individually so filter update errors don't affect other filters
	                          console.error(_context.t0);
	                        case 8:
	                        case "end":
	                          return _context.stop();
	                      }
	                    }
	                  }, _callee, null, [[0, 5]]);
	                }));
	                return function (_x2) {
	                  return _ref4.apply(this, arguments);
	                };
	              }()));
	            case 9:
	              _context2.next = 14;
	              break;
	            case 11:
	              _context2.prev = 11;
	              _context2.t0 = _context2["catch"](6);
	              // log error so we don't skip the releaseLock
	              console.error(_context2.t0);
	            case 14:
	              // unlock update reads
	              releaseLock();
	            case 15:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2, null, [[6, 11]]);
	    }));
	    return function filterUpdater(_x) {
	      return _ref3.apply(this, arguments);
	    };
	  }();

	  // expose filter methods directly
	  middleware.newLogFilter = newLogFilter;
	  middleware.newBlockFilter = newBlockFilter;
	  middleware.newPendingTransactionFilter = newPendingTransactionFilter;
	  middleware.uninstallFilter = uninstallFilterHandler;
	  middleware.getFilterChanges = getFilterChanges;
	  middleware.getFilterLogs = getFilterLogs;

	  // expose destroy method for cleanup
	  middleware.destroy = function () {
	    uninstallAllFilters();
	  };
	  return middleware;

	  //
	  // new filters
	  //
	  function newLogFilter(_x3) {
	    return _newLogFilter.apply(this, arguments);
	  }
	  function _newLogFilter() {
	    _newLogFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params) {
	      var filter;
	      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              filter = new LogFilter({
	                provider: provider,
	                params: params
	              });
	              _context3.next = 3;
	              return installFilter(filter);
	            case 3:
	              _context3.sent;
	              return _context3.abrupt("return", filter);
	            case 5:
	            case "end":
	              return _context3.stop();
	          }
	        }
	      }, _callee3);
	    }));
	    return _newLogFilter.apply(this, arguments);
	  }
	  function newBlockFilter() {
	    return _newBlockFilter.apply(this, arguments);
	  }
	  function _newBlockFilter() {
	    _newBlockFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
	      var filter;
	      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
	        while (1) {
	          switch (_context4.prev = _context4.next) {
	            case 0:
	              filter = new BlockFilter({
	                provider: provider
	              });
	              _context4.next = 3;
	              return installFilter(filter);
	            case 3:
	              _context4.sent;
	              return _context4.abrupt("return", filter);
	            case 5:
	            case "end":
	              return _context4.stop();
	          }
	        }
	      }, _callee4);
	    }));
	    return _newBlockFilter.apply(this, arguments);
	  }
	  function newPendingTransactionFilter() {
	    return _newPendingTransactionFilter.apply(this, arguments);
	  } //
	  // get filter changes
	  //
	  function _newPendingTransactionFilter() {
	    _newPendingTransactionFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
	      var filter;
	      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
	        while (1) {
	          switch (_context5.prev = _context5.next) {
	            case 0:
	              filter = new TxFilter({
	                provider: provider
	              });
	              _context5.next = 3;
	              return installFilter(filter);
	            case 3:
	              _context5.sent;
	              return _context5.abrupt("return", filter);
	            case 5:
	            case "end":
	              return _context5.stop();
	          }
	        }
	      }, _callee5);
	    }));
	    return _newPendingTransactionFilter.apply(this, arguments);
	  }
	  function getFilterChanges(_x4) {
	    return _getFilterChanges.apply(this, arguments);
	  }
	  function _getFilterChanges() {
	    _getFilterChanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(filterIndexHex) {
	      var filterIndex, filter, results;
	      return _regeneratorRuntime.wrap(function _callee6$(_context6) {
	        while (1) {
	          switch (_context6.prev = _context6.next) {
	            case 0:
	              filterIndex = hexToInt(filterIndexHex);
	              filter = filters[filterIndex];
	              if (filter) {
	                _context6.next = 4;
	                break;
	              }
	              throw new Error("No filter for index \"".concat(filterIndex, "\""));
	            case 4:
	              results = filter.getChangesAndClear();
	              return _context6.abrupt("return", results);
	            case 6:
	            case "end":
	              return _context6.stop();
	          }
	        }
	      }, _callee6);
	    }));
	    return _getFilterChanges.apply(this, arguments);
	  }
	  function getFilterLogs(_x5) {
	    return _getFilterLogs.apply(this, arguments);
	  } //
	  // remove filters
	  //
	  function _getFilterLogs() {
	    _getFilterLogs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(filterIndexHex) {
	      var filterIndex, filter;
	      return _regeneratorRuntime.wrap(function _callee7$(_context7) {
	        while (1) {
	          switch (_context7.prev = _context7.next) {
	            case 0:
	              filterIndex = hexToInt(filterIndexHex);
	              filter = filters[filterIndex];
	              if (filter) {
	                _context7.next = 4;
	                break;
	              }
	              throw new Error("No filter for index \"".concat(filterIndex, "\""));
	            case 4:
	              // only return results for log filters
	              if (filter.type === 'log') {
	                results = filter.getAllResults();
	              } else {
	                results = [];
	              }
	              return _context7.abrupt("return", results);
	            case 6:
	            case "end":
	              return _context7.stop();
	          }
	        }
	      }, _callee7);
	    }));
	    return _getFilterLogs.apply(this, arguments);
	  }
	  function uninstallFilterHandler(_x6) {
	    return _uninstallFilterHandler.apply(this, arguments);
	  } //
	  // utils
	  //
	  function _uninstallFilterHandler() {
	    _uninstallFilterHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(filterIndexHex) {
	      var filterIndex, filter, result;
	      return _regeneratorRuntime.wrap(function _callee8$(_context8) {
	        while (1) {
	          switch (_context8.prev = _context8.next) {
	            case 0:
	              // check filter exists
	              filterIndex = hexToInt(filterIndexHex);
	              filter = filters[filterIndex];
	              result = Boolean(filter); // uninstall filter
	              if (!result) {
	                _context8.next = 6;
	                break;
	              }
	              _context8.next = 6;
	              return uninstallFilter(filterIndex);
	            case 6:
	              return _context8.abrupt("return", result);
	            case 7:
	            case "end":
	              return _context8.stop();
	          }
	        }
	      }, _callee8);
	    }));
	    return _uninstallFilterHandler.apply(this, arguments);
	  }
	  function installFilter(_x7) {
	    return _installFilter.apply(this, arguments);
	  }
	  function _installFilter() {
	    _installFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(filter) {
	      var prevFilterCount, currentBlock, newFilterCount;
	      return _regeneratorRuntime.wrap(function _callee9$(_context9) {
	        while (1) {
	          switch (_context9.prev = _context9.next) {
	            case 0:
	              prevFilterCount = objValues(filters).length; // install filter
	              _context9.next = 3;
	              return blockTracker.getLatestBlock();
	            case 3:
	              currentBlock = _context9.sent;
	              _context9.next = 6;
	              return filter.initialize({
	                currentBlock: currentBlock
	              });
	            case 6:
	              filterIndex++;
	              filters[filterIndex] = filter;
	              filter.id = filterIndex;
	              filter.idHex = intToHex(filterIndex);
	              // update block tracker subs
	              newFilterCount = objValues(filters).length;
	              updateBlockTrackerSubs({
	                prevFilterCount: prevFilterCount,
	                newFilterCount: newFilterCount
	              });
	              return _context9.abrupt("return", filterIndex);
	            case 13:
	            case "end":
	              return _context9.stop();
	          }
	        }
	      }, _callee9);
	    }));
	    return _installFilter.apply(this, arguments);
	  }
	  function uninstallFilter(_x8) {
	    return _uninstallFilter.apply(this, arguments);
	  }
	  function _uninstallFilter() {
	    _uninstallFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(filterIndex) {
	      var prevFilterCount, newFilterCount;
	      return _regeneratorRuntime.wrap(function _callee10$(_context10) {
	        while (1) {
	          switch (_context10.prev = _context10.next) {
	            case 0:
	              prevFilterCount = objValues(filters).length;
	              delete filters[filterIndex];
	              // update block tracker subs
	              newFilterCount = objValues(filters).length;
	              updateBlockTrackerSubs({
	                prevFilterCount: prevFilterCount,
	                newFilterCount: newFilterCount
	              });
	            case 4:
	            case "end":
	              return _context10.stop();
	          }
	        }
	      }, _callee10);
	    }));
	    return _uninstallFilter.apply(this, arguments);
	  }
	  function uninstallAllFilters() {
	    return _uninstallAllFilters.apply(this, arguments);
	  }
	  function _uninstallAllFilters() {
	    _uninstallAllFilters = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
	      var prevFilterCount;
	      return _regeneratorRuntime.wrap(function _callee11$(_context11) {
	        while (1) {
	          switch (_context11.prev = _context11.next) {
	            case 0:
	              prevFilterCount = objValues(filters).length;
	              filters = {};
	              // update block tracker subs
	              updateBlockTrackerSubs({
	                prevFilterCount: prevFilterCount,
	                newFilterCount: 0
	              });
	            case 3:
	            case "end":
	              return _context11.stop();
	          }
	        }
	      }, _callee11);
	    }));
	    return _uninstallAllFilters.apply(this, arguments);
	  }
	  function updateBlockTrackerSubs(_ref5) {
	    var prevFilterCount = _ref5.prevFilterCount,
	      newFilterCount = _ref5.newFilterCount;
	    // subscribe
	    if (prevFilterCount === 0 && newFilterCount > 0) {
	      blockTracker.on('sync', filterUpdater);
	      return;
	    }
	    // unsubscribe
	    if (prevFilterCount > 0 && newFilterCount === 0) {
	      blockTracker.removeListener('sync', filterUpdater);
	      return;
	    }
	  }
	}

	// helper for turning filter constructors into rpc middleware
	function toFilterCreationMiddleware(createFilterFn) {
	  return toAsyncRpcMiddleware( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
	    var filter,
	      result,
	      _args12 = arguments;
	    return _regeneratorRuntime.wrap(function _callee12$(_context12) {
	      while (1) {
	        switch (_context12.prev = _context12.next) {
	          case 0:
	            _context12.next = 2;
	            return createFilterFn.apply(void 0, _args12);
	          case 2:
	            filter = _context12.sent;
	            result = intToHex(filter.id);
	            return _context12.abrupt("return", result);
	          case 5:
	          case "end":
	            return _context12.stop();
	        }
	      }
	    }, _callee12);
	  })));
	}

	// helper for pulling out req.params and setting res.result
	function toAsyncRpcMiddleware(asyncFn) {
	  return createAsyncMiddleware( /*#__PURE__*/function () {
	    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(req, res) {
	      var result;
	      return _regeneratorRuntime.wrap(function _callee13$(_context13) {
	        while (1) {
	          switch (_context13.prev = _context13.next) {
	            case 0:
	              _context13.next = 2;
	              return asyncFn.apply(null, req.params);
	            case 2:
	              result = _context13.sent;
	              res.result = result;
	            case 4:
	            case "end":
	              return _context13.stop();
	          }
	        }
	      }, _callee13);
	    }));
	    return function (_x9, _x10) {
	      return _ref7.apply(this, arguments);
	    };
	  }());
	}
	function mutexMiddlewareWrapper(_ref8) {
	  var mutex = _ref8.mutex;
	  return function (middleware) {
	    return /*#__PURE__*/function () {
	      var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(req, res, next, end) {
	        var releaseLock;
	        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
	          while (1) {
	            switch (_context14.prev = _context14.next) {
	              case 0:
	                _context14.next = 2;
	                return mutex.acquire();
	              case 2:
	                releaseLock = _context14.sent;
	                releaseLock();
	                middleware(req, res, next, end);
	              case 5:
	              case "end":
	                return _context14.stop();
	            }
	          }
	        }, _callee14);
	      }));
	      return function (_x11, _x12, _x13, _x14) {
	        return _ref9.apply(this, arguments);
	      };
	    }();
	  };
	}
	function objValues(obj, fn) {
	  var values = [];
	  for (var key in obj) {
	    values.push(obj[key]);
	  }
	  return values;
	}
	return ethJsonRpcFilters;
}

var filters;
var hasRequiredFilters;

function requireFilters () {
	if (hasRequiredFilters) return filters;
	hasRequiredFilters = 1;
	var _createClass = createClass.exports;
	var _classCallCheck = classCallCheck.exports;
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf.exports;
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	var ProviderSubprovider = requireJsonRpcEngineMiddleware();
	var createFilterMiddleware = requireEthJsonRpcFilters();
	var SubscriptionsSubprovider = /*#__PURE__*/function (_ProviderSubprovider) {

	  _inherits(SubscriptionsSubprovider, _ProviderSubprovider);
	  var _super = _createSuper(SubscriptionsSubprovider);
	  function SubscriptionsSubprovider() {
	    _classCallCheck(this, SubscriptionsSubprovider);
	    return _super.call(this, function (_ref) {
	      var blockTracker = _ref.blockTracker,
	        provider = _ref.provider;
	        _ref.engine;
	      return createFilterMiddleware({
	        blockTracker: blockTracker,
	        provider: provider
	      });
	    });
	  }
	  return _createClass(SubscriptionsSubprovider);
	}(ProviderSubprovider);
	filters = SubscriptionsSubprovider;
	return filters;
}

var waterfall = {exports: {}};

var hasRequiredWaterfall;

function requireWaterfall () {
	if (hasRequiredWaterfall) return waterfall.exports;
	hasRequiredWaterfall = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = function (tasks, callback) {
		  callback = (0, _once2["default"])(callback || _noop2["default"]);
		  if (!(0, _isArray2["default"])(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));
		  if (!tasks.length) return callback();
		  var taskIndex = 0;
		  function nextTask(args) {
		    var task = (0, _wrapAsync2["default"])(tasks[taskIndex++]);
		    args.push((0, _onlyOnce2["default"])(next));
		    task.apply(null, args);
		  }
		  function next(err /*, ...args*/) {
		    if (err || taskIndex === tasks.length) {
		      return callback.apply(null, arguments);
		    }
		    nextTask((0, _slice2["default"])(arguments, 1));
		  }
		  nextTask([]);
		};
		var _isArray = requireIsArray();
		var _isArray2 = _interopRequireDefault(_isArray);
		var _noop = requireNoop();
		var _noop2 = _interopRequireDefault(_noop);
		var _once = requireOnce();
		var _once2 = _interopRequireDefault(_once);
		var _slice = requireSlice();
		var _slice2 = _interopRequireDefault(_slice);
		var _onlyOnce = requireOnlyOnce();
		var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
		var _wrapAsync = requireWrapAsync();
		var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		module.exports = exports['default'];

		/**
		 * Runs the `tasks` array of functions in series, each passing their results to
		 * the next in the array. However, if any of the `tasks` pass an error to their
		 * own callback, the next function is not executed, and the main `callback` is
		 * immediately called with the error.
		 *
		 * @name waterfall
		 * @static
		 * @memberOf module:ControlFlow
		 * @method
		 * @category Control Flow
		 * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}
		 * to run.
		 * Each function should complete with any number of `result` values.
		 * The `result` values will be passed as arguments, in order, to the next task.
		 * @param {Function} [callback] - An optional callback to run once all the
		 * functions have completed. This will be passed the results of the last task's
		 * callback. Invoked with (err, [results]).
		 * @returns undefined
		 * @example
		 *
		 * async.waterfall([
		 *     function(callback) {
		 *         callback(null, 'one', 'two');
		 *     },
		 *     function(arg1, arg2, callback) {
		 *         // arg1 now equals 'one' and arg2 now equals 'two'
		 *         callback(null, 'three');
		 *     },
		 *     function(arg1, callback) {
		 *         // arg1 now equals 'three'
		 *         callback(null, 'done');
		 *     }
		 * ], function (err, result) {
		 *     // result now equals 'done'
		 * });
		 *
		 * // Or, with named functions:
		 * async.waterfall([
		 *     myFirstFunction,
		 *     mySecondFunction,
		 *     myLastFunction,
		 * ], function (err, result) {
		 *     // result now equals 'done'
		 * });
		 * function myFirstFunction(callback) {
		 *     callback(null, 'one', 'two');
		 * }
		 * function mySecondFunction(arg1, arg2, callback) {
		 *     // arg1 now equals 'one' and arg2 now equals 'two'
		 *     callback(null, 'three');
		 * }
		 * function myLastFunction(arg1, callback) {
		 *     // arg1 now equals 'three'
		 *     callback(null, 'done');
		 * }
		 */
} (waterfall, waterfall.exports));
	return waterfall.exports;
}

var parallel$1 = {exports: {}};

var parallel = {exports: {}};

var hasRequiredParallel$1;

function requireParallel$1 () {
	if (hasRequiredParallel$1) return parallel.exports;
	hasRequiredParallel$1 = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = _parallel;
		var _noop = requireNoop();
		var _noop2 = _interopRequireDefault(_noop);
		var _isArrayLike = requireIsArrayLike();
		var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
		var _slice = requireSlice();
		var _slice2 = _interopRequireDefault(_slice);
		var _wrapAsync = requireWrapAsync();
		var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		function _parallel(eachfn, tasks, callback) {
		  callback = callback || _noop2["default"];
		  var results = (0, _isArrayLike2["default"])(tasks) ? [] : {};
		  eachfn(tasks, function (task, key, callback) {
		    (0, _wrapAsync2["default"])(task)(function (err, result) {
		      if (arguments.length > 2) {
		        result = (0, _slice2["default"])(arguments, 1);
		      }
		      results[key] = result;
		      callback(err);
		    });
		  }, function (err) {
		    callback(err, results);
		  });
		}
		module.exports = exports['default'];
} (parallel, parallel.exports));
	return parallel.exports;
}

var hasRequiredParallel;

function requireParallel () {
	if (hasRequiredParallel) return parallel$1.exports;
	hasRequiredParallel = 1;
	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = parallelLimit;
		var _eachOf = requireEachOf();
		var _eachOf2 = _interopRequireDefault(_eachOf);
		var _parallel = requireParallel$1();
		var _parallel2 = _interopRequireDefault(_parallel);
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}

		/**
		 * Run the `tasks` collection of functions in parallel, without waiting until
		 * the previous function has completed. If any of the functions pass an error to
		 * its callback, the main `callback` is immediately called with the value of the
		 * error. Once the `tasks` have completed, the results are passed to the final
		 * `callback` as an array.
		 *
		 * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about
		 * parallel execution of code.  If your tasks do not use any timers or perform
		 * any I/O, they will actually be executed in series.  Any synchronous setup
		 * sections for each task will happen one after the other.  JavaScript remains
		 * single-threaded.
		 *
		 * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the
		 * execution of other tasks when a task fails.
		 *
		 * It is also possible to use an object instead of an array. Each property will
		 * be run as a function and the results will be passed to the final `callback`
		 * as an object instead of an array. This can be a more readable way of handling
		 * results from {@link async.parallel}.
		 *
		 * @name parallel
		 * @static
		 * @memberOf module:ControlFlow
		 * @method
		 * @category Control Flow
		 * @param {Array|Iterable|Object} tasks - A collection of
		 * [async functions]{@link AsyncFunction} to run.
		 * Each async function can complete with any number of optional `result` values.
		 * @param {Function} [callback] - An optional callback to run once all the
		 * functions have completed successfully. This function gets a results array
		 * (or object) containing all the result arguments passed to the task callbacks.
		 * Invoked with (err, results).
		 *
		 * @example
		 * async.parallel([
		 *     function(callback) {
		 *         setTimeout(function() {
		 *             callback(null, 'one');
		 *         }, 200);
		 *     },
		 *     function(callback) {
		 *         setTimeout(function() {
		 *             callback(null, 'two');
		 *         }, 100);
		 *     }
		 * ],
		 * // optional callback
		 * function(err, results) {
		 *     // the results array will equal ['one','two'] even though
		 *     // the second function had a shorter timeout.
		 * });
		 *
		 * // an example using an object instead of an array
		 * async.parallel({
		 *     one: function(callback) {
		 *         setTimeout(function() {
		 *             callback(null, 1);
		 *         }, 200);
		 *     },
		 *     two: function(callback) {
		 *         setTimeout(function() {
		 *             callback(null, 2);
		 *         }, 100);
		 *     }
		 * }, function(err, results) {
		 *     // results is now equals to: {one: 1, two: 2}
		 * });
		 */
		function parallelLimit(tasks, callback) {
		  (0, _parallel2["default"])(_eachOf2["default"], tasks, callback);
		}
		module.exports = exports['default'];
} (parallel$1, parallel$1.exports));
	return parallel$1.exports;
}

var ethereumjsAbi = {exports: {}};

var dist = {};

var secp256k1v3Adapter = {};

var secp256k1v3Lib = {};

var hasRequiredSecp256k1v3Lib;

function requireSecp256k1v3Lib () {
	if (hasRequiredSecp256k1v3Lib) return secp256k1v3Lib;
	hasRequiredSecp256k1v3Lib = 1;

	// This file is imported from secp256k1 v3
	// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
	Object.defineProperty(secp256k1v3Lib, "__esModule", {
	  value: true
	});
	var BN = requireBn$2();
	var EC = requireElliptic$2().ec;
	var ec = new EC('secp256k1');
	var ecparams = ec.curve;
	secp256k1v3Lib.privateKeyExport = function (privateKey, compressed) {
	  if (compressed === void 0) {
	    compressed = true;
	  }
	  var d = new BN(privateKey);
	  if (d.ucmp(ecparams.n) >= 0) {
	    throw new Error("couldn't export to DER format");
	  }
	  var point = ec.g.mul(d);
	  return toPublicKey(point.getX(), point.getY(), compressed);
	};
	secp256k1v3Lib.privateKeyModInverse = function (privateKey) {
	  var bn = new BN(privateKey);
	  if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {
	    throw new Error('private key range is invalid');
	  }
	  return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);
	};
	secp256k1v3Lib.signatureImport = function (sigObj) {
	  var r = new BN(sigObj.r);
	  if (r.ucmp(ecparams.n) >= 0) {
	    r = new BN(0);
	  }
	  var s = new BN(sigObj.s);
	  if (s.ucmp(ecparams.n) >= 0) {
	    s = new BN(0);
	  }
	  return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);
	};
	secp256k1v3Lib.ecdhUnsafe = function (publicKey, privateKey, compressed) {
	  if (compressed === void 0) {
	    compressed = true;
	  }
	  var point = ec.keyFromPublic(publicKey);
	  var scalar = new BN(privateKey);
	  if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {
	    throw new Error('scalar was invalid (zero or overflow)');
	  }
	  var shared = point.pub.mul(scalar);
	  return toPublicKey(shared.getX(), shared.getY(), compressed);
	};
	var toPublicKey = function toPublicKey(x, y, compressed) {
	  var publicKey;
	  if (compressed) {
	    publicKey = Buffer.alloc(33);
	    publicKey[0] = y.isOdd() ? 0x03 : 0x02;
	    x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
	  } else {
	    publicKey = Buffer.alloc(65);
	    publicKey[0] = 0x04;
	    x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
	    y.toArrayLike(Buffer, 'be', 32).copy(publicKey, 33);
	  }
	  return publicKey;
	};
	return secp256k1v3Lib;
}

var der = {};

var hasRequiredDer;

function requireDer () {
	if (hasRequiredDer) return der;
	hasRequiredDer = 1;

	// This file is imported from secp256k1 v3
	// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
	Object.defineProperty(der, "__esModule", {
	  value: true
	});
	var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
	// begin
	0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,
	// private key
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	// middle
	0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x21, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,
	// public key
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
	var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
	// begin
	0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,
	// private key
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	// middle
	0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x41, 0x04, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0e, 0x11, 0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10, 0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,
	// public key
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
	der.privateKeyExport = function (privateKey, publicKey, compressed) {
	  if (compressed === void 0) {
	    compressed = true;
	  }
	  var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
	  privateKey.copy(result, compressed ? 8 : 9);
	  publicKey.copy(result, compressed ? 181 : 214);
	  return result;
	};
	der.privateKeyImport = function (privateKey) {
	  var length = privateKey.length;
	  // sequence header
	  var index = 0;
	  if (length < index + 1 || privateKey[index] !== 0x30) return null;
	  index += 1;
	  // sequence length constructor
	  if (length < index + 1 || !(privateKey[index] & 0x80)) return null;
	  var lenb = privateKey[index] & 0x7f;
	  index += 1;
	  if (lenb < 1 || lenb > 2) return null;
	  if (length < index + lenb) return null;
	  // sequence length
	  var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
	  index += lenb;
	  if (length < index + len) return null;
	  // sequence element 0: version number (=1)
	  if (length < index + 3 || privateKey[index] !== 0x02 || privateKey[index + 1] !== 0x01 || privateKey[index + 2] !== 0x01) {
	    return null;
	  }
	  index += 3;
	  // sequence element 1: octet string, up to 32 bytes
	  if (length < index + 2 || privateKey[index] !== 0x04 || privateKey[index + 1] > 0x20 || length < index + 2 + privateKey[index + 1]) {
	    return null;
	  }
	  return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
	};
	der.signatureImportLax = function (signature) {
	  var r = Buffer.alloc(32, 0);
	  var s = Buffer.alloc(32, 0);
	  var length = signature.length;
	  var index = 0;
	  // sequence tag byte
	  if (signature[index++] !== 0x30) {
	    return null;
	  }
	  // sequence length byte
	  var lenbyte = signature[index++];
	  if (lenbyte & 0x80) {
	    index += lenbyte - 0x80;
	    if (index > length) {
	      return null;
	    }
	  }
	  // sequence tag byte for r
	  if (signature[index++] !== 0x02) {
	    return null;
	  }
	  // length for r
	  var rlen = signature[index++];
	  if (rlen & 0x80) {
	    lenbyte = rlen - 0x80;
	    if (index + lenbyte > length) {
	      return null;
	    }
	    for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) {
	    }
	    for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
	      rlen = (rlen << 8) + signature[index];
	    }
	  }
	  if (rlen > length - index) {
	    return null;
	  }
	  var rindex = index;
	  index += rlen;
	  // sequence tag byte for s
	  if (signature[index++] !== 0x02) {
	    return null;
	  }
	  // length for s
	  var slen = signature[index++];
	  if (slen & 0x80) {
	    lenbyte = slen - 0x80;
	    if (index + lenbyte > length) {
	      return null;
	    }
	    for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) {
	    }
	    for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
	      slen = (slen << 8) + signature[index];
	    }
	  }
	  if (slen > length - index) {
	    return null;
	  }
	  var sindex = index;
	  index += slen;
	  // ignore leading zeros in r
	  for (; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1) {
	  }
	  // copy r value
	  if (rlen > 32) {
	    return null;
	  }
	  var rvalue = signature.slice(rindex, rindex + rlen);
	  rvalue.copy(r, 32 - rvalue.length);
	  // ignore leading zeros in s
	  for (; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1) {
	  }
	  // copy s value
	  if (slen > 32) {
	    return null;
	  }
	  var svalue = signature.slice(sindex, sindex + slen);
	  svalue.copy(s, 32 - svalue.length);
	  return {
	    r: r,
	    s: s
	  };
	};
	return der;
}

var hasRequiredSecp256k1v3Adapter;

function requireSecp256k1v3Adapter () {
	if (hasRequiredSecp256k1v3Adapter) return secp256k1v3Adapter;
	hasRequiredSecp256k1v3Adapter = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.ecdhUnsafe = exports.ecdh = exports.recover = exports.verify = exports.sign = exports.signatureImportLax = exports.signatureImport = exports.signatureExport = exports.signatureNormalize = exports.publicKeyCombine = exports.publicKeyTweakMul = exports.publicKeyTweakAdd = exports.publicKeyVerify = exports.publicKeyConvert = exports.publicKeyCreate = exports.privateKeyTweakMul = exports.privateKeyTweakAdd = exports.privateKeyModInverse = exports.privateKeyNegate = exports.privateKeyImport = exports.privateKeyExport = exports.privateKeyVerify = void 0;
		var secp256k1 = requireSecp256k1();
		var secp256k1v3 = requireSecp256k1v3Lib();
		var der = requireDer();
		/**
		 * Verify an ECDSA privateKey
		 * @method privateKeyVerify
		 * @param {Buffer} privateKey
		 * @return {boolean}
		 */
		exports.privateKeyVerify = function (privateKey) {
		  // secp256k1 v4 version throws when privateKey length is not 32
		  if (privateKey.length !== 32) {
		    return false;
		  }
		  return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));
		};
		/**
		 * Export a privateKey in DER format
		 * @method privateKeyExport
		 * @param {Buffer} privateKey
		 * @param {boolean} compressed
		 * @return {boolean}
		 */
		exports.privateKeyExport = function (privateKey, compressed) {
		  // secp256k1 v4 version throws when privateKey length is not 32
		  if (privateKey.length !== 32) {
		    throw new RangeError('private key length is invalid');
		  }
		  var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);
		  return der.privateKeyExport(privateKey, publicKey, compressed);
		};
		/**
		 * Import a privateKey in DER format
		 * @method privateKeyImport
		 * @param {Buffer} privateKey
		 * @return {Buffer}
		 */
		exports.privateKeyImport = function (privateKey) {
		  // privateKeyImport method is not part of secp256k1 v4 package
		  // this implementation is based on v3
		  privateKey = der.privateKeyImport(privateKey);
		  if (privateKey !== null && privateKey.length === 32 && exports.privateKeyVerify(privateKey)) {
		    return privateKey;
		  }
		  throw new Error("couldn't import from DER format");
		};
		/**
		 * Negate a privateKey by subtracting it from the order of the curve's base point
		 * @method privateKeyNegate
		 * @param {Buffer} privateKey
		 * @return {Buffer}
		 */
		exports.privateKeyNegate = function (privateKey) {
		  return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));
		};
		/**
		 * Compute the inverse of a privateKey (modulo the order of the curve's base point).
		 * @method privateKeyModInverse
		 * @param {Buffer} privateKey
		 * @return {Buffer}
		 */
		exports.privateKeyModInverse = function (privateKey) {
		  if (privateKey.length !== 32) {
		    throw new Error('private key length is invalid');
		  }
		  return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));
		};
		/**
		 * Tweak a privateKey by adding tweak to it.
		 * @method privateKeyTweakAdd
		 * @param {Buffer} privateKey
		 * @param {Buffer} tweak
		 * @return {Buffer}
		 */
		exports.privateKeyTweakAdd = function (privateKey, tweak) {
		  return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
		};
		/**
		 * Tweak a privateKey by multiplying it by a tweak.
		 * @method privateKeyTweakMul
		 * @param {Buffer} privateKey
		 * @param {Buffer} tweak
		 * @return {Buffer}
		 */
		exports.privateKeyTweakMul = function (privateKey, tweak) {
		  return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
		};
		/**
		 * Compute the public key for a privateKey.
		 * @method publicKeyCreate
		 * @param {Buffer} privateKey
		 * @param {boolean} compressed
		 * @return {Buffer}
		 */
		exports.publicKeyCreate = function (privateKey, compressed) {
		  return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));
		};
		/**
		 * Convert a publicKey to compressed or uncompressed form.
		 * @method publicKeyConvert
		 * @param {Buffer} publicKey
		 * @param {boolean} compressed
		 * @return {Buffer}
		 */
		exports.publicKeyConvert = function (publicKey, compressed) {
		  return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));
		};
		/**
		 * Verify an ECDSA publicKey.
		 * @method publicKeyVerify
		 * @param {Buffer} publicKey
		 * @return {boolean}
		 */
		exports.publicKeyVerify = function (publicKey) {
		  // secp256k1 v4 version throws when publicKey length is not 33 or 65
		  if (publicKey.length !== 33 && publicKey.length !== 65) {
		    return false;
		  }
		  return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));
		};
		/**
		 * Tweak a publicKey by adding tweak times the generator to it.
		 * @method publicKeyTweakAdd
		 * @param {Buffer} publicKey
		 * @param {Buffer} tweak
		 * @param {boolean} compressed
		 * @return {Buffer}
		 */
		exports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {
		  return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
		};
		/**
		 * Tweak a publicKey by multiplying it by a tweak value
		 * @method publicKeyTweakMul
		 * @param {Buffer} publicKey
		 * @param {Buffer} tweak
		 * @param {boolean} compressed
		 * @return {Buffer}
		 */
		exports.publicKeyTweakMul = function (publicKey, tweak, compressed) {
		  return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
		};
		/**
		 * Add a given publicKeys together.
		 * @method publicKeyCombine
		 * @param {Array<Buffer>} publicKeys
		 * @param {boolean} compressed
		 * @return {Buffer}
		 */
		exports.publicKeyCombine = function (publicKeys, compressed) {
		  var keys = [];
		  publicKeys.forEach(function (publicKey) {
		    keys.push(Uint8Array.from(publicKey));
		  });
		  return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));
		};
		/**
		 * Convert a signature to a normalized lower-S form.
		 * @method signatureNormalize
		 * @param {Buffer} signature
		 * @return {Buffer}
		 */
		exports.signatureNormalize = function (signature) {
		  return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));
		};
		/**
		 * Serialize an ECDSA signature in DER format.
		 * @method signatureExport
		 * @param {Buffer} signature
		 * @return {Buffer}
		 */
		exports.signatureExport = function (signature) {
		  return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature)));
		};
		/**
		 * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
		 * @method signatureImport
		 * @param {Buffer} signature
		 * @return {Buffer}
		 */
		exports.signatureImport = function (signature) {
		  return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature)));
		};
		/**
		 * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
		 * @method signatureImportLax
		 * @param {Buffer} signature
		 * @return {Buffer}
		 */
		exports.signatureImportLax = function (signature) {
		  // signatureImportLax method is not part of secp256k1 v4 package
		  // this implementation is based on v3
		  // ensure that signature is greater than 0
		  if (signature.length === 0) {
		    throw new RangeError('signature length is invalid');
		  }
		  var sigObj = der.signatureImportLax(signature);
		  if (sigObj === null) {
		    throw new Error("couldn't parse DER signature");
		  }
		  return secp256k1v3.signatureImport(sigObj);
		};
		/**
		 * Create an ECDSA signature. Always return low-S signature.
		 * @method sign
		 * @param {Buffer} message
		 * @param {Buffer} privateKey
		 * @param {Object} options
		 * @return {Buffer}
		 */
		exports.sign = function (message, privateKey, options) {
		  if (options === null) {
		    throw new TypeError('options should be an Object');
		  }
		  var signOptions = undefined;
		  if (options) {
		    signOptions = {};
		    if (options.data === null) {
		      // validate option.data length
		      throw new TypeError('options.data should be a Buffer');
		    }
		    if (options.data) {
		      if (options.data.length != 32) {
		        throw new RangeError('options.data length is invalid');
		      }
		      signOptions.data = new Uint8Array(options.data);
		    }
		    if (options.noncefn === null) {
		      throw new TypeError('options.noncefn should be a Function');
		    }
		    if (options.noncefn) {
		      // convert option.noncefn function signature
		      signOptions.noncefn = function (message, privateKey, algo, data, attempt) {
		        var bufferAlgo = algo != null ? Buffer.from(algo) : null;
		        var bufferData = data != null ? Buffer.from(data) : null;
		        var buffer = Buffer.from('');
		        if (options.noncefn) {
		          buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);
		        }
		        return new Uint8Array(buffer);
		      };
		    }
		  }
		  var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);
		  return {
		    signature: Buffer.from(sig.signature),
		    recovery: sig.recid
		  };
		};
		/**
		 * Verify an ECDSA signature.
		 * @method verify
		 * @param {Buffer} message
		 * @param {Buffer} signature
		 * @param {Buffer} publicKey
		 * @return {boolean}
		 */
		exports.verify = function (message, signature, publicKey) {
		  return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
		};
		/**
		 * Recover an ECDSA public key from a signature.
		 * @method recover
		 * @param {Buffer} message
		 * @param {Buffer} signature
		 * @param {Number} recid
		 * @param {boolean} compressed
		 * @return {Buffer}
		 */
		exports.recover = function (message, signature, recid, compressed) {
		  return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
		};
		/**
		 * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.
		 * @method ecdh
		 * @param {Buffer} publicKey
		 * @param {Buffer} privateKey
		 * @return {Buffer}
		 */
		exports.ecdh = function (publicKey, privateKey) {
		  // note: secp256k1 v3 doesn't allow optional parameter
		  return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
		};
		exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
		  // ecdhUnsafe method is not part of secp256k1 v4 package
		  // this implementation is based on v3
		  // ensure valid publicKey length
		  if (publicKey.length !== 33 && publicKey.length !== 65) {
		    throw new RangeError('public key length is invalid');
		  }
		  // ensure valid privateKey length
		  if (privateKey.length !== 32) {
		    throw new RangeError('private key length is invalid');
		  }
		  return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
		};
} (secp256k1v3Adapter));
	return secp256k1v3Adapter;
}

var constants = {};

var hasRequiredConstants;

function requireConstants () {
	if (hasRequiredConstants) return constants;
	hasRequiredConstants = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = void 0;
		var BN = requireBn$2();
		/**
		 * The max integer that this VM can handle
		 */
		exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);
		/**
		 * 2^256
		 */
		exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);
		/**
		 * Keccak-256 hash of null
		 */
		exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
		/**
		 * Keccak-256 hash of null
		 */
		exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
		/**
		 * Keccak-256 of an RLP of an empty array
		 */
		exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
		/**
		 * Keccak-256 of an RLP of an empty array
		 */
		exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
		/**
		 * Keccak-256 hash of the RLP of null
		 */
		exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
		/**
		 * Keccak-256 hash of the RLP of null
		 */
		exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');
} (constants));
	return constants;
}

var account = {};

var bytes = {};

var hasRequiredBytes;

function requireBytes () {
	if (hasRequiredBytes) return bytes;
	hasRequiredBytes = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.baToJSON = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.stripZeros = exports.unpad = exports.setLengthRight = exports.setLength = exports.setLengthLeft = exports.zeros = void 0;
		var ethjsUtil = requireLib$2();
		var BN = requireBn$2();
		/**
		 * Returns a buffer filled with 0s.
		 * @param bytes the number of bytes the buffer should be
		 */
		exports.zeros = function (bytes) {
		  return Buffer.allocUnsafe(bytes).fill(0);
		};
		/**
		 * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
		 * Or it truncates the beginning if it exceeds.
		 * @param msg the value to pad (Buffer|Array)
		 * @param length the number of bytes the output should be
		 * @param right whether to start padding form the left or right
		 * @return (Buffer|Array)
		 */
		exports.setLengthLeft = function (msg, length, right) {
		  if (right === void 0) {
		    right = false;
		  }
		  var buf = exports.zeros(length);
		  msg = exports.toBuffer(msg);
		  if (right) {
		    if (msg.length < length) {
		      msg.copy(buf);
		      return buf;
		    }
		    return msg.slice(0, length);
		  } else {
		    if (msg.length < length) {
		      msg.copy(buf, length - msg.length);
		      return buf;
		    }
		    return msg.slice(-length);
		  }
		};
		exports.setLength = exports.setLengthLeft;
		/**
		 * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
		 * Or it truncates the beginning if it exceeds.
		 * @param msg the value to pad (Buffer|Array)
		 * @param length the number of bytes the output should be
		 * @return (Buffer|Array)
		 */
		exports.setLengthRight = function (msg, length) {
		  return exports.setLength(msg, length, true);
		};
		/**
		 * Trims leading zeros from a `Buffer` or an `Array`.
		 * @param a (Buffer|Array|String)
		 * @return (Buffer|Array|String)
		 */
		exports.unpad = function (a) {
		  a = ethjsUtil.stripHexPrefix(a);
		  var first = a[0];
		  while (a.length > 0 && first.toString() === '0') {
		    a = a.slice(1);
		    first = a[0];
		  }
		  return a;
		};
		exports.stripZeros = exports.unpad;
		/**
		 * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
		 * @param v the value
		 */
		exports.toBuffer = function (v) {
		  if (!Buffer.isBuffer(v)) {
		    if (Array.isArray(v)) {
		      v = Buffer.from(v);
		    } else if (typeof v === 'string') {
		      if (ethjsUtil.isHexString(v)) {
		        v = Buffer.from(ethjsUtil.padToEven(ethjsUtil.stripHexPrefix(v)), 'hex');
		      } else {
		        throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: " + v);
		      }
		    } else if (typeof v === 'number') {
		      v = ethjsUtil.intToBuffer(v);
		    } else if (v === null || v === undefined) {
		      v = Buffer.allocUnsafe(0);
		    } else if (BN.isBN(v)) {
		      v = v.toArrayLike(Buffer);
		    } else if (v.toArray) {
		      // converts a BN to a Buffer
		      v = Buffer.from(v.toArray());
		    } else {
		      throw new Error('invalid type');
		    }
		  }
		  return v;
		};
		/**
		 * Converts a `Buffer` to a `Number`.
		 * @param buf `Buffer` object to convert
		 * @throws If the input number exceeds 53 bits.
		 */
		exports.bufferToInt = function (buf) {
		  return new BN(exports.toBuffer(buf)).toNumber();
		};
		/**
		 * Converts a `Buffer` into a `0x`-prefixed hex `String`.
		 * @param buf `Buffer` object to convert
		 */
		exports.bufferToHex = function (buf) {
		  buf = exports.toBuffer(buf);
		  return '0x' + buf.toString('hex');
		};
		/**
		 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
		 * @param num Signed integer value
		 */
		exports.fromSigned = function (num) {
		  return new BN(num).fromTwos(256);
		};
		/**
		 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
		 * @param num
		 */
		exports.toUnsigned = function (num) {
		  return Buffer.from(num.toTwos(256).toArray());
		};
		/**
		 * Adds "0x" to a given `String` if it does not already start with "0x".
		 */
		exports.addHexPrefix = function (str) {
		  if (typeof str !== 'string') {
		    return str;
		  }
		  return ethjsUtil.isHexPrefixed(str) ? str : '0x' + str;
		};
		/**
		 * Converts a `Buffer` or `Array` to JSON.
		 * @param ba (Buffer|Array)
		 * @return (Array|String|null)
		 */
		exports.baToJSON = function (ba) {
		  if (Buffer.isBuffer(ba)) {
		    return "0x" + ba.toString('hex');
		  } else if (ba instanceof Array) {
		    var array = [];
		    for (var i = 0; i < ba.length; i++) {
		      array.push(exports.baToJSON(ba[i]));
		    }
		    return array;
		  }
		};
} (bytes));
	return bytes;
}

var hash = {};

var hasRequiredHash;

function requireHash () {
	if (hasRequiredHash) return hash;
	hasRequiredHash = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.rlphash = exports.ripemd160 = exports.sha256 = exports.keccak256 = exports.keccak = void 0;
		var _a = requireKeccak(),
		  keccak224 = _a.keccak224,
		  keccak384 = _a.keccak384,
		  k256 = _a.keccak256,
		  keccak512 = _a.keccak512;
		var createHash = requireCreateHash();
		var ethjsUtil = requireLib$2();
		var rlp = requireDist$4();
		var bytes_1 = requireBytes();
		/**
		 * Creates Keccak hash of the input
		 * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value
		 * it's interpreted as hexadecimal, otherwise as utf8.
		 * @param bits The Keccak width
		 */
		exports.keccak = function (a, bits) {
		  if (bits === void 0) {
		    bits = 256;
		  }
		  if (typeof a === 'string' && !ethjsUtil.isHexString(a)) {
		    a = Buffer.from(a, 'utf8');
		  } else {
		    a = bytes_1.toBuffer(a);
		  }
		  if (!bits) bits = 256;
		  switch (bits) {
		    case 224:
		      {
		        return keccak224(a);
		      }
		    case 256:
		      {
		        return k256(a);
		      }
		    case 384:
		      {
		        return keccak384(a);
		      }
		    case 512:
		      {
		        return keccak512(a);
		      }
		    default:
		      {
		        throw new Error("Invald algorithm: keccak" + bits);
		      }
		  }
		};
		/**
		 * Creates Keccak-256 hash of the input, alias for keccak(a, 256).
		 * @param a The input data (Buffer|Array|String|Number)
		 */
		exports.keccak256 = function (a) {
		  return exports.keccak(a);
		};
		/**
		 * Creates SHA256 hash of the input.
		 * @param a The input data (Buffer|Array|String|Number)
		 */
		exports.sha256 = function (a) {
		  a = bytes_1.toBuffer(a);
		  return createHash('sha256').update(a).digest();
		};
		/**
		 * Creates RIPEMD160 hash of the input.
		 * @param a The input data (Buffer|Array|String|Number)
		 * @param padded Whether it should be padded to 256 bits or not
		 */
		exports.ripemd160 = function (a, padded) {
		  a = bytes_1.toBuffer(a);
		  var hash = createHash('rmd160').update(a).digest();
		  if (padded === true) {
		    return bytes_1.setLength(hash, 32);
		  } else {
		    return hash;
		  }
		};
		/**
		 * Creates SHA-3 hash of the RLP encoded version of the input.
		 * @param a The input data
		 */
		exports.rlphash = function (a) {
		  return exports.keccak(rlp.encode(a));
		};
} (hash));
	return hash;
}

var hasRequiredAccount;

function requireAccount () {
	if (hasRequiredAccount) return account;
	hasRequiredAccount = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.importPublic = exports.privateToPublic = exports.privateToAddress = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.isPrecompiled = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isZeroAddress = exports.isValidAddress = exports.zeroAddress = void 0;
		var assert = require$$0__default$2["default"];
		var ethjsUtil = requireLib$2();
		var secp256k1 = requireSecp256k1v3Adapter();
		var BN = requireBn$2();
		var bytes_1 = requireBytes();
		var hash_1 = requireHash();
		/**
		 * Returns a zero address.
		 */
		exports.zeroAddress = function () {
		  var addressLength = 20;
		  var addr = bytes_1.zeros(addressLength);
		  return bytes_1.bufferToHex(addr);
		};
		/**
		 * Checks if the address is a valid. Accepts checksummed addresses too.
		 */
		exports.isValidAddress = function (address) {
		  return /^0x[0-9a-fA-F]{40}$/.test(address);
		};
		/**
		 * Checks if a given address is a zero address.
		 */
		exports.isZeroAddress = function (address) {
		  var zeroAddr = exports.zeroAddress();
		  return zeroAddr === bytes_1.addHexPrefix(address);
		};
		/**
		 * Returns a checksummed address.
		 *
		 * If a eip1191ChainId is provided, the chainId will be included in the checksum calculation. This
		 * has the effect of checksummed addresses for one chain having invalid checksums for others.
		 * For more details, consult EIP-1191.
		 *
		 * WARNING: Checksums with and without the chainId will differ. As of 2019-06-26, the most commonly
		 * used variation in Ethereum was without the chainId. This may change in the future.
		 */
		exports.toChecksumAddress = function (address, eip1191ChainId) {
		  address = ethjsUtil.stripHexPrefix(address).toLowerCase();
		  var prefix = eip1191ChainId !== undefined ? eip1191ChainId.toString() + '0x' : '';
		  var hash = hash_1.keccak(prefix + address).toString('hex');
		  var ret = '0x';
		  for (var i = 0; i < address.length; i++) {
		    if (parseInt(hash[i], 16) >= 8) {
		      ret += address[i].toUpperCase();
		    } else {
		      ret += address[i];
		    }
		  }
		  return ret;
		};
		/**
		 * Checks if the address is a valid checksummed address.
		 *
		 * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.
		 */
		exports.isValidChecksumAddress = function (address, eip1191ChainId) {
		  return exports.isValidAddress(address) && exports.toChecksumAddress(address, eip1191ChainId) === address;
		};
		/**
		 * Generates an address of a newly created contract.
		 * @param from The address which is creating this new address
		 * @param nonce The nonce of the from account
		 */
		exports.generateAddress = function (from, nonce) {
		  from = bytes_1.toBuffer(from);
		  var nonceBN = new BN(nonce);
		  if (nonceBN.isZero()) {
		    // in RLP we want to encode null in the case of zero nonce
		    // read the RLP documentation for an answer if you dare
		    return hash_1.rlphash([from, null]).slice(-20);
		  }
		  // Only take the lower 160bits of the hash
		  return hash_1.rlphash([from, Buffer.from(nonceBN.toArray())]).slice(-20);
		};
		/**
		 * Generates an address for a contract created using CREATE2.
		 * @param from The address which is creating this new address
		 * @param salt A salt
		 * @param initCode The init code of the contract being created
		 */
		exports.generateAddress2 = function (from, salt, initCode) {
		  var fromBuf = bytes_1.toBuffer(from);
		  var saltBuf = bytes_1.toBuffer(salt);
		  var initCodeBuf = bytes_1.toBuffer(initCode);
		  assert(fromBuf.length === 20);
		  assert(saltBuf.length === 32);
		  var address = hash_1.keccak256(Buffer.concat([Buffer.from('ff', 'hex'), fromBuf, saltBuf, hash_1.keccak256(initCodeBuf)]));
		  return address.slice(-20);
		};
		/**
		 * Returns true if the supplied address belongs to a precompiled account (Byzantium).
		 */
		exports.isPrecompiled = function (address) {
		  var a = bytes_1.unpad(address);
		  return a.length === 1 && a[0] >= 1 && a[0] <= 8;
		};
		/**
		 * Checks if the private key satisfies the rules of the curve secp256k1.
		 */
		exports.isValidPrivate = function (privateKey) {
		  return secp256k1.privateKeyVerify(privateKey);
		};
		/**
		 * Checks if the public key satisfies the rules of the curve secp256k1
		 * and the requirements of Ethereum.
		 * @param publicKey The two points of an uncompressed key, unless sanitize is enabled
		 * @param sanitize Accept public keys in other formats
		 */
		exports.isValidPublic = function (publicKey, sanitize) {
		  if (sanitize === void 0) {
		    sanitize = false;
		  }
		  if (publicKey.length === 64) {
		    // Convert to SEC1 for secp256k1
		    return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
		  }
		  if (!sanitize) {
		    return false;
		  }
		  return secp256k1.publicKeyVerify(publicKey);
		};
		/**
		 * Returns the ethereum address of a given public key.
		 * Accepts "Ethereum public keys" and SEC1 encoded keys.
		 * @param pubKey The two points of an uncompressed key, unless sanitize is enabled
		 * @param sanitize Accept public keys in other formats
		 */
		exports.pubToAddress = function (pubKey, sanitize) {
		  if (sanitize === void 0) {
		    sanitize = false;
		  }
		  pubKey = bytes_1.toBuffer(pubKey);
		  if (sanitize && pubKey.length !== 64) {
		    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
		  }
		  assert(pubKey.length === 64);
		  // Only take the lower 160bits of the hash
		  return hash_1.keccak(pubKey).slice(-20);
		};
		exports.publicToAddress = exports.pubToAddress;
		/**
		 * Returns the ethereum address of a given private key.
		 * @param privateKey A private key must be 256 bits wide
		 */
		exports.privateToAddress = function (privateKey) {
		  return exports.publicToAddress(exports.privateToPublic(privateKey));
		};
		/**
		 * Returns the ethereum public key of a given private key.
		 * @param privateKey A private key must be 256 bits wide
		 */
		exports.privateToPublic = function (privateKey) {
		  privateKey = bytes_1.toBuffer(privateKey);
		  // skip the type flag and use the X, Y points
		  return secp256k1.publicKeyCreate(privateKey, false).slice(1);
		};
		/**
		 * Converts a public key to the Ethereum format.
		 */
		exports.importPublic = function (publicKey) {
		  publicKey = bytes_1.toBuffer(publicKey);
		  if (publicKey.length !== 64) {
		    publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
		  }
		  return publicKey;
		};
} (account));
	return account;
}

var signature = {};

var hasRequiredSignature;

function requireSignature () {
	if (hasRequiredSignature) return signature;
	hasRequiredSignature = 1;

	Object.defineProperty(signature, "__esModule", {
	  value: true
	});
	signature.hashPersonalMessage = signature.isValidSignature = signature.fromRpcSig = signature.toRpcSig = signature.ecrecover = signature.ecsign = void 0;
	var secp256k1 = requireSecp256k1v3Adapter();
	var BN = requireBn$2();
	var bytes_1 = requireBytes();
	var hash_1 = requireHash();
	/**
	 * Returns the ECDSA signature of a message hash.
	 */
	signature.ecsign = function (msgHash, privateKey, chainId) {
	  var sig = secp256k1.sign(msgHash, privateKey);
	  var recovery = sig.recovery;
	  var ret = {
	    r: sig.signature.slice(0, 32),
	    s: sig.signature.slice(32, 64),
	    v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27
	  };
	  return ret;
	};
	/**
	 * ECDSA public key recovery from signature.
	 * @returns Recovered public key
	 */
	signature.ecrecover = function (msgHash, v, r, s, chainId) {
	  var signature = Buffer.concat([bytes_1.setLength(r, 32), bytes_1.setLength(s, 32)], 64);
	  var recovery = calculateSigRecovery(v, chainId);
	  if (!isValidSigRecovery(recovery)) {
	    throw new Error('Invalid signature v value');
	  }
	  var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
	  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
	};
	/**
	 * Convert signature parameters into the format of `eth_sign` RPC method.
	 * @returns Signature
	 */
	signature.toRpcSig = function (v, r, s, chainId) {
	  var recovery = calculateSigRecovery(v, chainId);
	  if (!isValidSigRecovery(recovery)) {
	    throw new Error('Invalid signature v value');
	  }
	  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
	  return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));
	};
	/**
	 * Convert signature format of the `eth_sign` RPC method to signature parameters
	 * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
	 */
	signature.fromRpcSig = function (sig) {
	  var buf = bytes_1.toBuffer(sig);
	  // NOTE: with potential introduction of chainId this might need to be updated
	  if (buf.length !== 65) {
	    throw new Error('Invalid signature length');
	  }
	  var v = buf[64];
	  // support both versions of `eth_sign` responses
	  if (v < 27) {
	    v += 27;
	  }
	  return {
	    v: v,
	    r: buf.slice(0, 32),
	    s: buf.slice(32, 64)
	  };
	};
	/**
	 * Validate a ECDSA signature.
	 * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one
	 */
	signature.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {
	  if (homesteadOrLater === void 0) {
	    homesteadOrLater = true;
	  }
	  var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
	  var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
	  if (r.length !== 32 || s.length !== 32) {
	    return false;
	  }
	  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
	    return false;
	  }
	  var rBN = new BN(r);
	  var sBN = new BN(s);
	  if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
	    return false;
	  }
	  if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
	    return false;
	  }
	  return true;
	};
	/**
	 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
	 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
	 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
	 * used to produce the signature.
	 */
	signature.hashPersonalMessage = function (message) {
	  var prefix = Buffer.from("\x19Ethereum Signed Message:\n" + message.length.toString(), 'utf-8');
	  return hash_1.keccak(Buffer.concat([prefix, message]));
	};
	function calculateSigRecovery(v, chainId) {
	  return chainId ? v - (2 * chainId + 35) : v - 27;
	}
	function isValidSigRecovery(recovery) {
	  return recovery === 0 || recovery === 1;
	}
	return signature;
}

var object = {};

var hasRequiredObject;

function requireObject () {
	if (hasRequiredObject) return object;
	hasRequiredObject = 1;

	Object.defineProperty(object, "__esModule", {
	  value: true
	});
	object.defineProperties = void 0;
	var assert = require$$0__default$2["default"];
	var ethjsUtil = requireLib$2();
	var rlp = requireDist$4();
	var bytes_1 = requireBytes();
	/**
	 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
	 * @param self the `Object` to define properties on
	 * @param fields an array fields to define. Fields can contain:
	 * * `name` - the name of the properties
	 * * `length` - the number of bytes the field can have
	 * * `allowLess` - if the field can be less than the length
	 * * `allowEmpty`
	 * @param data data to be validated against the definitions
	 * @deprecated
	 */
	object.defineProperties = function (self, fields, data) {
	  self.raw = [];
	  self._fields = [];
	  // attach the `toJSON`
	  self.toJSON = function (label) {
	    if (label === void 0) {
	      label = false;
	    }
	    if (label) {
	      var obj_1 = {};
	      self._fields.forEach(function (field) {
	        obj_1[field] = "0x" + self[field].toString('hex');
	      });
	      return obj_1;
	    }
	    return bytes_1.baToJSON(self.raw);
	  };
	  self.serialize = function serialize() {
	    return rlp.encode(self.raw);
	  };
	  fields.forEach(function (field, i) {
	    self._fields.push(field.name);
	    function getter() {
	      return self.raw[i];
	    }
	    function setter(v) {
	      v = bytes_1.toBuffer(v);
	      if (v.toString('hex') === '00' && !field.allowZero) {
	        v = Buffer.allocUnsafe(0);
	      }
	      if (field.allowLess && field.length) {
	        v = bytes_1.stripZeros(v);
	        assert(field.length >= v.length, "The field " + field.name + " must not have more " + field.length + " bytes");
	      } else if (!(field.allowZero && v.length === 0) && field.length) {
	        assert(field.length === v.length, "The field " + field.name + " must have byte length of " + field.length);
	      }
	      self.raw[i] = v;
	    }
	    Object.defineProperty(self, field.name, {
	      enumerable: true,
	      configurable: true,
	      get: getter,
	      set: setter
	    });
	    if (field["default"]) {
	      self[field.name] = field["default"];
	    }
	    // attach alias
	    if (field.alias) {
	      Object.defineProperty(self, field.alias, {
	        enumerable: false,
	        configurable: true,
	        set: setter,
	        get: getter
	      });
	    }
	  });
	  // if the constuctor is passed data
	  if (data) {
	    if (typeof data === 'string') {
	      data = Buffer.from(ethjsUtil.stripHexPrefix(data), 'hex');
	    }
	    if (Buffer.isBuffer(data)) {
	      data = rlp.decode(data);
	    }
	    if (Array.isArray(data)) {
	      if (data.length > self._fields.length) {
	        throw new Error('wrong number of fields in data');
	      }
	      // make sure all the items are buffers
	      data.forEach(function (d, i) {
	        self[self._fields[i]] = bytes_1.toBuffer(d);
	      });
	    } else if (typeof data === 'object') {
	      var keys_1 = Object.keys(data);
	      fields.forEach(function (field) {
	        if (keys_1.indexOf(field.name) !== -1) self[field.name] = data[field.name];
	        if (keys_1.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];
	      });
	    } else {
	      throw new Error('invalid data');
	    }
	  }
	};
	return object;
}

var hasRequiredDist;

function requireDist () {
	if (hasRequiredDist) return dist;
	hasRequiredDist = 1;
	(function (exports) {

		var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  Object.defineProperty(o, k2, {
		    enumerable: true,
		    get: function get() {
		      return m[k];
		    }
		  });
		} : function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  o[k2] = m[k];
		});
		var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
		  for (var p in m) {
		    if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
		  }
		};
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.secp256k1 = exports.rlp = exports.BN = void 0;
		var secp256k1 = requireSecp256k1v3Adapter();
		exports.secp256k1 = secp256k1;
		var ethjsUtil = requireLib$2();
		var BN = requireBn$2();
		exports.BN = BN;
		var rlp = requireDist$4();
		exports.rlp = rlp;
		Object.assign(exports, ethjsUtil);
		/**
		 * Constants
		 */
		__exportStar(requireConstants(), exports);
		/**
		 * Public-key cryptography (secp256k1) and addresses
		 */
		__exportStar(requireAccount(), exports);
		/**
		 * Hash functions
		 */
		__exportStar(requireHash(), exports);
		/**
		 * ECDSA signature
		 */
		__exportStar(requireSignature(), exports);
		/**
		 * Utilities for manipulating Buffers, byte arrays, etc.
		 */
		__exportStar(requireBytes(), exports);
		/**
		 * Function for definining properties on an object
		 */
		__exportStar(requireObject(), exports);
} (dist));
	return dist;
}

/* eslint-disable no-useless-escape */

var lib;
var hasRequiredLib;

function requireLib () {
	if (hasRequiredLib) return lib;
	hasRequiredLib = 1;
	var utils = requireDist();
	var BN = requireBn$2();
	var ABI = function ABI() {};

	// Convert from short to canonical names
	// FIXME: optimise or make this nicer?
	function elementaryName(name) {
	  if (name.startsWith('int[')) {
	    return 'int256' + name.slice(3);
	  } else if (name === 'int') {
	    return 'int256';
	  } else if (name.startsWith('uint[')) {
	    return 'uint256' + name.slice(4);
	  } else if (name === 'uint') {
	    return 'uint256';
	  } else if (name.startsWith('fixed[')) {
	    return 'fixed128x128' + name.slice(5);
	  } else if (name === 'fixed') {
	    return 'fixed128x128';
	  } else if (name.startsWith('ufixed[')) {
	    return 'ufixed128x128' + name.slice(6);
	  } else if (name === 'ufixed') {
	    return 'ufixed128x128';
	  }
	  return name;
	}
	ABI.eventID = function (name, types) {
	  // FIXME: use node.js util.format?
	  var sig = name + '(' + types.map(elementaryName).join(',') + ')';
	  return utils.keccak256(Buffer.from(sig));
	};
	ABI.methodID = function (name, types) {
	  return ABI.eventID(name, types).slice(0, 4);
	};

	// Parse N from type<N>
	function parseTypeN(type) {
	  return parseInt(/^\D+(\d+)$/.exec(type)[1], 10);
	}

	// Parse N,M from type<N>x<M>
	function parseTypeNxM(type) {
	  var tmp = /^\D+(\d+)x(\d+)$/.exec(type);
	  return [parseInt(tmp[1], 10), parseInt(tmp[2], 10)];
	}

	// Parse N in type[<N>] where "type" can itself be an array type.
	function parseTypeArray(type) {
	  var tmp = type.match(/(.*)\[(.*?)\]$/);
	  if (tmp) {
	    return tmp[2] === '' ? 'dynamic' : parseInt(tmp[2], 10);
	  }
	  return null;
	}
	function parseNumber(arg) {
	  var type = typeof arg;
	  if (type === 'string') {
	    if (utils.isHexPrefixed(arg)) {
	      return new BN(utils.stripHexPrefix(arg), 16);
	    } else {
	      return new BN(arg, 10);
	    }
	  } else if (type === 'number') {
	    return new BN(arg);
	  } else if (arg.toArray) {
	    // assume this is a BN for the moment, replace with BN.isBN soon
	    return arg;
	  } else {
	    throw new Error('Argument is not a number');
	  }
	}

	// someMethod(bytes,uint)
	// someMethod(bytes,uint):(boolean)
	function parseSignature(sig) {
	  var tmp = /^(\w+)\((.*)\)$/.exec(sig);
	  if (tmp.length !== 3) {
	    throw new Error('Invalid method signature');
	  }
	  var args = /^(.+)\):\((.+)$/.exec(tmp[2]);
	  if (args !== null && args.length === 3) {
	    return {
	      method: tmp[1],
	      args: args[1].split(','),
	      retargs: args[2].split(',')
	    };
	  } else {
	    var params = tmp[2].split(',');
	    if (params.length === 1 && params[0] === '') {
	      // Special-case (possibly naive) fixup for functions that take no arguments.
	      // TODO: special cases are always bad, but this makes the function return
	      // match what the calling functions expect
	      params = [];
	    }
	    return {
	      method: tmp[1],
	      args: params
	    };
	  }
	}

	// Encodes a single item (can be dynamic array)
	// @returns: Buffer
	function encodeSingle(type, arg) {
	  var size, num, ret, i;
	  if (type === 'address') {
	    return encodeSingle('uint160', parseNumber(arg));
	  } else if (type === 'bool') {
	    return encodeSingle('uint8', arg ? 1 : 0);
	  } else if (type === 'string') {
	    return encodeSingle('bytes', Buffer.from(arg, 'utf8'));
	  } else if (isArray(type)) {
	    // this part handles fixed-length ([2]) and variable length ([]) arrays
	    // NOTE: we catch here all calls to arrays, that simplifies the rest
	    if (typeof arg.length === 'undefined') {
	      throw new Error('Not an array?');
	    }
	    size = parseTypeArray(type);
	    if (size !== 'dynamic' && size !== 0 && arg.length > size) {
	      throw new Error('Elements exceed array size: ' + size);
	    }
	    ret = [];
	    type = type.slice(0, type.lastIndexOf('['));
	    if (typeof arg === 'string') {
	      arg = JSON.parse(arg);
	    }
	    for (i in arg) {
	      ret.push(encodeSingle(type, arg[i]));
	    }
	    if (size === 'dynamic') {
	      var length = encodeSingle('uint256', arg.length);
	      ret.unshift(length);
	    }
	    return Buffer.concat(ret);
	  } else if (type === 'bytes') {
	    arg = Buffer.from(arg);
	    ret = Buffer.concat([encodeSingle('uint256', arg.length), arg]);
	    if (arg.length % 32 !== 0) {
	      ret = Buffer.concat([ret, utils.zeros(32 - arg.length % 32)]);
	    }
	    return ret;
	  } else if (type.startsWith('bytes')) {
	    size = parseTypeN(type);
	    if (size < 1 || size > 32) {
	      throw new Error('Invalid bytes<N> width: ' + size);
	    }
	    return utils.setLengthRight(arg, 32);
	  } else if (type.startsWith('uint')) {
	    size = parseTypeN(type);
	    if (size % 8 || size < 8 || size > 256) {
	      throw new Error('Invalid uint<N> width: ' + size);
	    }
	    num = parseNumber(arg);
	    if (num.bitLength() > size) {
	      throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());
	    }
	    if (num < 0) {
	      throw new Error('Supplied uint is negative');
	    }
	    return num.toArrayLike(Buffer, 'be', 32);
	  } else if (type.startsWith('int')) {
	    size = parseTypeN(type);
	    if (size % 8 || size < 8 || size > 256) {
	      throw new Error('Invalid int<N> width: ' + size);
	    }
	    num = parseNumber(arg);
	    if (num.bitLength() > size) {
	      throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());
	    }
	    return num.toTwos(256).toArrayLike(Buffer, 'be', 32);
	  } else if (type.startsWith('ufixed')) {
	    size = parseTypeNxM(type);
	    num = parseNumber(arg);
	    if (num < 0) {
	      throw new Error('Supplied ufixed is negative');
	    }
	    return encodeSingle('uint256', num.mul(new BN(2).pow(new BN(size[1]))));
	  } else if (type.startsWith('fixed')) {
	    size = parseTypeNxM(type);
	    return encodeSingle('int256', parseNumber(arg).mul(new BN(2).pow(new BN(size[1]))));
	  }
	  throw new Error('Unsupported or invalid type: ' + type);
	}

	// Decodes a single item (can be dynamic array)
	// @returns: array
	// FIXME: this method will need a lot of attention at checking limits and validation
	function decodeSingle(parsedType, data, offset) {
	  if (typeof parsedType === 'string') {
	    parsedType = parseType(parsedType);
	  }
	  var size, num, ret, i;
	  if (parsedType.name === 'address') {
	    return decodeSingle(parsedType.rawType, data, offset).toArrayLike(Buffer, 'be', 20).toString('hex');
	  } else if (parsedType.name === 'bool') {
	    return decodeSingle(parsedType.rawType, data, offset).toString() === new BN(1).toString();
	  } else if (parsedType.name === 'string') {
	    var bytes = decodeSingle(parsedType.rawType, data, offset);
	    return Buffer.from(bytes, 'utf8').toString();
	  } else if (parsedType.isArray) {
	    // this part handles fixed-length arrays ([2]) and variable length ([]) arrays
	    // NOTE: we catch here all calls to arrays, that simplifies the rest
	    ret = [];
	    size = parsedType.size;
	    if (parsedType.size === 'dynamic') {
	      offset = decodeSingle('uint256', data, offset).toNumber();
	      size = decodeSingle('uint256', data, offset).toNumber();
	      offset = offset + 32;
	    }
	    for (i = 0; i < size; i++) {
	      var decoded = decodeSingle(parsedType.subArray, data, offset);
	      ret.push(decoded);
	      offset += parsedType.subArray.memoryUsage;
	    }
	    return ret;
	  } else if (parsedType.name === 'bytes') {
	    offset = decodeSingle('uint256', data, offset).toNumber();
	    size = decodeSingle('uint256', data, offset).toNumber();
	    return data.slice(offset + 32, offset + 32 + size);
	  } else if (parsedType.name.startsWith('bytes')) {
	    return data.slice(offset, offset + parsedType.size);
	  } else if (parsedType.name.startsWith('uint')) {
	    num = new BN(data.slice(offset, offset + 32), 16, 'be');
	    if (num.bitLength() > parsedType.size) {
	      throw new Error('Decoded int exceeds width: ' + parsedType.size + ' vs ' + num.bitLength());
	    }
	    return num;
	  } else if (parsedType.name.startsWith('int')) {
	    num = new BN(data.slice(offset, offset + 32), 16, 'be').fromTwos(256);
	    if (num.bitLength() > parsedType.size) {
	      throw new Error('Decoded uint exceeds width: ' + parsedType.size + ' vs ' + num.bitLength());
	    }
	    return num;
	  } else if (parsedType.name.startsWith('ufixed')) {
	    size = new BN(2).pow(new BN(parsedType.size[1]));
	    num = decodeSingle('uint256', data, offset);
	    if (!num.mod(size).isZero()) {
	      throw new Error('Decimals not supported yet');
	    }
	    return num.div(size);
	  } else if (parsedType.name.startsWith('fixed')) {
	    size = new BN(2).pow(new BN(parsedType.size[1]));
	    num = decodeSingle('int256', data, offset);
	    if (!num.mod(size).isZero()) {
	      throw new Error('Decimals not supported yet');
	    }
	    return num.div(size);
	  }
	  throw new Error('Unsupported or invalid type: ' + parsedType.name);
	}

	// Parse the given type
	// @returns: {} containing the type itself, memory usage and (including size and subArray if applicable)
	function parseType(type) {
	  var size;
	  var ret;
	  if (isArray(type)) {
	    size = parseTypeArray(type);
	    var subArray = type.slice(0, type.lastIndexOf('['));
	    subArray = parseType(subArray);
	    ret = {
	      isArray: true,
	      name: type,
	      size: size,
	      memoryUsage: size === 'dynamic' ? 32 : subArray.memoryUsage * size,
	      subArray: subArray
	    };
	    return ret;
	  } else {
	    var rawType;
	    switch (type) {
	      case 'address':
	        rawType = 'uint160';
	        break;
	      case 'bool':
	        rawType = 'uint8';
	        break;
	      case 'string':
	        rawType = 'bytes';
	        break;
	    }
	    ret = {
	      rawType: rawType,
	      name: type,
	      memoryUsage: 32
	    };
	    if (type.startsWith('bytes') && type !== 'bytes' || type.startsWith('uint') || type.startsWith('int')) {
	      ret.size = parseTypeN(type);
	    } else if (type.startsWith('ufixed') || type.startsWith('fixed')) {
	      ret.size = parseTypeNxM(type);
	    }
	    if (type.startsWith('bytes') && type !== 'bytes' && (ret.size < 1 || ret.size > 32)) {
	      throw new Error('Invalid bytes<N> width: ' + ret.size);
	    }
	    if ((type.startsWith('uint') || type.startsWith('int')) && (ret.size % 8 || ret.size < 8 || ret.size > 256)) {
	      throw new Error('Invalid int/uint<N> width: ' + ret.size);
	    }
	    return ret;
	  }
	}

	// Is a type dynamic?
	function isDynamic(type) {
	  // FIXME: handle all types? I don't think anything is missing now
	  return type === 'string' || type === 'bytes' || parseTypeArray(type) === 'dynamic';
	}

	// Is a type an array?
	function isArray(type) {
	  return type.lastIndexOf(']') === type.length - 1;
	}

	// Encode a method/event with arguments
	// @types an array of string type names
	// @args  an array of the appropriate values
	ABI.rawEncode = function (types, values) {
	  var output = [];
	  var data = [];
	  var headLength = 0;
	  types.forEach(function (type) {
	    if (isArray(type)) {
	      var size = parseTypeArray(type);
	      if (size !== 'dynamic') {
	        headLength += 32 * size;
	      } else {
	        headLength += 32;
	      }
	    } else {
	      headLength += 32;
	    }
	  });
	  for (var i = 0; i < types.length; i++) {
	    var type = elementaryName(types[i]);
	    var value = values[i];
	    var cur = encodeSingle(type, value);

	    // Use the head/tail method for storing dynamic data
	    if (isDynamic(type)) {
	      output.push(encodeSingle('uint256', headLength));
	      data.push(cur);
	      headLength += cur.length;
	    } else {
	      output.push(cur);
	    }
	  }
	  return Buffer.concat(output.concat(data));
	};
	ABI.rawDecode = function (types, data) {
	  var ret = [];
	  data = Buffer.from(data);
	  var offset = 0;
	  for (var i = 0; i < types.length; i++) {
	    var type = elementaryName(types[i]);
	    var parsed = parseType(type);
	    var decoded = decodeSingle(parsed, data, offset);
	    offset += parsed.memoryUsage;
	    ret.push(decoded);
	  }
	  return ret;
	};
	ABI.simpleEncode = function (method) {
	  var args = Array.prototype.slice.call(arguments).slice(1);
	  var sig = parseSignature(method);

	  // FIXME: validate/convert arguments
	  if (args.length !== sig.args.length) {
	    throw new Error('Argument count mismatch');
	  }
	  return Buffer.concat([ABI.methodID(sig.method, sig.args), ABI.rawEncode(sig.args, args)]);
	};
	ABI.simpleDecode = function (method, data) {
	  var sig = parseSignature(method);

	  // FIXME: validate/convert arguments
	  if (!sig.retargs) {
	    throw new Error('No return values in method');
	  }
	  return ABI.rawDecode(sig.retargs, data);
	};
	function stringify(type, value) {
	  if (type.startsWith('address') || type.startsWith('bytes')) {
	    return '0x' + value.toString('hex');
	  } else {
	    return value.toString();
	  }
	}
	ABI.stringify = function (types, values) {
	  var ret = [];
	  for (var i in types) {
	    var type = types[i];
	    var value = values[i];

	    // if it is an array type, concat the items
	    if (/^[^\[]+\[.*\]$/.test(type)) {
	      value = value.map(function (item) {
	        return stringify(type, item);
	      }).join(', ');
	    } else {
	      value = stringify(type, value);
	    }
	    ret.push(value);
	  }
	  return ret;
	};
	ABI.solidityHexValue = function (type, value, bitsize) {
	  // pass in bitsize = null if use default bitsize
	  var size, num;
	  if (isArray(type)) {
	    var subType = type.replace(/\[.*?\]/, '');
	    if (!isArray(subType)) {
	      var arraySize = parseTypeArray(type);
	      if (arraySize !== 'dynamic' && arraySize !== 0 && value.length > arraySize) {
	        throw new Error('Elements exceed array size: ' + arraySize);
	      }
	    }
	    var arrayValues = value.map(function (v) {
	      return ABI.solidityHexValue(subType, v, 256);
	    });
	    return Buffer.concat(arrayValues);
	  } else if (type === 'bytes') {
	    return value;
	  } else if (type === 'string') {
	    return Buffer.from(value, 'utf8');
	  } else if (type === 'bool') {
	    bitsize = bitsize || 8;
	    var padding = Array(bitsize / 4).join('0');
	    return Buffer.from(value ? padding + '1' : padding + '0', 'hex');
	  } else if (type === 'address') {
	    var bytesize = 20;
	    if (bitsize) {
	      bytesize = bitsize / 8;
	    }
	    return utils.setLengthLeft(value, bytesize);
	  } else if (type.startsWith('bytes')) {
	    size = parseTypeN(type);
	    if (size < 1 || size > 32) {
	      throw new Error('Invalid bytes<N> width: ' + size);
	    }
	    return utils.setLengthRight(value, size);
	  } else if (type.startsWith('uint')) {
	    size = parseTypeN(type);
	    if (size % 8 || size < 8 || size > 256) {
	      throw new Error('Invalid uint<N> width: ' + size);
	    }
	    num = parseNumber(value);
	    if (num.bitLength() > size) {
	      throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());
	    }
	    bitsize = bitsize || size;
	    return num.toArrayLike(Buffer, 'be', bitsize / 8);
	  } else if (type.startsWith('int')) {
	    size = parseTypeN(type);
	    if (size % 8 || size < 8 || size > 256) {
	      throw new Error('Invalid int<N> width: ' + size);
	    }
	    num = parseNumber(value);
	    if (num.bitLength() > size) {
	      throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());
	    }
	    bitsize = bitsize || size;
	    return num.toTwos(size).toArrayLike(Buffer, 'be', bitsize / 8);
	  } else {
	    // FIXME: support all other types
	    throw new Error('Unsupported or invalid type: ' + type);
	  }
	};
	ABI.solidityPack = function (types, values) {
	  if (types.length !== values.length) {
	    throw new Error('Number of types are not matching the values');
	  }
	  var ret = [];
	  for (var i = 0; i < types.length; i++) {
	    var type = elementaryName(types[i]);
	    var value = values[i];
	    ret.push(ABI.solidityHexValue(type, value, null));
	  }
	  return Buffer.concat(ret);
	};
	ABI.soliditySHA3 = function (types, values) {
	  return utils.keccak256(ABI.solidityPack(types, values));
	};
	ABI.soliditySHA256 = function (types, values) {
	  return utils.sha256(ABI.solidityPack(types, values));
	};
	ABI.solidityRIPEMD160 = function (types, values) {
	  return utils.ripemd160(ABI.solidityPack(types, values), true);
	};

	// Serpent's users are familiar with this encoding
	// - s: string
	// - b: bytes
	// - b<N>: bytes<N>
	// - i: int256
	// - a: int256[]

	function isNumeric(c) {
	  // FIXME: is this correct? Seems to work
	  return c >= '0' && c <= '9';
	}

	// For a "documentation" refer to https://github.com/ethereum/serpent/blob/develop/preprocess.cpp
	ABI.fromSerpent = function (sig) {
	  var ret = [];
	  for (var i = 0; i < sig.length; i++) {
	    var type = sig[i];
	    if (type === 's') {
	      ret.push('bytes');
	    } else if (type === 'b') {
	      var tmp = 'bytes';
	      var j = i + 1;
	      while (j < sig.length && isNumeric(sig[j])) {
	        tmp += sig[j] - '0';
	        j++;
	      }
	      i = j - 1;
	      ret.push(tmp);
	    } else if (type === 'i') {
	      ret.push('int256');
	    } else if (type === 'a') {
	      ret.push('int256[]');
	    } else {
	      throw new Error('Unsupported or invalid type: ' + type);
	    }
	  }
	  return ret;
	};
	ABI.toSerpent = function (types) {
	  var ret = [];
	  for (var i = 0; i < types.length; i++) {
	    var type = types[i];
	    if (type === 'bytes') {
	      ret.push('s');
	    } else if (type.startsWith('bytes')) {
	      ret.push('b' + parseTypeN(type));
	    } else if (type === 'int256') {
	      ret.push('i');
	    } else if (type === 'int256[]') {
	      ret.push('a');
	    } else {
	      throw new Error('Unsupported or invalid type: ' + type);
	    }
	  }
	  return ret.join('');
	};
	lib = ABI;
	return lib;
}

var hasRequiredEthereumjsAbi;

function requireEthereumjsAbi () {
	if (hasRequiredEthereumjsAbi) return ethereumjsAbi.exports;
	hasRequiredEthereumjsAbi = 1;
	(function (module) {
		module.exports = requireLib();
} (ethereumjsAbi));
	return ethereumjsAbi.exports;
}

var ethSigUtil;
var hasRequiredEthSigUtil;

function requireEthSigUtil () {
	if (hasRequiredEthSigUtil) return ethSigUtil;
	hasRequiredEthSigUtil = 1;
	var ethUtil = requireDist$3();
	var ethAbi = requireEthereumjsAbi();
	ethSigUtil = {
	  concatSig: function concatSig(v, r, s) {
	    var rSig = ethUtil.fromSigned(r);
	    var sSig = ethUtil.fromSigned(s);
	    var vSig = ethUtil.bufferToInt(v);
	    var rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64);
	    var sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64);
	    var vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig));
	    return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex');
	  },
	  normalize: function normalize(input) {
	    if (!input) return;
	    if (typeof input === 'number') {
	      var buffer = ethUtil.toBuffer(input);
	      input = ethUtil.bufferToHex(buffer);
	    }
	    if (typeof input !== 'string') {
	      var msg = 'eth-sig-util.normalize() requires hex string or integer input.';
	      msg += ' received ' + typeof input + ': ' + input;
	      throw new Error(msg);
	    }
	    return ethUtil.addHexPrefix(input.toLowerCase());
	  },
	  personalSign: function personalSign(privateKey, msgParams) {
	    var message = ethUtil.toBuffer(msgParams.data);
	    var msgHash = ethUtil.hashPersonalMessage(message);
	    var sig = ethUtil.ecsign(msgHash, privateKey);
	    var serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s));
	    return serialized;
	  },
	  recoverPersonalSignature: function recoverPersonalSignature(msgParams) {
	    var publicKey = getPublicKeyFor(msgParams);
	    var sender = ethUtil.publicToAddress(publicKey);
	    var senderHex = ethUtil.bufferToHex(sender);
	    return senderHex;
	  },
	  extractPublicKey: function extractPublicKey(msgParams) {
	    var publicKey = getPublicKeyFor(msgParams);
	    return '0x' + publicKey.toString('hex');
	  },
	  typedSignatureHash: function typedSignatureHash(typedData) {
	    var hashBuffer = _typedSignatureHash(typedData);
	    return ethUtil.bufferToHex(hashBuffer);
	  },
	  signTypedData: function signTypedData(privateKey, msgParams) {
	    var msgHash = _typedSignatureHash(msgParams.data);
	    var sig = ethUtil.ecsign(msgHash, privateKey);
	    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s));
	  },
	  recoverTypedSignature: function recoverTypedSignature(msgParams) {
	    var msgHash = _typedSignatureHash(msgParams.data);
	    var publicKey = recoverPublicKey(msgHash, msgParams.sig);
	    var sender = ethUtil.publicToAddress(publicKey);
	    return ethUtil.bufferToHex(sender);
	  }
	};

	/**
	 * @param typedData - Array of data along with types, as per EIP712.
	 * @returns Buffer
	 */
	function _typedSignatureHash(typedData) {
	  var error = new Error('Expect argument to be non-empty array');
	  if (typeof typedData !== 'object' || !typedData.length) throw error;
	  var data = typedData.map(function (e) {
	    return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value;
	  });
	  var types = typedData.map(function (e) {
	    return e.type;
	  });
	  var schema = typedData.map(function (e) {
	    if (!e.name) throw error;
	    return e.type + ' ' + e.name;
	  });
	  return ethAbi.soliditySHA3(['bytes32', 'bytes32'], [ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema), ethAbi.soliditySHA3(types, data)]);
	}
	function recoverPublicKey(hash, sig) {
	  var signature = ethUtil.toBuffer(sig);
	  var sigParams = ethUtil.fromRpcSig(signature);
	  return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s);
	}
	function getPublicKeyFor(msgParams) {
	  var message = ethUtil.toBuffer(msgParams.data);
	  var msgHash = ethUtil.hashPersonalMessage(message);
	  return recoverPublicKey(msgHash, msgParams.sig);
	}
	function padWithZeroes(number, length) {
	  var myString = '' + number;
	  while (myString.length < length) {
	    myString = '0' + myString;
	  }
	  return myString;
	}
	return ethSigUtil;
}

var semaphore = {exports: {}};

var hasRequiredSemaphore;

function requireSemaphore () {
	if (hasRequiredSemaphore) return semaphore.exports;
	hasRequiredSemaphore = 1;
	(function (module, exports) {
		(function (global) {

		  var nextTick = function nextTick(fn) {
		    setTimeout(fn, 0);
		  };
		  if (typeof process != 'undefined' && process && typeof process.nextTick == 'function') {
		    // node.js and the like
		    nextTick = process.nextTick;
		  }
		  function semaphore(capacity) {
		    var semaphore = {
		      capacity: capacity || 1,
		      current: 0,
		      queue: [],
		      firstHere: false,
		      take: function take() {
		        if (semaphore.firstHere === false) {
		          semaphore.current++;
		          semaphore.firstHere = true;
		          var isFirst = 1;
		        } else {
		          var isFirst = 0;
		        }
		        var item = {
		          n: 1
		        };
		        if (typeof arguments[0] == 'function') {
		          item.task = arguments[0];
		        } else {
		          item.n = arguments[0];
		        }
		        if (arguments.length >= 2) {
		          if (typeof arguments[1] == 'function') item.task = arguments[1];else item.n = arguments[1];
		        }
		        var task = item.task;
		        item.task = function () {
		          task(semaphore.leave);
		        };
		        if (semaphore.current + item.n - isFirst > semaphore.capacity) {
		          if (isFirst === 1) {
		            semaphore.current--;
		            semaphore.firstHere = false;
		          }
		          return semaphore.queue.push(item);
		        }
		        semaphore.current += item.n - isFirst;
		        item.task(semaphore.leave);
		        if (isFirst === 1) semaphore.firstHere = false;
		      },
		      leave: function leave(n) {
		        n = n || 1;
		        semaphore.current -= n;
		        if (!semaphore.queue.length) {
		          if (semaphore.current < 0) {
		            throw new Error('leave called too many times.');
		          }
		          return;
		        }
		        var item = semaphore.queue[0];
		        if (item.n + semaphore.current > semaphore.capacity) {
		          return;
		        }
		        semaphore.queue.shift();
		        semaphore.current += item.n;
		        nextTick(item.task);
		      },
		      available: function available(n) {
		        n = n || 1;
		        return semaphore.current + n <= semaphore.capacity;
		      }
		    };
		    return semaphore;
		  }
		  {
		    // node export
		    module.exports = semaphore;
		  }
		})();
} (semaphore));
	return semaphore.exports;
}

var estimateGas_1;
var hasRequiredEstimateGas;

function requireEstimateGas () {
	if (hasRequiredEstimateGas) return estimateGas_1;
	hasRequiredEstimateGas = 1;
	var createPayload = requireCreatePayload();
	estimateGas_1 = estimateGas;

	/*

	This is a work around for https://github.com/ethereum/go-ethereum/issues/2577

	*/

	function estimateGas(provider, txParams, cb) {
	  provider.sendAsync(createPayload({
	    method: 'eth_estimateGas',
	    params: [txParams]
	  }), function (err, res) {
	    if (err) {
	      // handle simple value transfer case
	      if (err.message === 'no contract code at given address') {
	        return cb(null, '0xcf08');
	      } else {
	        return cb(err);
	      }
	    }
	    cb(null, res.result);
	  });
	}
	return estimateGas_1;
}

/*
 * Emulate 'eth_accounts' / 'eth_sendTransaction' using 'eth_sendRawTransaction'
 *
 * The two callbacks a user needs to implement are:
 * - getAccounts() -- array of addresses supported
 * - signTransaction(tx) -- sign a raw transaction object
 */

var hookedWallet;
var hasRequiredHookedWallet;

function requireHookedWallet () {
	if (hasRequiredHookedWallet) return hookedWallet;
	hasRequiredHookedWallet = 1;
	var waterfall = requireWaterfall();
	var parallel = requireParallel();
	var inherits = require$$0__default$1["default"].inherits;
	var ethUtil = requireDist$3();
	var sigUtil = requireEthSigUtil();
	var extend = requireImmutable();
	var Semaphore = requireSemaphore();
	var Subprovider = requireSubprovider();
	var estimateGas = requireEstimateGas();
	var hexRegex = /^[0-9A-Fa-f]+$/g;
	hookedWallet = HookedWalletSubprovider;

	// handles the following RPC methods:
	//   eth_coinbase
	//   eth_accounts
	//   eth_sendTransaction
	//   eth_sign
	//   eth_signTypedData
	//   eth_signTypedData_v3
	//   eth_signTypedData_v4
	//   personal_sign
	//   eth_decryptMessage
	//   encryption_public_key
	//   personal_ecRecover
	//   parity_postTransaction
	//   parity_checkRequest
	//   parity_defaultAccount

	//
	// Tx Signature Flow
	//
	// handleRequest: eth_sendTransaction
	//   validateTransaction (basic validity check)
	//     validateSender (checks that sender is in accounts)
	//   processTransaction (sign tx and submit to network)
	//     approveTransaction (UI approval hook)
	//     checkApproval
	//     finalizeAndSubmitTx (tx signing)
	//       nonceLock.take (bottle neck to ensure atomic nonce)
	//         fillInTxExtras (set fallback gasPrice, nonce, etc)
	//         signTransaction (perform the signature)
	//         publishTransaction (publish signed tx to network)
	//

	inherits(HookedWalletSubprovider, Subprovider);
	function HookedWalletSubprovider(opts) {
	  var self = this;
	  // control flow
	  self.nonceLock = Semaphore(1);

	  // data lookup
	  if (opts.getAccounts) self.getAccounts = opts.getAccounts;
	  // high level override
	  if (opts.processTransaction) self.processTransaction = opts.processTransaction;
	  if (opts.processMessage) self.processMessage = opts.processMessage;
	  if (opts.processPersonalMessage) self.processPersonalMessage = opts.processPersonalMessage;
	  if (opts.processTypedMessage) self.processTypedMessage = opts.processTypedMessage;
	  // approval hooks
	  self.approveTransaction = opts.approveTransaction || self.autoApprove;
	  self.approveMessage = opts.approveMessage || self.autoApprove;
	  self.approvePersonalMessage = opts.approvePersonalMessage || self.autoApprove;
	  self.approveDecryptMessage = opts.approveDecryptMessage || self.autoApprove;
	  self.approveEncryptionPublicKey = opts.approveEncryptionPublicKey || self.autoApprove;
	  self.approveTypedMessage = opts.approveTypedMessage || self.autoApprove;
	  // actually perform the signature
	  if (opts.signTransaction) self.signTransaction = opts.signTransaction || mustProvideInConstructor('signTransaction');
	  if (opts.signMessage) self.signMessage = opts.signMessage || mustProvideInConstructor('signMessage');
	  if (opts.signPersonalMessage) self.signPersonalMessage = opts.signPersonalMessage || mustProvideInConstructor('signPersonalMessage');
	  if (opts.decryptMessage) self.decryptMessage = opts.decryptMessage || mustProvideInConstructor('decryptMessage');
	  if (opts.encryptionPublicKey) self.encryptionPublicKey = opts.encryptionPublicKey || mustProvideInConstructor('encryptionPublicKey');
	  if (opts.signTypedMessage) self.signTypedMessage = opts.signTypedMessage || mustProvideInConstructor('signTypedMessage');
	  if (opts.recoverPersonalSignature) self.recoverPersonalSignature = opts.recoverPersonalSignature;
	  // publish to network
	  if (opts.publishTransaction) self.publishTransaction = opts.publishTransaction;
	  // gas options
	  self.estimateGas = opts.estimateGas || self.estimateGas;
	  self.getGasPrice = opts.getGasPrice || self.getGasPrice;
	}
	HookedWalletSubprovider.prototype.handleRequest = function (payload, next, end) {
	  var self = this;
	  self._parityRequests = {};
	  self._parityRequestCount = 0;

	  // switch statement is not block scoped
	  // sp we cant repeat var declarations
	  var txParams, msgParams, extraParams;
	  var message, address;
	  switch (payload.method) {
	    case 'eth_coinbase':
	      // process normally
	      self.getAccounts(function (err, accounts) {
	        if (err) return end(err);
	        var result = accounts[0] || null;
	        end(null, result);
	      });
	      return;
	    case 'eth_accounts':
	      // process normally
	      self.getAccounts(function (err, accounts) {
	        if (err) return end(err);
	        end(null, accounts);
	      });
	      return;
	    case 'eth_sendTransaction':
	      txParams = payload.params[0];
	      waterfall([function (cb) {
	        return self.validateTransaction(txParams, cb);
	      }, function (cb) {
	        return self.processTransaction(txParams, cb);
	      }], end);
	      return;
	    case 'eth_signTransaction':
	      txParams = payload.params[0];
	      waterfall([function (cb) {
	        return self.validateTransaction(txParams, cb);
	      }, function (cb) {
	        return self.processSignTransaction(txParams, cb);
	      }], end);
	      return;
	    case 'eth_sign':
	      // process normally
	      address = payload.params[0];
	      message = payload.params[1];
	      // non-standard "extraParams" to be appended to our "msgParams" obj
	      // good place for metadata
	      extraParams = payload.params[2] || {};
	      msgParams = extend(extraParams, {
	        from: address,
	        data: message
	      });
	      waterfall([function (cb) {
	        return self.validateMessage(msgParams, cb);
	      }, function (cb) {
	        return self.processMessage(msgParams, cb);
	      }], end);
	      return;
	    case 'personal_sign':
	      return function () {
	        // process normally
	        var first = payload.params[0];
	        var second = payload.params[1];

	        // We initially incorrectly ordered these parameters.
	        // To gracefully respect users who adopted this API early,
	        // we are currently gracefully recovering from the wrong param order
	        // when it is clearly identifiable.
	        //
	        // That means when the first param is definitely an address,
	        // and the second param is definitely not, but is hex.
	        if (resemblesData(second) && resemblesAddress(first)) {
	          var warning = "The eth_personalSign method requires params ordered ";
	          warning += "[message, address]. This was previously handled incorrectly, ";
	          warning += "and has been corrected automatically. ";
	          warning += "Please switch this param order for smooth behavior in the future.";
	          console.warn(warning);
	          address = payload.params[0];
	          message = payload.params[1];
	        } else {
	          message = payload.params[0];
	          address = payload.params[1];
	        }

	        // non-standard "extraParams" to be appended to our "msgParams" obj
	        // good place for metadata
	        extraParams = payload.params[2] || {};
	        msgParams = extend(extraParams, {
	          from: address,
	          data: message
	        });
	        waterfall([function (cb) {
	          return self.validatePersonalMessage(msgParams, cb);
	        }, function (cb) {
	          return self.processPersonalMessage(msgParams, cb);
	        }], end);
	      }();
	    case 'eth_decryptMessage':
	      return function () {
	        // process normally
	        var first = payload.params[0];
	        var second = payload.params[1];

	        // We initially incorrectly ordered these parameters.
	        // To gracefully respect users who adopted this API early,
	        // we are currently gracefully recovering from the wrong param order
	        // when it is clearly identifiable.
	        //
	        // That means when the first param is definitely an address,
	        // and the second param is definitely not, but is hex.
	        if (resemblesData(second) && resemblesAddress(first)) {
	          var warning = "The eth_decryptMessage method requires params ordered ";
	          warning += "[message, address]. This was previously handled incorrectly, ";
	          warning += "and has been corrected automatically. ";
	          warning += "Please switch this param order for smooth behavior in the future.";
	          console.warn(warning);
	          address = payload.params[0];
	          message = payload.params[1];
	        } else {
	          message = payload.params[0];
	          address = payload.params[1];
	        }

	        // non-standard "extraParams" to be appended to our "msgParams" obj
	        // good place for metadata
	        extraParams = payload.params[2] || {};
	        msgParams = extend(extraParams, {
	          from: address,
	          data: message
	        });
	        waterfall([function (cb) {
	          return self.validateDecryptMessage(msgParams, cb);
	        }, function (cb) {
	          return self.processDecryptMessage(msgParams, cb);
	        }], end);
	      }();
	    case 'encryption_public_key':
	      return function () {
	        var address = payload.params[0];
	        waterfall([function (cb) {
	          return self.validateEncryptionPublicKey(address, cb);
	        }, function (cb) {
	          return self.processEncryptionPublicKey(address, cb);
	        }], end);
	      }();
	    case 'personal_ecRecover':
	      return function () {
	        message = payload.params[0];
	        var signature = payload.params[1];
	        // non-standard "extraParams" to be appended to our "msgParams" obj
	        // good place for metadata
	        extraParams = payload.params[2] || {};
	        msgParams = extend(extraParams, {
	          sig: signature,
	          data: message
	        });
	        self.recoverPersonalSignature(msgParams, end);
	      }();
	    case 'eth_signTypedData':
	    case 'eth_signTypedData_v3':
	    case 'eth_signTypedData_v4':
	      return function () {
	        // process normally

	        var first = payload.params[0];
	        var second = payload.params[1];
	        if (resemblesAddress(first)) {
	          address = first;
	          message = second;
	        } else {
	          message = first;
	          address = second;
	        }
	        extraParams = payload.params[2] || {};
	        msgParams = extend(extraParams, {
	          from: address,
	          data: message
	        });
	        waterfall([function (cb) {
	          return self.validateTypedMessage(msgParams, cb);
	        }, function (cb) {
	          return self.processTypedMessage(msgParams, cb);
	        }], end);
	      }();
	    case 'parity_postTransaction':
	      txParams = payload.params[0];
	      self.parityPostTransaction(txParams, end);
	      return;
	    case 'parity_postSign':
	      address = payload.params[0];
	      message = payload.params[1];
	      self.parityPostSign(address, message, end);
	      return;
	    case 'parity_checkRequest':
	      return function () {
	        var requestId = payload.params[0];
	        self.parityCheckRequest(requestId, end);
	      }();
	    case 'parity_defaultAccount':
	      self.getAccounts(function (err, accounts) {
	        if (err) return end(err);
	        var account = accounts[0] || null;
	        end(null, account);
	      });
	      return;
	    default:
	      next();
	      return;
	  }
	};

	//
	// data lookup
	//

	HookedWalletSubprovider.prototype.getAccounts = function (cb) {
	  cb(null, []);
	};

	//
	// "process" high level flow
	//

	HookedWalletSubprovider.prototype.processTransaction = function (txParams, cb) {
	  var self = this;
	  waterfall([function (cb) {
	    return self.approveTransaction(txParams, cb);
	  }, function (didApprove, cb) {
	    return self.checkApproval('transaction', didApprove, cb);
	  }, function (cb) {
	    return self.finalizeAndSubmitTx(txParams, cb);
	  }], cb);
	};
	HookedWalletSubprovider.prototype.processSignTransaction = function (txParams, cb) {
	  var self = this;
	  waterfall([function (cb) {
	    return self.approveTransaction(txParams, cb);
	  }, function (didApprove, cb) {
	    return self.checkApproval('transaction', didApprove, cb);
	  }, function (cb) {
	    return self.finalizeTx(txParams, cb);
	  }], cb);
	};
	HookedWalletSubprovider.prototype.processMessage = function (msgParams, cb) {
	  var self = this;
	  waterfall([function (cb) {
	    return self.approveMessage(msgParams, cb);
	  }, function (didApprove, cb) {
	    return self.checkApproval('message', didApprove, cb);
	  }, function (cb) {
	    return self.signMessage(msgParams, cb);
	  }], cb);
	};
	HookedWalletSubprovider.prototype.processPersonalMessage = function (msgParams, cb) {
	  var self = this;
	  waterfall([function (cb) {
	    return self.approvePersonalMessage(msgParams, cb);
	  }, function (didApprove, cb) {
	    return self.checkApproval('message', didApprove, cb);
	  }, function (cb) {
	    return self.signPersonalMessage(msgParams, cb);
	  }], cb);
	};
	HookedWalletSubprovider.prototype.processDecryptMessage = function (msgParams, cb) {
	  var self = this;
	  waterfall([function (cb) {
	    return self.approveDecryptMessage(msgParams, cb);
	  }, function (didApprove, cb) {
	    return self.checkApproval('decryptMessage', didApprove, cb);
	  }, function (cb) {
	    return self.decryptMessage(msgParams, cb);
	  }], cb);
	};
	HookedWalletSubprovider.prototype.processEncryptionPublicKey = function (msgParams, cb) {
	  var self = this;
	  waterfall([function (cb) {
	    return self.approveEncryptionPublicKey(msgParams, cb);
	  }, function (didApprove, cb) {
	    return self.checkApproval('encryptionPublicKey', didApprove, cb);
	  }, function (cb) {
	    return self.encryptionPublicKey(msgParams, cb);
	  }], cb);
	};
	HookedWalletSubprovider.prototype.processTypedMessage = function (msgParams, cb) {
	  var self = this;
	  waterfall([function (cb) {
	    return self.approveTypedMessage(msgParams, cb);
	  }, function (didApprove, cb) {
	    return self.checkApproval('message', didApprove, cb);
	  }, function (cb) {
	    return self.signTypedMessage(msgParams, cb);
	  }], cb);
	};

	//
	// approval
	//

	HookedWalletSubprovider.prototype.autoApprove = function (txParams, cb) {
	  cb(null, true);
	};
	HookedWalletSubprovider.prototype.checkApproval = function (type, didApprove, cb) {
	  cb(didApprove ? null : new Error('User denied ' + type + ' signature.'));
	};

	//
	// parity
	//

	HookedWalletSubprovider.prototype.parityPostTransaction = function (txParams, cb) {
	  var self = this;

	  // get next id
	  var count = self._parityRequestCount;
	  var reqId = "0x".concat(count.toString(16));
	  self._parityRequestCount++;
	  self.emitPayload({
	    method: 'eth_sendTransaction',
	    params: [txParams]
	  }, function (error, res) {
	    if (error) {
	      self._parityRequests[reqId] = {
	        error: error
	      };
	      return;
	    }
	    var txHash = res.result;
	    self._parityRequests[reqId] = txHash;
	  });
	  cb(null, reqId);
	};
	HookedWalletSubprovider.prototype.parityPostSign = function (address, message, cb) {
	  var self = this;

	  // get next id
	  var count = self._parityRequestCount;
	  var reqId = "0x".concat(count.toString(16));
	  self._parityRequestCount++;
	  self.emitPayload({
	    method: 'eth_sign',
	    params: [address, message]
	  }, function (error, res) {
	    if (error) {
	      self._parityRequests[reqId] = {
	        error: error
	      };
	      return;
	    }
	    var result = res.result;
	    self._parityRequests[reqId] = result;
	  });
	  cb(null, reqId);
	};
	HookedWalletSubprovider.prototype.parityCheckRequest = function (reqId, cb) {
	  var self = this;
	  var result = self._parityRequests[reqId] || null;
	  // tx not handled yet
	  if (!result) return cb(null, null);
	  // tx was rejected (or other error)
	  if (result.error) return cb(result.error);
	  // tx sent
	  cb(null, result);
	};

	//
	// signature and recovery
	//

	HookedWalletSubprovider.prototype.recoverPersonalSignature = function (msgParams, cb) {
	  var senderHex;
	  try {
	    senderHex = sigUtil.recoverPersonalSignature(msgParams);
	  } catch (err) {
	    return cb(err);
	  }
	  cb(null, senderHex);
	};

	//
	// validation
	//

	HookedWalletSubprovider.prototype.validateTransaction = function (txParams, cb) {
	  var self = this;
	  // shortcut: undefined sender is invalid
	  if (txParams.from === undefined) return cb(new Error("Undefined address - from address required to sign transaction."));
	  self.validateSender(txParams.from, function (err, senderIsValid) {
	    if (err) return cb(err);
	    if (!senderIsValid) return cb(new Error("Unknown address - unable to sign transaction for this address: \"".concat(txParams.from, "\"")));
	    cb();
	  });
	};
	HookedWalletSubprovider.prototype.validateMessage = function (msgParams, cb) {
	  var self = this;
	  if (msgParams.from === undefined) return cb(new Error("Undefined address - from address required to sign message."));
	  self.validateSender(msgParams.from, function (err, senderIsValid) {
	    if (err) return cb(err);
	    if (!senderIsValid) return cb(new Error("Unknown address - unable to sign message for this address: \"".concat(msgParams.from, "\"")));
	    cb();
	  });
	};
	HookedWalletSubprovider.prototype.validatePersonalMessage = function (msgParams, cb) {
	  var self = this;
	  if (msgParams.from === undefined) return cb(new Error("Undefined address - from address required to sign personal message."));
	  if (msgParams.data === undefined) return cb(new Error("Undefined message - message required to sign personal message."));
	  if (!isValidHex(msgParams.data)) return cb(new Error("HookedWalletSubprovider - validateMessage - message was not encoded as hex."));
	  self.validateSender(msgParams.from, function (err, senderIsValid) {
	    if (err) return cb(err);
	    if (!senderIsValid) return cb(new Error("Unknown address - unable to sign message for this address: \"".concat(msgParams.from, "\"")));
	    cb();
	  });
	};
	HookedWalletSubprovider.prototype.validateDecryptMessage = function (msgParams, cb) {
	  var self = this;
	  if (msgParams.from === undefined) return cb(new Error("Undefined address - from address required to decrypt message."));
	  if (msgParams.data === undefined) return cb(new Error("Undefined message - message required to decrypt message."));
	  if (!isValidHex(msgParams.data)) return cb(new Error("HookedWalletSubprovider - validateDecryptMessage - message was not encoded as hex."));
	  self.validateSender(msgParams.from, function (err, senderIsValid) {
	    if (err) return cb(err);
	    if (!senderIsValid) return cb(new Error("Unknown address - unable to decrypt message for this address: \"".concat(msgParams.from, "\"")));
	    cb();
	  });
	};
	HookedWalletSubprovider.prototype.validateEncryptionPublicKey = function (address, cb) {
	  var self = this;
	  self.validateSender(address, function (err, senderIsValid) {
	    if (err) return cb(err);
	    if (!senderIsValid) return cb(new Error("Unknown address - unable to obtain encryption public key for this address: \"".concat(address, "\"")));
	    cb();
	  });
	};
	HookedWalletSubprovider.prototype.validateTypedMessage = function (msgParams, cb) {
	  if (msgParams.from === undefined) return cb(new Error("Undefined address - from address required to sign typed data."));
	  if (msgParams.data === undefined) return cb(new Error("Undefined data - message required to sign typed data."));
	  this.validateSender(msgParams.from, function (err, senderIsValid) {
	    if (err) return cb(err);
	    if (!senderIsValid) return cb(new Error("Unknown address - unable to sign message for this address: \"".concat(msgParams.from, "\"")));
	    cb();
	  });
	};
	HookedWalletSubprovider.prototype.validateSender = function (senderAddress, cb) {
	  var self = this;
	  // shortcut: undefined sender is invalid
	  if (!senderAddress) return cb(null, false);
	  self.getAccounts(function (err, accounts) {
	    if (err) return cb(err);
	    var senderIsValid = accounts.map(toLowerCase).indexOf(senderAddress.toLowerCase()) !== -1;
	    cb(null, senderIsValid);
	  });
	};

	//
	// tx helpers
	//

	HookedWalletSubprovider.prototype.finalizeAndSubmitTx = function (txParams, cb) {
	  var self = this;
	  // can only allow one tx to pass through this flow at a time
	  // so we can atomically consume a nonce
	  self.nonceLock.take(function () {
	    waterfall([self.fillInTxExtras.bind(self, txParams), self.signTransaction.bind(self), self.publishTransaction.bind(self)], function (err, txHash) {
	      self.nonceLock.leave();
	      if (err) return cb(err);
	      cb(null, txHash);
	    });
	  });
	};
	HookedWalletSubprovider.prototype.finalizeTx = function (txParams, cb) {
	  var self = this;
	  // can only allow one tx to pass through this flow at a time
	  // so we can atomically consume a nonce
	  self.nonceLock.take(function () {
	    waterfall([self.fillInTxExtras.bind(self, txParams), self.signTransaction.bind(self)], function (err, signedTx) {
	      self.nonceLock.leave();
	      if (err) return cb(err);
	      cb(null, {
	        raw: signedTx,
	        tx: txParams
	      });
	    });
	  });
	};
	HookedWalletSubprovider.prototype.publishTransaction = function (rawTx, cb) {
	  var self = this;
	  self.emitPayload({
	    method: 'eth_sendRawTransaction',
	    params: [rawTx]
	  }, function (err, res) {
	    if (err) return cb(err);
	    cb(null, res.result);
	  });
	};
	HookedWalletSubprovider.prototype.estimateGas = function (txParams, cb) {
	  var self = this;
	  estimateGas(self.engine, txParams, cb);
	};
	HookedWalletSubprovider.prototype.getGasPrice = function (cb) {
	  var self = this;
	  self.emitPayload({
	    method: 'eth_gasPrice',
	    params: []
	  }, function (err, res) {
	    if (err) return cb(err);
	    cb(null, res.result);
	  });
	};
	HookedWalletSubprovider.prototype.fillInTxExtras = function (txParams, cb) {
	  var self = this;
	  var address = txParams.from;
	  // console.log('fillInTxExtras - address:', address)

	  var tasks = {};
	  if (txParams.gasPrice === undefined) {
	    // console.log("need to get gasprice")
	    tasks.gasPrice = self.getGasPrice.bind(self);
	  }
	  if (txParams.nonce === undefined) {
	    // console.log("need to get nonce")
	    tasks.nonce = self.emitPayload.bind(self, {
	      method: 'eth_getTransactionCount',
	      params: [address, 'pending']
	    });
	  }
	  if (txParams.gas === undefined) {
	    // console.log("need to get gas")
	    tasks.gas = self.estimateGas.bind(self, cloneTxParams(txParams));
	  }
	  parallel(tasks, function (err, taskResults) {
	    if (err) return cb(err);
	    var result = {};
	    if (taskResults.gasPrice) result.gasPrice = taskResults.gasPrice;
	    if (taskResults.nonce) result.nonce = taskResults.nonce.result;
	    if (taskResults.gas) result.gas = taskResults.gas;
	    cb(null, extend(txParams, result));
	  });
	};

	// util

	// we use this to clean any custom params from the txParams
	function cloneTxParams(txParams) {
	  return {
	    from: txParams.from,
	    to: txParams.to,
	    value: txParams.value,
	    data: txParams.data,
	    gas: txParams.gas,
	    gasPrice: txParams.gasPrice,
	    nonce: txParams.nonce
	  };
	}
	function toLowerCase(string) {
	  return string.toLowerCase();
	}
	function resemblesAddress(string) {
	  var fixed = ethUtil.addHexPrefix(string);
	  var isValid = ethUtil.isValidAddress(fixed);
	  return isValid;
	}

	// Returns true if resembles hex data
	// but definitely not a valid address.
	function resemblesData(string) {
	  var fixed = ethUtil.addHexPrefix(string);
	  var isValidAddress = ethUtil.isValidAddress(fixed);
	  return !isValidAddress && isValidHex(string);
	}
	function isValidHex(data) {
	  var isString = typeof data === 'string';
	  if (!isString) return false;
	  var isHexPrefixed = data.slice(0, 2) === '0x';
	  if (!isHexPrefixed) return false;
	  var nonPrefixed = data.slice(2);
	  var isValid = nonPrefixed.match(hexRegex);
	  return isValid;
	}
	function mustProvideInConstructor(methodName) {
	  return function (params, cb) {
	    cb(new Error('ProviderEngine - HookedWalletSubprovider - Must provide "' + methodName + '" fn in constructor options'));
	  };
	}
	return hookedWallet;
}

var genesisGasLimit = {
	v: 5000,
	d: "Gas limit of the Genesis block."
};
var genesisDifficulty = {
	v: 17179869184,
	d: "Difficulty of the Genesis block."
};
var genesisNonce = {
	v: "0x0000000000000042",
	d: "the geneis nonce"
};
var genesisExtraData = {
	v: "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
	d: "extra data "
};
var genesisHash = {
	v: "0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3",
	d: "genesis hash"
};
var genesisStateRoot = {
	v: "0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544",
	d: "the genesis state root"
};
var minGasLimit = {
	v: 5000,
	d: "Minimum the gas limit may ever be."
};
var gasLimitBoundDivisor = {
	v: 1024,
	d: "The bound divisor of the gas limit, used in update calculations."
};
var minimumDifficulty = {
	v: 131072,
	d: "The minimum that the difficulty may ever be."
};
var difficultyBoundDivisor = {
	v: 2048,
	d: "The bound divisor of the difficulty, used in the update calculations."
};
var durationLimit = {
	v: 13,
	d: "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not."
};
var maximumExtraDataSize = {
	v: 32,
	d: "Maximum size extra data may be after Genesis."
};
var epochDuration = {
	v: 30000,
	d: "Duration between proof-of-work epochs."
};
var stackLimit = {
	v: 1024,
	d: "Maximum size of VM stack allowed."
};
var callCreateDepth = {
	v: 1024,
	d: "Maximum depth of call/create stack."
};
var tierStepGas = {
	v: [
		0,
		2,
		3,
		5,
		8,
		10,
		20
	],
	d: "Once per operation, for a selection of them."
};
var expGas = {
	v: 10,
	d: "Once per EXP instuction."
};
var expByteGas = {
	v: 10,
	d: "Times ceil(log256(exponent)) for the EXP instruction."
};
var sha3Gas = {
	v: 30,
	d: "Once per SHA3 operation."
};
var sha3WordGas = {
	v: 6,
	d: "Once per word of the SHA3 operation's data."
};
var sloadGas = {
	v: 50,
	d: "Once per SLOAD operation."
};
var sstoreSetGas = {
	v: 20000,
	d: "Once per SSTORE operation if the zeroness changes from zero."
};
var sstoreResetGas = {
	v: 5000,
	d: "Once per SSTORE operation if the zeroness does not change from zero."
};
var sstoreRefundGas = {
	v: 15000,
	d: "Once per SSTORE operation if the zeroness changes to zero."
};
var jumpdestGas = {
	v: 1,
	d: "Refunded gas, once per SSTORE operation if the zeroness changes to zero."
};
var logGas = {
	v: 375,
	d: "Per LOG* operation."
};
var logDataGas = {
	v: 8,
	d: "Per byte in a LOG* operation's data."
};
var logTopicGas = {
	v: 375,
	d: "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas."
};
var createGas = {
	v: 32000,
	d: "Once per CREATE operation & contract-creation transaction."
};
var callGas = {
	v: 40,
	d: "Once per CALL operation & message call transaction."
};
var callStipend = {
	v: 2300,
	d: "Free gas given at beginning of call."
};
var callValueTransferGas = {
	v: 9000,
	d: "Paid for CALL when the value transfor is non-zero."
};
var callNewAccountGas = {
	v: 25000,
	d: "Paid for CALL when the destination address didn't exist prior."
};
var suicideRefundGas = {
	v: 24000,
	d: "Refunded following a suicide operation."
};
var memoryGas = {
	v: 3,
	d: "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL."
};
var quadCoeffDiv = {
	v: 512,
	d: "Divisor for the quadratic particle of the memory cost equation."
};
var createDataGas = {
	v: 200,
	d: ""
};
var txGas = {
	v: 21000,
	d: "Per transaction. NOTE: Not payable on data of calls between transactions."
};
var txCreation = {
	v: 32000,
	d: "the cost of creating a contract via tx"
};
var txDataZeroGas = {
	v: 4,
	d: "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions."
};
var txDataNonZeroGas = {
	v: 68,
	d: "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions."
};
var copyGas = {
	v: 3,
	d: "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added."
};
var ecrecoverGas = {
	v: 3000,
	d: ""
};
var sha256Gas = {
	v: 60,
	d: ""
};
var sha256WordGas = {
	v: 12,
	d: ""
};
var ripemd160Gas = {
	v: 600,
	d: ""
};
var ripemd160WordGas = {
	v: 120,
	d: ""
};
var identityGas = {
	v: 15,
	d: ""
};
var identityWordGas = {
	v: 3,
	d: ""
};
var minerReward = {
	v: "5000000000000000000",
	d: "the amount a miner get rewarded for mining a block"
};
var ommerReward = {
	v: "625000000000000000",
	d: "The amount of wei a miner of an uncle block gets for being inculded in the blockchain"
};
var niblingReward = {
	v: "156250000000000000",
	d: "the amount a miner gets for inculding a uncle"
};
var homeSteadForkNumber = {
	v: 1150000,
	d: "the block that the Homestead fork started at"
};
var homesteadRepriceForkNumber = {
	v: 2463000,
	d: "the block that the Homestead Reprice (EIP150) fork started at"
};
var timebombPeriod = {
	v: 100000,
	d: "Exponential difficulty timebomb period"
};
var freeBlockPeriod = {
	v: 2
};
var require$$1 = {
	genesisGasLimit: genesisGasLimit,
	genesisDifficulty: genesisDifficulty,
	genesisNonce: genesisNonce,
	genesisExtraData: genesisExtraData,
	genesisHash: genesisHash,
	genesisStateRoot: genesisStateRoot,
	minGasLimit: minGasLimit,
	gasLimitBoundDivisor: gasLimitBoundDivisor,
	minimumDifficulty: minimumDifficulty,
	difficultyBoundDivisor: difficultyBoundDivisor,
	durationLimit: durationLimit,
	maximumExtraDataSize: maximumExtraDataSize,
	epochDuration: epochDuration,
	stackLimit: stackLimit,
	callCreateDepth: callCreateDepth,
	tierStepGas: tierStepGas,
	expGas: expGas,
	expByteGas: expByteGas,
	sha3Gas: sha3Gas,
	sha3WordGas: sha3WordGas,
	sloadGas: sloadGas,
	sstoreSetGas: sstoreSetGas,
	sstoreResetGas: sstoreResetGas,
	sstoreRefundGas: sstoreRefundGas,
	jumpdestGas: jumpdestGas,
	logGas: logGas,
	logDataGas: logDataGas,
	logTopicGas: logTopicGas,
	createGas: createGas,
	callGas: callGas,
	callStipend: callStipend,
	callValueTransferGas: callValueTransferGas,
	callNewAccountGas: callNewAccountGas,
	suicideRefundGas: suicideRefundGas,
	memoryGas: memoryGas,
	quadCoeffDiv: quadCoeffDiv,
	createDataGas: createDataGas,
	txGas: txGas,
	txCreation: txCreation,
	txDataZeroGas: txDataZeroGas,
	txDataNonZeroGas: txDataNonZeroGas,
	copyGas: copyGas,
	ecrecoverGas: ecrecoverGas,
	sha256Gas: sha256Gas,
	sha256WordGas: sha256WordGas,
	ripemd160Gas: ripemd160Gas,
	ripemd160WordGas: ripemd160WordGas,
	identityGas: identityGas,
	identityWordGas: identityWordGas,
	minerReward: minerReward,
	ommerReward: ommerReward,
	niblingReward: niblingReward,
	homeSteadForkNumber: homeSteadForkNumber,
	homesteadRepriceForkNumber: homesteadRepriceForkNumber,
	timebombPeriod: timebombPeriod,
	freeBlockPeriod: freeBlockPeriod
};

var es5;
var hasRequiredEs5;

function requireEs5 () {
	if (hasRequiredEs5) return es5;
	hasRequiredEs5 = 1;

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	var ethUtil = requireDist$3();
	var fees = require$$1;
	var BN = ethUtil.BN;

	// secp256k1n/2
	var N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);

	/**
	 * Creates a new transaction object.
	 *
	 * @example
	 * var rawTx = {
	 *   nonce: '00',
	 *   gasPrice: '09184e72a000',
	 *   gasLimit: '2710',
	 *   to: '0000000000000000000000000000000000000000',
	 *   value: '00',
	 *   data: '7f7465737432000000000000000000000000000000000000000000000000000000600057',
	 *   v: '1c',
	 *   r: '5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',
	 *   s: '5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'
	 * };
	 * var tx = new Transaction(rawTx);
	 *
	 * @class
	 * @param {Buffer | Array | Object} data a transaction can be initiailized with either a buffer containing the RLP serialized transaction or an array of buffers relating to each of the tx Properties, listed in order below in the exmple.
	 *
	 * Or lastly an Object containing the Properties of the transaction like in the Usage example.
	 *
	 * For Object and Arrays each of the elements can either be a Buffer, a hex-prefixed (0x) String , Number, or an object with a toBuffer method such as Bignum
	 *
	 * @property {Buffer} raw The raw rlp encoded transaction
	 * @param {Buffer} data.nonce nonce number
	 * @param {Buffer} data.gasLimit transaction gas limit
	 * @param {Buffer} data.gasPrice transaction gas price
	 * @param {Buffer} data.to to the to address
	 * @param {Buffer} data.value the amount of ether sent
	 * @param {Buffer} data.data this will contain the data of the message or the init of a contract
	 * @param {Buffer} data.v EC signature parameter
	 * @param {Buffer} data.r EC signature parameter
	 * @param {Buffer} data.s EC recovery ID
	 * @param {Number} data.chainId EIP 155 chainId - mainnet: 1, ropsten: 3
	 * */

	var Transaction = function () {
	  function Transaction(data) {
	    _classCallCheck(this, Transaction);
	    data = data || {};
	    // Define Properties
	    var fields = [{
	      name: 'nonce',
	      length: 32,
	      allowLess: true,
	      "default": new Buffer([])
	    }, {
	      name: 'gasPrice',
	      length: 32,
	      allowLess: true,
	      "default": new Buffer([])
	    }, {
	      name: 'gasLimit',
	      alias: 'gas',
	      length: 32,
	      allowLess: true,
	      "default": new Buffer([])
	    }, {
	      name: 'to',
	      allowZero: true,
	      length: 20,
	      "default": new Buffer([])
	    }, {
	      name: 'value',
	      length: 32,
	      allowLess: true,
	      "default": new Buffer([])
	    }, {
	      name: 'data',
	      alias: 'input',
	      allowZero: true,
	      "default": new Buffer([])
	    }, {
	      name: 'v',
	      allowZero: true,
	      "default": new Buffer([0x1c])
	    }, {
	      name: 'r',
	      length: 32,
	      allowZero: true,
	      allowLess: true,
	      "default": new Buffer([])
	    }, {
	      name: 's',
	      length: 32,
	      allowZero: true,
	      allowLess: true,
	      "default": new Buffer([])
	    }];

	    /**
	     * Returns the rlp encoding of the transaction
	     * @method serialize
	     * @return {Buffer}
	     * @memberof Transaction
	     * @name serialize
	     */
	    // attached serialize
	    ethUtil.defineProperties(this, fields, data);

	    /**
	     * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.
	     * @name from
	     * @memberof Transaction
	     */
	    Object.defineProperty(this, 'from', {
	      enumerable: true,
	      configurable: true,
	      get: this.getSenderAddress.bind(this)
	    });

	    // calculate chainId from signature
	    var sigV = ethUtil.bufferToInt(this.v);
	    var chainId = Math.floor((sigV - 35) / 2);
	    if (chainId < 0) chainId = 0;

	    // set chainId
	    this._chainId = chainId || data.chainId || 0;
	    this._homestead = true;
	  }

	  /**
	   * If the tx's `to` is to the creation address
	   * @return {Boolean}
	   */

	  Transaction.prototype.toCreationAddress = function toCreationAddress() {
	    return this.to.toString('hex') === '';
	  };

	  /**
	   * Computes a sha3-256 hash of the serialized tx
	   * @param {Boolean} [includeSignature=true] whether or not to inculde the signature
	   * @return {Buffer}
	   */

	  Transaction.prototype.hash = function hash(includeSignature) {
	    if (includeSignature === undefined) includeSignature = true;

	    // EIP155 spec:
	    // when computing the hash of a transaction for purposes of signing or recovering,
	    // instead of hashing only the first six elements (ie. nonce, gasprice, startgas, to, value, data),
	    // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0

	    var items = void 0;
	    if (includeSignature) {
	      items = this.raw;
	    } else {
	      if (this._chainId > 0) {
	        var raw = this.raw.slice();
	        this.v = this._chainId;
	        this.r = 0;
	        this.s = 0;
	        items = this.raw;
	        this.raw = raw;
	      } else {
	        items = this.raw.slice(0, 6);
	      }
	    }

	    // create hash
	    return ethUtil.rlphash(items);
	  };

	  /**
	   * returns the public key of the sender
	   * @return {Buffer}
	   */

	  Transaction.prototype.getChainId = function getChainId() {
	    return this._chainId;
	  };

	  /**
	   * returns the sender's address
	   * @return {Buffer}
	   */

	  Transaction.prototype.getSenderAddress = function getSenderAddress() {
	    if (this._from) {
	      return this._from;
	    }
	    var pubkey = this.getSenderPublicKey();
	    this._from = ethUtil.publicToAddress(pubkey);
	    return this._from;
	  };

	  /**
	   * returns the public key of the sender
	   * @return {Buffer}
	   */

	  Transaction.prototype.getSenderPublicKey = function getSenderPublicKey() {
	    if (!this._senderPubKey || !this._senderPubKey.length) {
	      if (!this.verifySignature()) throw new Error('Invalid Signature');
	    }
	    return this._senderPubKey;
	  };

	  /**
	   * Determines if the signature is valid
	   * @return {Boolean}
	   */

	  Transaction.prototype.verifySignature = function verifySignature() {
	    var msgHash = this.hash(false);
	    // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.
	    if (this._homestead && new BN(this.s).cmp(N_DIV_2) === 1) {
	      return false;
	    }
	    try {
	      var v = ethUtil.bufferToInt(this.v);
	      if (this._chainId > 0) {
	        v -= this._chainId * 2 + 8;
	      }
	      this._senderPubKey = ethUtil.ecrecover(msgHash, v, this.r, this.s);
	    } catch (e) {
	      return false;
	    }
	    return !!this._senderPubKey;
	  };

	  /**
	   * sign a transaction with a given a private key
	   * @param {Buffer} privateKey
	   */

	  Transaction.prototype.sign = function sign(privateKey) {
	    var msgHash = this.hash(false);
	    var sig = ethUtil.ecsign(msgHash, privateKey);
	    if (this._chainId > 0) {
	      sig.v += this._chainId * 2 + 8;
	    }
	    Object.assign(this, sig);
	  };

	  /**
	   * The amount of gas paid for the data in this tx
	   * @return {BN}
	   */

	  Transaction.prototype.getDataFee = function getDataFee() {
	    var data = this.raw[5];
	    var cost = new BN(0);
	    for (var i = 0; i < data.length; i++) {
	      data[i] === 0 ? cost.iaddn(fees.txDataZeroGas.v) : cost.iaddn(fees.txDataNonZeroGas.v);
	    }
	    return cost;
	  };

	  /**
	   * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)
	   * @return {BN}
	   */

	  Transaction.prototype.getBaseFee = function getBaseFee() {
	    var fee = this.getDataFee().iaddn(fees.txGas.v);
	    if (this._homestead && this.toCreationAddress()) {
	      fee.iaddn(fees.txCreation.v);
	    }
	    return fee;
	  };

	  /**
	   * the up front amount that an account must have for this transaction to be valid
	   * @return {BN}
	   */

	  Transaction.prototype.getUpfrontCost = function getUpfrontCost() {
	    return new BN(this.gasLimit).imul(new BN(this.gasPrice)).iadd(new BN(this.value));
	  };

	  /**
	   * validates the signature and checks to see if it has enough gas
	   * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean
	   * @return {Boolean|String}
	   */

	  Transaction.prototype.validate = function validate(stringError) {
	    var errors = [];
	    if (!this.verifySignature()) {
	      errors.push('Invalid Signature');
	    }
	    if (this.getBaseFee().cmp(new BN(this.gasLimit)) > 0) {
	      errors.push(['gas limit is too low. Need at least ' + this.getBaseFee()]);
	    }
	    if (stringError === undefined || stringError === false) {
	      return errors.length === 0;
	    } else {
	      return errors.join(' ');
	    }
	  };
	  return Transaction;
	}();
	es5 = Transaction;
	return es5;
}

var nonceTracker;
var hasRequiredNonceTracker;

function requireNonceTracker () {
	if (hasRequiredNonceTracker) return nonceTracker;
	hasRequiredNonceTracker = 1;
	var inherits = require$$0__default$1["default"].inherits;
	var Transaction = requireEs5();
	var ethUtil = requireDist$3();
	var Subprovider = requireSubprovider();
	var blockTagForPayload = requireRpcCacheUtils().blockTagForPayload;
	nonceTracker = NonceTrackerSubprovider;

	// handles the following RPC methods:
	//   eth_getTransactionCount (pending only)
	//
	// observes the following RPC methods:
	//   eth_sendRawTransaction
	//   evm_revert (to clear the nonce cache)

	inherits(NonceTrackerSubprovider, Subprovider);
	function NonceTrackerSubprovider(opts) {
	  var self = this;
	  self.nonceCache = {};
	}
	NonceTrackerSubprovider.prototype.handleRequest = function (payload, next, end) {
	  var self = this;
	  switch (payload.method) {
	    case 'eth_getTransactionCount':
	      var blockTag = blockTagForPayload(payload);
	      var address = payload.params[0].toLowerCase();
	      var cachedResult = self.nonceCache[address];
	      // only handle requests against the 'pending' blockTag
	      if (blockTag === 'pending') {
	        // has a result
	        if (cachedResult) {
	          end(null, cachedResult);
	          // fallthrough then populate cache
	        } else {
	          next(function (err, result, cb) {
	            if (err) return cb();
	            if (self.nonceCache[address] === undefined) {
	              self.nonceCache[address] = result;
	            }
	            cb();
	          });
	        }
	      } else {
	        next();
	      }
	      return;
	    case 'eth_sendRawTransaction':
	      // allow the request to continue normally
	      next(function (err, result, cb) {
	        // only update local nonce if tx was submitted correctly
	        if (err) return cb();
	        // parse raw tx
	        var rawTx = payload.params[0];
	        ethUtil.stripHexPrefix(rawTx);
	        Buffer.from(ethUtil.stripHexPrefix(rawTx), 'hex');
	        var tx = new Transaction(Buffer.from(ethUtil.stripHexPrefix(rawTx), 'hex'));
	        // extract address
	        var address = '0x' + tx.getSenderAddress().toString('hex').toLowerCase();
	        // extract nonce and increment
	        var nonce = ethUtil.bufferToInt(tx.nonce);
	        nonce++;
	        // hexify and normalize
	        var hexNonce = nonce.toString(16);
	        if (hexNonce.length % 2) hexNonce = '0' + hexNonce;
	        hexNonce = '0x' + hexNonce;
	        // dont update our record on the nonce until the submit was successful
	        // update cache
	        self.nonceCache[address] = hexNonce;
	        cb();
	      });
	      return;

	    // Clear cache on a testrpc revert
	    case 'evm_revert':
	      self.nonceCache = {};
	      next();
	      return;
	    default:
	      next();
	      return;
	  }
	};
	return nonceTracker;
}

var subscriptionManager;
var hasRequiredSubscriptionManager;

function requireSubscriptionManager () {
	if (hasRequiredSubscriptionManager) return subscriptionManager;
	hasRequiredSubscriptionManager = 1;
	var _regeneratorRuntime = regenerator;
	var _asyncToGenerator = requireAsyncToGenerator();
	var SafeEventEmitter = requireSafeEventEmitter()["default"];
	var createScaffoldMiddleware = requireScaffold();
	var _require = requireDist$1(),
	  createAsyncMiddleware = _require.createAsyncMiddleware;
	var createFilterMiddleware = requireEthJsonRpcFilters();
	var _require2 = requireHexUtils(),
	  unsafeRandomBytes = _require2.unsafeRandomBytes,
	  incrementHexInt = _require2.incrementHexInt;
	var getBlocksForRange = requireGetBlocksForRange();
	subscriptionManager = createSubscriptionMiddleware;
	function createSubscriptionMiddleware(_ref) {
	  var blockTracker = _ref.blockTracker,
	    provider = _ref.provider;
	  // state and utilities for handling subscriptions
	  var subscriptions = {};
	  var filterManager = createFilterMiddleware({
	    blockTracker: blockTracker,
	    provider: provider
	  });

	  // internal flag
	  var isDestroyed = false;

	  // create subscriptionManager api object
	  var events = new SafeEventEmitter();
	  var middleware = createScaffoldMiddleware({
	    eth_subscribe: createAsyncMiddleware(subscribe),
	    eth_unsubscribe: createAsyncMiddleware(unsubscribe)
	  });
	  middleware.destroy = destroy;
	  return {
	    events: events,
	    middleware: middleware
	  };
	  function subscribe(_x, _x2) {
	    return _subscribe.apply(this, arguments);
	  }
	  function _subscribe() {
	    _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(req, res) {
	      var subscriptionType, subId, sub, filterParams, filter, createSubNewHeads, createSubFromFilter;
	      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
	        while (1) {
	          switch (_context4.prev = _context4.next) {
	            case 0:
	              createSubFromFilter = function _createSubFromFilter(_ref4) {
	                var subId = _ref4.subId,
	                  filter = _ref4.filter;
	                filter.on('update', function (result) {
	                  return _emitSubscriptionResult(subId, result);
	                });
	                var sub = {
	                  type: subscriptionType,
	                  destroy: function () {
	                    var _destroy2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
	                      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
	                        while (1) {
	                          switch (_context3.prev = _context3.next) {
	                            case 0:
	                              _context3.next = 2;
	                              return filterManager.uninstallFilter(filter.idHex);
	                            case 2:
	                              return _context3.abrupt("return", _context3.sent);
	                            case 3:
	                            case "end":
	                              return _context3.stop();
	                          }
	                        }
	                      }, _callee3);
	                    }));
	                    function destroy() {
	                      return _destroy2.apply(this, arguments);
	                    }
	                    return destroy;
	                  }()
	                };
	                return sub;
	              };
	              createSubNewHeads = function _createSubNewHeads(_ref2) {
	                var subId = _ref2.subId;
	                var sub = {
	                  type: subscriptionType,
	                  destroy: function () {
	                    var _destroy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
	                      return _regeneratorRuntime.wrap(function _callee$(_context) {
	                        while (1) {
	                          switch (_context.prev = _context.next) {
	                            case 0:
	                              blockTracker.removeListener('sync', sub.update);
	                            case 1:
	                            case "end":
	                              return _context.stop();
	                          }
	                        }
	                      }, _callee);
	                    }));
	                    function destroy() {
	                      return _destroy.apply(this, arguments);
	                    }
	                    return destroy;
	                  }(),
	                  update: function () {
	                    var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {
	                      var oldBlock, newBlock, toBlock, fromBlock, rawBlocks, results;
	                      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	                        while (1) {
	                          switch (_context2.prev = _context2.next) {
	                            case 0:
	                              oldBlock = _ref3.oldBlock, newBlock = _ref3.newBlock;
	                              // for newHeads
	                              toBlock = newBlock;
	                              fromBlock = incrementHexInt(oldBlock);
	                              _context2.next = 5;
	                              return getBlocksForRange({
	                                provider: provider,
	                                fromBlock: fromBlock,
	                                toBlock: toBlock
	                              });
	                            case 5:
	                              rawBlocks = _context2.sent;
	                              results = rawBlocks.map(normalizeBlock);
	                              results.forEach(function (value) {
	                                _emitSubscriptionResult(subId, value);
	                              });
	                            case 8:
	                            case "end":
	                              return _context2.stop();
	                          }
	                        }
	                      }, _callee2);
	                    }));
	                    function update(_x5) {
	                      return _update.apply(this, arguments);
	                    }
	                    return update;
	                  }()
	                };
	                // check for subscription updates on new block
	                blockTracker.on('sync', sub.update);
	                return sub;
	              };
	              if (!isDestroyed) {
	                _context4.next = 4;
	                break;
	              }
	              throw new Error('SubscriptionManager - attempting to use after destroying');
	            case 4:
	              subscriptionType = req.params[0]; // subId is 16 byte hex string
	              subId = unsafeRandomBytes(16); // create sub
	              _context4.t0 = subscriptionType;
	              _context4.next = _context4.t0 === 'newHeads' ? 9 : _context4.t0 === 'logs' ? 11 : 17;
	              break;
	            case 9:
	              sub = createSubNewHeads({
	                subId: subId
	              });
	              return _context4.abrupt("break", 18);
	            case 11:
	              filterParams = req.params[1];
	              _context4.next = 14;
	              return filterManager.newLogFilter(filterParams);
	            case 14:
	              filter = _context4.sent;
	              sub = createSubFromFilter({
	                subId: subId,
	                filter: filter
	              });
	              return _context4.abrupt("break", 18);
	            case 17:
	              throw new Error("SubscriptionManager - unsupported subscription type \"".concat(subscriptionType, "\""));
	            case 18:
	              subscriptions[subId] = sub;
	              res.result = subId;
	              return _context4.abrupt("return");
	            case 21:
	            case "end":
	              return _context4.stop();
	          }
	        }
	      }, _callee4);
	    }));
	    return _subscribe.apply(this, arguments);
	  }
	  function unsubscribe(_x3, _x4) {
	    return _unsubscribe.apply(this, arguments);
	  }
	  function _unsubscribe() {
	    _unsubscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(req, res) {
	      var id, subscription;
	      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
	        while (1) {
	          switch (_context5.prev = _context5.next) {
	            case 0:
	              if (!isDestroyed) {
	                _context5.next = 2;
	                break;
	              }
	              throw new Error('SubscriptionManager - attempting to use after destroying');
	            case 2:
	              id = req.params[0];
	              subscription = subscriptions[id]; // if missing, return "false" to indicate it was not removed
	              if (subscription) {
	                _context5.next = 7;
	                break;
	              }
	              res.result = false;
	              return _context5.abrupt("return");
	            case 7:
	              // cleanup subscription
	              delete subscriptions[id];
	              _context5.next = 10;
	              return subscription.destroy();
	            case 10:
	              res.result = true;
	            case 11:
	            case "end":
	              return _context5.stop();
	          }
	        }
	      }, _callee5);
	    }));
	    return _unsubscribe.apply(this, arguments);
	  }
	  function _emitSubscriptionResult(filterIdHex, value) {
	    events.emit('notification', {
	      jsonrpc: '2.0',
	      method: 'eth_subscription',
	      params: {
	        subscription: filterIdHex,
	        result: value
	      }
	    });
	  }
	  function destroy() {
	    events.removeAllListeners();
	    for (var id in subscriptions) {
	      subscriptions[id].destroy();
	      delete subscriptions[id];
	    }
	    isDestroyed = true;
	  }
	}
	function normalizeBlock(block) {
	  return {
	    hash: block.hash,
	    parentHash: block.parentHash,
	    sha3Uncles: block.sha3Uncles,
	    miner: block.miner,
	    stateRoot: block.stateRoot,
	    transactionsRoot: block.transactionsRoot,
	    receiptsRoot: block.receiptsRoot,
	    logsBloom: block.logsBloom,
	    difficulty: block.difficulty,
	    number: block.number,
	    gasLimit: block.gasLimit,
	    gasUsed: block.gasUsed,
	    nonce: block.nonce,
	    mixHash: block.mixHash,
	    timestamp: block.timestamp,
	    extraData: block.extraData
	  };
	}
	return subscriptionManager;
}

var subscriptions;
var hasRequiredSubscriptions;

function requireSubscriptions () {
	if (hasRequiredSubscriptions) return subscriptions;
	hasRequiredSubscriptions = 1;
	var _createClass = createClass.exports;
	var _classCallCheck = classCallCheck.exports;
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf.exports;
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	var ProviderSubprovider = requireJsonRpcEngineMiddleware();
	var createSubscriptionManager = requireSubscriptionManager();
	var SubscriptionsSubprovider = /*#__PURE__*/function (_ProviderSubprovider) {

	  _inherits(SubscriptionsSubprovider, _ProviderSubprovider);
	  var _super = _createSuper(SubscriptionsSubprovider);
	  function SubscriptionsSubprovider() {
	    _classCallCheck(this, SubscriptionsSubprovider);
	    return _super.call(this, function (_ref) {
	      var blockTracker = _ref.blockTracker,
	        provider = _ref.provider,
	        engine = _ref.engine;
	      var _createSubscriptionMa = createSubscriptionManager({
	          blockTracker: blockTracker,
	          provider: provider
	        }),
	        events = _createSubscriptionMa.events,
	        middleware = _createSubscriptionMa.middleware;
	      // forward subscription events on the engine
	      events.on('notification', function (data) {
	        return engine.emit('data', null, data);
	      });
	      // return the subscription install/remove middleware
	      return middleware;
	    });
	  }
	  return _createClass(SubscriptionsSubprovider);
	}(ProviderSubprovider);
	subscriptions = SubscriptionsSubprovider;
	return subscriptions;
}

(function (exports) {

	var _regeneratorRuntime = regenerator;
	var _classCallCheck = classCallCheck.exports;
	var _createClass = createClass.exports;
	var _assertThisInitialized = assertThisInitialized.exports;
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf.exports;
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var tslib_1 = require$$7;
	var client_1 = tslib_1.__importDefault(requireCjs$2());
	var qrcode_modal_1 = tslib_1.__importDefault(requireCjs$1());
	var http_connection_1 = tslib_1.__importDefault(requireCjs());
	var utils_1 = requireCjs$6();
	var ProviderEngine = requireWeb3ProviderEngine();
	var CacheSubprovider = requireCache();
	var FixtureSubprovider = requireFixture();
	var FilterSubprovider = requireFilters();
	var HookedWalletSubprovider = requireHookedWallet();
	var NonceSubprovider = requireNonceTracker();
	var SubscriptionsSubprovider = requireSubscriptions();
	var WalletConnectProvider = /*#__PURE__*/function (_ProviderEngine) {
	  _inherits(WalletConnectProvider, _ProviderEngine);
	  var _super = _createSuper(WalletConnectProvider);
	  function WalletConnectProvider(opts) {
	    var _this;
	    _classCallCheck(this, WalletConnectProvider);
	    _this = _super.call(this, {
	      pollingInterval: opts.pollingInterval || 8000
	    });
	    _this.bridge = "https://bridge.walletconnect.org";
	    _this.qrcode = true;
	    _this.qrcodeModal = qrcode_modal_1["default"];
	    _this.qrcodeModalOptions = undefined;
	    _this.rpc = null;
	    _this.infuraId = "";
	    _this.http = null;
	    _this.isConnecting = false;
	    _this.connected = false;
	    _this.connectCallbacks = [];
	    _this.accounts = [];
	    _this.chainId = 1;
	    _this.rpcUrl = "";
	    _this.enable = function () {
	      return tslib_1.__awaiter(_assertThisInitialized(_this), void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
	        var wc;
	        return _regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                _context.next = 2;
	                return this.getWalletConnector();
	              case 2:
	                wc = _context.sent;
	                if (!wc) {
	                  _context.next = 9;
	                  break;
	                }
	                this.start();
	                this.subscribeWalletConnector();
	                return _context.abrupt("return", wc.accounts);
	              case 9:
	                throw new Error("Failed to connect to WalleConnect");
	              case 10:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));
	    };
	    _this.request = function (payload) {
	      return tslib_1.__awaiter(_assertThisInitialized(_this), void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
	        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                return _context2.abrupt("return", this.send(payload));
	              case 1:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));
	    };
	    _this.send = function (payload, callback) {
	      return tslib_1.__awaiter(_assertThisInitialized(_this), void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
	        var _a, method, params, _yield$this$handleOth, result;
	        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                if (!(typeof payload === "string")) {
	                  _context3.next = 5;
	                  break;
	                }
	                method = payload;
	                params = callback;
	                if (method === "personal_sign") {
	                  params = (0, utils_1.parsePersonalSign)(params);
	                }
	                return _context3.abrupt("return", this.sendAsyncPromise(method, params));
	              case 5:
	                payload = Object.assign({
	                  id: (0, utils_1.payloadId)(),
	                  jsonrpc: "2.0"
	                }, payload);
	                if (payload.method === "personal_sign") {
	                  payload.params = (0, utils_1.parsePersonalSign)(payload.params);
	                }
	                if (!callback) {
	                  _context3.next = 10;
	                  break;
	                }
	                this.sendAsync(payload, callback);
	                return _context3.abrupt("return");
	              case 10:
	                if (!(payload.method === "eth_signTypedData_v4" && ((_a = this.walletMeta) === null || _a === void 0 ? void 0 : _a.name) === "MetaMask")) {
	                  _context3.next = 18;
	                  break;
	                }
	                _context3.next = 13;
	                return this.handleOtherRequests(payload);
	              case 13:
	                _yield$this$handleOth = _context3.sent;
	                result = _yield$this$handleOth.result;
	                return _context3.abrupt("return", result);
	              case 18:
	                return _context3.abrupt("return", this.sendAsyncPromise(payload.method, payload.params));
	              case 19:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));
	    };
	    _this.onConnect = function (callback) {
	      _this.connectCallbacks.push(callback);
	    };
	    _this.triggerConnect = function (result) {
	      if (_this.connectCallbacks && _this.connectCallbacks.length) {
	        _this.connectCallbacks.forEach(function (callback) {
	          return callback(result);
	        });
	      }
	    };
	    _this.bridge = opts.connector ? opts.connector.bridge : opts.bridge || "https://bridge.walletconnect.org";
	    _this.qrcode = typeof opts.qrcode === "undefined" || opts.qrcode !== false;
	    _this.qrcodeModal = opts.qrcodeModal || _this.qrcodeModal;
	    _this.qrcodeModalOptions = opts.qrcodeModalOptions;
	    _this.wc = opts.connector || new client_1["default"]({
	      bridge: _this.bridge,
	      qrcodeModal: _this.qrcode ? _this.qrcodeModal : undefined,
	      qrcodeModalOptions: _this.qrcodeModalOptions,
	      storageId: opts === null || opts === void 0 ? void 0 : opts.storageId,
	      signingMethods: opts === null || opts === void 0 ? void 0 : opts.signingMethods,
	      clientMeta: opts === null || opts === void 0 ? void 0 : opts.clientMeta
	    });
	    _this.rpc = opts.rpc || null;
	    if (!_this.rpc && (!opts.infuraId || typeof opts.infuraId !== "string" || !opts.infuraId.trim())) {
	      throw new Error("Missing one of the required parameters: rpc or infuraId");
	    }
	    _this.infuraId = opts.infuraId || "";
	    _this.chainId = (opts === null || opts === void 0 ? void 0 : opts.chainId) || _this.chainId;
	    _this.initialize();
	    return _this;
	  }
	  _createClass(WalletConnectProvider, [{
	    key: "isWalletConnect",
	    get: function get() {
	      return true;
	    }
	  }, {
	    key: "connector",
	    get: function get() {
	      return this.wc;
	    }
	  }, {
	    key: "walletMeta",
	    get: function get() {
	      return this.wc.peerMeta;
	    }
	  }, {
	    key: "disconnect",
	    value: function disconnect() {
	      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
	        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                this.close();
	              case 1:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this);
	      }));
	    }
	  }, {
	    key: "close",
	    value: function close() {
	      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
	        var wc;
	        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                _context5.next = 2;
	                return this.getWalletConnector({
	                  disableSessionCreation: true
	                });
	              case 2:
	                wc = _context5.sent;
	                _context5.next = 5;
	                return wc.killSession();
	              case 5:
	                _context5.next = 7;
	                return this.onDisconnect();
	              case 7:
	              case "end":
	                return _context5.stop();
	            }
	          }
	        }, _callee5, this);
	      }));
	    }
	  }, {
	    key: "handleRequest",
	    value: function handleRequest(payload) {
	      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
	        var response, result, wc;
	        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
	          while (1) {
	            switch (_context6.prev = _context6.next) {
	              case 0:
	                _context6.prev = 0;
	                result = null;
	                _context6.next = 4;
	                return this.getWalletConnector();
	              case 4:
	                wc = _context6.sent;
	                _context6.t0 = payload.method;
	                _context6.next = _context6.t0 === "wc_killSession" ? 8 : _context6.t0 === "eth_accounts" ? 12 : _context6.t0 === "eth_coinbase" ? 14 : _context6.t0 === "eth_chainId" ? 16 : _context6.t0 === "net_version" ? 18 : _context6.t0 === "eth_uninstallFilter" ? 20 : 23;
	                break;
	              case 8:
	                _context6.next = 10;
	                return this.close();
	              case 10:
	                result = null;
	                return _context6.abrupt("break", 26);
	              case 12:
	                result = wc.accounts;
	                return _context6.abrupt("break", 26);
	              case 14:
	                result = wc.accounts[0];
	                return _context6.abrupt("break", 26);
	              case 16:
	                result = wc.chainId;
	                return _context6.abrupt("break", 26);
	              case 18:
	                result = wc.chainId;
	                return _context6.abrupt("break", 26);
	              case 20:
	                this.sendAsync(payload, function (_) {
	                  return _;
	                });
	                result = true;
	                return _context6.abrupt("break", 26);
	              case 23:
	                _context6.next = 25;
	                return this.handleOtherRequests(payload);
	              case 25:
	                response = _context6.sent;
	              case 26:
	                if (!response) {
	                  _context6.next = 28;
	                  break;
	                }
	                return _context6.abrupt("return", response);
	              case 28:
	                return _context6.abrupt("return", this.formatResponse(payload, result));
	              case 31:
	                _context6.prev = 31;
	                _context6.t1 = _context6["catch"](0);
	                this.emit("error", _context6.t1);
	                throw _context6.t1;
	              case 35:
	              case "end":
	                return _context6.stop();
	            }
	          }
	        }, _callee6, this, [[0, 31]]);
	      }));
	    }
	  }, {
	    key: "handleOtherRequests",
	    value: function handleOtherRequests(payload) {
	      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
	        var wc, result;
	        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
	          while (1) {
	            switch (_context7.prev = _context7.next) {
	              case 0:
	                if (!(!utils_1.signingMethods.includes(payload.method) && payload.method.startsWith("eth_"))) {
	                  _context7.next = 2;
	                  break;
	                }
	                return _context7.abrupt("return", this.handleReadRequests(payload));
	              case 2:
	                _context7.next = 4;
	                return this.getWalletConnector();
	              case 4:
	                wc = _context7.sent;
	                _context7.next = 7;
	                return wc.sendCustomRequest(payload);
	              case 7:
	                result = _context7.sent;
	                return _context7.abrupt("return", this.formatResponse(payload, result));
	              case 9:
	              case "end":
	                return _context7.stop();
	            }
	          }
	        }, _callee7, this);
	      }));
	    }
	  }, {
	    key: "handleReadRequests",
	    value: function handleReadRequests(payload) {
	      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
	        var error;
	        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
	          while (1) {
	            switch (_context8.prev = _context8.next) {
	              case 0:
	                if (this.http) {
	                  _context8.next = 4;
	                  break;
	                }
	                error = new Error("HTTP Connection not available");
	                this.emit("error", error);
	                throw error;
	              case 4:
	                return _context8.abrupt("return", this.http.send(payload));
	              case 5:
	              case "end":
	                return _context8.stop();
	            }
	          }
	        }, _callee8, this);
	      }));
	    }
	  }, {
	    key: "formatResponse",
	    value: function formatResponse(payload, result) {
	      return {
	        id: payload.id,
	        jsonrpc: payload.jsonrpc,
	        result: result
	      };
	    }
	  }, {
	    key: "getWalletConnector",
	    value: function getWalletConnector() {
	      var _this2 = this;
	      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var _opts$disableSessionC = opts.disableSessionCreation,
	        disableSessionCreation = _opts$disableSessionC === void 0 ? false : _opts$disableSessionC;
	      return new Promise(function (resolve, reject) {
	        var wc = _this2.wc;
	        if (_this2.isConnecting) {
	          _this2.onConnect(function (x) {
	            return resolve(x);
	          });
	        } else if (!wc.connected && !disableSessionCreation) {
	          _this2.isConnecting = true;
	          wc.on("modal_closed", function () {
	            reject(new Error("User closed modal"));
	          });
	          wc.createSession({
	            chainId: _this2.chainId
	          }).then(function () {
	            wc.on("connect", function (error, payload) {
	              if (error) {
	                _this2.isConnecting = false;
	                return reject(error);
	              }
	              _this2.isConnecting = false;
	              _this2.connected = true;
	              if (payload) {
	                _this2.updateState(payload.params[0]);
	              }
	              _this2.emit("connect");
	              _this2.triggerConnect(wc);
	              resolve(wc);
	            });
	          })["catch"](function (error) {
	            _this2.isConnecting = false;
	            reject(error);
	          });
	        } else {
	          if (!_this2.connected) {
	            _this2.connected = true;
	            _this2.updateState(wc.session);
	          }
	          resolve(wc);
	        }
	      });
	    }
	  }, {
	    key: "subscribeWalletConnector",
	    value: function subscribeWalletConnector() {
	      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
	        var _this3 = this;
	        var wc;
	        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
	          while (1) {
	            switch (_context9.prev = _context9.next) {
	              case 0:
	                _context9.next = 2;
	                return this.getWalletConnector();
	              case 2:
	                wc = _context9.sent;
	                wc.on("disconnect", function (error) {
	                  if (error) {
	                    _this3.emit("error", error);
	                    return;
	                  }
	                  _this3.onDisconnect();
	                });
	                wc.on("session_update", function (error, payload) {
	                  if (error) {
	                    _this3.emit("error", error);
	                    return;
	                  }
	                  _this3.updateState(payload.params[0]);
	                });
	              case 5:
	              case "end":
	                return _context9.stop();
	            }
	          }
	        }, _callee9, this);
	      }));
	    }
	  }, {
	    key: "onDisconnect",
	    value: function onDisconnect() {
	      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
	        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
	          while (1) {
	            switch (_context10.prev = _context10.next) {
	              case 0:
	                _context10.next = 2;
	                return this.stop();
	              case 2:
	                this.emit("close", 1000, "Connection closed");
	                this.emit("disconnect", 1000, "Connection disconnected");
	                this.connected = false;
	              case 5:
	              case "end":
	                return _context10.stop();
	            }
	          }
	        }, _callee10, this);
	      }));
	    }
	  }, {
	    key: "updateState",
	    value: function updateState(sessionParams) {
	      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
	        var accounts, chainId, networkId, rpcUrl;
	        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
	          while (1) {
	            switch (_context11.prev = _context11.next) {
	              case 0:
	                accounts = sessionParams.accounts, chainId = sessionParams.chainId, networkId = sessionParams.networkId, rpcUrl = sessionParams.rpcUrl;
	                if (!this.accounts || accounts && this.accounts !== accounts) {
	                  this.accounts = accounts;
	                  this.emit("accountsChanged", accounts);
	                }
	                if (!this.chainId || chainId && this.chainId !== chainId) {
	                  this.chainId = chainId;
	                  this.emit("chainChanged", chainId);
	                }
	                if (!this.networkId || networkId && this.networkId !== networkId) {
	                  this.networkId = networkId;
	                  this.emit("networkChanged", networkId);
	                }
	                this.updateRpcUrl(this.chainId, rpcUrl || "");
	              case 5:
	              case "end":
	                return _context11.stop();
	            }
	          }
	        }, _callee11, this);
	      }));
	    }
	  }, {
	    key: "updateRpcUrl",
	    value: function updateRpcUrl(chainId) {
	      var rpcUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
	      var rpc = {
	        infuraId: this.infuraId,
	        custom: this.rpc || undefined
	      };
	      rpcUrl = rpcUrl || (0, utils_1.getRpcUrl)(chainId, rpc);
	      if (rpcUrl) {
	        this.rpcUrl = rpcUrl;
	        this.updateHttpConnection();
	      } else {
	        this.emit("error", new Error("No RPC Url available for chainId: ".concat(chainId)));
	      }
	    }
	  }, {
	    key: "updateHttpConnection",
	    value: function updateHttpConnection() {
	      var _this4 = this;
	      if (this.rpcUrl) {
	        this.http = new http_connection_1["default"](this.rpcUrl);
	        this.http.on("payload", function (payload) {
	          return _this4.emit("payload", payload);
	        });
	        this.http.on("error", function (error) {
	          return _this4.emit("error", error);
	        });
	      }
	    }
	  }, {
	    key: "sendAsyncPromise",
	    value: function sendAsyncPromise(method, params) {
	      var _this5 = this;
	      return new Promise(function (resolve, reject) {
	        _this5.sendAsync({
	          id: (0, utils_1.payloadId)(),
	          jsonrpc: "2.0",
	          method: method,
	          params: params || []
	        }, function (error, response) {
	          if (error) {
	            reject(error);
	            return;
	          }
	          resolve(response.result);
	        });
	      });
	    }
	  }, {
	    key: "initialize",
	    value: function initialize() {
	      var _this6 = this;
	      this.updateRpcUrl(this.chainId);
	      this.addProvider(new FixtureSubprovider({
	        eth_hashrate: "0x00",
	        eth_mining: false,
	        eth_syncing: true,
	        net_listening: true,
	        web3_clientVersion: "WalletConnect/v1.x.x/javascript"
	      }));
	      this.addProvider(new CacheSubprovider());
	      this.addProvider(new SubscriptionsSubprovider());
	      this.addProvider(new FilterSubprovider());
	      this.addProvider(new NonceSubprovider());
	      this.addProvider(new HookedWalletSubprovider(this.configWallet()));
	      this.addProvider({
	        handleRequest: function handleRequest(payload, next, end) {
	          return tslib_1.__awaiter(_this6, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
	            var _yield$this$handleReq, error, result;
	            return _regeneratorRuntime.wrap(function _callee12$(_context12) {
	              while (1) {
	                switch (_context12.prev = _context12.next) {
	                  case 0:
	                    _context12.prev = 0;
	                    _context12.next = 3;
	                    return this.handleRequest(payload);
	                  case 3:
	                    _yield$this$handleReq = _context12.sent;
	                    error = _yield$this$handleReq.error;
	                    result = _yield$this$handleReq.result;
	                    end(error, result);
	                    _context12.next = 12;
	                    break;
	                  case 9:
	                    _context12.prev = 9;
	                    _context12.t0 = _context12["catch"](0);
	                    end(_context12.t0);
	                  case 12:
	                  case "end":
	                    return _context12.stop();
	                }
	              }
	            }, _callee12, this, [[0, 9]]);
	          }));
	        },
	        setEngine: function setEngine(_) {
	          return _;
	        }
	      });
	    }
	  }, {
	    key: "configWallet",
	    value: function configWallet() {
	      var _this7 = this;
	      return {
	        getAccounts: function getAccounts(cb) {
	          return tslib_1.__awaiter(_this7, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {
	            var wc, accounts;
	            return _regeneratorRuntime.wrap(function _callee13$(_context13) {
	              while (1) {
	                switch (_context13.prev = _context13.next) {
	                  case 0:
	                    _context13.prev = 0;
	                    _context13.next = 3;
	                    return this.getWalletConnector();
	                  case 3:
	                    wc = _context13.sent;
	                    accounts = wc.accounts;
	                    if (accounts && accounts.length) {
	                      cb(null, accounts);
	                    } else {
	                      cb(new Error("Failed to get accounts"));
	                    }
	                    _context13.next = 11;
	                    break;
	                  case 8:
	                    _context13.prev = 8;
	                    _context13.t0 = _context13["catch"](0);
	                    cb(_context13.t0);
	                  case 11:
	                  case "end":
	                    return _context13.stop();
	                }
	              }
	            }, _callee13, this, [[0, 8]]);
	          }));
	        },
	        processMessage: function processMessage(msgParams, cb) {
	          return tslib_1.__awaiter(_this7, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {
	            var wc, result;
	            return _regeneratorRuntime.wrap(function _callee14$(_context14) {
	              while (1) {
	                switch (_context14.prev = _context14.next) {
	                  case 0:
	                    _context14.prev = 0;
	                    _context14.next = 3;
	                    return this.getWalletConnector();
	                  case 3:
	                    wc = _context14.sent;
	                    _context14.next = 6;
	                    return wc.signMessage([msgParams.from, msgParams.data]);
	                  case 6:
	                    result = _context14.sent;
	                    cb(null, result);
	                    _context14.next = 13;
	                    break;
	                  case 10:
	                    _context14.prev = 10;
	                    _context14.t0 = _context14["catch"](0);
	                    cb(_context14.t0);
	                  case 13:
	                  case "end":
	                    return _context14.stop();
	                }
	              }
	            }, _callee14, this, [[0, 10]]);
	          }));
	        },
	        processPersonalMessage: function processPersonalMessage(msgParams, cb) {
	          return tslib_1.__awaiter(_this7, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {
	            var wc, result;
	            return _regeneratorRuntime.wrap(function _callee15$(_context15) {
	              while (1) {
	                switch (_context15.prev = _context15.next) {
	                  case 0:
	                    _context15.prev = 0;
	                    _context15.next = 3;
	                    return this.getWalletConnector();
	                  case 3:
	                    wc = _context15.sent;
	                    _context15.next = 6;
	                    return wc.signPersonalMessage([msgParams.data, msgParams.from]);
	                  case 6:
	                    result = _context15.sent;
	                    cb(null, result);
	                    _context15.next = 13;
	                    break;
	                  case 10:
	                    _context15.prev = 10;
	                    _context15.t0 = _context15["catch"](0);
	                    cb(_context15.t0);
	                  case 13:
	                  case "end":
	                    return _context15.stop();
	                }
	              }
	            }, _callee15, this, [[0, 10]]);
	          }));
	        },
	        processSignTransaction: function processSignTransaction(txParams, cb) {
	          return tslib_1.__awaiter(_this7, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {
	            var wc, result;
	            return _regeneratorRuntime.wrap(function _callee16$(_context16) {
	              while (1) {
	                switch (_context16.prev = _context16.next) {
	                  case 0:
	                    _context16.prev = 0;
	                    _context16.next = 3;
	                    return this.getWalletConnector();
	                  case 3:
	                    wc = _context16.sent;
	                    _context16.next = 6;
	                    return wc.signTransaction(txParams);
	                  case 6:
	                    result = _context16.sent;
	                    cb(null, result);
	                    _context16.next = 13;
	                    break;
	                  case 10:
	                    _context16.prev = 10;
	                    _context16.t0 = _context16["catch"](0);
	                    cb(_context16.t0);
	                  case 13:
	                  case "end":
	                    return _context16.stop();
	                }
	              }
	            }, _callee16, this, [[0, 10]]);
	          }));
	        },
	        processTransaction: function processTransaction(txParams, cb) {
	          return tslib_1.__awaiter(_this7, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {
	            var wc, result;
	            return _regeneratorRuntime.wrap(function _callee17$(_context17) {
	              while (1) {
	                switch (_context17.prev = _context17.next) {
	                  case 0:
	                    _context17.prev = 0;
	                    _context17.next = 3;
	                    return this.getWalletConnector();
	                  case 3:
	                    wc = _context17.sent;
	                    _context17.next = 6;
	                    return wc.sendTransaction(txParams);
	                  case 6:
	                    result = _context17.sent;
	                    cb(null, result);
	                    _context17.next = 13;
	                    break;
	                  case 10:
	                    _context17.prev = 10;
	                    _context17.t0 = _context17["catch"](0);
	                    cb(_context17.t0);
	                  case 13:
	                  case "end":
	                    return _context17.stop();
	                }
	              }
	            }, _callee17, this, [[0, 10]]);
	          }));
	        },
	        processTypedMessage: function processTypedMessage(msgParams, cb) {
	          return tslib_1.__awaiter(_this7, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {
	            var wc, result;
	            return _regeneratorRuntime.wrap(function _callee18$(_context18) {
	              while (1) {
	                switch (_context18.prev = _context18.next) {
	                  case 0:
	                    _context18.prev = 0;
	                    _context18.next = 3;
	                    return this.getWalletConnector();
	                  case 3:
	                    wc = _context18.sent;
	                    _context18.next = 6;
	                    return wc.signTypedData([msgParams.from, msgParams.data]);
	                  case 6:
	                    result = _context18.sent;
	                    cb(null, result);
	                    _context18.next = 13;
	                    break;
	                  case 10:
	                    _context18.prev = 10;
	                    _context18.t0 = _context18["catch"](0);
	                    cb(_context18.t0);
	                  case 13:
	                  case "end":
	                    return _context18.stop();
	                }
	              }
	            }, _callee18, this, [[0, 10]]);
	          }));
	        }
	      };
	    }
	  }]);
	  return WalletConnectProvider;
	}(ProviderEngine);
	exports["default"] = WalletConnectProvider;
} (cjs$b));

var index = /*@__PURE__*/getDefaultExportFromCjs(cjs$b);

var index$1 = /*#__PURE__*/_mergeNamespaces({
  __proto__: null,
  'default': index
}, [cjs$b]);

exports["default"] = web3;
//# sourceMappingURL=index.js.map
